<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我为什么又搞一个博客？</title>
    <url>/20210626/1-%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%88%E6%90%9E%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="为什么重建？"><a href="#为什么重建？" class="headerlink" title="为什么重建？"></a>为什么重建？</h2><p>之前的博客总结了有一下几个不方便之处</p>
<ol>
<li>文章编写采用富文本，不是 markdown 语法，所以对于代码格式支持不太好。</li>
<li>对于图片，未采用 7 牛之类图床，导致后期可能迁移困难。</li>
<li>原来的用 php 写的，转前端很久了，php 都忘记了，也懒得拾起了，有那时间用 nodejs 重写不香吗。</li>
<li>没有搜索功能……..</li>
<li>…..</li>
</ol>
<h2 id="为什么选择-hexo"><a href="#为什么选择-hexo" class="headerlink" title="为什么选择 hexo"></a>为什么选择 hexo</h2><blockquote>
<p>之前也用过有道云笔记，雨雀，折腾来折腾去，还是搞个公开的博客，让大家一切学习分享。</p>
</blockquote>
<ol>
<li>ui 不用说了，很美很美，可以深度自定义。</li>
<li>搜索功能真的强 👍。</li>
<li>部署到<code>github page</code>，即使以后阿里云到期了，也可以一直用</li>
<li>图片资源上传到 7 牛，流量走 CDN，不用担心迁移问题</li>
<li>markdown 真的香，真的适合写博客</li>
<li>之前都是自建，想试试别人的（结果：还是别人的香）。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>新博客，新气象，给一个全新的自己</p>
</blockquote>
<p>有些人说，工作业务这么忙，哪有空写博客，我认为博客是对自己学习的一种总结，有时候我们会有一种错觉，看别人的代码<br>以为自己都懂，可结果让自己上手，却很傻眼，为啥？因为不是真的懂，学习知识应该要及时总结与分享~。</p>
<p>所以 <code>2021</code> 给自己立下个 flag, 坚持日更~。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>初心</tag>
      </tags>
  </entry>
  <entry>
    <title>梦瑶(一一)和小沫沫相册合集~</title>
    <url>/20210707/0-%E6%A2%A6%E7%91%B6(%E4%B8%80%E4%B8%80)%E5%92%8C%E5%B0%8F%E6%B2%AB%E6%B2%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="小一一-梦瑶-和小沫沫"><a href="#小一一-梦瑶-和小沫沫" class="headerlink" title="小一一(梦瑶)和小沫沫"></a>小一一(梦瑶)和小沫沫</h1><blockquote>
<p>成长中的点点滴滴~，共计:638张。</p>
</blockquote>
<img class="bodyImg" title="2019-05-22 08:46:55" data-file-name="baby201905220846435ce49bf34c8ad" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220846435ce49bf34c8ad" > 
<img class="bodyImg" title="2019-05-22 08:47:42" data-file-name="baby201905220847305ce49c225dbae" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220847305ce49c225dbae" > 
<img class="bodyImg" title="2019-05-22 08:47:43" data-file-name="baby201905220847305ce49c22c75e9" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220847305ce49c22c75e9" > 
<img class="bodyImg" title="2019-05-22 08:47:43" data-file-name="baby201905220847305ce49c22ce2ee" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220847305ce49c22ce2ee" > 
<img class="bodyImg" title="2019-05-22 08:47:43" data-file-name="baby201905220847315ce49c231074c" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220847315ce49c231074c" > 
<img class="bodyImg" title="2019-05-22 08:47:43" data-file-name="baby201905220847315ce49c237f456" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220847315ce49c237f456" > 
<img class="bodyImg" title="2019-05-22 08:49:52" data-file-name="baby201905220849395ce49ca3f3945" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220849395ce49ca3f3945" > 
<img class="bodyImg" title="2019-05-22 08:49:53" data-file-name="baby201905220849405ce49ca4e7bd4" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220849405ce49ca4e7bd4" > 
<img class="bodyImg" title="2019-05-22 08:49:54" data-file-name="baby201905220849415ce49ca5c64be" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220849415ce49ca5c64be" > 
<img class="bodyImg" title="2019-05-22 08:49:54" data-file-name="baby201905220849415ce49ca5dea9a" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220849415ce49ca5dea9a" > 
<img class="bodyImg" title="2019-05-22 08:49:54" data-file-name="baby201905220849425ce49ca690938" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220849425ce49ca690938" > 
<img class="bodyImg" title="2019-05-22 08:49:58" data-file-name="baby201905220849465ce49caa387e1" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220849465ce49caa387e1" > 
<img class="bodyImg" title="2019-05-22 08:49:59" data-file-name="baby201905220849475ce49cab27c97" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220849475ce49cab27c97" > 
<img class="bodyImg" title="2019-05-22 08:50:47" data-file-name="baby201905220850355ce49cdbcf764" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220850355ce49cdbcf764" > 
<img class="bodyImg" title="2019-05-22 08:50:47" data-file-name="baby201905220850355ce49cdbd2773" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220850355ce49cdbd2773" > 
<img class="bodyImg" title="2019-05-22 08:50:47" data-file-name="baby201905220850355ce49cdbd3b4a" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220850355ce49cdbd3b4a" > 
<img class="bodyImg" title="2019-05-22 08:50:48" data-file-name="baby201905220850365ce49cdc9b0cd" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220850365ce49cdc9b0cd" > 
<img class="bodyImg" title="2019-05-22 08:50:53" data-file-name="baby201905220850415ce49ce137249" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220850415ce49ce137249" > 
<img class="bodyImg" title="2019-05-22 08:50:53" data-file-name="baby201905220850405ce49ce0e90bf" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220850405ce49ce0e90bf" > 
<img class="bodyImg" title="2019-05-22 08:50:55" data-file-name="baby201905220850425ce49ce26aeeb" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220850425ce49ce26aeeb" > 
<img class="bodyImg" title="2019-05-22 08:52:18" data-file-name="baby201905220852075ce49d372af47" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220852075ce49d372af47" > 
<img class="bodyImg" title="2019-05-22 08:52:18" data-file-name="baby201905220852075ce49d3731c6d" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220852075ce49d3731c6d" > 
<img class="bodyImg" title="2019-05-22 08:52:18" data-file-name="baby201905220852075ce49d372e5c1" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220852075ce49d372e5c1" > 
<img class="bodyImg" title="2019-05-22 08:52:18" data-file-name="baby201905220852075ce49d3733082" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220852075ce49d3733082" > 
<img class="bodyImg" title="2019-05-22 08:52:19" data-file-name="baby201905220852075ce49d37d54f4" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220852075ce49d37d54f4" > 
<img class="bodyImg" title="2019-05-22 08:52:24" data-file-name="baby201905220852125ce49d3c8f7a4" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220852125ce49d3c8f7a4" > 
<img class="bodyImg" title="2019-05-22 08:52:25" data-file-name="baby201905220852125ce49d3cc6c9a" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220852125ce49d3cc6c9a" > 
<img class="bodyImg" title="2019-05-22 08:53:30" data-file-name="baby201905220853185ce49d7e2ea01" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220853185ce49d7e2ea01" > 
<img class="bodyImg" title="2019-05-22 08:53:30" data-file-name="baby201905220853185ce49d7e78665" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220853185ce49d7e78665" > 
<img class="bodyImg" title="2019-05-22 08:53:31" data-file-name="baby201905220853195ce49d7f0b23a" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220853195ce49d7f0b23a" > 
<img class="bodyImg" title="2019-05-22 08:53:31" data-file-name="baby201905220853195ce49d7f38fab" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220853195ce49d7f38fab" > 
<img class="bodyImg" title="2019-05-22 08:53:31" data-file-name="baby201905220853195ce49d7f33e80" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220853195ce49d7f33e80" > 
<img class="bodyImg" title="2019-05-22 08:53:31" data-file-name="baby201905220853205ce49d8007324" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220853205ce49d8007324" > 
<img class="bodyImg" title="2019-05-22 08:53:32" data-file-name="baby201905220853195ce49d7f9c718" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220853195ce49d7f9c718" > 
<img class="bodyImg" title="2019-05-22 08:56:50" data-file-name="baby201905220856385ce49e46b7988" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220856385ce49e46b7988" > 
<img class="bodyImg" title="2019-05-22 08:56:50" data-file-name="baby201905220856385ce49e46aa007" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220856385ce49e46aa007" > 
<img class="bodyImg" title="2019-05-22 08:56:56" data-file-name="baby201905220856445ce49e4c84054" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220856445ce49e4c84054" > 
<img class="bodyImg" title="2019-05-22 08:56:57" data-file-name="baby201905220856455ce49e4d6732a" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220856455ce49e4d6732a" > 
<img class="bodyImg" title="2019-05-22 08:56:59" data-file-name="baby201905220856475ce49e4f22735" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220856475ce49e4f22735" > 
<img class="bodyImg" title="2019-05-22 08:57:00" data-file-name="baby201905220856485ce49e5053201" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220856485ce49e5053201" > 
<img class="bodyImg" title="2019-05-22 08:57:00" data-file-name="baby201905220856485ce49e5054a55" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220856485ce49e5054a55" > 
<img class="bodyImg" title="2019-05-22 08:57:04" data-file-name="baby201905220856515ce49e53d0285" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220856515ce49e53d0285" > 
<img class="bodyImg" title="2019-05-22 08:59:09" data-file-name="baby201905220858575ce49ed18e202" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220858575ce49ed18e202" > 
<img class="bodyImg" title="2019-05-22 08:59:09" data-file-name="baby201905220858575ce49ed1c8635" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220858575ce49ed1c8635" > 
<img class="bodyImg" title="2019-05-22 08:59:14" data-file-name="baby201905220859025ce49ed6247c6" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220859025ce49ed6247c6" > 
<img class="bodyImg" title="2019-05-22 08:59:14" data-file-name="baby201905220859025ce49ed69d480" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220859025ce49ed69d480" > 
<img class="bodyImg" title="2019-05-22 09:00:40" data-file-name="baby201905220900285ce49f2c6f48b" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220900285ce49f2c6f48b" > 
<img class="bodyImg" title="2019-05-22 09:00:40" data-file-name="baby201905220900285ce49f2c6ae06" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220900285ce49f2c6ae06" > 
<img class="bodyImg" title="2019-05-22 09:00:40" data-file-name="baby201905220900285ce49f2c7fe17" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220900285ce49f2c7fe17" > 
<img class="bodyImg" title="2019-05-22 09:00:40" data-file-name="baby201905220900285ce49f2c76ebf" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220900285ce49f2c76ebf" > 
<img class="bodyImg" title="2019-05-22 09:00:40" data-file-name="baby201905220900285ce49f2c78c47" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220900285ce49f2c78c47" > 
<img class="bodyImg" title="2019-05-22 09:00:44" data-file-name="baby201905220900325ce49f3011133" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220900325ce49f3011133" > 
<img class="bodyImg" title="2019-05-22 09:00:47" data-file-name="baby201905220900355ce49f3305cb4" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220900355ce49f3305cb4" > 
<img class="bodyImg" title="2019-05-22 09:02:50" data-file-name="baby201905220902385ce49fae98a99" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220902385ce49fae98a99" > 
<img class="bodyImg" title="2019-05-22 09:02:54" data-file-name="baby201905220902415ce49fb1eaa75" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220902415ce49fb1eaa75" > 
<div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/baby201905220902425ce49fb272589","pic":"https://photo.wy1991.cn/baby201905220902425ce49fb272589"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2019-05-22 09:02:54" data-file-name="baby201905220902425ce49fb2d4bb9" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220902425ce49fb2d4bb9" > 
<img class="bodyImg" title="2019-05-22 09:02:54" data-file-name="baby201905220902425ce49fb2be721" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220902425ce49fb2be721" > 
<img class="bodyImg" title="2019-05-22 09:02:55" data-file-name="baby201905220902435ce49fb3014a7" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220902435ce49fb3014a7" > 
<img class="bodyImg" title="2019-05-22 09:02:58" data-file-name="baby201905220902455ce49fb5be9c6" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220902455ce49fb5be9c6" > 
<img class="bodyImg" title="2019-05-22 09:07:47" data-file-name="baby201905220907355ce4a0d7832fb" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220907355ce4a0d7832fb" > 
<img class="bodyImg" title="2019-05-22 09:07:47" data-file-name="baby201905220907355ce4a0d7bf127" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220907355ce4a0d7bf127" > 
<img class="bodyImg" title="2019-05-22 09:07:47" data-file-name="baby201905220907355ce4a0d7e0955" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220907355ce4a0d7e0955" > 
<img class="bodyImg" title="2019-05-22 09:07:49" data-file-name="baby201905220907375ce4a0d9c40cd" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220907375ce4a0d9c40cd" > 
<img class="bodyImg" title="2019-05-22 09:07:56" data-file-name="baby201905220907435ce4a0df92010" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220907435ce4a0df92010" > 
<img class="bodyImg" title="2019-05-22 09:09:20" data-file-name="baby201905220909085ce4a134b3c5d" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220909085ce4a134b3c5d" > 
<img class="bodyImg" title="2019-05-22 09:09:20" data-file-name="baby201905220909085ce4a134dd999" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220909085ce4a134dd999" > 
<img class="bodyImg" title="2019-05-22 09:09:20" data-file-name="baby201905220909085ce4a134e12eb" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220909085ce4a134e12eb" > 
<img class="bodyImg" title="2019-05-22 09:09:20" data-file-name="baby201905220909085ce4a134e42c2" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220909085ce4a134e42c2" > 
<img class="bodyImg" title="2019-05-22 09:09:20" data-file-name="baby201905220909095ce4a1352e358" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220909095ce4a1352e358" > 
<img class="bodyImg" title="2019-05-22 09:09:25" data-file-name="baby201905220909135ce4a13945946" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220909135ce4a13945946" > 
<img class="bodyImg" title="2019-05-22 09:10:51" data-file-name="baby201905220910395ce4a18f13b98" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220910395ce4a18f13b98" > 
<img class="bodyImg" title="2019-05-22 09:10:54" data-file-name="baby201905220910425ce4a192d25ba" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220910425ce4a192d25ba" > 
<img class="bodyImg" title="2019-05-22 09:10:56" data-file-name="baby201905220910445ce4a1941df53" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220910445ce4a1941df53" > 
<img class="bodyImg" title="2019-05-22 09:10:56" data-file-name="baby201905220910445ce4a1942a0c1" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220910445ce4a1942a0c1" > 
<img class="bodyImg" title="2019-05-22 09:10:56" data-file-name="baby201905220910445ce4a1949b89b" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220910445ce4a1949b89b" > 
<img class="bodyImg" title="2019-05-22 09:10:57" data-file-name="baby201905220910455ce4a19591af8" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220910455ce4a19591af8" > 
<img class="bodyImg" title="2019-05-22 09:11:22" data-file-name="baby201905220911105ce4a1aee2524" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911105ce4a1aee2524" > 
<img class="bodyImg" title="2019-05-22 09:11:22" data-file-name="baby201905220911105ce4a1aede94c" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911105ce4a1aede94c" > 
<img class="bodyImg" title="2019-05-22 09:11:22" data-file-name="baby201905220911105ce4a1aee4708" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911105ce4a1aee4708" > 
<img class="bodyImg" title="2019-05-22 09:11:22" data-file-name="baby201905220911105ce4a1aee2339" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911105ce4a1aee2339" > 
<img class="bodyImg" title="2019-05-22 09:11:22" data-file-name="baby201905220911115ce4a1af0048a" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911115ce4a1af0048a" > 
<img class="bodyImg" title="2019-05-22 09:11:22" data-file-name="baby201905220911115ce4a1af06409" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911115ce4a1af06409" > 
<img class="bodyImg" title="2019-05-22 09:11:23" data-file-name="baby201905220911115ce4a1af8fed3" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911115ce4a1af8fed3" > 
<img class="bodyImg" title="2019-05-22 09:11:39" data-file-name="baby201905220911285ce4a1c00ffb1" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911285ce4a1c00ffb1" > 
<img class="bodyImg" title="2019-05-22 09:11:39" data-file-name="baby201905220911285ce4a1c00e38d" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911285ce4a1c00e38d" > 
<img class="bodyImg" title="2019-05-22 09:11:39" data-file-name="baby201905220911285ce4a1c01df26" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911285ce4a1c01df26" > 
<img class="bodyImg" title="2019-05-22 09:11:40" data-file-name="baby201905220911285ce4a1c067069" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911285ce4a1c067069" > 
<img class="bodyImg" title="2019-05-22 09:11:40" data-file-name="baby201905220911285ce4a1c0627e5" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220911285ce4a1c0627e5" > 
<img class="bodyImg" title="2019-05-22 09:12:14" data-file-name="baby201905220912025ce4a1e20c8c5" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912025ce4a1e20c8c5" > 
<img class="bodyImg" title="2019-05-22 09:12:14" data-file-name="baby201905220912025ce4a1e230684" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912025ce4a1e230684" > 
<img class="bodyImg" title="2019-05-22 09:12:15" data-file-name="baby201905220912035ce4a1e38db12" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912035ce4a1e38db12" > 
<img class="bodyImg" title="2019-05-22 09:12:15" data-file-name="baby201905220912035ce4a1e3a134f" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912035ce4a1e3a134f" > 
<img class="bodyImg" title="2019-05-22 09:12:16" data-file-name="baby201905220912035ce4a1e3edec3" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912035ce4a1e3edec3" > 
<img class="bodyImg" title="2019-05-22 09:12:16" data-file-name="baby201905220912045ce4a1e478f4d" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912045ce4a1e478f4d" > 
<img class="bodyImg" title="2019-05-22 09:12:27" data-file-name="baby201905220912155ce4a1ef894f9" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912155ce4a1ef894f9" > 
<img class="bodyImg" title="2019-05-22 09:12:27" data-file-name="baby201905220912155ce4a1ef9d055" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912155ce4a1ef9d055" > 
<img class="bodyImg" title="2019-05-22 09:12:27" data-file-name="baby201905220912155ce4a1efcd6e3" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912155ce4a1efcd6e3" > 
<img class="bodyImg" title="2019-05-22 09:12:34" data-file-name="baby201905220912225ce4a1f66d895" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912225ce4a1f66d895" > 
<img class="bodyImg" title="2019-05-22 09:12:34" data-file-name="baby201905220912225ce4a1f65936a" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912225ce4a1f65936a" > 
<img class="bodyImg" title="2019-05-22 09:12:34" data-file-name="baby201905220912225ce4a1f682038" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912225ce4a1f682038" > 
<img class="bodyImg" title="2019-05-22 09:12:36" data-file-name="baby201905220912235ce4a1f7e4de3" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912235ce4a1f7e4de3" > 
<img class="bodyImg" title="2019-05-22 09:13:07" data-file-name="baby201905220912555ce4a21760d7b" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220912555ce4a21760d7b" > 
<img class="bodyImg" title="2019-05-22 09:15:18" data-file-name="baby201905220915065ce4a29aae5c8" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220915065ce4a29aae5c8" > 
<img class="bodyImg" title="2019-05-22 09:15:18" data-file-name="baby201905220915065ce4a29ac748f" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220915065ce4a29ac748f" > 
<img class="bodyImg" title="2019-05-22 09:15:18" data-file-name="baby201905220915065ce4a29ac772c" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220915065ce4a29ac772c" > 
<img class="bodyImg" title="2019-05-22 09:15:18" data-file-name="baby201905220915065ce4a29ad163b" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220915065ce4a29ad163b" > 
<img class="bodyImg" title="2019-05-22 09:16:08" data-file-name="微信图片_20190421184721.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20190421184721.jpg" > 
<img class="bodyImg" title="2019-05-22 09:20:27" data-file-name="baby201905220920165ce4a3d02cbb2" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920165ce4a3d02cbb2" > 
<img class="bodyImg" title="2019-05-22 09:20:27" data-file-name="baby201905220920165ce4a3d032e28" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920165ce4a3d032e28" > 
<img class="bodyImg" title="2019-05-22 09:20:27" data-file-name="baby201905220920165ce4a3d03c3ac" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920165ce4a3d03c3ac" > 
<img class="bodyImg" title="2019-05-22 09:20:27" data-file-name="baby201905220920165ce4a3d01d066" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920165ce4a3d01d066" > 
<img class="bodyImg" title="2019-05-22 09:20:28" data-file-name="baby201905220920165ce4a3d0656c5" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920165ce4a3d0656c5" > 
<img class="bodyImg" title="2019-05-22 09:20:28" data-file-name="baby201905220920165ce4a3d0e8ab2" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920165ce4a3d0e8ab2" > 
<img class="bodyImg" title="2019-05-22 09:20:28" data-file-name="baby201905220920165ce4a3d01ca52" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920165ce4a3d01ca52" > 
<img class="bodyImg" title="2019-05-22 09:20:36" data-file-name="baby201905220920255ce4a3d92e848" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920255ce4a3d92e848" > 
<img class="bodyImg" title="2019-05-22 09:20:36" data-file-name="baby201905220920255ce4a3d9543cf" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920255ce4a3d9543cf" > 
<img class="bodyImg" title="2019-05-22 09:20:36" data-file-name="baby201905220920255ce4a3d95bf63" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920255ce4a3d95bf63" > 
<img class="bodyImg" title="2019-05-22 09:20:37" data-file-name="baby201905220920255ce4a3d960838" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920255ce4a3d960838" > 
<img class="bodyImg" title="2019-05-22 09:20:37" data-file-name="baby201905220920255ce4a3d961dfb" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920255ce4a3d961dfb" > 
<img class="bodyImg" title="2019-05-22 09:20:37" data-file-name="baby201905220920255ce4a3d973645" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920255ce4a3d973645" > 
<img class="bodyImg" title="2019-05-22 09:20:37" data-file-name="baby201905220920255ce4a3d9cd1de" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920255ce4a3d9cd1de" > 
<img class="bodyImg" title="2019-05-22 09:20:46" data-file-name="baby201905220920345ce4a3e29348e" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920345ce4a3e29348e" > 
<img class="bodyImg" title="2019-05-22 09:20:46" data-file-name="baby201905220920345ce4a3e291003" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920345ce4a3e291003" > 
<img class="bodyImg" title="2019-05-22 09:20:46" data-file-name="baby201905220920345ce4a3e28fb8a" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920345ce4a3e28fb8a" > 
<img class="bodyImg" title="2019-05-22 09:20:46" data-file-name="baby201905220920345ce4a3e2965ee" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920345ce4a3e2965ee" > 
<img class="bodyImg" title="2019-05-22 09:20:46" data-file-name="baby201905220920345ce4a3e2a3f2e" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920345ce4a3e2a3f2e" > 
<img class="bodyImg" title="2019-05-22 09:20:46" data-file-name="baby201905220920345ce4a3e2eda24" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920345ce4a3e2eda24" > 
<img class="bodyImg" title="2019-05-22 09:20:46" data-file-name="baby201905220920355ce4a3e32fc6e" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920355ce4a3e32fc6e" > 
<img class="bodyImg" title="2019-05-22 09:20:53" data-file-name="baby201905220920415ce4a3e9bd20e" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920415ce4a3e9bd20e" > 
<img class="bodyImg" title="2019-05-22 09:20:53" data-file-name="baby201905220920415ce4a3e9b9a7d" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920415ce4a3e9b9a7d" > 
<img class="bodyImg" title="2019-05-22 09:20:53" data-file-name="baby201905220920415ce4a3e9d793a" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920415ce4a3e9d793a" > 
<img class="bodyImg" title="2019-05-22 09:20:54" data-file-name="baby201905220920425ce4a3ea9d408" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201905220920425ce4a3ea9d408" > 
<img class="bodyImg" title="2019-06-27 00:01:17" data-file-name="baby201906270001165d1396cc79090" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201906270001165d1396cc79090" > 
<img class="bodyImg" title="2019-06-27 00:01:24" data-file-name="baby201906270001235d1396d396ef9" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201906270001235d1396d396ef9" > 
<img class="bodyImg" title="2019-06-27 00:01:35" data-file-name="baby201906270001355d1396df89644" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201906270001355d1396df89644" > 
<img class="bodyImg" title="2019-06-27 00:01:41" data-file-name="baby201906270001415d1396e568390" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201906270001415d1396e568390" > 
<img class="bodyImg" title="2019-06-27 00:02:01" data-file-name="baby201906270002015d1396f9537b2" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201906270002015d1396f9537b2" > 
<img class="bodyImg" title="2019-06-27 00:02:08" data-file-name="baby201906270002085d139700415cd" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201906270002085d139700415cd" > 
<img class="bodyImg" title="2019-06-27 00:02:15" data-file-name="baby201906270002145d139706702eb" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201906270002145d139706702eb" > 
<img class="bodyImg" title="2019-06-27 00:02:24" data-file-name="baby201906270002205d13970c8a1c1" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201906270002205d13970c8a1c1" > 
<img class="bodyImg" title="2019-06-27 00:02:26" data-file-name="baby201906270002255d139711c2964" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201906270002255d139711c2964" > 
<img class="bodyImg" title="2019-06-27 00:02:31" data-file-name="baby201906270002305d139716e454e" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201906270002305d139716e454e" > 
<img class="bodyImg" title="2019-06-27 00:02:37" data-file-name="baby201906270002365d13971c6424b" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201906270002365d13971c6424b" > 
<img class="bodyImg" title="2019-07-01 12:38:22" data-file-name="baby201907011238195d198e3ba3b20" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201907011238195d198e3ba3b20" > 
<img class="bodyImg" title="2019-07-01 12:38:25" data-file-name="baby201907011238245d198e408e73c" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201907011238245d198e408e73c" > 
<img class="bodyImg" title="2019-07-01 12:38:33" data-file-name="baby201907011238335d198e492b4ef" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201907011238335d198e492b4ef" > 
<img class="bodyImg" title="2019-07-01 12:38:38" data-file-name="baby201907011238375d198e4da5851" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201907011238375d198e4da5851" > 
<img class="bodyImg" title="2019-07-01 12:38:42" data-file-name="baby201907011238425d198e52431f2" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201907011238425d198e52431f2" > 
<img class="bodyImg" title="2019-09-24 17:24:55" data-file-name="baby201909241724535d89e0e5b1289" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201909241724535d89e0e5b1289" > 
<img class="bodyImg" title="2019-09-24 17:24:58" data-file-name="baby201909241724575d89e0e98cd70" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201909241724575d89e0e98cd70" > 
<img class="bodyImg" title="2019-09-24 17:25:01" data-file-name="baby201909241725005d89e0ecb3606" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201909241725005d89e0ecb3606" > 
<img class="bodyImg" title="2019-09-24 17:25:04" data-file-name="baby201909241725045d89e0f025726" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201909241725045d89e0f025726" > 
<img class="bodyImg" title="2019-09-24 17:25:07" data-file-name="baby201909241725075d89e0f36a0fe" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201909241725075d89e0f36a0fe" > 
<div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/baby201911111608065dc916e667360","pic":"https://photo.wy1991.cn/baby201911111608065dc916e667360"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/baby201911111608485dc91710cb70d","pic":"https://photo.wy1991.cn/baby201911111608485dc91710cb70d"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/baby201911111611035dc9179771eb9","pic":"https://photo.wy1991.cn/baby201911111611035dc9179771eb9"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2019-11-11 16:11:43" data-file-name="baby201911111610525dc9178c8d759" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201911111610525dc9178c8d759" > 
<img class="bodyImg" title="2019-11-11 16:13:52" data-file-name="baby201911111612435dc917fb03927" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201911111612435dc917fb03927" > 
<img class="bodyImg" title="2019-11-11 16:14:05" data-file-name="baby201911111612425dc917fadd960" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby201911111612425dc917fadd960" > 
<img class="bodyImg" title="2020-08-30 19:09:45" data-file-name="baby202008301909455f4b88f90762d" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909455f4b88f90762d" > 
<img class="bodyImg" title="2020-08-30 19:09:50" data-file-name="baby202008301909455f4b88f93549b" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909455f4b88f93549b" > 
<img class="bodyImg" title="2020-08-30 19:09:57" data-file-name="baby202008301909455f4b88f95479c" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909455f4b88f95479c" > 
<img class="bodyImg" title="2020-08-30 19:09:58" data-file-name="baby202008301909455f4b88f955e3d" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909455f4b88f955e3d" > 
<img class="bodyImg" title="2020-08-30 19:10:01" data-file-name="baby202008301909455f4b88f926424" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909455f4b88f926424" > 
<img class="bodyImg" title="2020-08-30 19:10:03" data-file-name="baby202008301909455f4b88f96beb0" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909455f4b88f96beb0" > 
<img class="bodyImg" title="2020-08-30 19:10:04" data-file-name="baby202008301909455f4b88f9e70e1" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909455f4b88f9e70e1" > 
<img class="bodyImg" title="2020-08-30 19:10:35" data-file-name="baby202008301909465f4b88fa44a84" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909465f4b88fa44a84" > 
<img class="bodyImg" title="2020-08-30 19:10:49" data-file-name="baby202008301909505f4b88fe8caed" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909505f4b88fe8caed" > 
<img class="bodyImg" title="2020-08-30 19:11:05" data-file-name="baby202008301909505f4b88fe5ccac" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909505f4b88fe5ccac" > 
<img class="bodyImg" title="2020-08-30 19:11:16" data-file-name="baby202008301909505f4b88fedb330" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909505f4b88fedb330" > 
<img class="bodyImg" title="2020-08-30 19:11:24" data-file-name="baby202008301909505f4b88fedd1ab" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301909505f4b88fedd1ab" > 
<img class="bodyImg" title="2020-08-30 19:12:27" data-file-name="baby202008301911055f4b8949e2d05" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301911055f4b8949e2d05" > 
<img class="bodyImg" title="2020-08-30 19:12:33" data-file-name="baby202008301912335f4b89a17cfc5" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912335f4b89a17cfc5" > 
<img class="bodyImg" title="2020-08-30 19:12:49" data-file-name="baby202008301912495f4b89b166f23" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912495f4b89b166f23" > 
<img class="bodyImg" title="2020-08-30 19:12:59" data-file-name="baby202008301912495f4b89b18b9cb" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912495f4b89b18b9cb" > 
<img class="bodyImg" title="2020-08-30 19:13:01" data-file-name="baby202008301912495f4b89b1badc0" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912495f4b89b1badc0" > 
<img class="bodyImg" title="2020-08-30 19:13:03" data-file-name="baby202008301912505f4b89b26df04" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912505f4b89b26df04" > 
<img class="bodyImg" title="2020-08-30 19:13:07" data-file-name="baby202008301912495f4b89b1cd639" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912495f4b89b1cd639" > 
<img class="bodyImg" title="2020-08-30 19:13:14" data-file-name="baby202008301912495f4b89b198839" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912495f4b89b198839" > 
<img class="bodyImg" title="2020-08-30 19:13:19" data-file-name="baby202008301912505f4b89b2bd8e2" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912505f4b89b2bd8e2" > 
<img class="bodyImg" title="2020-08-30 19:13:24" data-file-name="baby202008301912495f4b89b1bb863" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912495f4b89b1bb863" > 
<img class="bodyImg" title="2020-08-30 19:14:12" data-file-name="baby202008301912555f4b89b702deb" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912555f4b89b702deb" > 
<img class="bodyImg" title="2020-08-30 19:14:24" data-file-name="baby202008301912555f4b89b71a0ee" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912555f4b89b71a0ee" > 
<img class="bodyImg" title="2020-08-30 19:14:24" data-file-name="baby202008301912555f4b89b76b7ad" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912555f4b89b76b7ad" > 
<img class="bodyImg" title="2020-08-30 19:14:25" data-file-name="baby202008301912555f4b89b775633" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202008301912555f4b89b775633" > 
<img class="bodyImg" title="2020-09-09 10:37:33" data-file-name="baby202009091037315f583feb5d738" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202009091037315f583feb5d738" > 
<img class="bodyImg" title="2020-09-09 10:49:51" data-file-name="baby202009091048195f584273d1e8d" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby202009091048195f584273d1e8d" > 
<img class="bodyImg" title="2021-07-19 15:50:57" data-file-name="baby2021071915505660f52ee02ce6a" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby2021071915505660f52ee02ce6a" > 
<img class="bodyImg" title="2021-07-19 15:51:14" data-file-name="baby2021071915511060f52eee73844" data-file-type="image/jpeg" src="https://photo.wy1991.cn/baby2021071915511060f52eee73844" > 
<img class="bodyImg" title="2021-07-19 15:54:45" data-file-name="mmexport1599612873487.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612873487.jpg" > 
<img class="bodyImg" title="2021-07-19 15:54:45" data-file-name="mmexport1599612895751.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612895751.jpg" > 
<img class="bodyImg" title="2021-07-19 15:54:45" data-file-name="mmexport1599612892524.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612892524.jpg" > 
<img class="bodyImg" title="2021-07-19 15:54:45" data-file-name="mmexport1599612898964.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612898964.jpg" > 
<img class="bodyImg" title="2021-07-19 15:54:45" data-file-name="mmexport1599612884819.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612884819.jpg" > 
<img class="bodyImg" title="2021-07-19 15:54:45" data-file-name="mmexport1599612906037.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612906037.jpg" > 
<img class="bodyImg" title="2021-07-19 15:54:45" data-file-name="mmexport1599612881261.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612881261.jpg" > 
<img class="bodyImg" title="2021-07-19 15:55:33" data-file-name="wx_camera_1605750431380.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/wx_camera_1605750431380.jpg" > 
<img class="bodyImg" title="2021-07-19 15:55:33" data-file-name="mmexport1604565461710.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1604565461710.jpg" > 
<img class="bodyImg" title="2021-07-19 15:55:34" data-file-name="wx_camera_1605403906301.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/wx_camera_1605403906301.jpg" > 
<img class="bodyImg" title="2021-07-19 15:55:35" data-file-name="wx_camera_1602040034177.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/wx_camera_1602040034177.jpg" > 
<img class="bodyImg" title="2021-07-19 15:55:37" data-file-name="wx_camera_1605142956735.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/wx_camera_1605142956735.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:16" data-file-name="mmexport1626086747828.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1626086747828.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:43" data-file-name="mmexport1599612908882.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612908882.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:43" data-file-name="mmexport1599612916435.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612916435.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599612944063.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612944063.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599613034168.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599613034168.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599613018346.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599613018346.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599612924501.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612924501.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599613013865.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599613013865.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599612941154.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612941154.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599612958368.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612958368.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599612922978.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612922978.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599612929336.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612929336.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599612946239.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612946239.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599612933363.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612933363.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599613059627.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599613059627.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599612952574.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612952574.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599612920481.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612920481.jpg" > 
<img class="bodyImg" title="2021-07-19 15:57:44" data-file-name="mmexport1599612921738.jpg" data-file-type="image/jpeg" src="https://photo.wy1991.cn/mmexport1599612921738.jpg" > 
<div id="dplayer4" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer4"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/fc85aa8975f31c6d9113dd4e08c5f65e.mov","pic":"https://photo.wy1991.cn/fc85aa8975f31c6d9113dd4e08c5f65e.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer5" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer5"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/fc85aa8975f31c6d9113dd4e08c5f65e%280%29.mov","pic":"https://photo.wy1991.cn/fc85aa8975f31c6d9113dd4e08c5f65e%280%29.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer6" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer6"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/e503c22b9c653625426aa5217b082958.mov","pic":"https://photo.wy1991.cn/e503c22b9c653625426aa5217b082958.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer7" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer7"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/e503c22b9c653625426aa5217b082958%280%29.mov","pic":"https://photo.wy1991.cn/e503c22b9c653625426aa5217b082958%280%29.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2021-07-19 21:36:29" data-file-name="1D0E3443-C02A-4B49-A186-889953A91BEE.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/1D0E3443-C02A-4B49-A186-889953A91BEE.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:23" data-file-name="IMG_2082.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2082.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:25" data-file-name="IMG_2081.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2081.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:26" data-file-name="IMG_2083.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2083.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:27" data-file-name="IMG_2080.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2080.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:29" data-file-name="0380316E-8D9E-4578-8CB0-A640F69F880A.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/0380316E-8D9E-4578-8CB0-A640F69F880A.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:33" data-file-name="IMG_1187.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1187.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:33" data-file-name="IMG_1188.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1188.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:33" data-file-name="IMG_1196.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1196.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:33" data-file-name="IMG_1164.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1164.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:33" data-file-name="IMG_1192.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1192.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:33" data-file-name="IMG_1328.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1328.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:34" data-file-name="IMG_1287.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1287.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:34" data-file-name="IMG_1191.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1191.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:34" data-file-name="IMG_1198.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1198.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:34" data-file-name="IMG_1286.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1286.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:34" data-file-name="IMG_1195.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1195.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:34" data-file-name="IMG_1190.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1190.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:34" data-file-name="IMG_1197.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1197.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:34" data-file-name="IMG_1189.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1189.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:34" data-file-name="IMG_1194.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1194.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:34" data-file-name="IMG_1193.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1193.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:34" data-file-name="IMG_10600000.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_10600000.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:35" data-file-name="IMG_1330.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1330.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:35" data-file-name="IMG_1329.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1329.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:35" data-file-name="IMG_1331.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1331.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:35" data-file-name="IMG_1179.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1179.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:35" data-file-name="IMG_1153.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1153.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:35" data-file-name="IMG_1152.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1152.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:35" data-file-name="IMG_1180.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1180.JPG" > 
<img class="bodyImg" title="2021-07-19 22:00:35" data-file-name="IMG_1288.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1288.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:25" data-file-name="1D8308EF-7BFB-4A8B-999B-E08C68B81EC6.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/1D8308EF-7BFB-4A8B-999B-E08C68B81EC6.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:25" data-file-name="5B9E4AA4-A5CC-452B-91A9-DCB1EB418CFD.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/5B9E4AA4-A5CC-452B-91A9-DCB1EB418CFD.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:26" data-file-name="8A472632-0AC6-474F-A52D-437113AC2566.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/8A472632-0AC6-474F-A52D-437113AC2566.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:27" data-file-name="09AAAF5B-56BC-41D7-A427-5F606F837424.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/09AAAF5B-56BC-41D7-A427-5F606F837424.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:27" data-file-name="7A5E3C8F-2196-4B24-9741-912AF303BFBE.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/7A5E3C8F-2196-4B24-9741-912AF303BFBE.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:28" data-file-name="6E009033-CEA6-444A-A44A-5C7176E42ACF.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/6E009033-CEA6-444A-A44A-5C7176E42ACF.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:28" data-file-name="05CF789C-6643-423B-BD9A-5159CCA1322F.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/05CF789C-6643-423B-BD9A-5159CCA1322F.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:28" data-file-name="3D775C0E-D99F-4D03-80EF-094C3F357691.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/3D775C0E-D99F-4D03-80EF-094C3F357691.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:28" data-file-name="4CB9F3BB-26C6-41A6-8EE1-C6AB5B4FF44A.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/4CB9F3BB-26C6-41A6-8EE1-C6AB5B4FF44A.JPG" > 
<div id="dplayer8" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer8"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/256.mp4","pic":"https://photo.wy1991.cn/256.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2021-07-19 22:01:28" data-file-name="67EFD16B-9149-45BB-8CCB-DDE742FB573D.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/67EFD16B-9149-45BB-8CCB-DDE742FB573D.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:29" data-file-name="95E5EF81-92D4-4041-A410-F51AB3EF4B27.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/95E5EF81-92D4-4041-A410-F51AB3EF4B27.JPG" > 
<div id="dplayer9" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer9"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/257.mp4","pic":"https://photo.wy1991.cn/257.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2021-07-19 22:01:30" data-file-name="47C7A5CC-96C5-48E4-9C80-D5B5CD391BE7.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/47C7A5CC-96C5-48E4-9C80-D5B5CD391BE7.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:31" data-file-name="6E1D4CAC-92F5-462B-88D6-86E140D2006B.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/6E1D4CAC-92F5-462B-88D6-86E140D2006B.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:31" data-file-name="11D0D44A-6EAD-41F9-B0F4-D8B9E475D249.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/11D0D44A-6EAD-41F9-B0F4-D8B9E475D249.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:32" data-file-name="16D39C1B-8BC8-4164-B322-FAF4EBCE39E6.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/16D39C1B-8BC8-4164-B322-FAF4EBCE39E6.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:32" data-file-name="9D54D859-744E-4E40-80C3-1D4F1879D82D.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/9D54D859-744E-4E40-80C3-1D4F1879D82D.JPG" > 
<div id="dplayer10" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer10"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/255.mp4","pic":"https://photo.wy1991.cn/255.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer11" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer11"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/32e8520e3b0a21c5c374fa61bb69bc4a.mov","pic":"https://photo.wy1991.cn/32e8520e3b0a21c5c374fa61bb69bc4a.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer12" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer12"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/7e5e2ced7c5c7bc3f67183e5e33acd63.mov","pic":"https://photo.wy1991.cn/7e5e2ced7c5c7bc3f67183e5e33acd63.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2021-07-19 22:01:51" data-file-name="3877F501-CBB0-47B9-85D0-2361150E9285.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/3877F501-CBB0-47B9-85D0-2361150E9285.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:51" data-file-name="320F0222-612D-4DED-8237-88F5E6323C4F.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/320F0222-612D-4DED-8237-88F5E6323C4F.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:51" data-file-name="377A5BB5-DCC4-4A26-A5DC-B8C3CF315C2A.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/377A5BB5-DCC4-4A26-A5DC-B8C3CF315C2A.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:51" data-file-name="957E0220-FDA7-4BB2-A52E-43646E7E975A.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/957E0220-FDA7-4BB2-A52E-43646E7E975A.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:51" data-file-name="0897D9F6-DA9A-4A86-BEF8-22688FF758CB.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/0897D9F6-DA9A-4A86-BEF8-22688FF758CB.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:52" data-file-name="35682F3F-1A60-4935-AF2E-5ED2985C1DC4.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/35682F3F-1A60-4935-AF2E-5ED2985C1DC4.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:52" data-file-name="A9A49B0F-D543-4701-90D0-E0F5D95C18E8.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/A9A49B0F-D543-4701-90D0-E0F5D95C18E8.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:52" data-file-name="AD69A651-AA57-4975-AF66-48463D0DF980.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/AD69A651-AA57-4975-AF66-48463D0DF980.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:53" data-file-name="A3DBEC74-EEA9-413F-8ECA-DF601D8BEF0F.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/A3DBEC74-EEA9-413F-8ECA-DF601D8BEF0F.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:54" data-file-name="A74C8416-00A6-4BD5-B6C5-E1BDC1091E85.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/A74C8416-00A6-4BD5-B6C5-E1BDC1091E85.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:54" data-file-name="416C347F-88C0-4734-877E-77D8B8F86D66.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/416C347F-88C0-4734-877E-77D8B8F86D66.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:54" data-file-name="798CE1BD-6694-4480-847F-568DC3CB7167.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/798CE1BD-6694-4480-847F-568DC3CB7167.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:55" data-file-name="58525FE4-18AF-48DC-9237-E446D622FD5F.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/58525FE4-18AF-48DC-9237-E446D622FD5F.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:56" data-file-name="230149DD-D68D-41E4-AFB6-507AA040132F.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/230149DD-D68D-41E4-AFB6-507AA040132F.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:57" data-file-name="AADE4A42-1C49-4653-9513-E838908894A0.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/AADE4A42-1C49-4653-9513-E838908894A0.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:57" data-file-name="68301C9B-294E-487B-8FA7-C6A26D08F2B5.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/68301C9B-294E-487B-8FA7-C6A26D08F2B5.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:57" data-file-name="279247D1-7207-4E2D-82F9-D15581B63939.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/279247D1-7207-4E2D-82F9-D15581B63939.JPG" > 
<img class="bodyImg" title="2021-07-19 22:01:59" data-file-name="753B37A0-0B31-4BAB-BFBA-00BBCE5DCDDA.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/753B37A0-0B31-4BAB-BFBA-00BBCE5DCDDA.JPG" > 
<div id="dplayer13" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer13"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/503cc8e63a4ca1e5dbfc6d90420ac2a1.mov","pic":"https://photo.wy1991.cn/503cc8e63a4ca1e5dbfc6d90420ac2a1.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer14" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer14"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/288.mp4","pic":"https://photo.wy1991.cn/288.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2021-07-19 22:02:03" data-file-name="69077AA4-648B-4DFD-94D5-E3F5E9D40CF4.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/69077AA4-648B-4DFD-94D5-E3F5E9D40CF4.JPG" > 
<div id="dplayer15" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer15"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/582e538b10b22436bf3055e84ccf4346.mov","pic":"https://photo.wy1991.cn/582e538b10b22436bf3055e84ccf4346.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer16" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer16"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/a9f02efe8a0be6cd30be81d617b918c7.mov","pic":"https://photo.wy1991.cn/a9f02efe8a0be6cd30be81d617b918c7.mov"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2021-07-19 22:02:21" data-file-name="BB453E91-5F29-4276-9DEC-B832C9A0EB5A.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/BB453E91-5F29-4276-9DEC-B832C9A0EB5A.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:21" data-file-name="C216B556-76FA-443E-94B3-099CF37211CA.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/C216B556-76FA-443E-94B3-099CF37211CA.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:23" data-file-name="B331883D-C63E-4C82-9F0E-48FF01040F46.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/B331883D-C63E-4C82-9F0E-48FF01040F46.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:23" data-file-name="D18FBC50-0DFB-4DDC-ADD2-E3F26BAF55A9.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/D18FBC50-0DFB-4DDC-ADD2-E3F26BAF55A9.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:23" data-file-name="DBBCBF2B-9E74-4BAB-BCA9-DD0B76348856.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/DBBCBF2B-9E74-4BAB-BCA9-DD0B76348856.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:24" data-file-name="EFAF7254-0610-4B6E-9F5F-CFB1C2DB1F35.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/EFAF7254-0610-4B6E-9F5F-CFB1C2DB1F35.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:24" data-file-name="C80EB251-9A75-4E94-9C69-F1ED761188F5.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/C80EB251-9A75-4E94-9C69-F1ED761188F5.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:24" data-file-name="F6B1DFE7-D504-40E4-8B7E-458BEE1DD0B4.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/F6B1DFE7-D504-40E4-8B7E-458BEE1DD0B4.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:24" data-file-name="D147223C-7F92-4909-BBC6-D9E244A0823E.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/D147223C-7F92-4909-BBC6-D9E244A0823E.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:24" data-file-name="CE39BFE0-1247-4BC4-84E2-E9436DCB153C.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/CE39BFE0-1247-4BC4-84E2-E9436DCB153C.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:26" data-file-name="E1B3E5C3-93C8-4082-836D-9B66653289E1.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/E1B3E5C3-93C8-4082-836D-9B66653289E1.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:26" data-file-name="DB7E19D2-7CB3-449A-A0E9-84EBE3AB4C9B.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/DB7E19D2-7CB3-449A-A0E9-84EBE3AB4C9B.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:26" data-file-name="C386880B-6158-4927-B04D-37D74477F317.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/C386880B-6158-4927-B04D-37D74477F317.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:26" data-file-name="D49D9012-AA06-47C6-AC5C-54FD421642B0.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/D49D9012-AA06-47C6-AC5C-54FD421642B0.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:26" data-file-name="D714A6D7-F821-49C7-B52D-0BA737CB7510.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/D714A6D7-F821-49C7-B52D-0BA737CB7510.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:26" data-file-name="D7A2343E-3EC8-456C-BD6A-1443937C3A03.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/D7A2343E-3EC8-456C-BD6A-1443937C3A03.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:28" data-file-name="IMG_0003.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0003.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:29" data-file-name="EF013370-8800-423D-8343-37C2D52B783D.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/EF013370-8800-423D-8343-37C2D52B783D.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:29" data-file-name="BCDCDC8E-FCD1-4CE0-88ED-C419A05D3D8F.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/BCDCDC8E-FCD1-4CE0-88ED-C419A05D3D8F.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:29" data-file-name="B21756F5-9EB5-4D64-BE53-512F71F9EFE0.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/B21756F5-9EB5-4D64-BE53-512F71F9EFE0.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:30" data-file-name="F5B083A4-D1C5-44AF-89A6-0A3B0DB3F5D8.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/F5B083A4-D1C5-44AF-89A6-0A3B0DB3F5D8.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:30" data-file-name="B6682380-127D-416D-A652-7ADF55898651.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/B6682380-127D-416D-A652-7ADF55898651.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:31" data-file-name="F6C69F0D-A580-4F49-9569-4F8F027B5507.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/F6C69F0D-A580-4F49-9569-4F8F027B5507.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:31" data-file-name="EF69D7BA-6C9A-4BDB-8E49-95C678F6D7AF.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/EF69D7BA-6C9A-4BDB-8E49-95C678F6D7AF.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:32" data-file-name="IMG_0099.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0099.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:32" data-file-name="F71320F9-B1C4-4E57-9350-4FFD6CA0FFB2.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/F71320F9-B1C4-4E57-9350-4FFD6CA0FFB2.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:33" data-file-name="B3D0D8CC-F1A7-454D-8337-15552E717D50.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/B3D0D8CC-F1A7-454D-8337-15552E717D50.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:35" data-file-name="FBFCB30B-B968-4A7A-BA13-2F2ABD35C10F.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/FBFCB30B-B968-4A7A-BA13-2F2ABD35C10F.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:35" data-file-name="B6527700-92B7-4F9E-9AF6-4839A2F46A54.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/B6527700-92B7-4F9E-9AF6-4839A2F46A54.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:35" data-file-name="IMG_0004.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0004.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:36" data-file-name="IMG_0005.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0005.JPG" > 
<img class="bodyImg" title="2021-07-19 22:02:37" data-file-name="DF8D7CA1-A559-47C9-89E8-7D74BB925266.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/DF8D7CA1-A559-47C9-89E8-7D74BB925266.JPG" > 
<div id="dplayer17" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer17"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/IMG_0098.MOV","pic":"https://photo.wy1991.cn/IMG_0098.MOV"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer18" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer18"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/IMG_0096.MOV","pic":"https://photo.wy1991.cn/IMG_0096.MOV"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2021-07-19 22:03:08" data-file-name="IMG_0125.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0125.JPG" > 
<img class="bodyImg" title="2021-07-19 22:03:11" data-file-name="IMG_0678.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0678.JPG" > 
<div id="dplayer19" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer19"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/IMG_0803.PNG","pic":"https://photo.wy1991.cn/IMG_0803.PNG"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2021-07-19 22:05:05" data-file-name="IMG_0124.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0124.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:05" data-file-name="IMG_0128.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0128.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:13" data-file-name="IMG_0287.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0287.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:13" data-file-name="IMG_0295.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0295.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:13" data-file-name="IMG_0293.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0293.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:13" data-file-name="IMG_0286.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0286.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:13" data-file-name="IMG_0281.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0281.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:13" data-file-name="IMG_0285.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0285.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:14" data-file-name="IMG_0288.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0288.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:14" data-file-name="IMG_0290.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0290.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:14" data-file-name="IMG_0289.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0289.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:14" data-file-name="IMG_0282.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0282.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:14" data-file-name="IMG_0155.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0155.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:14" data-file-name="IMG_0283.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0283.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:14" data-file-name="IMG_0294.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0294.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:14" data-file-name="IMG_0280.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0280.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:15" data-file-name="IMG_0279.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0279.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:15" data-file-name="IMG_0291.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0291.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:15" data-file-name="IMG_0292.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0292.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:15" data-file-name="IMG_0129.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0129.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:16" data-file-name="IMG_0126.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0126.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:16" data-file-name="IMG_0338.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0338.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:17" data-file-name="IMG_0339.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0339.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:17" data-file-name="IMG_0100.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0100.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:17" data-file-name="IMG_0723.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0723.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:17" data-file-name="IMG_0720.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0720.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:19" data-file-name="IMG_0345.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0345.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:19" data-file-name="IMG_0343.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0343.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:19" data-file-name="IMG_0149.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0149.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:20" data-file-name="IMG_0124(0).JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0124%280%29.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:20" data-file-name="IMG_0127.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0127.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:20" data-file-name="IMG_0342.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0342.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:20" data-file-name="IMG_0146.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0146.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:20" data-file-name="IMG_0346.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0346.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:20" data-file-name="IMG_0344.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0344.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:20" data-file-name="IMG_0148.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0148.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:20" data-file-name="IMG_0347.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0347.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:20" data-file-name="IMG_0147.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0147.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:20" data-file-name="IMG_0721.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0721.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:20" data-file-name="IMG_0682.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0682.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:21" data-file-name="IMG_0680.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0680.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:21" data-file-name="IMG_0681.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0681.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:21" data-file-name="IMG_0278.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0278.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:21" data-file-name="IMG_0275.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0275.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:21" data-file-name="IMG_0277.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0277.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:21" data-file-name="IMG_0276.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0276.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:47" data-file-name="IMG_0758.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0758.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:48" data-file-name="IMG_1040.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1040.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:51" data-file-name="IMG_0961.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0961.JPG" > 
<img class="bodyImg" title="2021-07-19 22:05:52" data-file-name="IMG_1041.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1041.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:00" data-file-name="IMG_0835.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0835.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:00" data-file-name="IMG_0834.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0834.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:01" data-file-name="IMG_0997.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0997.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:01" data-file-name="IMG_1015.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1015.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:02" data-file-name="IMG_1062.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1062.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:02" data-file-name="IMG_0831.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0831.JPG" > 
<div id="dplayer20" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer20"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/IMG_1014.MOV","pic":"https://photo.wy1991.cn/IMG_1014.MOV"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2021-07-19 22:06:03" data-file-name="IMG_1038.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1038.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:03" data-file-name="IMG_1013.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1013.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:04" data-file-name="IMG_0836.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0836.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:04" data-file-name="IMG_0995.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0995.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:05" data-file-name="IMG_1037.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1037.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:06" data-file-name="IMG_0977.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0977.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:07" data-file-name="IMG_1039.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1039.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:07" data-file-name="IMG_1059.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1059.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:08" data-file-name="IMG_0982.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0982.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:08" data-file-name="IMG_1036.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1036.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:08" data-file-name="IMG_0980.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0980.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:08" data-file-name="IMG_1023.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1023.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:10" data-file-name="IMG_0978.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0978.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:10" data-file-name="IMG_1033.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1033.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:10" data-file-name="IMG_1005.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1005.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:10" data-file-name="IMG_0971.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0971.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:10" data-file-name="IMG_0969.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0969.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_1004.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1004.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_1010.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1010.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_0970.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0970.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_1008.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1008.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_0968.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0968.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_1011.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1011.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_1024.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1024.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_0833.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0833.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_0996.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0996.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_0991.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0991.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_1009.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1009.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_1067.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1067.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_1063.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1063.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_1022.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1022.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:11" data-file-name="IMG_1007.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1007.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1054.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1054.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1066.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1066.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_0992.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_0992.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1055.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1055.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1049.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1049.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1057.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1057.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1051.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1051.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1056.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1056.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1050.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1050.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1053.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1053.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1052.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1052.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1064.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1064.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:12" data-file-name="IMG_1030.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1030.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:13" data-file-name="IMG_1065.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1065.JPG" > 
<div id="dplayer21" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer21"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/IMG_0832.MOV","pic":"https://photo.wy1991.cn/IMG_0832.MOV"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer22" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer22"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/IMG_1031.MOV","pic":"https://photo.wy1991.cn/IMG_1031.MOV"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<img class="bodyImg" title="2021-07-19 22:06:28" data-file-name="IMG_1084.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1084.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:29" data-file-name="IMG_1502.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1502.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:30" data-file-name="IMG_1129.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1129.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:31" data-file-name="IMG_1126.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1126.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:31" data-file-name="IMG_1136.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1136.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:32" data-file-name="IMG_1124.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1124.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:32" data-file-name="IMG_1125.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1125.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:32" data-file-name="IMG_1135.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1135.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:32" data-file-name="IMG_1123.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1123.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:33" data-file-name="IMG_1127.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1127.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:34" data-file-name="IMG_1133.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1133.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:34" data-file-name="IMG_1550.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1550.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:35" data-file-name="IMG_1132.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1132.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:35" data-file-name="IMG_1128.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1128.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:35" data-file-name="IMG_1396.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1396.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:35" data-file-name="IMG_1077.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1077.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:36" data-file-name="IMG_1131.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1131.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:36" data-file-name="IMG_1083.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1083.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:37" data-file-name="IMG_1076.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1076.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:37" data-file-name="IMG_1071.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1071.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1085.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1085.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1070.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1070.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1068.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1068.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1094.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1094.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1333.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1333.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1549.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1549.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1335.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1335.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1334.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1334.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1075.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1075.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1074.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1074.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1548.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1548.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1086.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1086.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1072.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1072.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1151.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1151.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1332.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1332.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:38" data-file-name="IMG_1395.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1395.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:57" data-file-name="IMG_1552.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1552.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:57" data-file-name="IMG_1564.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1564.JPG" > 
<img class="bodyImg" title="2021-07-19 22:06:57" data-file-name="IMG_1551.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1551.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:02" data-file-name="IMG_1556.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1556.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:05" data-file-name="IMG_1617.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1617.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:06" data-file-name="IMG_1615.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1615.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:07" data-file-name="IMG_1553.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1553.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:10" data-file-name="IMG_1598.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1598.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:10" data-file-name="IMG_1594.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1594.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:11" data-file-name="IMG_1614.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1614.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:12" data-file-name="IMG_1746.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1746.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:13" data-file-name="IMG_1583.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1583.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:13" data-file-name="IMG_1703.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1703.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:13" data-file-name="IMG_1587.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1587.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:13" data-file-name="IMG_1624.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1624.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:13" data-file-name="IMG_1695.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1695.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:14" data-file-name="IMG_1622.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1622.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:14" data-file-name="IMG_1712.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1712.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:15" data-file-name="IMG_1713.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1713.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:15" data-file-name="IMG_1619.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1619.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:15" data-file-name="IMG_1634.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1634.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:15" data-file-name="IMG_1584.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1584.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:16" data-file-name="IMG_1585.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1585.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:16" data-file-name="IMG_1561.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1561.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:16" data-file-name="IMG_1586.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1586.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:16" data-file-name="IMG_1623.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1623.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:17" data-file-name="IMG_1638.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1638.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:18" data-file-name="IMG_1562.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1562.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:18" data-file-name="IMG_1637.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1637.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:18" data-file-name="IMG_1636.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1636.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:19" data-file-name="IMG_1724.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1724.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:19" data-file-name="IMG_1728.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1728.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:19" data-file-name="IMG_1727.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1727.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:19" data-file-name="IMG_1725.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1725.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:19" data-file-name="IMG_1597.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1597.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:20" data-file-name="IMG_1563.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1563.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:21" data-file-name="IMG_1726.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1726.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:22" data-file-name="IMG_1565.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1565.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:23" data-file-name="IMG_1748.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1748.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:23" data-file-name="IMG_1721.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1721.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:23" data-file-name="IMG_1747.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1747.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:24" data-file-name="IMG_1750.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1750.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:24" data-file-name="IMG_1718.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1718.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:24" data-file-name="IMG_1751.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1751.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:24" data-file-name="IMG_1720.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1720.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1749.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1749.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1759.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1759.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1709.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1709.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1757.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1757.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1716.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1716.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1754.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1754.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1711.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1711.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1717.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1717.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1715.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1715.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1719.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1719.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1710.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1710.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1758.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1758.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1756.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1756.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1753.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1753.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:25" data-file-name="IMG_1755.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1755.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:42" data-file-name="IMG_1774.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1774.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:43" data-file-name="IMG_1778.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1778.JPG" > 
<img class="bodyImg" title="2021-07-19 22:07:43" data-file-name="IMG_1830.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1830.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:19" data-file-name="IMG_1803.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1803.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:25" data-file-name="IMG_1845.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1845.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:29" data-file-name="IMG_1831.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1831.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:31" data-file-name="IMG_1931.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1931.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:33" data-file-name="IMG_1800.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1800.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:33" data-file-name="IMG_1940.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1940.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:35" data-file-name="IMG_1826.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1826.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:36" data-file-name="IMG_1824.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1824.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:36" data-file-name="IMG_1828.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1828.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:36" data-file-name="IMG_1825.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1825.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:36" data-file-name="IMG_1827.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1827.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:37" data-file-name="IMG_1970.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1970.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:37" data-file-name="IMG_1969.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1969.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:37" data-file-name="IMG_1967.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1967.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:37" data-file-name="IMG_1943.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1943.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:37" data-file-name="IMG_1971.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1971.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:38" data-file-name="IMG_1942.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1942.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:39" data-file-name="IMG_1944.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1944.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:39" data-file-name="IMG_1961.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1961.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:39" data-file-name="IMG_1941.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1941.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:40" data-file-name="IMG_1947.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1947.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:40" data-file-name="IMG_1777.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1777.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:40" data-file-name="IMG_1806.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1806.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:40" data-file-name="IMG_1805.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1805.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:41" data-file-name="IMG_1868.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1868.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:41" data-file-name="IMG_1992.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1992.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:41" data-file-name="IMG_1802.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1802.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:41" data-file-name="IMG_1766.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1766.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_2002.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2002.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_1989.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1989.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_1776.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1776.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_1799.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1799.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_2003.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2003.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_1775.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1775.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_2004.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2004.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_1801.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1801.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_1773.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1773.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_1804.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1804.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_1770.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1770.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:42" data-file-name="IMG_1869.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1869.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:43" data-file-name="IMG_1771.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1771.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:44" data-file-name="IMG_1966.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1966.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:44" data-file-name="IMG_1999.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1999.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:44" data-file-name="IMG_1995.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1995.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:44" data-file-name="IMG_1997.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1997.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:45" data-file-name="IMG_1998.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1998.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:45" data-file-name="IMG_1996.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1996.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:45" data-file-name="IMG_1968.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1968.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:45" data-file-name="IMG_1988.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1988.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:46" data-file-name="IMG_1991.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1991.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:48" data-file-name="IMG_1762.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1762.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:48" data-file-name="IMG_1760.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1760.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:48" data-file-name="IMG_1763.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1763.JPG" > 
<img class="bodyImg" title="2021-07-19 22:08:49" data-file-name="IMG_1761.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_1761.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:08" data-file-name="IMG_2065.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2065.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:08" data-file-name="IMG_2060.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2060.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:08" data-file-name="IMG_2006.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2006.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:09" data-file-name="IMG_2067.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2067.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:09" data-file-name="IMG_2072.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2072.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:10" data-file-name="IMG_2022.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2022.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:10" data-file-name="IMG_2074.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2074.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:10" data-file-name="IMG_2070.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2070.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:10" data-file-name="IMG_2077.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2077.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:11" data-file-name="IMG_2075.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2075.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:11" data-file-name="IMG_2078.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2078.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:11" data-file-name="IMG_2069.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2069.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:11" data-file-name="IMG_2079.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2079.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:11" data-file-name="IMG_2071.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2071.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:11" data-file-name="IMG_2073.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2073.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:11" data-file-name="IMG_2076.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2076.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:11" data-file-name="IMG_2068.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2068.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:12" data-file-name="IMG_2023.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2023.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:12" data-file-name="IMG_2066.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2066.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:12" data-file-name="IMG_2064.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2064.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:13" data-file-name="IMG_2061.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2061.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:14" data-file-name="IMG_2063.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2063.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:14" data-file-name="IMG_2062.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2062.JPG" > 
<img class="bodyImg" title="2021-07-19 22:09:15" data-file-name="IMG_2005.JPG" data-file-type="image/jpeg" src="https://photo.wy1991.cn/IMG_2005.JPG" > 
<div id="dplayer23" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer23"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1598320132_2.mp4","pic":"https://photo.wy1991.cn/sd1598320132_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer24" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer24"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1598320270_2.mp4","pic":"https://photo.wy1991.cn/sd1598320270_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer25" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer25"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1536891765_2.mp4","pic":"https://photo.wy1991.cn/sd1536891765_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer26" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer26"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1598320294_2.mp4","pic":"https://photo.wy1991.cn/sd1598320294_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer27" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer27"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1598320972_2.mp4","pic":"https://photo.wy1991.cn/sd1598320972_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer28" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer28"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1606973545_2.mp4","pic":"https://photo.wy1991.cn/sd1606973545_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer29" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer29"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1611577421_2.mp4","pic":"https://photo.wy1991.cn/sd1611577421_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer30" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer30"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1608896035_2.mp4","pic":"https://photo.wy1991.cn/sd1608896035_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer31" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer31"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1623465156_2.mp4","pic":"https://photo.wy1991.cn/sd1623465156_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer32" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer32"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1611577397_2.mp4","pic":"https://photo.wy1991.cn/sd1611577397_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer33" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer33"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1606889747_2.mp4","pic":"https://photo.wy1991.cn/sd1606889747_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer34" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer34"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1617583754_2.mp4","pic":"https://photo.wy1991.cn/sd1617583754_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer35" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer35"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1616126788_2.mp4","pic":"https://photo.wy1991.cn/sd1616126788_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer36" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer36"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1608630594_2.mp4","pic":"https://photo.wy1991.cn/sd1608630594_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer37" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer37"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1608630821_2.mp4","pic":"https://photo.wy1991.cn/sd1608630821_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer38" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer38"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1608895905_2.mp4","pic":"https://photo.wy1991.cn/sd1608895905_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer39" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer39"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1608630633_2.mp4","pic":"https://photo.wy1991.cn/sd1608630633_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer40" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer40"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1623464984_2.mp4","pic":"https://photo.wy1991.cn/sd1623464984_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer41" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer41"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/sd1621560814_2.mp4","pic":"https://photo.wy1991.cn/sd1621560814_2.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
<div id="dplayer42" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer42"),"theme":"#FADFA3","video":{"url":"https://photo.wy1991.cn/001_WC-EditVideo_1.mp4","pic":"https://photo.wy1991.cn/001_WC-EditVideo_1.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> 
]]></content>
      <categories>
        <category>相册</category>
      </categories>
      <tags>
        <tag>相册</tag>
      </tags>
  </entry>
  <entry>
    <title>前端截图系列</title>
    <url>/20210628/10-HTML%E6%88%AA%E5%9B%BE%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h3><img title="原型链" alt="图解原型和原型链" src="https://blog.img.wy1991.cn/static/images/js/prototype.png-blogImg">

<h3 id="animation-动画"><a href="#animation-动画" class="headerlink" title="animation 动画"></a>animation 动画</h3><img title="动画" src="https://blog.img.wy1991.cn/static/images/css/animation.png-blogImg">

<h3 id="浏览器窗口"><a href="#浏览器窗口" class="headerlink" title="浏览器窗口"></a>浏览器窗口</h3><img title="窗口" src="https://blog.img.wy1991.cn/static/images/css/screen.png-blogImg">

<p><a href="https://juejin.cn/post/6884042902587047943#heading-1"></a></p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">• <span class="built_in">window</span>.innerHeight：获取浏览器视觉视口高度（包括垂直滚动条）。</span><br><span class="line">• <span class="built_in">window</span>.outerHeight：获取浏览器窗口外部的高度。表示整个浏览器窗口的高度，包括侧边栏、窗口镶边和调正窗口大小的边框。</span><br><span class="line">• <span class="built_in">window</span>.screen.Height：获取获屏幕取理想视口高度，这个数值是固定的，设备的分辨率/设备像素比</span><br><span class="line">• <span class="built_in">window</span>.screen.availHeight：浏览器窗口可用的高度。</span><br><span class="line">• <span class="built_in">document</span>.documentElement.clientHeight：获取浏览器布局视口高度，包括内边距，但不包括垂直滚动条、边框和外边距。</span><br><span class="line">• <span class="built_in">document</span>.documentElement.offsetHeight：包括内边距、滚动条、边框和外边距。</span><br><span class="line">• <span class="built_in">document</span>.documentElement.scrollHeight：在不使用滚动条的情况下适合视口中的所有内容所需的最小宽度。测量方式与clientHeight相同：它包含元素的内边距，但不包括边框，外边距或垂直滚动条。</span><br><span class="line">响应式设计与自适应设计的区别：响应式开发一套界面，通过检测视口分辨率，针对不同客户端在客户端做代码处理，来展现不同的布局和内容；自适应需要开发多套界面，通过检测视口分辨率，来判断当前访问的设备是pc端、平板、手机，从而请求服务层，返回不同的页面。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>node-定时调度</title>
    <url>/20210828/100-node-%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="setImmediate"><a href="#setImmediate" class="headerlink" title="setImmediate"></a>setImmediate</h2><p>node.js 中的定时器是一种会在一段时间后调用给定的函数的内部构造。何时调用定时器函数取决于用来创建定时器的方法，以及 node.js 时间循环正在执行的其他工作。</p>
<blockquote>
<p>node.js 定义了 setImmediate(callback[, …args])方法，用于设定定时器为立即执行定时器。其中参数：callback<function>指在当前回合的 Node.js 事件循环结束时调用的函数；…args<any>指当调用 callback 时传入的可选参数。</p>
</blockquote>
<p>当多次调用 setImmediate()时，callback 函数将按照创建它们的顺序排队等待执行。每次事件循环迭代都会处理整个回调队列。如果立即(immediate)定时器是从正在执行的回调排入队列，则直到下一次事件循环迭代才会触发。</p>
<p>如果 callback 不是函数，则抛出 typeError</p>
<p>此方法具有使用 util.promisify()的用于 Promise 的自定义变体。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&quot;util&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> setImmediatePromise = util.promisify(setImmediate)</span><br><span class="line"></span><br><span class="line">setImmediatePromise(<span class="string">&quot;foobar&quot;</span>).then(<span class="function">(<span class="params">valur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// value === &quot;foobar&quot;(传值是可选的)</span></span><br><span class="line">    <span class="comment">// 在所有I/O回调之后执行</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或使用异步功能</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timerExample</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;在I/o回调之前&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> setImmediatePromise()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;在I/O回调之后&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">timerExample()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>setInterval(callback, delay[, …args])方法，用于设定定时器执行的周期，定时器每隔 delay 毫秒重复执行一次。其中参数: callback<function>指在当前回合的 Node.js 事件循环结束时调用的函数；delay<number>指调用 callback 之前等待的毫秒数；…args<any>指当前调用 callback 时传入的可选参数。</p>
<ul>
<li>如果当 delay 大于 2 147 483 647（即 32 位整型的最大值）或小于 1 时，delay 将设置位 1</li>
<li>如果 callback 不是函数，则抛出 typeError 异常。</li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>基于js管理大文件上传以及断点续传</title>
    <url>/20210829/102-%E5%9F%BA%E4%BA%8Ejs%E7%AE%A1%E7%90%86%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BB%A5%E5%8F%8A%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基于-js-管理大文件上传以及断点续传"><a href="#基于-js-管理大文件上传以及断点续传" class="headerlink" title="基于 js 管理大文件上传以及断点续传"></a>基于 js 管理大文件上传以及断点续传</h2><p>前端小伙伴们平常在开发过程中文件上传是经常遇到的一个问题，也许你能够实现相关的功能，但是做完后回想代码实现上是不是有点”力不从心”呢？你真的了解文件上传吗？如何做到大文件上传以及断电续传呢，前后端通讯常用的格式，文件上传进度管控，服务端是如何实现的？接下来让我们开启手摸手系列的学习吧！！！如有不足之处，望不吝指教，接下来按照下图进行学习探讨</p>
<p>作者：麦忙<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAwNjU0MTYxMjk3NTM5MDc5">https://juejin.cn/post/7000654161297539079<i class="fa fa-external-link-alt"></i></span><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>具体看掘金大佬文章</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue结合XLSL插件实现表格的读取与导出</title>
    <url>/20210829/101-Vue%E7%BB%93%E5%90%88xlsx%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%A1%A8%E6%A0%BC%E7%9A%84%E8%AF%BB%E5%8F%96%E4%B8%8E%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="xlsx-导入"><a href="#xlsx-导入" class="headerlink" title="xlsx 导入"></a>xlsx 导入</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NoZWV0SlMvc2hlZXRqcw==">github 地址<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UveGxzeA==">npm<i class="fa fa-external-link-alt"></i></span></p>
<p>直接 <code>npm install xlsx</code> 安装即可</p>
<h3 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h3><p>用户点击文件上传，将 excel 的表格已 json 的格式显示在页面中，用户进行操作，检查数据后对服务进行提交，上传操作用的的 element 中的 upload 组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttonBox&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">    <span class="attr">action</span></span></span><br><span class="line"><span class="tag">    <span class="attr">accept</span>=<span class="string">&quot;.xlsx, .xls&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:auto-upload</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:show-file-list</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-change</span>=<span class="string">&quot;handle&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;trigger&quot;</span>&gt;</span>选取EXCEL文件<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;disable&quot;</span>&gt;</span>采集数据提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 解析出来的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tableBox&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    小主，以下是采集完成的数据，请您检查无误后，点击“采集数据提交”按钮上传至服务器哦！</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tempData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;height&quot;</span> <span class="attr">border</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">label</span>=<span class="string">&quot;电话&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="上传解析"><a href="#上传解析" class="headerlink" title="上传解析"></a>上传解析</h3><ul>
<li>通过 upload 组件可以获取上传的文件流(下图)</li>
</ul>
<img title="上传解析" src="https://blog.img.wy1991.cn/static/images/xlsx1.png-blogImg">

<ul>
<li>将文件流转为二进制，这里我们可以在 utils 文件中增加对应的方法(如下)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把文件按照二进制进行读取</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">        reader.readAsBinaryString(file);</span><br><span class="line">        reader.onload = <span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span><br><span class="line">             resolve(ev.target.result);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>通过 xlsx 将二进制六转为 json,这样才能显示</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取FILE中的数据（变为JSON格式）</span></span><br><span class="line"><span class="keyword">let</span> data = await read<span class="constructor">File(<span class="params">file</span>)</span>;</span><br><span class="line"><span class="keyword">let</span> workbook = xlsx.read(data, &#123; <span class="keyword">type</span>: <span class="string">&quot;binary&quot;</span> &#125;),</span><br><span class="line">  worksheet = workbook.Sheets<span class="literal">[<span class="identifier">workbook</span>.S<span class="identifier">heetNames</span>[<span class="number">0</span>]</span>];</span><br><span class="line">data = xlsx.utils.sheet<span class="constructor">_to_json(<span class="params">worksheet</span>)</span>;</span><br><span class="line"><span class="comment">// 打印结果加下图</span></span><br><span class="line">console.log(workbook);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://blog.img.wy1991.cn/static/images/xlsx2.png-blogImg">

<ul>
<li>把读取出来的数据变为最后可以传递给服务器的数据,我们需要先封装一个映射表来对应传给后端的格式（如下）</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// 字段对应表</span><br><span class="line">    export let <span class="type">character</span> = &#123;</span><br><span class="line">        <span class="type">name</span>: &#123;</span><br><span class="line">            <span class="type">text</span>: &quot;姓名&quot;,</span><br><span class="line">            <span class="keyword">type</span>: <span class="string">&#x27;string&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        phone: &#123;</span><br><span class="line">            <span class="type">text</span>: &quot;电话&quot;,</span><br><span class="line">            <span class="keyword">type</span>: <span class="string">&#x27;string&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>转换数据格式</li>
</ul>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span> = [];</span><br><span class="line"> data.forEach(<span class="attr">item</span> =&gt; &#123;</span><br><span class="line">     <span class="keyword">let</span> <span class="attr">obj</span> = &#123;&#125;;</span><br><span class="line">     for (<span class="keyword">let</span> key <span class="keyword">in</span> character) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!character.hasOwnProperty(key)) break;</span><br><span class="line">       <span class="keyword">let</span> <span class="attr">v</span> = character[key],</span><br><span class="line">         <span class="attr">text</span> = v.text,</span><br><span class="line">         <span class="attr">type</span> = v.type;</span><br><span class="line">       <span class="attr">v</span> = item[text] || <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="attr">type</span> === <span class="string">&quot;string&quot;</span> ? (<span class="attr">v</span> = String(v)) : <span class="literal">null</span>;</span><br><span class="line">       <span class="attr">type</span> === <span class="string">&quot;number&quot;</span> ? (<span class="attr">v</span> = Number(v)) : <span class="literal">null</span>;</span><br><span class="line">       obj[key] = v;</span><br><span class="line">     &#125;</span><br><span class="line">   arr.push(obj);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>发送给服务器</li>
</ul>
<p>这里要看服务器支持多条文件一起发送，如果不支持我们前端就可以采用递归逐条发送的方式进行发送，具体情况可以与后端进行沟通，我们这采用递归的方式进行传输</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提交数据给服务器</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">submit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.tempData.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;小主，请您先选择EXCEL文件！&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">      <span class="attr">showClose</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.disable = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">let</span> loadingInstance = Loading.service(&#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;小主，请您稍等片刻，奴家正在玩命处理中！&quot;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&quot;rgba(0,0,0,.5)&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 完成后处理的事情</span></span><br><span class="line">  <span class="keyword">let</span> complate = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;小主，奴家已经帮您把数据上传了！&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="attr">showClose</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.show = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.disable = <span class="literal">false</span>;</span><br><span class="line">    loadingInstance.close();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需要把数据一条条传递给服务器</span></span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> send = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="built_in">this</span>.tempData.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 都传递完了</span></span><br><span class="line">      complate();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> body = <span class="built_in">this</span>.tempData[n];</span><br><span class="line">    <span class="comment">// 走接口</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> createAPI(body);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">parseInt</span>(result.code) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 成功</span></span><br><span class="line">      n++;</span><br><span class="line">    &#125;</span><br><span class="line">    send();</span><br><span class="line">  &#125;;</span><br><span class="line">  send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Excel-的导出"><a href="#Excel-的导出" class="headerlink" title="Excel 的导出"></a>Excel 的导出</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>一进来页面获取刚刚上传的文件，然后显示在表格中，然后做个分页…….这些就不说了，我们直接从点击导出 excel 按钮开始,先看下页面结构</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 上传按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttonBox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/upload&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">content</span>=<span class="string">&quot;EXCEL数据采集&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span> <span class="attr">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 搜索区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;searchBox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;基于姓名、手机模糊搜索&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;searchHandle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>导出选中的数据<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 列表区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tableBox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:height</span>=<span class="string">&quot;height&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">element-loading-text</span>=<span class="string">&quot;小主，奴家正在努力加载中...&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">selection-change</span>=<span class="string">&quot;selectionChange&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;10%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;20%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">label</span>=<span class="string">&quot;电话&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;20%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;time&quot;</span> <span class="attr">label</span>=<span class="string">&quot;创建时间&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;25%&quot;</span> <span class="attr">:formatter</span>=<span class="string">&quot;formatter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 分页区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pageBox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">      <span class="attr">background</span></span></span><br><span class="line"><span class="tag">      <span class="attr">hide-on-single-page</span></span></span><br><span class="line"><span class="tag">      <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:page-size</span>=<span class="string">&quot;pageSize&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:current-page</span>=<span class="string">&quot;page&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">size-change</span>=<span class="string">&quot;sizeChange&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">current-change</span>=<span class="string">&quot;prevNext&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">prev-click</span>=<span class="string">&quot;prevNext&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">next-click</span>=<span class="string">&quot;prevNext&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="导出-Excel"><a href="#导出-Excel" class="headerlink" title="导出 Excel"></a>导出 Excel</h3><p>将 json 数据变为 sheet 数据，新建表格，在表格中插入一个 sheet,通过 xlsx 的 writeFile 方法将文件写入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出数据</span></span><br><span class="line"><span class="function"><span class="title">submit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.selectionList.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;小主，请您先选择要导出的数据哦！&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">      <span class="attr">showClose</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.disabled = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">let</span> loadingInstance = Loading.service(&#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&quot;小主，请您稍等片刻，奴家正在玩命处理中...&quot;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&quot;rgba(0,0,0,.5)&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">this</span>.selectionList.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      编号: item.id,</span><br><span class="line">      姓名: item.name,</span><br><span class="line">      电话: item.phone</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 将json数据变为sheet数据</span></span><br><span class="line">  <span class="keyword">let</span> sheet = xslx.utils.json_to_sheet(arr),</span><br><span class="line">  <span class="comment">// 新建表格</span></span><br><span class="line">    book = xslx.utils.book_new();</span><br><span class="line">  <span class="comment">// 在表格中插入一个sheet</span></span><br><span class="line">  xslx.utils.book_append_sheet(book, sheet, <span class="string">&quot;sheet1&quot;</span>);</span><br><span class="line">  <span class="comment">// 通过xlsx的writeFile方法将文件写入</span></span><br><span class="line">  xslx.writeFile(book, <span class="string">`user<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>.xls`</span>);</span><br><span class="line"></span><br><span class="line">  loadingInstance.close();</span><br><span class="line">  <span class="built_in">this</span>.disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>xlsx</category>
      </categories>
      <tags>
        <tag>xlsx</tag>
      </tags>
  </entry>
  <entry>
    <title>导出excel表格的库ejsexcel</title>
    <url>/20210830/103-%E5%AF%BC%E5%87%BAexcel%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%BA%93ejsexcel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ejsexcel"><a href="#ejsexcel" class="headerlink" title="ejsexcel"></a>ejsexcel</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZG9jeHRlbXBsYXRlcg==">docxtemplater<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UveGxzeA==">xlsx<i class="fa fa-external-link-alt"></i></span><br>都有类型的功能，一个收费，另外一个比较复杂，不符合业务的需求，因为模版是固定的样式，只需要填充数据即可</p>
<p>这里推荐 <code>ejsexcel</code></p>
<p>注意：模版需要用 office 2007 以上版本，如果用 wps 制作的模版，需要用 office 打开，重新保存下</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZWpzZXhjZWw=">ejsexcel<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>npm install ejsexcel</p>
</blockquote>
<p>在 excel 中 用<em>data</em> 表示默认的 data ，内置对象</p>
<p>下面为 electron demo</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getExtraResourcesPath &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/helper&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> ejsexcel = <span class="built_in">require</span>(<span class="string">&quot;ejsexcel&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&quot;util&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFileAsync = util.promisify(fs.readFile);</span><br><span class="line"><span class="keyword">const</span> writeFileAsync = util.promisify(fs.writeFile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dialog = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).remote.dialog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> newExportExcel = <span class="keyword">async</span> (data: <span class="built_in">any</span>, <span class="attr">fileName</span>: <span class="built_in">string</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> savePath: <span class="built_in">any</span> = dialog.showSaveDialogSync(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;保存&#x27;</span>,</span><br><span class="line">    <span class="attr">buttonLabel</span>: <span class="string">&#x27;确认保存&#x27;</span>,</span><br><span class="line">    <span class="attr">filters</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;xlsx&#x27;</span>, <span class="attr">extensions</span>: [<span class="string">&#x27;xlsx&#x27;</span>] &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">defaultPath</span>: fileName</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果保存路径为空，说明取消了，就直接返回</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;savePath&quot;</span>, savePath);</span><br><span class="line">  <span class="keyword">if</span> (!savePath) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//获得Excel模板的buffer对象</span></span><br><span class="line">  <span class="keyword">const</span> exlBuf = <span class="keyword">await</span> readFileAsync(getExtraResourcesPath() + <span class="string">&#x27;/report/daily.xlsx&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//用数据源(对象)data渲染Excel模板</span></span><br><span class="line">  <span class="comment">//cachePath 为编译缓存路径, 对于模板文件比较大的情况, 可显著提高运行效率, 绝对路径, 若不设置, 则无缓存</span></span><br><span class="line">  <span class="keyword">const</span> exlBuf2 = <span class="keyword">await</span> ejsexcel.renderExcel(exlBuf, data, &#123; <span class="attr">cachePath</span>: getExtraResourcesPath() + <span class="string">&quot;/report/cache/&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> writeFileAsync(savePath, exlBuf2);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;生成test2.xlsx&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ejsexcel</category>
      </categories>
      <tags>
        <tag>ejsexcel</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs中好用的npm包</title>
    <url>/20210901/104-nodejs%E4%B8%AD%E5%A5%BD%E7%94%A8%E7%9A%84npm%E5%8C%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用库"><a href="#常用库" class="headerlink" title="常用库"></a>常用库</h1><h2 id="qs"><a href="#qs" class="headerlink" title="qs"></a>qs</h2><blockquote>
<p>一个简单易用的字符串解析和格式化库</p>
</blockquote>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> qs = require(<span class="string">&#x27;qs&#x27;</span>);</span><br><span class="line">constv <span class="keyword">assert</span> = require(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = qs.parse(<span class="string">&#x27;a=c&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>.deepEqual(obj, &#123; a: <span class="string">&#x27;c&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">str</span> = qs.stringify(obj);</span><br><span class="line"><span class="keyword">assert</span>.equal(<span class="built_in">str</span>, <span class="string">&#x27;a=c&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="rxjs"><a href="#rxjs" class="headerlink" title="rxjs"></a>rxjs</h2><blockquote>
<p>RxJS 是一组模块化的库，用于使用 JavaScript 中的可观察集合和组合来组合异步和基于事件的程序。</p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; range &#125; = <span class="built_in">require</span>(<span class="string">&#x27;rxjs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="keyword">map</span>, filter &#125; = <span class="built_in">require</span>(<span class="string">&#x27;rxjs/operators&#x27;</span>);</span><br><span class="line">range(<span class="number">1</span>, <span class="number">200</span>).pipe(</span><br><span class="line">  filter(x =&gt; x % <span class="number">2</span> === <span class="number">1</span>),</span><br><span class="line">  <span class="keyword">map</span>(x =&gt; x + x)</span><br><span class="line">).subscribe(x =&gt; <span class="built_in">console</span>.log(x));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="mitt"><a href="#mitt" class="headerlink" title="mitt"></a>mitt</h2><blockquote>
<p>微型 200b 功能事件发射器/发布订阅.</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span></span><br><span class="line">const emitter = mitt()</span><br><span class="line">emitter.<span class="keyword">on</span>(<span class="string">&#x27;foo&#x27;</span>, e =&gt; console.log(<span class="string">&#x27;foo&#x27;</span>, e) )</span><br><span class="line">emitter.<span class="keyword">on</span>(<span class="string">&#x27;*&#x27;</span>, (<span class="keyword">type</span>, e) =&gt; console.log(<span class="keyword">type</span>, e) )</span><br><span class="line">emitter.emit(<span class="string">&#x27;foo&#x27;</span>, &#123; a: <span class="string">&#x27;b&#x27;</span> &#125;)</span><br><span class="line">emitter.<span class="keyword">all</span>.clear()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> onFoo() &#123;&#125;</span><br><span class="line">emitter.<span class="keyword">on</span>(<span class="string">&#x27;foo&#x27;</span>, onFoo)   // <span class="keyword">listen</span></span><br><span class="line">emitter.<span class="keyword">off</span>(<span class="string">&#x27;foo&#x27;</span>, onFoo)  // <span class="keyword">unlisten</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Underscore-js"><a href="#Underscore-js" class="headerlink" title="Underscore.js"></a>Underscore.js</h2><blockquote>
<p>Underscore.js 是一个用于 JavaScript 的实用程序带库，它在不扩展任何核心 JavaScript 对象的情况下为通常的功能嫌疑人（each、map、reduce、filter 等）提供支持。</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">const _ = <span class="built_in">require</span>(<span class="string">&#x27;underscore&#x27;</span>);</span><br><span class="line">const list = <span class="string">[[5, 1, 7], [3, 2, 1]]</span>;</span><br><span class="line">_.invoke(list, <span class="string">&#x27;sort&#x27;</span>);</span><br><span class="line">// =&gt; <span class="string">[[1, 5, 7], [1, 2, 3]]</span></span><br></pre></td></tr></table></figure>

<h2 id="day-js"><a href="#day-js" class="headerlink" title="day.js"></a>day.js</h2><blockquote>
<p>Day.js 是一个极简主义的 JavaScript 库，它为现代浏览器解析、验证、操作和显示日期和时间，并具有很大程度上与 Moment 兼容的 API。</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">const dayjs = require(<span class="string">&#x27;dayjs&#x27;</span>);</span><br><span class="line">dayjs().startOf(<span class="string">&#x27;month&#x27;</span>).<span class="builtin-name">add</span>(1, <span class="string">&#x27;day&#x27;</span>).<span class="builtin-name">set</span>(<span class="string">&#x27;year&#x27;</span>, 2018).format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="ramda"><a href="#ramda" class="headerlink" title="ramda"></a>ramda</h2><blockquote>
<p>Ramda 是一个实用的函数式库，具有可与柯里化组合的无副作用函数。</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> R from <span class="string">&#x27;ramda&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">double</span> = x =&gt; x * <span class="number">2</span>;</span><br><span class="line">R.map(<span class="built_in">double</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// =&gt; [2, 4, 6]</span></span><br><span class="line">R.map(<span class="built_in">double</span>, &#123;x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>&#125;);</span><br><span class="line"><span class="comment">// =&gt; &#123;x: 2, y: 4, z: 6&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="validator"><a href="#validator" class="headerlink" title="validator"></a>validator</h2><blockquote>
<p>Validator 是一个字符串验证器和清理器库。</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">var validator = <span class="keyword">require</span>(<span class="string">&#x27;validator&#x27;</span>);</span><br><span class="line">validator.isEmail(<span class="string">&#x27;foo@bar.com&#x27;</span>); <span class="regexp">//</span>=&gt; <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h2 id="yup"><a href="#yup" class="headerlink" title="yup"></a>yup</h2><blockquote>
<p>yup 是一个用于复杂的、相互依赖的验证和转换的模式构建器。</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> yup <span class="keyword">from</span> <span class="string">&#x27;yup&#x27;</span>;</span><br><span class="line">let schema = yup.<span class="keyword">object</span>().shape(&#123;</span><br><span class="line">  <span class="type">name</span>: yup.string().required(),</span><br><span class="line">  age: yup.number().required().positive().integer(),</span><br><span class="line">  email: yup.string().email(),</span><br><span class="line">  website: yup.string().url(),</span><br><span class="line">  createdOn: yup.date().<span class="keyword">default</span>(<span class="keyword">function</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br><span class="line">// <span class="keyword">check</span> validity</span><br><span class="line"><span class="keyword">schema</span></span><br><span class="line">  .isValid(&#123;</span><br><span class="line">    <span class="type">name</span>: <span class="string">&#x27;jimmy&#x27;</span>,</span><br><span class="line">    age: <span class="number">24</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="keyword">valid</span> =&gt;</span><br><span class="line">    console.log(<span class="keyword">valid</span>) // =&gt; <span class="keyword">true</span></span><br><span class="line">  );</span><br><span class="line">// you can try <span class="keyword">and</span> <span class="keyword">type</span> <span class="keyword">cast</span> objects <span class="keyword">to</span> the defined <span class="keyword">schema</span></span><br><span class="line"><span class="keyword">schema</span>.cast(&#123;</span><br><span class="line">  <span class="type">name</span>: <span class="string">&#x27;jimmy&#x27;</span>,</span><br><span class="line">  age: <span class="string">&#x27;24&#x27;</span>,</span><br><span class="line">  createdOn: <span class="string">&#x27;2014-09-23T19:25:25Z&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">// =&gt; &#123; <span class="type">name</span>: <span class="string">&#x27;jimmy&#x27;</span>, age: <span class="number">24</span>, createdOn: <span class="type">Date</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h2><blockquote>
<p>Lodash 是一个实用程序库，通过消除处理数组、数字、对象、字符串等的麻烦，使 JavaScript 变得更容易。</p>
</blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">const _ = require(&#x27;lodash&#x27;);</span><br><span class="line">const nums = <span class="module-access"><span class="module"><span class="identifier">_</span>.</span></span>range(<span class="number">1</span>, <span class="number">9</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">const chunks = <span class="module-access"><span class="module"><span class="identifier">_</span>.</span></span>chunk(nums, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span><br><span class="line">const right = <span class="module-access"><span class="module"><span class="identifier">_</span>.</span></span>take<span class="constructor">Right(<span class="params">nums</span>, 2)</span>;</span><br><span class="line"><span class="comment">// =&gt; [7, 8, 9]</span></span><br></pre></td></tr></table></figure>

<h2 id="date-fns"><a href="#date-fns" class="headerlink" title="date-fns"></a>date-fns</h2><blockquote>
<p>Date-fns 提供了最全面、最简单且一致的工具集，用于在浏览器和 Node.js 中操作 JavaScript 日期。</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">format</span>, formatDistance, formatRelative, subDays &#125; <span class="keyword">from</span> <span class="string">&#x27;date-fns&#x27;</span></span><br><span class="line">format(<span class="built_in">new</span> <span class="type">Date</span>(), <span class="string">&#x27;[Today is a] dddd&#x27;</span>)</span><br><span class="line">//=&gt; &quot;Today is a Wednesday&quot;</span><br><span class="line">formatDistance(subDays(<span class="built_in">new</span> <span class="type">Date</span>(), <span class="number">3</span>), <span class="built_in">new</span> <span class="type">Date</span>())</span><br><span class="line">//=&gt; &quot;3 days ago&quot;</span><br><span class="line">formatRelative(subDays(<span class="built_in">new</span> <span class="type">Date</span>(), <span class="number">3</span>), <span class="built_in">new</span> <span class="type">Date</span>())</span><br><span class="line">//=&gt; &quot;last Friday at 7:26 p.m.&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="jsonwebtoken"><a href="#jsonwebtoken" class="headerlink" title="jsonwebtoken"></a>jsonwebtoken</h2><blockquote>
<p>Jsonwebtoken 是一个用于对 JSON Web 令牌进行签名、验证和解码的库。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> token = jwt.sign(&#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;, <span class="string">&#x27;shhhhh&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><blockquote>
<p>UUID 是一个用于创建 RFC4122 通用唯一标识符的库。</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">const</span> &#123; v<span class="number">4</span>: uuidv<span class="number">4</span> &#125; = require(&#x27;uuid&#x27;);</span><br><span class="line"><span class="attribute">uuidv4</span>(); // =&gt; &#x27;<span class="number">1</span>a<span class="number">68</span>a<span class="number">438</span>-b<span class="number">077</span>-<span class="number">468</span>b-b<span class="number">1</span>e<span class="number">8</span>-dcdd<span class="number">976</span>a<span class="number">0</span>f<span class="number">5</span>b&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="操作文件系统"><a href="#操作文件系统" class="headerlink" title="操作文件系统"></a>操作文件系统</h1><h2 id="imraf"><a href="#imraf" class="headerlink" title="imraf"></a>imraf</h2><blockquote>
<p>Rimraf 为节点提供了与 UNIX rm -rf 命令等效的命令。</p>
</blockquote>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rimraf = require(<span class="string">&#x27;rimraf&#x27;</span>);</span><br><span class="line">rimraf(<span class="string">&#x27;./build&#x27;</span>, <span class="keyword">error</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">error</span>) console.<span class="keyword">error</span>(<span class="keyword">error</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="fs-extra"><a href="#fs-extra" class="headerlink" title="fs-extra"></a>fs-extra</h2><blockquote>
<p>FS-extra 添加了未包含在本机 fs 模块中的文件系统方法，并为 fs 方法添加了 promise 支持。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs-extra&#x27;</span>);</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">copyFiles</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> fs.copy(<span class="string">&#x27;/tmp/myfile&#x27;</span>, <span class="string">&#x27;/tmp/mynewfile&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success!&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">copyFiles();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="mkdirp"><a href="#mkdirp" class="headerlink" title="mkdirp"></a>mkdirp</h2><blockquote>
<p>就像 mkdir -p 一样，mkdirp 递归地创建目录和所有必要的子目录。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mkdirp = <span class="built_in">require</span>(<span class="string">&#x27;mkdirp&#x27;</span>)</span><br><span class="line"><span class="comment">// return value is a Promise resolving to the first directory created</span></span><br><span class="line">mkdirp(<span class="string">&#x27;/tmp/foo/bar/baz&#x27;</span>).then(<span class="function"><span class="params">made</span> =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`made directories, starting with <span class="subst">$&#123;made&#125;</span>`</span>));</span><br></pre></td></tr></table></figure>

<h2 id="glob"><a href="#glob" class="headerlink" title="glob"></a>glob</h2><blockquote>
<p>Glob 是一个使用多种模式匹配文件的库。</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">const glob = require(<span class="string">&#x27;glob&#x27;</span>);</span><br><span class="line">// <span class="keyword">options</span> <span class="keyword">is</span> optional</span><br><span class="line">glob(&quot;**/*.js&quot;, <span class="keyword">options</span>, <span class="keyword">function</span> (er, files) &#123;</span><br><span class="line">  // files <span class="keyword">is</span> an <span class="keyword">array</span> <span class="keyword">of</span> filenames.</span><br><span class="line">  // <span class="keyword">If</span> the `nonull` <span class="keyword">option</span> <span class="keyword">is</span> <span class="keyword">set</span>, <span class="keyword">and</span> <span class="keyword">nothing</span></span><br><span class="line">  // was <span class="built_in">found</span>, <span class="keyword">then</span> files <span class="keyword">is</span> [&quot;**/*.js&quot;]</span><br><span class="line">  // er <span class="keyword">is</span> an error <span class="keyword">object</span> <span class="keyword">or</span> <span class="keyword">null</span>.</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="shelljs"><a href="#shelljs" class="headerlink" title="shelljs"></a>shelljs</h2><blockquote>
<p>ShellJS 是基于 Node.js API 的 Unix shell 命令的可移植 (Windows/Linux/OS X) 实现。</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">const shell = require(<span class="string">&#x27;shelljs&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!shell.which(<span class="string">&#x27;git&#x27;</span>)) &#123;</span><br><span class="line">  shell.echo(<span class="string">&#x27;Sorry, this script requires git&#x27;</span>);</span><br><span class="line">  shell.<span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="regexp">//</span> Copy files to release dir</span><br><span class="line">shell.rm(<span class="string">&#x27;-rf&#x27;</span>, <span class="string">&#x27;out/Release&#x27;</span>);</span><br><span class="line">shell.cp(<span class="string">&#x27;-R&#x27;</span>, <span class="string">&#x27;stuff/&#x27;</span>, <span class="string">&#x27;out/Release&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span> Replace macros <span class="keyword">in</span> each .js file</span><br><span class="line">shell.cd(<span class="string">&#x27;lib&#x27;</span>);</span><br><span class="line">shell.ls(<span class="string">&#x27;*.js&#x27;</span>).forEach(<span class="keyword">function</span> (file) &#123;</span><br><span class="line">  shell.sed(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;BUILD_VERSION&#x27;</span>, <span class="string">&#x27;v0.1.2&#x27;</span>, file);</span><br><span class="line">  shell.sed(<span class="string">&#x27;-i&#x27;</span>, <span class="regexp">/^.*REMOVE_THIS_LINE.*$/</span>, <span class="string">&#x27;&#x27;</span>, file);</span><br><span class="line">  shell.sed(<span class="string">&#x27;-i&#x27;</span>, <span class="regexp">/.*REPLACE_LINE_WITH_MACRO.*\n/</span>, shell.cat(<span class="string">&#x27;macro.js&#x27;</span>), file);</span><br><span class="line">&#125;);</span><br><span class="line">shell.cd(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span> Run external tool synchronously</span><br><span class="line"><span class="keyword">if</span> (shell.exec(<span class="string">&#x27;git commit -am &quot;Auto-commit&quot;&#x27;</span>).code !== <span class="number">0</span>) &#123;</span><br><span class="line">  shell.echo(<span class="string">&#x27;Error: Git commit failed&#x27;</span>);</span><br><span class="line">  shell.<span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="js-yaml"><a href="#js-yaml" class="headerlink" title="js-yaml"></a>js-yaml</h2><blockquote>
<p>Js-yaml 是 YAML 的一种实现，YAML 是一种流行的人性化数据序列化语言。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> yaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs   = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// Get document, or throw exception on error</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> doc = yaml.load(fs.readFileSync(<span class="string">&#x27;/home/ixti/example.yml&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h1><h2 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h2><blockquote>
<p>Koa 是由 Express 背后的团队设计的新 Web 框架，旨在成为 Web 应用程序和 API 的更小、更具表现力和更健壮的基础。</p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><blockquote>
<p>Express.js 是最流行、最快速、最简约的 node.js 后端 Web 框架。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Fastify"><a href="#Fastify" class="headerlink" title="Fastify"></a>Fastify</h2><blockquote>
<p>Fastify 是最快的可扩展 Web 框架之一，专注于以最少的开销提供最佳的开发人员体验。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fastify = <span class="built_in">require</span>(<span class="string">&#x27;fastify&#x27;</span>)(&#123;</span><br><span class="line">  <span class="attr">logger</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">fastify.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (request, reply) =&gt; &#123;</span><br><span class="line">  reply.type(<span class="string">&#x27;application/json&#x27;</span>).code(<span class="number">200</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">fastify.listen(<span class="number">3000</span>, <span class="function">(<span class="params">err, address</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  fastify.log.info(<span class="string">`App listening on <span class="subst">$&#123;address&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h2><blockquote>
<p>Socket.IO 使用长轮询或 WebSockets 启用实时双向基于事件的通信，并具有断开连接检测和自动重新连接支持。</p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).createServer();</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(server);</span><br><span class="line">io.<span class="literal">on</span>(<span class="string">&#x27;connection&#x27;</span>, client =&gt; &#123;</span><br><span class="line">  client.<span class="literal">on</span>(<span class="string">&#x27;event&#x27;</span>, data =&gt; &#123; <span class="comment">/* … */</span> &#125;);</span><br><span class="line">  client.<span class="literal">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, () =&gt; &#123; <span class="comment">/* … */</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h1 id="辅助开发"><a href="#辅助开发" class="headerlink" title="辅助开发"></a>辅助开发</h1><h2 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h2><blockquote>
<p>Jest 已完成并准备好设置 JavaScript 测试解决方案</p>
</blockquote>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">test(&#x27;adds <span class="number">1</span> + <span class="number">2</span> to equal <span class="number">3</span>&#x27;, () =&gt; &#123;</span><br><span class="line">  expect(<span class="number">1</span> + <span class="number">2</span>).toBe(<span class="number">3</span>)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h2><blockquote>
<p>TypeScript 是可扩展的 JavaScript。 它是一种添加可选类型并编译为普通可读 JavaScript 的语言。</p>
</blockquote>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">interface <span class="keyword">User</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">  name</span>: <span class="keyword">string</span>;</span><br><span class="line">  id: <span class="keyword">number</span>;</span><br><span class="line">&#125;</span><br><span class="line">const user: <span class="keyword">User</span> <span class="title">= &#123;</span></span><br><span class="line"><span class="title">  name</span>: <span class="string">&quot;Hayes&quot;</span>,</span><br><span class="line">  id: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="winston"><a href="#winston" class="headerlink" title="winston"></a>winston</h2><blockquote>
<p>Winston 是一个简单且通用的日志库，支持多种传输。</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">const winston = require(<span class="string">&#x27;winston&#x27;</span>);</span><br><span class="line">const logger = winston.createLogger(&#123;</span><br><span class="line">  <span class="keyword">level</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">  <span class="keyword">format</span>: winston.<span class="keyword">format</span>.json(),</span><br><span class="line">  defaultMeta: &#123; service: <span class="string">&#x27;user-service&#x27;</span> &#125;,</span><br><span class="line">  transports: [</span><br><span class="line">    // <span class="keyword">Write</span> <span class="keyword">all</span> logs <span class="keyword">with</span> <span class="keyword">level</span> `error` <span class="keyword">and</span> below <span class="keyword">to</span> `error.<span class="keyword">log</span>`</span><br><span class="line">    <span class="built_in">new</span> winston.transports.File(&#123; filename: <span class="string">&#x27;error.log&#x27;</span>, <span class="keyword">level</span>: <span class="string">&#x27;error&#x27;</span> &#125;),</span><br><span class="line">    // <span class="keyword">Write</span> <span class="keyword">all</span> logs <span class="keyword">with</span> <span class="keyword">level</span> `<span class="keyword">info</span>` <span class="keyword">and</span> below <span class="keyword">to</span> `combined.<span class="keyword">log</span>`</span><br><span class="line">    <span class="built_in">new</span> winston.transports.File(&#123; filename: <span class="string">&#x27;combined.log&#x27;</span> &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line">logger.log(&#123;</span><br><span class="line">  <span class="keyword">level</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">  message: <span class="string">&#x27;Hello distributed log files!&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">logger.<span class="keyword">info</span>(<span class="string">&#x27;Hello again distributed logs&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><blockquote>
<p>Debug 是一个微型 JavaScript 调试实用程序，模仿 Node.js 核心的调试技术。</p>
</blockquote>
<figure class="highlight plaintext"><figcaption><span>debug </span></figcaption><table><tr><td class="code"><pre><span class="line">  , http = require(&#x27;http&#x27;)</span><br><span class="line">  , name = &#x27;My App&#x27;;</span><br><span class="line">debug(&#x27;booting %o&#x27;, name);</span><br><span class="line">http.createServer(function(req, res)&#123;</span><br><span class="line">  debug(req.method + &#x27; &#x27; + req.url);</span><br><span class="line">  res.end(&#x27;hello\n&#x27;);</span><br><span class="line">&#125;).listen(3000, function()&#123;</span><br><span class="line">  debug(&#x27;listening&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><blockquote>
<p>ESLint 是一种用于查找和修复 JavaScript 和 TypeScript 代码中问题的工具。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;semi&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;always&quot;</span>],</span><br><span class="line">        <span class="attr">&quot;quotes&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;double&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><blockquote>
<p>Nodemon 是一个工具，它通过在检测到目录中的文件更改时自动重新启动节点应用程序来帮助开发基于 node.js 的应用程序。</p>
</blockquote>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">nodemon ./<span class="keyword">server</span>.js</span><br></pre></td></tr></table></figure>

<h2 id="dotenv"><a href="#dotenv" class="headerlink" title="dotenv"></a>dotenv</h2><blockquote>
<p>Dotenv 是一个零依赖模块，可将 .env 文件中的环境变量加载到 process.env 中</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">.env file:</span><br><span class="line"></span><br><span class="line"><span class="attribute">DB_HOST</span>=localhost</span><br><span class="line"><span class="attribute">DB_USER</span>=root</span><br><span class="line"><span class="attribute">DB_PASS</span>=s1mpl3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">require(<span class="string">&#x27;dotenv&#x27;</span>).config();</span><br><span class="line">const db = require(<span class="string">&#x27;db&#x27;</span>);</span><br><span class="line">db.connect(&#123;</span><br><span class="line">  host: process.env.DB_HOST,</span><br><span class="line">  username: process.env.DB_USER,</span><br><span class="line">  password: process.env.DB_PASS</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a>cross-env</h2><blockquote>
<p>Cross-env 使脚本能够跨平台设置和使用环境变量</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start-prod&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production node ./app.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAyMDU0NDgxMjUyNzI4ODY5">来源自掘金<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise 被玩出 48 种花样，深度解析10个常用模块</title>
    <url>/20210902/105-Promise-%E8%A2%AB%E7%8E%A9%E5%87%BA-48-%E7%A7%8D%E8%8A%B1%E6%A0%B7%EF%BC%8C%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%9010%E4%B8%AA%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="promise-fun"><a href="#promise-fun" class="headerlink" title="promise-fun"></a>promise-fun</h2><p>包含模块有</p>
<p>promise-fun 项目共收录了 50 个与 Promise 有关的模块，该项目的作者 sindresorhus 个人就开发了 48 个模块，不愧是全职做开源的大牛。其实该项目还包含一些挺不错的模块，比如 p-queue、p-any、p-some、p-debounce、p-throttle 和 p-timeout 等。感兴趣的小伙伴，可以自行了解一下其他的模块。</p>
<p>推荐仔细反复阅读，深入理解</p>
<p>具体看文章 👇 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk5ODA0NjE3MzIwMDM4NDA4">链接<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>递归在javascript中的应用 (递归处理数组和对象)</title>
    <url>/20210902/106-%E9%80%92%E5%BD%92%E5%9C%A8javascript%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8-%E9%80%92%E5%BD%92%E5%A4%84%E7%90%86%E6%95%B0%E7%BB%84%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvc245dk0xa1l1NGY2NGJMNmxjUlNIdw==">设计递归函数竟然这么简单！<i class="fa fa-external-link-alt"></i></span></p>
<p>本文主要从数组和对象两个方面来讲解递归在工作中的一些应用。 我一般处理递归的思路主要注意以下两点</p>
<ul>
<li>先处理一小步（先处理最简情况）,然后自己调自己</li>
<li>找到退出条件</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组求最大值"><a href="#数组求最大值" class="headerlink" title="数组求最大值"></a>数组求最大值</h3><p>最简单的情况：数组中长度为 1 时，直接返回；数组中长度为 2，求最大值</p>
<p>解决方案：把数组切成两半，求左边的最大值，求右边的最大值。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> arr=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">90</span>,<span class="number">189</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line">//分成两半，求<span class="built_in">max</span>左和<span class="built_in">max</span>右</span><br><span class="line">//</span><br><span class="line">function findMax(arr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="built_in">length</span>==<span class="number">0</span>)<span class="built_in">return</span> null</span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="built_in">length</span>==<span class="number">1</span>)<span class="built_in">return</span> arr[<span class="number">0</span>]</span><br><span class="line">    // 此处可以再优化一下</span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="built_in">length</span>==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">return</span> arr[<span class="number">0</span>]&gt;=arr[<span class="number">1</span>]? arr[<span class="number">0</span>]:arr[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    const <span class="built_in">center</span>= Math.<span class="built_in">floor</span>(arr.<span class="built_in">length</span>/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    const maxLeft=findMax(arr.slice(<span class="number">0</span>,<span class="built_in">center</span>))</span><br><span class="line">    const maxRight=findMax(arr.slice(<span class="built_in">center</span>))</span><br><span class="line">    <span class="built_in">return</span> maxLeft&gt;=maxRight?maxLeft:maxRight</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const <span class="built_in">max</span>=findMax(arr)</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">&quot;max&quot;</span>, <span class="built_in">max</span>)</span><br></pre></td></tr></table></figure>

<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><ul>
<li>最简单的情况：先打印一个数</li>
<li>解决方案：先打印一个数，然后其他的数交给“自己”打印</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组遍历，使用递归实现</span></span><br><span class="line"><span class="selector-tag">var</span> arr=<span class="selector-attr">[1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line">function iteration(arr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length==<span class="number">0</span>)return</span><br><span class="line">    <span class="keyword">if</span>(arr.length==<span class="number">1</span>)&#123;</span><br><span class="line">        console<span class="selector-class">.log</span>(arr<span class="selector-attr">[0]</span>)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    console<span class="selector-class">.log</span>(arr<span class="selector-attr">[0]</span>)</span><br><span class="line">    iteration(arr<span class="selector-class">.slice</span>(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 iteration([2,3,4,5])</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">iteration</span><span class="params">(arr)</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数组倒置"><a href="#数组倒置" class="headerlink" title="数组倒置"></a>数组倒置</h3><p>解决思路：假设其他元素都已经处理了，只剩下最后一个元素了,然后把 reverse(2,3,4,5)和 arr[0]拼成一个数组即可</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">//数组<span class="built_in">reverse</span>，使用递归实现</span><br><span class="line"><span class="built_in">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">//<span class="built_in">reverse</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>) arr[<span class="number">0</span>]</span><br><span class="line">function <span class="built_in">reverse</span>(arr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="built_in">length</span>==<span class="number">0</span> || arr.<span class="built_in">length</span>==<span class="number">1</span>)<span class="built_in">return</span> arr</span><br><span class="line">    <span class="built_in">return</span> [...<span class="built_in">reverse</span>(arr.slice(<span class="number">1</span>)),arr[<span class="number">0</span>]]</span><br><span class="line">&#125;</span><br><span class="line">const res=<span class="built_in">reverse</span>(arr)</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">&quot;res&quot;</span>, res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对对象的处理可以看做是对树的处理，因为对象的嵌套结构和树很类似。</p>
<h3 id="对象属性遍历"><a href="#对象属性遍历" class="headerlink" title="对象属性遍历"></a>对象属性遍历</h3><p>思路：使用 for-in 遍历对象的属性，如果属性的值还是对象，递归遍历</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    <span class="attribute">id:</span><span class="string">1,</span></span><br><span class="line"><span class="string">    value</span>:<span class="string">&#x27;parent&#x27;</span>,</span><br><span class="line">    <span class="attribute">child</span>:&#123;</span><br><span class="line">        <span class="attribute">id:</span><span class="string">11,</span></span><br><span class="line"><span class="string">        value</span>:<span class="string">&#x27;child&#x27;</span>,</span><br><span class="line">        <span class="attribute">child</span>:&#123;</span><br><span class="line">            <span class="attribute">id:</span><span class="string">111,</span></span><br><span class="line"><span class="string">            value</span>:<span class="string">&#x27;child-child&#x27;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历打印</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(k))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[k] ==<span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">                recursiveObj(obj[k])</span><br><span class="line">            &#125;<span class="title">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;k&#125;</span>:<span class="subst">$&#123;obj[k]&#125;</span>`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">recursiveObj(obj)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="对象扁平化"><a href="#对象扁平化" class="headerlink" title="对象扁平化"></a>对象扁平化</h3><p>我有一个对象长下面这样：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> oldObject = &#123;</span><br><span class="line">    <span class="string">&quot;KeyA&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;KeyB&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;c&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;d&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;e&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;f&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span> : <span class="number">2</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我要得到输出是这样子的：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">output</span>=&#123;</span><br><span class="line">    <span class="string">&quot;KeyA&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;KeyB.c&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;KeyB.d&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;KeyB.e.f&quot;</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="string">&quot;KeyB.e&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>处理逻辑如下：</p>
<ul>
<li>使用一个 flattenHelper 函数递归处理对象</li>
<li>核心逻辑同上，使用 for-in 遍历对象的属性，如果属性的值还是对象，递归遍历</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flattenObject</span></span>(oldObject) &#123;</span><br><span class="line">    const <span class="keyword">new</span><span class="type">Object</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    flattenHelper(oldObject, <span class="keyword">new</span><span class="type">Object</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Object</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">flattenHelper</span></span>(currentObject, <span class="keyword">new</span><span class="type">Object</span>, previousKeyName) &#123;</span><br><span class="line">      <span class="keyword">for</span> (let key <span class="keyword">in</span> currentObject) &#123;</span><br><span class="line">        let value = currentObject[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value.constructor !== Object) &#123;</span><br><span class="line">          <span class="keyword">if</span> (previousKeyName == <span class="literal">null</span> || previousKeyName == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span><span class="type">Object</span>[key] = value;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="literal">null</span> || key == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">              <span class="keyword">new</span><span class="type">Object</span>[previousKeyName] = value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">new</span><span class="type">Object</span>[previousKeyName + <span class="string">&#x27;.&#x27;</span> + key] = value;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (previousKeyName == <span class="literal">null</span> || previousKeyName == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            flattenHelper(value, <span class="keyword">new</span><span class="type">Object</span>, key);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flattenHelper(value, <span class="keyword">new</span><span class="type">Object</span>, previousKeyName + <span class="string">&#x27;.&#x27;</span> + key);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">const result=flattenObject(oldObject)</span><br><span class="line">console.log(<span class="string">&quot;result&quot;</span>, result)</span><br></pre></td></tr></table></figure>

<h3 id="递归应用-递归读取文件"><a href="#递归应用-递归读取文件" class="headerlink" title="递归应用-递归读取文件"></a>递归应用-递归读取文件</h3><p>思路很简单：判断当前读取的是文件还是文件夹，如果是文件夹，递归读取</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;);</span><br><span class="line">const path=require(&#x27;path&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> walk<span class="constructor">Sync(<span class="params">currentDirPath</span>, <span class="params">callback</span>)</span> &#123;</span><br><span class="line">    fs.readdir<span class="constructor">Sync(<span class="params">currentDirPath</span>)</span>.<span class="keyword">for</span><span class="constructor">Each(<span class="params">function</span> (<span class="params">name</span>)</span> &#123;</span><br><span class="line">        var filePath = path.join(currentDirPath, name);</span><br><span class="line">        var stat = fs.stat<span class="constructor">Sync(<span class="params">filePath</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (stat.is<span class="constructor">File()</span>) &#123;</span><br><span class="line">            callback(filePath, stat);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stat.is<span class="constructor">Directory()</span>) &#123;</span><br><span class="line">            walk<span class="constructor">Sync(<span class="params">filePath</span>, <span class="params">callback</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一些很哇塞的Web资源</title>
    <url>/20210903/107-%E6%8E%A8%E8%8D%90%E4%B8%80%E4%BA%9B%E5%BE%88%E5%93%87%E5%A1%9E%E7%9A%84Web%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Undraw"><a href="#Undraw" class="headerlink" title="Undraw"></a>Undraw</h2><p>如果你的网站需要免费的 SVG 插图，一定不要错过 <span class="exturl" data-url="aHR0cHM6Ly91bmRyYXcuY28v">Undraw<i class="fa fa-external-link-alt"></i></span> 这个网站！</p>
<p>SVG 插图资源是海量的，本瓜下拉了十几、二十次都拉不完（当然，搜索功能也是有的）；并且，你还可以自定义插图的配色，简直不要太 NICE~</p>
<h2 id="Error-404"><a href="#Error-404" class="headerlink" title="Error 404"></a>Error 404</h2><p>不知道你一般会去哪找 404 页面素材~</p>
<p>现在你又多了一个选项：<span class="exturl" data-url="aHR0cHM6Ly9lcnJvcjQwNC5mdW4v">Error 404<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Squoosh"><a href="#Squoosh" class="headerlink" title="Squoosh"></a>Squoosh</h2><p>压缩图片！!</p>
<p>对比 tinypng 有【更好的】压缩效果： <span class="exturl" data-url="aHR0cHM6Ly9zcXVvb3NoLmFwcC8=">Squoosh<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="DevDocs"><a href="#DevDocs" class="headerlink" title="DevDocs"></a>DevDocs</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZkb2NzLmlvLw==">DevDocs<i class="fa fa-external-link-alt"></i></span> 见名思意，是 Web 开发技术文档，是非常不错的学习手册！</p>
<h2 id="iHateRegex"><a href="#iHateRegex" class="headerlink" title="iHateRegex"></a>iHateRegex</h2><p>正则匹配神器 <span class="exturl" data-url="aHR0cHM6Ly9paGF0ZXJlZ2V4LmlvLw==">iHateRegex<i class="fa fa-external-link-alt"></i></span> 还有细节图示,做的真好啊 ╮(╯▽╰)╭</p>
<h2 id="Carbon"><a href="#Carbon" class="headerlink" title="Carbon"></a>Carbon</h2><p>经常有人问，“这种好看的代码片段如何生成”，答案就在 <span class="exturl" data-url="aHR0cHM6Ly9jYXJib24ubm93LnNoLw==">Carbon<i class="fa fa-external-link-alt"></i></span></p>
<p>你可以生成各种主题、各种语言的代码片段，并导出为图片或复制到其它平台，真滴好用 👌 舒服了~~</p>
<h2 id="Dribbble"><a href="#Dribbble" class="headerlink" title="Dribbble"></a>Dribbble</h2><p>寻找网页设计灵感，认准 <span class="exturl" data-url="aHR0cHM6Ly9kcmliYmJsZS5jb20v">Dribbble<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Animista"><a href="#Animista" class="headerlink" title="Animista"></a>Animista</h2><p><span class="exturl" data-url="aHR0cHM6Ly9hbmltaXN0YS5uZXQv">Animista<i class="fa fa-external-link-alt"></i></span> Css 动画，复制代码就能用！免安装，它不香嘛？</p>
<h2 id="Shape-Divider"><a href="#Shape-Divider" class="headerlink" title="Shape Divider"></a>Shape Divider</h2><p>你可以生成各式各样的分割线，并导出 SVG 格式 <span class="exturl" data-url="aHR0cHM6Ly93d3cuc2hhcGVkaXZpZGVyLmFwcC8=">Shape Divider<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Notion"><a href="#Notion" class="headerlink" title="Notion"></a>Notion</h2><p>如果你需要一个记笔记的平台，推荐一个选项：<span class="exturl" data-url="aHR0cHM6Ly93d3cubm90aW9uLnNvLw==">Notion<i class="fa fa-external-link-alt"></i></span></p>
<p>快速笔记、TaskList、日记、读书清单，各种类型，应有尽有，推荐~</p>
]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>辅助工具</tag>
      </tags>
  </entry>
  <entry>
    <title>跨浏览器窗口通讯的7种方式</title>
    <url>/20210904/108-%E8%B7%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AA%97%E5%8F%A3%E9%80%9A%E8%AE%AF%E7%9A%847%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想象下面场景，</p>
<p>播放器处于单独的一个页面<br>当你在另外的一个页面搜索到你满意的歌曲的时候，点击播放或添加到播放队列<br>你会发现，播放器页面做出了响应的响应</p>
<p>这里我又联想到了商城的购物车的场景，体验确实有提升。<br>刚开始，我怀疑的是 Web Socket 作妖，结果通过分析网络请求和看源码，并没有。 最后发现是 localStore 的 storage 事件作妖，哈哈。</p>
<h2 id="两个浏览器窗口间通信"><a href="#两个浏览器窗口间通信" class="headerlink" title="两个浏览器窗口间通信"></a>两个浏览器窗口间通信</h2><p>WebSocket</p>
<p>这个没有太多解释，WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。当然是有代价的，需要服务器来支持。</p>
<p>js 语言，现在比较成熟稳定当然是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NvY2tldGlvL3NvY2tldC5pbw==">socket.io<i class="fa fa-external-link-alt"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3M=">ws<i class="fa fa-external-link-alt"></i></span>. 也还有轻量级的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NsdXN0ZXJXUy9DbHVzdGVyV1M=">ClusterWS<i class="fa fa-external-link-alt"></i></span>。</p>
<p>你可以在 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYlNvY2tldHNfQVBJ">The WebSocket API (WebSockets)<i class="fa fa-external-link-alt"></i></span></p>
<p>看到更多的关于 Web Socket 的信息。</p>
<h2 id="定时器-客户端存储"><a href="#定时器-客户端存储" class="headerlink" title="定时器 + 客户端存储"></a>定时器 + 客户端存储</h2><p>定时器：setTimeout/setInterval/requestAnimationFrame</p>
<p>客户端存储： cookie/localStorage/sessionStorage/indexDB/chrome 的 FileSystem</p>
<p>定时器没啥好说的，关于客户端存储。</p>
<ul>
<li>cookie: 每次会带到服务端，并且能存的并不大，4kb?，记得不太清楚</li>
<li>localStorage/sessionStorage 应该是 5MB, sessionStorage 关闭浏览器就和你说拜拜。</li>
<li>indexDB 这玩意就强大了，不过读取都是异步的，还能存 Blob 文件，真的是很 high。</li>
<li>chrome 的 FileSystem ,Filesystem &amp; FileWriter API,主要是 chrome 和 opera 支持。这玩意就是文件系统。</li>
</ul>
<h2 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h2><p><span class="exturl" data-url="aHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXBvc3RNZXNzYWdl">Cross-document messaging<i class="fa fa-external-link-alt"></i></span> 这玩意的支持率 98.9%。 好像还能发送文件，哈哈，强大。<br>不过仔细一看 window.postMessage()，就注定了你首先得拿到 window 这个对象。 也注定他使用的限制， 两个窗体必须建立起联系。 常见建立联系的方式：</p>
<p>-window.open<br>-window.opener<br>-iframe</p>
<p>提到上面的 window.open, open 后你能获得被打开窗体的句柄，当然也可以直接操作窗体了。</p>
<p>到这里，我觉得一般的前端人员能想到的比较正经的方案应该是上面三种啦。</p>
<p>当然，我们接下来说说可能不是那么常见的另外三种方式。</p>
<h2 id="StorageEvent"><a href="#StorageEvent" class="headerlink" title="StorageEvent"></a>StorageEvent</h2><p>Page 1</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">&#x27;message&#x27;</span>,<span class="type">JSON</span>.stringify(&#123;</span><br><span class="line">    message: <span class="string">&#x27;消息&#x27;</span>，</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">&#x27;Page 1&#x27;</span>,</span><br><span class="line">    <span class="type">date</span>: <span class="type">Date</span>.now()</span><br><span class="line">&#125;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Page 2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;storage&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.key, e.newValue, e.oldValue)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如上， Page 1 设置消息， Page 2 注册 storage 事件，就能监听到数据的变化啦。</p>
<p>上面的 e 就是 StorageEvent,有下面特有的属性（都是只读）：</p>
<ul>
<li>key ：代表属性名发生变化.当被 clear()方法清除之后所有属性名变为 null</li>
<li>newValue：新添加进的值.当被 clear()方法执行过或者键名已被删除时值为 null</li>
<li>oldValue：原始值.而被 clear()方法执行过，或在设置新值之前并没有设置初始值时则返回 null</li>
<li>storageArea：被操作的 storage 对象</li>
<li>url：key 发生改变的对象所在文档的 URL 地址</li>
</ul>
<h2 id="Broadcast-Channel"><a href="#Broadcast-Channel" class="headerlink" title="Broadcast Channel"></a>Broadcast Channel</h2><p>这玩意主要就是给多窗口用的，Service Woker 也可以使用。 firefox,chrome, Opera 均支持，有时候真的是很讨厌 Safari，浏览器支持 77%左右。</p>
<p>使用起来也很简单, 创建 BroadcastChannel, 然后监听事件。 只需要注意一点，渠道名称一致就可以。</p>
<p>Page 1</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> channel = <span class="keyword">new</span> <span class="type">BroadcastChannel</span>(<span class="string">&quot;channel-BroadcastChannel&quot;</span>);</span><br><span class="line">channel.postMessage(<span class="string">&#x27;Hello, BroadcastChannel!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Page 2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> channel = <span class="keyword">new</span> BroadcastChannel(<span class="string">&quot;channel-BroadcastChannel&quot;</span>);</span><br><span class="line">channel.addEventListener(<span class="string">&quot;message&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ev.data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="SharedWorker"><a href="#SharedWorker" class="headerlink" title="SharedWorker"></a>SharedWorker</h2><p>这是 Web Worker 之后出来的共享的 Worker，不通页面可以共享这个 Worker。</p>
<p>MDN 这里给了一个比较完整的例子 simple-shared-worker。</p>
<p>这里来个插曲，Safari 有几个版本支持这个特性，后来又不支持啦，还是你 Safari，真是 6。</p>
<p>虽然，SharedWorker 本身的资源是共享的，但是要想达到多页面的互相通讯，那还是要做一些手脚的。</p>
<p>先看看 MDN 给出的例子的 ShareWoker 本身的代码：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">onconnect = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> port = e.ports[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  port.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> workerResult = <span class="string">&#x27;Result: &#x27;</span> + (e.data[<span class="number">0</span>] * e.data[<span class="number">1</span>]);</span><br><span class="line">    port.postMessage(workerResult);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码其实很简单，port 是关键，这个 port 就是和各个页面通讯的主宰者，既然 SharedWorker 资源是共享的，那好办，把 port 存起来就是啦。</p>
<p>看一下，如下改造的代码：</p>
<p>SharedWorker 就成为一个纯粹的订阅发布者啦，哈哈。</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> portList = [];</span><br><span class="line"></span><br><span class="line">onconnect = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> port = e.ports[<span class="number">0</span>];</span><br><span class="line"> ensurePorts(port);</span><br><span class="line"> port.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> data = e.data;</span><br><span class="line">   disptach(port, data);</span><br><span class="line"> &#125;;</span><br><span class="line"> port.start();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensurePorts</span>(<span class="params">port</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (portList.indexOf(port) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">   portList.push(port);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disptach</span>(<span class="params">selfPort, data</span>) </span>&#123;</span><br><span class="line"> portList</span><br><span class="line">   .filter(<span class="function"><span class="params">port</span> =&gt;</span> selfPort !== port)</span><br><span class="line">   .forEach(<span class="function"><span class="params">port</span> =&gt;</span> port.postMessage(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="MessageChannel"><a href="#MessageChannel" class="headerlink" title="MessageChannel"></a>MessageChannel</h2><p>Channel Messaging API 的 MessageChannel 接口允许我们创建一个新的消息通道，并通过它的两个 MessagePort 属性发送数据。</p>
<p>其需要先通过 postMessage 先建立联系。</p>
<p>MessageChannel 的基本使用：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">var channel = <span class="keyword">new</span> <span class="constructor">MessageChannel()</span>;</span><br><span class="line">var para = document.query<span class="constructor">Selector(&#x27;<span class="params">p</span>&#x27;)</span>;</span><br><span class="line"></span><br><span class="line">var ifr = document.query<span class="constructor">Selector(&#x27;<span class="params">iframe</span>&#x27;)</span>;</span><br><span class="line">var otherWindow = ifr.contentWindow;</span><br><span class="line"></span><br><span class="line">ifr.add<span class="constructor">EventListener(<span class="string">&quot;load&quot;</span>, <span class="params">iframeLoaded</span>, <span class="params">false</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> iframe<span class="constructor">Loaded()</span> &#123;</span><br><span class="line">  otherWindow.post<span class="constructor">Message(&#x27;Hello <span class="params">from</span> <span class="params">the</span> <span class="params">main</span> <span class="params">page</span>!&#x27;, &#x27;<span class="operator">*</span>&#x27;, [<span class="params">channel</span>.<span class="params">port2</span>])</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">channel.port1.onmessage = handleMessage;</span><br><span class="line"><span class="keyword">function</span> handle<span class="constructor">Message(<span class="params">e</span>)</span> &#123;</span><br><span class="line">  para.innerHTML = e.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至于在线的例子，MDN 官方有一个版本 <span class="exturl" data-url="aHR0cHM6Ly9tZG4uZ2l0aHViLmlvL2RvbS1leGFtcGxlcy9jaGFubmVsLW1lc3NhZ2luZy1iYXNpYy8=">MessageChannel 通讯<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>element表格自动滚动到底部</title>
    <url>/20210913/109-element%E8%A1%A8%E6%A0%BC%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="element"><a href="#element" class="headerlink" title="element"></a>element</h2><blockquote>
<p>有时候动态给表格追加数据，希望能看到，所以需要自动滚动到底部</p>
</blockquote>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">let <span class="keyword">container</span>: any = wtabRef.value.$el.querySelector(</span><br><span class="line">        <span class="string">&quot;.el-table__body-wrapper&quot;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">container</span>.scrollTop = <span class="keyword">container</span>.scrollHeight;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>element</category>
      </categories>
      <tags>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title>js ArryaBuffer</title>
    <url>/20210629/11-js-ArryaBuffer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ArryaBuffer"><a href="#ArryaBuffer" class="headerlink" title="ArryaBuffer"></a>ArryaBuffer</h2><pre><code>  概念 arrayBuffer
  普通的javascript构造函数，用于在内存中分配特定的字节空间,通常用于canvas或者二进制处理
  1：创建后，不可以调整大小，不过可以用slice() 复制全部或者部分到一个新的实例中
  2：不能直接通过ArrayBuffer直接读写内容，要通过视图（Dataview）
  3：默认排序为大端排序（字节排序，大的在上面，小的在下面），还有小端
</code></pre>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">用法：</span><br><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>); <span class="comment">//在内存中分配16个字节，</span></span><br><span class="line">alert(buf.byteLength); <span class="comment">//16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf2 = buf.slice(<span class="number">4</span>,<span class="number">12</span>);</span><br><span class="line">alert(buf2.byteLength); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<h2 id="DataView"><a href="#DataView" class="headerlink" title="DataView"></a>DataView</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf)</span><br><span class="line">alert(view.byteOffset) <span class="comment">//0</span></span><br><span class="line">alert(view.bytelength) <span class="comment">//16</span></span><br><span class="line">alert(view.buffer === buf) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数接收一个可选的字节偏移量和字节长度// byteOffset=0表示视图从缓冲起点开始// byteLength=8限制视图为前8个字节</span></span><br><span class="line"><span class="keyword">const</span> firstHalfDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">0</span>, <span class="number">8</span>)</span><br><span class="line">alert(firstHalfDataView.byteOffset) <span class="comment">// 0</span></span><br><span class="line">alert(firstHalfDataView.byteLength) <span class="comment">// 8</span></span><br><span class="line">alert(firstHalfDataView.buffer === buf) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 如果不指定，则DataView会使用剩余的缓冲</span></span><br><span class="line"><span class="comment">// byteOffset=8表示视图从缓冲的第9个字节开始</span></span><br><span class="line"><span class="comment">// byteLength未指定，默认为剩余缓冲</span></span><br><span class="line"><span class="keyword">const</span> secondHalfDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">8</span>)</span><br><span class="line">alert(secondHalfDataView.byteOffset) <span class="comment">// 8 6.3 定型数组 157 8 1 2 3 45 14 67 9 1011 1312</span></span><br><span class="line">alert(secondHalfDataView.byteLength) <span class="comment">// 8</span></span><br><span class="line">alert(secondHalfDataView.buffer === buf) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><p>“字节序”指的是计算系统维护的一种字节顺序的约定。</p>
<p>DataView 只支持两种约定：大端字节序和小端字节序。</p>
<p>大端字节序也称为“网络字节序”，意思是最高有效位保存在第一个字节，而最低有效位保存在最后一个字节。</p>
<p>小端字节序正好相反，即最低有效位保存在第一个字节，最高有效位保存在最后一个字节。DataView 的所有 API 方法都以大端字节序作为默认值，但接收一个可选的布尔值参数，设置为 true 即可启用小端字节序。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>ArryaBuffer</tag>
        <tag>字节序</tag>
      </tags>
  </entry>
  <entry>
    <title>前端的前世今生</title>
    <url>/20210913/110-%E5%89%8D%E7%AB%AF%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前端的前世今生"><a href="#前端的前世今生" class="headerlink" title="前端的前世今生"></a>前端的前世今生</h2><p>最早的时候页面是服务端渲染的，也就是 PHP、JSP 那些技术，服务端通过模版引擎填充数据，返回生成的 html，交给浏览器渲染。那时候表单会同步提交，服务端返回结果页面的 html。</p>
<p>后来浏览器有了 ajax 技术，可以异步的请求，服务端返回 xml 或者 json。ajax 最早是基于 xml 的，这也是它名字的由来。因为 xml 多了很多没必要的标签，内容比较多，所以后来 json 流行开来。</p>
<p>网页和服务端的数据交互变成了异步的，可以服务端返回 json 数据，浏览器里拼接 html，之后渲染（浏览器里面生成 dom 就等同于渲染）。页面基本没啥刷新的必要了，于是后来就逐渐演变出了单页应用 SPA（single page application）。</p>
<p>早期开发页面的时候就是基于浏览器的 dom api 操作 dom 来做渲染和交互，但是 dom api 比较啰嗦，而且当时浏览器的兼容性问题也比较麻烦，不同浏览器有不同的写法。为了简化 dom 操作和更方便的兼容各种浏览器，出现了 jquery 并且迅速流行开来，那个时代 jquery 是如日中天的。</p>
<p>我一直习惯把网页分为物理层和逻辑层，dom 就算是物理层，jquery 是操作 dom 的一系列工具函数，也是工作在物理层。</p>
<p>网页做的事情基本就是拿到数据渲染 dom，并且数据改变之后更新 dom，这个流程是通用的，后来逐渐出现了 mvvm 框架，来自动把数据的变更映射到 dom，不再需要手动操作 dom。也就是 vue、react 等现代的前端框架。我把这一层叫做逻辑层。</p>
<p>前端框架除了提供了数据驱动视图变化的功能以外，还支持了 dom 的逻辑划分，可以把一部分 dom 封装成组件，组件和组件之间相互组合，构成整个界面。物理层依然是 dom，只是实现了数据到 dom 的自动映射之后，我们只需要在逻辑层写组件就可以了。</p>
<p>现在前端入门也不会再学物理层的操作 dom 的 jquery 了，而是直接从 vue、react 这种逻辑层的前端框架开始。</p>
<p>但是也不是说完全不需要 jquery，前端框架主要解决的是数据到 dom 的绑定，可以变化以后自动更新 dom。如果不需要更新，那么直接操作 dom 即可，比如各种活动页，没啥数据更新，用 jquery 操作 dom 还是很方便。</p>
<p>前端框架是 UI = f(state) 这种声明式的思想，只需要声明组件的视图、组件的状态数据、组件之间的依赖关系，那么状态改变就会自动的更新 dom。而 jquery 那种直接操作 dom 的工具函数库则是命令式的。</p>
<p>对于视图的描述这件事 react 和 vue 用了不同的方案，react 是给 js 扩展了 jsx 的语法，由 babel 实现，可以在描述视图的时候直接用 js 来写逻辑，没啥新语法。而 vue 是实现了一套 template 的 DSL，引入了插值、指令、过滤器等模版语法，相对于 jsx 来说更简洁，template 的编译器由 vue 实现。</p>
<p>vue template 是受限制的，只能访问 data，prop、method，可以静态的分析和优化，而 react 的 jsx 因为直接是 js 的语法，动态逻辑比较多，没法静态的做分析和优化。<br>但是 vue template 也不全是好处，因为和 js 上下文割裂开来，引入 typescript 做类型推导的时候就比较困难，需要单独把所有 prop、method、data 的类型声明一遍才行。而 react 的 jsx 本来就是和 js 同一个上下文，结合 typescript 就很自然。</p>
<p>所以 vue template 和 react jsx 各有优缺点。</p>
<p>前端框架都是数据驱动视图变化的，而这个数据分散在每个组件中，怎么在数据变化以后更新 dom 呢？</p>
<p>数据变化的检测基本只有三种方式：watch、脏检查、不检查。</p>
<ul>
<li><p>vue 就是基于数据的 watch 的，组件级别通过 Object.defineProperty 监听对象属性的变化，重写数组的 api 监听数组元素的变化，之后进行 dom 的更新。</p>
</li>
<li><p>angular 则是基于脏检查，在每个可能改变数据的逻辑之后都对比下数据是否变了，变了的话就去更新 dom。</p>
</li>
<li><p>react 则是不检查，不检查难道每次都渲染全部的 dom 么？ 也不是，不检查是因为不直接渲染到 dom，而是中间加了一层虚拟 dom，每次都渲染成这个虚拟 dom，然后 diff 下渲染出的虚拟 dom 是否变了，变了的话就去更新对应的 dom。</p>
</li>
</ul>
<p>这就是前端框架的数据驱动视图变化的三种思路。</p>
<p>vue 是组件级别的数据 watch，当组件内部监听数据变化的地方特别多的时候，一次更新可能计算量特别大，计算量大了就可能会导致丢帧，也就是渲染的卡顿。所以 vue 的优化方式就是把大组件拆成小组件，这样每个数据就不会有太多的 watcher 了。</p>
<p>react 并不监听数据的变化，而是渲染出整个虚拟 dom，然后 diff。基于这种方案的优化方式就是对于不需要重新生成 vdom 的组件，通过 shouldComponentUpdate 来跳过渲染。</p>
<p>但是当应用的组件树特别大的时候，只是 shouldComponentUpdate 跳过部分组件渲染，依然可能计算量特别大。计算量大了同样可能导致渲染的卡顿，怎么办呢？</p>
<p>树的遍历有深度优先和广度优先两种方式，组件树的渲染就是深度优先的，一般是通过递归来做，但是如果能通过链表记录下路径，就可以变成循环。变成了循环，那么就可以按照时间片分段，让 vdom 的生成不再阻塞页面渲染，这就像操作系统对多个进程的分时调度一样。</p>
<p>这个通过把组件树改成链表，把 vdom 的生成从递归改循环的功能就是 react fiber。</p>
<p>fiber 节点相对于之前的组件节点来说，没有了 parent、children 这种属性，多了 child、sibling、return 属性。</p>
<p>通过 fiber 链表树，优化了渲染的性能。</p>
<p>可以看到 vue 的性能优化和 react 的性能优化是不一样的：</p>
<p>vue 是组件级别的数据监听的方案，问题可能出现在一个属性太多 watcher 的时候，所以优化思路就是大组件拆分成小组件，保证每个属性不要有太多 watcher。</p>
<p>react 不监听、不检查数据变化，每次都渲染生成 vdom，然后进行 vdom 的对比，那么优化的思路就是 shouldComponentUpdate 来跳过部分组件的 render，而且 react 内部也做了组件树的链表化（fiber）来把递归改成可打断的渲染，按照时间片来逐渐生成整个 vdom。</p>
<p>组件之间难免要有逻辑的复用，react 和 vue 有不同的方案：</p>
<p>vue 的组件是 option 对象的方式，那么逻辑复用方式很自然可以想到通过对象属性的 mixin，vue2 的组件内逻辑复用方案就是 mixin，但是 mixin 很难区分混入的属性、方法的来源，比较乱，代码维护性差。但也没有更好的方案。</p>
<p>react 刚开始也是支持 mixin 的，但后来废弃了。</p>
<p>react 的组件是 class 和 function 两种形式，那么类似高阶函数的高阶组件（high order component）的方式就比较自然，也就是组件套组件，在父组件里面执行一部分逻辑，然后渲染子组件。</p>
<p>除了多加一层组件的 HOC 方式以外，没有逻辑的部分可以直接把那部分 jsx 作为 props 传入另一个组件来复用，也就是 render props。</p>
<p>HOC 和 render props 是 react 的 class 组件支持的两种逻辑复用方案。</p>
<p>最开始的 function 组件是没有状态的，只是作为 class 组件渲染的辅助而存在。</p>
<p>但是 HOC 的逻辑复用方式最终导致了组件嵌套太深，而且 class 内部生命周期比较多，逻辑都放在一起导致了组件比较大。</p>
<p>怎么解决 class 组件嵌套深和组件大的问题呢？而且还不能引入破坏性的更新，不然下场可能会很惨。</p>
<p>于是 react 团队就瞅准了 function 组件，能不能在 function 组件里面也支持 state，通过扩展一些 api 的方式来支持，也不是破坏性的更新。</p>
<p>function 组件要支持 state，那 state 存在哪里呢？</p>
<p>class 组件节点有 state，变成 fiber 节点之后依然有，function 组件本来就没有 state，那么 fiber 节点中同样也没有。</p>
<p>那在 function 组件的 fiber 节点中加入 state 不就行了？</p>
<p>于是 react 就在 function 组件的 fiber 节点中加入了 memorizedState 属性用来存储数据，然后在 function 组件里面通过 api 来使用这些数据，这些 api 被叫做 hooks api。</p>
<p>因为是使用 fiber 节点上的数据，就把 api 命名为了 useXxx。</p>
<p>每个 hooks api 都要有自己存放数据的地方，怎么组织呢？有两种方案，一种是 map，一种是数组。</p>
<p>用 map 的话那么要 hooks api 要指定 key，按照 key 来存取 fiber 节点中的数据。</p>
<p>用数组的话顺序不能变，所以 hooks api 不能出现在 if 等逻辑块中，只能在顶层。</p>
<p>为了简化使用， hooks 最终使用了数组的方式。当然，实现起来用的是链表。</p>
<p>每个 hooks api 取对应的 fiber.memoriedState 中的数据来用。</p>
<p>hooks api 可以分为 3 类：</p>
<p>第一类是数据类的：</p>
<p>useState： 在 fiber.memoriedState 的对应元素中存放数据</p>
<p>useMemo：在 fiber.memoriedState 的对应元素中存放数据，值是缓存的函数计算的结果，在 state 变化后重新计算值</p>
<p>useCallback：在 fiber.memoriedState 的对应元素中存放数据，值是函数，在 state 变化后重新执行函数，是 useMemo 在值为函数的场景下的简化 api，比如 useCallback(fn, [a,b]) 相当于 useMemo(() =&gt; fn, [a, b])</p>
<p>useReducer：在 fiber.memoriedState 的对应元素中存放数据，值为 reducer 返回的结果，可以通过 action 来触发值的变更</p>
<p>useRef：在 fiber.memoriedState 的对应元素中存放数据，值为 {current: 具体值} 的形式，因为对象不变，只是 current 属性变了，所以不会修改。</p>
<p>useState 是存储值最简单的方式，useMemo 是基于 state 执行函数并且缓存结果，相当于 vue 的 getter，useCallback 是一种针对值为函数的情况的简化，useReducer 是通过 action 来触发值的修改。useRef 包了一层对象，每次对比都是同一个，所以可以放一些不变的数据。</p>
<p>不管形式怎么样，这些 hooks 的 api 的作用都是返回值的。</p>
<p>第二类是逻辑类的：</p>
<p>useEffect：异步执行函数，当依赖 state 变化之后会再次执行，当组件销毁的时候会调用返回的清理函数<br>useLayoutEffect： 在渲染完成后同步执行函数，可以拿到 dom</p>
<p>这两个 hooks api 都是用于执行逻辑的，不需要等渲染完的逻辑都可以放到 useEffect 里。</p>
<p>第三类是 ref 转发专用的：</p>
<p>数据可以通过各种方案共享，但是 dom 元素这种就得通过 ref 转发了，所谓的 ref 转发就是在父组件创建 ref，然后子组件把元素传过去。传过去之前想做一些修改，就可以用 useImperativeHandle 来改。</p>
<p>通过这 3 类 hooks api，以及之后会添加的更多 hooks api ，函数组件里面也能做 state 的存储，也能在一些阶段执行一段逻辑，是可以替代 class 组件的方案了。</p>
<p>而且更重要的是，hooks api 是传递参数的函数调用的形式，可以对 hooks api 进一步封装成功能更强大的函数，也就是自定义 hooks。通过这种方式就可以做跨组件的逻辑复用了。<br>再回头看一下最开始要解决的 class 组件嵌套过深和组件太大的问题，通过 hooks 都能解决：</p>
<p>逻辑扩展不需要嵌套 hoc 了，多调用一个自定义的 hooks 就行</p>
<p>组件的逻辑也不用都写在 class 里了，完全可以抽离成不同的 hooks</p>
<p>react 通过 function 组件的 hooks api 解决了 class 组件的逻辑复用方案的问题。</p>
<p>（fiber 是解决性能问题的，而 hooks 是解决逻辑复用问题的）<br>vue2 中是通过 mixin 的方式来复用逻辑的，也有组件太大的问题，在 vue3 中也可以通过类似的思路来解决。</p>
<p>为了体验和原生更接近，现在基本都是不刷新页面的单页应用，都是从服务端取数据然后驱动 dom 变化的 浏览器渲染(csr)方案。但对于一些低端机，仍然需要服务端渲染(ssr)的方案。但不能回到 jsp、php 时代的那种模版引擎服务端渲染了，而是要基于同一个组件树，把它渲染成字符串。服务端渲染和浏览器渲染都用同样的组件代码，这就是同构的方案。</p>
<p>技术从出现到完善到连带的周边生态的完善是一个轮回，从最开始服务端渲染，到了后来的客户端渲染，然后出现了逻辑层的组件方案，最后又要基于组件方案重新实现服务端渲染。</p>
<p>其实物理层的东西一直都没变，只是逻辑层不断的一层添加又一层，目的都是为了提高生产效率，降低开发成本，保证质量，这也是技术发展的趋势。</p>
<p>作者：zxg_神说要有光<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA3MDQ4MzA2NDM4MTc2Nzk5">https://juejin.cn/post/7007048306438176799<i class="fa fa-external-link-alt"></i></span><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>111-js实现打字机效果</title>
    <url>/20210914/111-js%E5%AE%9E%E7%8E%B0%E6%89%93%E5%AD%97%E6%9C%BA%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="js-实现打字机效果"><a href="#js-实现打字机效果" class="headerlink" title="js 实现打字机效果"></a>js 实现打字机效果</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打字效果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123; Object &#125;</span> </span>content 打字的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useTyped</span>(<span class="params">content: <span class="built_in">string</span></span>): <span class="title">Ref</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> time: <span class="built_in">any</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> i:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> typed = ref(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">autoType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (typed.value.length &lt; content.length) &#123;</span><br><span class="line">      time = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">        typed.value = content.slice(<span class="number">0</span>, i+<span class="number">1</span>) + <span class="string">&#x27;_&#x27;</span></span><br><span class="line">        i++</span><br><span class="line">        autoType()</span><br><span class="line">      &#125;, <span class="number">200</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(time)</span><br><span class="line">      typed.value = content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  autoType()</span><br><span class="line">  <span class="keyword">return</span> typed</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>112-如何在vue中使用lottie</title>
    <url>/20210914/112-%E5%A6%82%E4%BD%95%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8Lottie/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Lottie-简介"><a href="#Lottie-简介" class="headerlink" title="Lottie 简介"></a>Lottie 简介</h2><p>官方介绍：Lottie 是一个库，可以解析使用 AE 制作的动画（需要用 bodymovie 导出为 json 格式）,支持 web、ios、android、flutter 和 react native。 在 web 端，lottie-web 库可以解析导出的动画 json 文件，并将其以 svg 或者 canvas 的方式将动画绘制在我们的页面上.</p>
<h2 id="Lottie-的优点"><a href="#Lottie-的优点" class="headerlink" title="Lottie 的优点"></a>Lottie 的优点</h2><ul>
<li>动画由设计使用专业的动画制作工具 AE 来实现，使动画实现更加方便，且效果更好</li>
<li>前端可以方便的调用动画，并对动画进行控制，减少前端动画工作量</li>
<li>设计制作动画，前端展现动画，分工明确</li>
<li>使用 lottie 方案，json 文件大小比 gif 文件小很多，性能也会更好</li>
</ul>
<h2 id="lottie-web-在前端的使用"><a href="#lottie-web-在前端的使用" class="headerlink" title="lottie-web 在前端的使用"></a>lottie-web 在前端的使用</h2><h3 id="安装-lottie-web"><a href="#安装-lottie-web" class="headerlink" title="安装 lottie-web"></a>安装 lottie-web</h3><blockquote>
<p>npm install lottie-web</p>
</blockquote>
<h3 id="lottie-web-的基本用法"><a href="#lottie-web-的基本用法" class="headerlink" title="lottie-web 的基本用法"></a>lottie-web 的基本用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animation = lottie.loadAnimation(&#123;</span><br><span class="line"> <span class="attr">container</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;domId&#x27;</span>), <span class="comment">// 绑定dom节点</span></span><br><span class="line"> <span class="attr">renderer</span>: <span class="string">&#x27;svg&#x27;</span>, <span class="comment">// 渲染方式:svg、canvas</span></span><br><span class="line"> <span class="attr">loop</span>: <span class="literal">true</span>, <span class="comment">// 是否循环播放，默认：false</span></span><br><span class="line"> <span class="attr">autoplay</span>: <span class="literal">true</span>, <span class="comment">// 是否自动播放, 默认true</span></span><br><span class="line"> <span class="attr">animationData</span>: <span class="comment">// AE动画使用bodymovie导出为json数据</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="lottie-web-常用方法"><a href="#lottie-web-常用方法" class="headerlink" title="lottie-web 常用方法"></a>lottie-web 常用方法</h3><p>前面我们就初始化了一个 lottie 对象了. 然后我们介绍它的一些常用方法</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span><span class="selector-class">.play</span>(); <span class="comment">// 播放，从当前帧开始播放</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.stop</span>(); <span class="comment">// 停止，并回到第0帧</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.pause</span>(); <span class="comment">// 暂停，并保持当前帧</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.goToAndStop</span>(value, isFrame); <span class="comment">// 跳到某个时刻/帧并停止isFrame(默认false)指示value表示帧还是时间(毫秒)</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.goToAndPlay</span>(value, isFrame); <span class="comment">// 跳到某个时刻/帧并进行播放</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.goToAndStop</span>(<span class="number">30</span>, true); <span class="comment">// 跳转到第30帧并停止</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.goToAndPlay</span>(<span class="number">300</span>); <span class="comment">// 跳转到第300毫秒并播放</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.playSegments</span>(arr, forceFlag); <span class="comment">// arr可以包含两个数字或者两个数字组成的数组，forceFlag表示是否立即强制播放该片段</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.playSegments</span>([<span class="number">10</span>,<span class="number">20</span>], false); <span class="comment">// 播放完之前的片段，播放10-20帧</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.playSegments</span>([[<span class="number">0</span>,<span class="number">5</span>],[<span class="number">10</span>,<span class="number">18</span>]], true); <span class="comment">// 直接播放0-5帧和10-18帧</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.setSpeed</span>(speed); <span class="comment">// 设置播放速度，speed为1表示正常速度</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.setDirection</span>(direction); <span class="comment">// 设置播放方向，1表示正向播放，-1表示反向播放</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation</span><span class="selector-class">.destroy</span>(); <span class="comment">// 删除该动画，移除相应的元素标签等。</span></span><br></pre></td></tr></table></figure>

<h2 id="Lottie-web-常用的事件"><a href="#Lottie-web-常用的事件" class="headerlink" title="Lottie-web 常用的事件"></a>Lottie-web 常用的事件</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">animation.addEventListener(<span class="string">&#x27;data_ready&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) <span class="regexp">//</span> 动画数据加载完毕</span><br><span class="line">animation.addEventListener(<span class="string">&#x27;config_ready&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) <span class="regexp">//</span> 完成初始配置后</span><br><span class="line">animation.addEventListener(<span class="string">&#x27;data_failed&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) <span class="regexp">//</span> 加载动画数据失败</span><br><span class="line">animation.addEventListener(<span class="string">&#x27;loaded_images&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) <span class="regexp">//</span> 所有图片加载成功或者失败</span><br><span class="line">animation.addEventListener(<span class="string">&#x27;DOMLoaded&#x27;</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) <span class="regexp">//</span> 将元素添加到DOM后</span><br></pre></td></tr></table></figure>

<h2 id="Lottie-的免费资源"><a href="#Lottie-的免费资源" class="headerlink" title="Lottie 的免费资源"></a>Lottie 的免费资源</h2><p>之前我们说过 Lottie 的动画是通过 AE 制作好了动画后，再使用 bodymovie 导出为 json 格式。其实有一个(网站)[<span class="exturl" data-url="aHR0cHM6Ly9sb3R0aWVmaWxlcy5jb20vXSVFRiVCQyU4QyVFNSVBRSU4MyVFNiU4RiU5MCVFNCVCRSU5QiVFNCVCQSU4NiVFNCVCOCU4MCVFNCVCQSU5QiVFNSU4NSU4RCVFOCVCNCVCOSVFNyU5QSU4NCVFNSU4QSVBOCVFNyU5NCVCQiglRTUlQkQlOTMlRTclODQlQjYlRTQlQjklOUYlRTYlOUMlODklRTQlQkIlOTglRTglQjQlQjklRTclOUElODQpJUU3JTlCJUI0JUU2JThFJUE1JUU2JTlDJTg5JUU2JTg4JTkxJUU0JUJCJUFDJUU5JTlDJTgwJUU4JUE2JTgxJUU3JTlBJTg0JUU1JThBJUE4JUU3JTk0JUJC">https://lottiefiles.com/]，它提供了一些免费的动画(当然也有付费的)直接有我们需要的动画<i class="fa fa-external-link-alt"></i></span> json 数据.</p>
<h2 id="在-vue-中使用-lottie"><a href="#在-vue-中使用-lottie" class="headerlink" title="在 vue 中使用 lottie"></a>在 vue 中使用 lottie</h2><h3 id="使用-vite-跑-vue"><a href="#使用-vite-跑-vue" class="headerlink" title="使用 vite 跑 vue"></a>使用 vite 跑 vue</h3><blockquote>
<p>npm init @vitejs/app <project-name></p>
</blockquote>
<h3 id="安装-lottie-web-1"><a href="#安装-lottie-web-1" class="headerlink" title="安装 lottie-web"></a>安装 lottie-web</h3><blockquote>
<p>npm install lottie-web</p>
</blockquote>
<p>封装一个基础的组件 lottie.vue, 主要就是初始化好 lottie 对象，然后把对象传递出去给其他组件用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;style&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;lavContainer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> lottie <span class="keyword">from</span> <span class="string">&#x27;lottie-web&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;lottie&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">options</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">height</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">width</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">style</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">width</span>: <span class="built_in">this</span>.width ? <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.width&#125;</span>px`</span> : <span class="string">&#x27;100%&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">height</span>: <span class="built_in">this</span>.height ? <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.height&#125;</span>px`</span> : <span class="string">&#x27;100%&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.anim = lottie.loadAnimation(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">container</span>: <span class="built_in">this</span>.$refs.lavContainer,</span></span><br><span class="line"><span class="javascript">      <span class="attr">renderer</span>: <span class="string">&#x27;svg&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">loop</span>: <span class="built_in">this</span>.options.loop !== <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">autoplay</span>: <span class="built_in">this</span>.options.autoplay !== <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">animationData</span>: <span class="built_in">this</span>.options.animationData,</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$emit(<span class="string">&#x27;animCreated&#x27;</span>, <span class="built_in">this</span>.anim)</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  unmounted () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.anim &amp;&amp; <span class="built_in">this</span>.anim.destroy()</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>基于上面的组件，我们封装一个更具象一点的组件 clickIcon,这个组件也是通用组件，增加了点击后，动画交互需要怎么走向等逻辑.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clickIcon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;iconBox&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:style</span>=<span class="string">&quot;&#123; width: width + &#x27;px&#x27;, height: height + &#x27;px&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;svg&quot;</span> <span class="attr">v-bind:data</span>=<span class="string">&quot;&#123; toggle, flag, iconWidth, iconHeight &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">lottie</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:class</span>=<span class="string">&quot;&#123; show: flag === true || !defaultSlot &#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;like&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:options</span>=<span class="string">&quot;options&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:height</span>=<span class="string">&quot;height&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:width</span>=<span class="string">&quot;width&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-on:animCreated</span>=<span class="string">&quot;handleAnimation&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; computed, ref, defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Lottie <span class="keyword">from</span> <span class="string">&quot;./lottie.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> anim = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="javascript"> * 点击icon然后播放一段动画的组件</span></span></span><br><span class="line"><span class="comment"><span class="javascript"> * 适合收藏、点赞等小功能</span></span></span><br><span class="line"><span class="comment"><span class="javascript"> */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;clickIcon&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 宽度</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">width</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">default</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 高度</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">height</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">default</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 初始化Lottie需要的参数</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">options</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 是否需要一个插槽，显示一个默认的图标</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">defaultSlot</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">default</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 从外面传递的一个点击后需要的交互效果</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">toggleFun</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">default</span>: <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">lottie</span>: Lottie,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">emits</span>: [<span class="string">&#x27;init&#x27;</span>],</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; emit &#125;</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 动画速度</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> animationSpeed = <span class="number">2</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 点击交互标识</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> flag = ref(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 图标高度</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> iconWidth = computed(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> props.width;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 图标宽度</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> iconHeight = computed(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> props.height;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 点击图标交互</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> toggle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!props.defaultSlot) &#123;</span></span><br><span class="line"><span class="javascript">        props.toggleFun &amp;&amp; props.toggleFun(anim)</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        flag.value = !flag.value;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (flag.value) &#123;</span></span><br><span class="line"><span class="javascript">          anim.play();</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          anim.stop();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 获取anim对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> handleAnimation = <span class="function"><span class="keyword">function</span>(<span class="params">animated</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      anim = animated;</span></span><br><span class="line"><span class="javascript">      onSpeedChange()</span></span><br><span class="line"><span class="javascript">      emit(<span class="string">&#x27;init&#x27;</span>, animated)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 停止动画</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> stop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      anim.stop();</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 播放动画</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> play = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      anim.play();</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 暂停动画</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> pause = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      anim.pause();</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 控制播放速度</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> onSpeedChange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      anim.setSpeed(animationSpeed);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      iconWidth,</span></span><br><span class="line"><span class="javascript">      iconHeight,</span></span><br><span class="line"><span class="javascript">      handleAnimation,</span></span><br><span class="line"><span class="javascript">      flag,</span></span><br><span class="line"><span class="javascript">      toggle,</span></span><br><span class="line"><span class="javascript">      stop,</span></span><br><span class="line"><span class="javascript">      play,</span></span><br><span class="line"><span class="javascript">      pause</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.iconBox</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.show</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: inline-block <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.hidden</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.like</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.icon</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">  <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先把下载的动画 json 文件，放到资源文件目录,然后我们再用代码调用它使用.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">lottie</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;like&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:options</span>=<span class="string">&quot;defaultOptions&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:height</span>=<span class="string">&quot;height&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:defaultSlot</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:width</span>=<span class="string">&quot;width&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">init</span>=<span class="string">&quot;init&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:toggleFun</span>=<span class="string">&quot;toggle&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;lottie&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">lottie</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Lottie <span class="keyword">from</span> <span class="string">&quot;../common/clickIcon.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> animationData <span class="keyword">from</span> <span class="string">&quot;/public/like.json&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;app&quot;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">lottie</span>: Lottie,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">width</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">default</span>: <span class="number">60</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">height</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">default</span>: <span class="number">60</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    init (animation) &#123;</span></span><br><span class="line"><span class="javascript">      animation &amp;&amp; animation.goToAndStop(<span class="number">0</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    toggle (animation) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.toggleFlag) &#123;</span></span><br><span class="line"><span class="javascript">        animation.playSegments([<span class="number">50</span>, <span class="number">90</span>], <span class="literal">true</span>); <span class="comment">// 从50帧播放到最后</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        animation &amp;&amp; animation.playSegments([<span class="number">0</span>, <span class="number">50</span>], <span class="literal">true</span>); <span class="comment">// 从第0帧播放到50帧</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.toggleFlag = !<span class="built_in">this</span>.toggleFlag</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">toggleFlag</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">defaultOptions</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;like&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">animationData</span>: animationData,</span></span><br><span class="line"><span class="javascript">        <span class="attr">autoplay</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">loop</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.hidden</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上边的效果之所以这样做，是因为我们下载的‘喜欢’动画的 json 文件，它是由两个状态组成的, 0-50 帧是由未选中到选中状态的动画，50-&gt;90 帧是选中状态-&gt;未选中状态的动画. 具体多少帧到多少帧可以从网站下载 json 文件那个窗口下面的进度去看到的.</p>
<p>使用喜欢组件</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">like</span>&gt;</span><span class="tag">&lt;/<span class="name">like</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> </span></span><span class="template-variable">&#123; defineComponent &#125;</span><span class="xml"><span class="javascript"> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> like <span class="keyword">from</span> <span class="string">&quot;./components/like/index.vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(</span></span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  components: &#123;</span></span><br><span class="line"><span class="template-variable">    like,</span></span><br><span class="line"><span class="template-variable">  &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是利用 Lottie 在 vue 中实现一个喜欢组件了。 其实目前只是写了这么一个 demo 而已，大家有兴趣的话，可以把它再实现完一下，现在组件还没有去记录一下组件的默认状态， 它可能默认就是被选中的状态. 另外我们这一次拿到的动画组件刚好是有选中和未选中两种状态的，在之前给大家介绍的免费下载动画 json 文件的网站里边还有一些动画是只给到一个选中的动画效果，并没有未选中的状态，这时候我们可以自己去找一个类似的 svg 图标，然后作为默认的图标，点击后，触发选中的动画效果. 这种场景碰到的极少，如果是公司项目的话，可以要求美工去做两个状态的动画效果，如果是自己的个人项目，然后碰到了很喜欢的免费动画，然而它只提供了一个状态的话，这时候才有用。 我在组件其实也把这种情况考虑进去了，就是 defaultSlot 把这个属性设置成 true, 然后在写组件的时候，添加一个插槽作为一个默认组件.</p>
]]></content>
      <categories>
        <category>lottie</category>
      </categories>
      <tags>
        <tag>lottie</tag>
      </tags>
  </entry>
  <entry>
    <title>113-20分钟吃透Diff核心原理</title>
    <url>/20210914/113-20%E5%88%86%E9%92%9F%E5%90%83%E9%80%8FDiff%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk0OTU5OTk4MjgzOTA3MTAy">直接看原文<i class="fa fa-external-link-alt"></i></span></p>
<p>20 分钟吃透 Diff 算法核心原理</p>
<p>为什么用了 id 来当做 key 就实现了我们的理想效果呢，因为这么做的话，a，b，c 节点的 key 就会是永远不变的，更新前后 key 都是一样的，并且又由于 a，b，c 节点的内容本来就没变，所以就算是进行了 patchVnode，也不会执行里面复杂的更新操作，节省了性能，而林三心节点，由于更新前没有他的 key 所对应的节点，所以他被当做新的节点，增加到真实 DOM 上去了。</p>
<p>虚拟 DOM 比真实 DOM 快这句话其实是错的，或者说是不严谨的。那正确的说法是什么呢？虚拟 DOM 算法操作真实 DOM，性能高于直接操作真实 DOM，虚拟 DOM 和虚拟 DOM 算法是两种概念。虚拟 DOM 算法 = 虚拟 DOM + Diff 算法</p>
<p>Diff 算法是一种对比算法。对比两者是旧虚拟 DOM 和新虚拟 DOM，对比出是哪个虚拟节点更改了，找出这个虚拟节点，并只更新这个虚拟节点所对应的真实节点，而不用更新其他数据没发生改变的节点，实现精准地更新真实 DOM，进而提高效率。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>114-vue-element图片压缩上传</title>
    <url>/20210918/114-vue-element%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><blockquote>
<p>在 before-upload 方法中对图片文件进行处理，并返回处理后的文件。</p>
</blockquote>
<p>查看了一下 upload 的源码，发现，beforeUpload 方法中，除了可以返回图片校验时的 true/false，还可以以 return new Promise 的方式返回文件，如返回文件，则上传时，以返回的文件为准上传。</p>
<p>1.源码中有个判定：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">before</span> = this.<span class="title">beforeUpload</span>(rawFile)</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">before</span> &amp;&amp; <span class="keyword">before</span>.then) &#123;</span><br><span class="line">    before.then( processedFIle =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> fileType = Object.prototype.toString.call(processedFIle) <span class="comment">// 获取文件的格式</span></span><br><span class="line">        <span class="keyword">if</span>(fileType === <span class="string">&#x27;[object File]&#x27;</span> || fileType === <span class="string">&#x27;[object Blob]&#x27;</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即：如果收到 beforeUpload 方法中传输过来的参数是 File 或者 Blob 格式，则将此文件作为文件参数请求 request，否则用原文件 rawFile 为参数。因此，我们将文件压缩后，转换成 File 或者 Blob 格式 resolve 即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//图片上传之前</span></span><br><span class="line"> <span class="keyword">const</span> yasuoimg = <span class="keyword">new</span> yasuoIMG()</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="title">beforeAvatarUpload</span>(<span class="params">file</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(file)</span><br><span class="line">     <span class="keyword">const</span> isJPG = file.type === <span class="string">&#x27;image/jpeg&#x27;</span> || <span class="string">&#x27;image/png&#x27;</span>;</span><br><span class="line">     <span class="keyword">const</span> imgsize = file.size / <span class="number">1024</span> /<span class="number">1024</span>;</span><br><span class="line">     <span class="keyword">if</span> (!isJPG) &#123;</span><br><span class="line">       <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传头像图片只能是 JPG 格式!&#x27;</span>);</span><br><span class="line">       reject()</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (imgsize &gt; <span class="number">1</span> &amp;&amp;  imgsize  &lt; <span class="number">4</span>) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> image = <span class="keyword">new</span> Image(), resultBlob = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">       image.src = URL.createObjectURL(file);</span><br><span class="line">       image.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">// 调用方法获取blob格式，方法写在下边</span></span><br><span class="line">         resultBlob = yasuoimg.compressUpload(image, file);</span><br><span class="line">         resolve(resultBlob)</span><br><span class="line">       &#125;</span><br><span class="line">       image.onerror = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">         reject()</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(imgsize &lt; <span class="number">1</span>)&#123;</span><br><span class="line">       resolve()</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span>(imgsize &gt; <span class="number">4</span>)&#123;</span><br><span class="line">       <span class="built_in">this</span>.$message.error(<span class="string">&quot;图片超出范围，请压缩后上传&quot;</span>)</span><br><span class="line">       reject()</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>封装压缩类</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">        export class yasuoIMG &#123;</span><br><span class="line">        /<span class="symbol">_</span> 图片压缩方法-canvas 压缩 <span class="symbol">_</span>/</span><br><span class="line">        compressUpload(<span class="built_in">image</span>, file) &#123;</span><br><span class="line">        <span class="built_in">let</span> canvas = document.createElement(&#x27;canvas&#x27;)</span><br><span class="line">        <span class="built_in">let</span> ctx = canvas.getContext(&#x27;2d&#x27;)</span><br><span class="line">        <span class="built_in">let</span> initSize = <span class="built_in">image</span>.src.<span class="built_in">length</span></span><br><span class="line">        <span class="built_in">let</span> &#123;<span class="built_in">width</span>&#125; = <span class="built_in">image</span>, &#123;<span class="built_in">height</span>&#125; = <span class="built_in">image</span></span><br><span class="line">        canvas.<span class="built_in">width</span> = <span class="built_in">width</span></span><br><span class="line">        canvas.<span class="built_in">height</span> = <span class="built_in">height</span></span><br><span class="line">        ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="built_in">width</span>, canvas.<span class="built_in">height</span>)</span><br><span class="line">        ctx.drawImage(<span class="built_in">image</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">width</span>, <span class="built_in">height</span>)</span><br><span class="line"></span><br><span class="line">        // 进行最小压缩<span class="number">0.1</span></span><br><span class="line">        <span class="built_in">let</span> compressData = canvas.toDataURL(file.type || &#x27;<span class="built_in">image</span>/jpeg&#x27;, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">        // 压缩后调用方法进行<span class="built_in">base64</span>转Blob，方法写在下边</span><br><span class="line">        <span class="built_in">let</span> blobImg = this.dataURItoBlob(compressData)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> blobImg</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* base64转Blob对象 */</span></span><br><span class="line">    dataURItoBlob(data) &#123;</span><br><span class="line">        <span class="built_in">let</span> byteString;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">split</span>(&#x27;,&#x27;)[<span class="number">0</span>].indexOf(&#x27;<span class="built_in">base64</span>&#x27;) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            byteString = atob(data.<span class="built_in">split</span>(&#x27;,&#x27;)[<span class="number">1</span>])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            byteString = unescape(data.<span class="built_in">split</span>(&#x27;,&#x27;)[<span class="number">1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">let</span> mimeString = data</span><br><span class="line">            .<span class="built_in">split</span>(&#x27;,&#x27;)[<span class="number">0</span>]</span><br><span class="line">            .<span class="built_in">split</span>(&#x27;:&#x27;)[<span class="number">1</span>]</span><br><span class="line">            .<span class="built_in">split</span>(&#x27;;&#x27;)[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">let</span> ia = <span class="built_in">new</span> Uint8Array(byteString.<span class="built_in">length</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">let</span> i = <span class="number">0</span>; i &lt; byteString.<span class="built_in">length</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">            ia[i] = byteString.charCodeAt(i)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="built_in">new</span> Blob([ia], &#123;type: mimeString&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>115-javascript循环遍历方法，你知道几个？</title>
    <url>/20210920/115-javascript%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95%EF%BC%8C%E4%BD%A0%E7%9F%A5%E9%81%93%E5%87%A0%E4%B8%AA%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h1><p>看看 JavaScript 中的那些循环遍历方法：</p>
<img title="js循环方法" src="https://blog.img.wy1991.cn/static/images/js/jsxunhuan.png-blogImg">

<h2 id="数组循环方法"><a href="#数组循环方法" class="headerlink" title="数组循环方法"></a>数组循环方法</h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p><code>forEach</code> 方法用于调用数组的每个元素，并将元素传递给回调函数。数组中的每个值都会调用回调函数。其语法如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="keyword">for</span><span class="constructor">Each(<span class="params">function</span>(<span class="params">currentValue</span>, <span class="params">index</span>, <span class="params">arr</span>)</span>, thisValue)</span><br></pre></td></tr></table></figure>

<p>该方法的第一个参数为回调函数，是必传的，它有三个参数：</p>
<ul>
<li>currentValue：必需。当前元素</li>
<li>index：可选。当前元素的索引值。</li>
<li>arr：可选。当前元素所属的数组对象</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="literal">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span></span><br><span class="line">arr.<span class="keyword">for</span><span class="constructor">Each((<span class="params">item</span>, <span class="params">index</span>, <span class="params">arr</span>)</span> =&gt; &#123;</span><br><span class="line">  console.log(index+<span class="string">&quot;:&quot;</span>+item)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>该方法还可以有第二个参数，用来绑定回调函数内部 this 变量（前提是回调函数不能是箭头函数，因为箭头函数没有 this）：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="literal">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="literal">[<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]</span></span><br><span class="line">arr.<span class="keyword">for</span><span class="constructor">Each(<span class="params">function</span>(<span class="params">item</span>, <span class="params">index</span>, <span class="params">arr</span>)</span>&#123;</span><br><span class="line">  console.log(this<span class="literal">[<span class="identifier">index</span>]</span>)  <span class="comment">//  9 8 7 6 5</span></span><br><span class="line">&#125;, arr1)</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>forEach 方法不会改变原数组，也没有返回值；</li>
<li>forEach 无法使用 break，continue 跳出循环，使用 return 时，效果和在 for 循环中使用 continue 一致；</li>
<li>forEach 方法无法遍历对象，仅适用于数组的遍历。</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><code>map()</code> 方法会返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。该方法按照原始数组元素顺序依次处理元素。其语法如下：</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>.map(<span class="function"><span class="keyword">function</span><span class="params">(currentValue,<span class="keyword">index</span>,arr)</span>, <span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure>

<p>该方法的第一个参数为回调函数，是必传的，它有三个参数：</p>
<ul>
<li>currentValue：必须。当前元素的值；</li>
<li>index：可选。当前元素的索引值；</li>
<li>arr：可选。当前元素属于的数组对象。</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="keyword">map</span>(<span class="type">item</span> =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">item</span> + <span class="number">1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 输出结果： [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<p>该方法的第二个参数用来绑定参数函数内部的 this 变量，是可选的：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].map(<span class="keyword">function</span> <span class="title"></span>(e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">this[e]</span>;</span><br><span class="line">&#125;, arr)</span><br><span class="line"></span><br><span class="line">// 输出结果： [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>该方法还可以进行链式调用：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="keyword">map</span>(<span class="type">item</span> =&gt; <span class="type">item</span> + <span class="number">1</span>).<span class="keyword">map</span>(<span class="type">item</span> =&gt; <span class="type">item</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">// 输出结果： [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>map 方法不会对空数组进行检测；</li>
<li>map 方法遍历数组时会返回一个新数组，不会改变原始数组；</li>
<li>map 方法有返回值，可以 return 出来，map 的回调函数中支持 return 返回值；</li>
<li>map 方法无法遍历对象，仅适用于数组的遍历。</li>
</ul>
<h3 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h3><p><code>for...of</code> 语句创建一个循环来迭代可迭代的对象。在 ES6 中引入的 for…of 循环，以替代 for…in 和 forEach() ，并支持新的迭代协议。其语法如下：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">variable</span> of <span class="comment">iterable) &#123;</span></span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法有两个参数：</p>
<ul>
<li>variable：每个迭代的属性值被分配给该变量。</li>
<li>iterable：一个具有可枚举属性并且可以迭代的对象。</li>
</ul>
<p>该方法可以获取数组的每一项：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    <span class="built_in">&#123;id</span>:<span class="number">1</span>, value:<span class="string">&#x27;hello&#x27;</span>&#125;,</span><br><span class="line">    <span class="built_in">&#123;id</span>:<span class="number">2</span>, value:<span class="string">&#x27;world&#x27;</span>&#125;,</span><br><span class="line">    <span class="built_in">&#123;id</span>:<span class="number">3</span>, value:<span class="string">&#x27;JavaScript&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> <span class="type">item</span> <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  console.log(<span class="type">item</span>);</span><br><span class="line">&#125;</span><br><span class="line">// 输出结果：<span class="built_in">&#123;id</span>:<span class="number">1</span>, value:<span class="string">&#x27;hello&#x27;</span>&#125;  <span class="built_in">&#123;id</span>:<span class="number">2</span>, value:<span class="string">&#x27;world&#x27;</span>&#125; <span class="built_in">&#123;id</span>:<span class="number">3</span>, value:<span class="string">&#x27;JavaScript&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>for of 方法只会遍历当前对象的属性，不会遍历其原型链上的属性；</li>
<li>for of 方法适用遍历 数组/ 类数组/字符串/map/set 等拥有迭代器对象的集合；</li>
<li>for of 方法不支持遍历普通对象，因为其没有迭代器对象。如果想要遍历一个对象的属性，可以用 for in 方法；</li>
<li>可以使用 break、continue、return 来中断循环遍历；</li>
</ul>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><code>filter()</code>方法用于过滤数组，满足条件的元素会被返回。它的参数是一个回调函数，所有数组元素依次执行该函数，返回结果为 true 的元素会被返回，如果没有符合条件的元素，则返回空数组。其语法如下：</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>.filter(<span class="function"><span class="keyword">function</span><span class="params">(currentValue,<span class="keyword">index</span>,arr)</span>, <span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure>

<p>该方法的第一个参数为回调函数，是必传的，它有三个参数：</p>
<ul>
<li>currentValue：必须。当前元素的值；</li>
<li>index：可选。当前元素的索引值；</li>
<li>arr：可选。当前元素属于的数组对象。</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">const arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.<span class="built_in">filter</span>(<span class="keyword">item</span> =&gt; <span class="keyword">item</span> &gt; <span class="number">2</span>)</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 输出结果：[3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<p>同样，它也有第二个参数，用来绑定参数函数内部的 this 变量。</p>
<p>可以使用 filter()方法来移除数组中的 undefined、null、NAN 等值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">2</span>, <span class="literal">null</span>, <span class="number">3</span>, <span class="literal">false</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">4</span>, <span class="number">0</span>]</span><br><span class="line">arr.filter(<span class="built_in">Boolean</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>filter 方法会返回一个新的数组，不会改变原数组；</li>
<li>filter 方法不会对空数组进行检测；</li>
<li>filter 方法仅适用于检测数组。</li>
</ul>
<h3 id="some-、every"><a href="#some-、every" class="headerlink" title="some()、every()"></a>some()、every()</h3><p>some() 方法会对数组中的每一项进行遍历，只要有一个元素符合条件，就返回 true，且剩余的元素不会再进行检测，否则就返回 false。<br>​<br>every() 方法会对数组中的每一项进行遍历，只有所有元素都符合条件时，才返回 true，如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。其语法如下：<br>​<br>两者的语法如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>.<span class="keyword">some</span>(<span class="keyword">function</span>(currentValue,<span class="keyword">index</span>,arr),thisValue)</span><br><span class="line"><span class="keyword">array</span>.every(<span class="keyword">function</span>(currentValue,<span class="keyword">index</span>,arr), thisValue)</span><br></pre></td></tr></table></figure>

<p>两个方法的第一个参数为回调函数，是必传的，它有三个参数：</p>
<ul>
<li>currentValue：必须。当前元素的值；</li>
<li>index：可选。当前元素的索引值；</li>
<li>arr：可选。当前元素属于的数组对象。</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.<span class="keyword">some</span>(<span class="type">item</span> =&gt; <span class="type">item</span> &gt; <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">// 输出结果：<span class="built_in"> true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.<span class="keyword">every</span>(<span class="type">item</span> =&gt; <span class="type">item</span> &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">// 输出结果：<span class="built_in"> true</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>两个方法都不会改变原数组，会返回一个布尔值；</li>
<li>两个方法都不会对空数组进行检测；</li>
<li>两个方法都仅适用于检测数组。</li>
</ul>
<h3 id="reduce-、reduceRight"><a href="#reduce-、reduceRight" class="headerlink" title="reduce()、reduceRight()"></a>reduce()、reduceRight()</h3><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。reduce() 可以作为一个高阶函数，用于函数的 compose。其语法如下：</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>.reduce(<span class="function"><span class="keyword">function</span><span class="params">(total, currentValue, currentIndex, arr)</span>, <span class="title">initialValue</span>)</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<p>reduce 方法会为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，回调函数接受四个参数：</p>
<ul>
<li>total：上一次调用回调返回的值，或者是提供的初始值（initialValue）；</li>
<li>currentValue：当前被处理的元素；</li>
<li>currentIndex：当前元素的索引；</li>
<li>arr：当前元素所属的数组对象。</li>
</ul>
<p>该方法的第二个参数是 initialValue，表示传递给函数的初始值 （作为第一次调用 callback 的第一个参数）：</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">let <span class="built_in">sum</span> = arr.reduce((prev, cur, <span class="built_in">index</span>, arr) =&gt; &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(prev, cur, <span class="built_in">index</span>);</span><br><span class="line">    <span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;)</span><br><span class="line">console.<span class="built_in">log</span>(arr, <span class="built_in">sum</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">3</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">6</span> <span class="number">4</span> <span class="number">3</span><span class="meta"></span></span><br><span class="line"><span class="meta">[1, 2, 3, 4] 10</span></span><br></pre></td></tr></table></figure>

<p>再来加一个初始值试试：</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">let <span class="built_in">sum</span> = arr.reduce((prev, cur, <span class="built_in">index</span>, arr) =&gt; &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(prev, cur, <span class="built_in">index</span>);</span><br><span class="line">    <span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;, <span class="number">5</span>)</span><br><span class="line">console.<span class="built_in">log</span>(arr, <span class="built_in">sum</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">5</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">6</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">8</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">11</span> <span class="number">4</span> <span class="number">3</span><span class="meta"></span></span><br><span class="line"><span class="meta">[1, 2, 3, 4] 15</span></span><br></pre></td></tr></table></figure>

<p>由此可以得出结论：如果没有提供初始值 initialValue，reduce 会从索引 1 的地方开始执行 callback 方法，跳过第一个索引。如果提供了初始值 initialValue，从索引 0 开始执行<br>​<br>reduceRight() 方法和的 reduce()用法几乎一致，只是该方法是对数组进行倒序遍历的，而 reduce()方法是正序遍历的。</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">let <span class="built_in">sum</span> = arr.reduceRight((prev, cur, <span class="built_in">index</span>, arr) =&gt; &#123;</span><br><span class="line">   console.<span class="built_in">log</span>(prev, cur, <span class="built_in">index</span>);</span><br><span class="line">   <span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;, <span class="number">5</span>)</span><br><span class="line">console.<span class="built_in">log</span>(arr, <span class="built_in">sum</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">5</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="attribute">9</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">12</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">14</span> <span class="number">1</span> <span class="number">0</span><span class="meta"></span></span><br><span class="line"><span class="meta">[1, 2, 3, 4] 15</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>两个方法都不会改变原数组；</li>
<li>个方法如果添加初始值，就会改变原数组，会将这个初始值放在数组的最后一位；</li>
<li>两个方法对于空数组是不会执行回调函数的。</li>
</ul>
<h3 id="find-、findIndex"><a href="#find-、findIndex" class="headerlink" title="find()、findIndex()"></a>find()、findIndex()</h3><p>find() 方法返回通过函数内判断的数组的第一个元素的值。当数组中的元素在测试条件时返回 true 时， find() 返回符合条件的元素，之后的值不会再调用执行函数。如果没有符合条件的元素返回 undefined。<br>​<br>findIndex() 方法返回传入一个测试函数符合条件的数组第一个元素位置（索引）。当数组中的元素在函数条件时返回 true 时， findIndex() 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。如果没有符合条件的元素返回 -1。<br>​<br>两个方法的语法如下</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>.find(<span class="keyword">function</span>(currentValue, index, arr),thisValue)</span><br><span class="line"><span class="built_in">array</span>.find<span class="constructor">Index(<span class="params">function</span>(<span class="params">currentValue</span>, <span class="params">index</span>, <span class="params">arr</span>)</span>, thisValue)</span><br></pre></td></tr></table></figure>

<p>两个方法的第一个参数为回调函数，是必传的，它有三个参数：</p>
<ul>
<li>currentValue：必需。当前元素；</li>
<li>index：可选。当前元素的索引；</li>
<li>arr：可选。当前元素所属的数组对象。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="literal">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span></span><br><span class="line">arr.find(item =&gt; item &gt; <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果： 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="literal">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span></span><br><span class="line">arr.find<span class="constructor">Index(<span class="params">item</span> =&gt; <span class="params">item</span> &gt; 2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果： 2</span></span><br></pre></td></tr></table></figure>

<p>find()和 findIndex()两个方法几乎一样，只是返回结果不同：</p>
<ul>
<li>find()：返回的是第一个符合条件的值；</li>
<li>findIndex：返回的是第一个返回条件的值的索引值。</li>
</ul>
<p>注意：</p>
<ul>
<li>两个方法对于空数组，函数是不会执行的；</li>
<li>两个方法否不会改变原数组。</li>
</ul>
<h3 id="keys-、values-、entries"><a href="#keys-、values-、entries" class="headerlink" title="keys()、values()、entries()"></a>keys()、values()、entries()</h3><p>三个方法都返回一个数组的迭代对象，对象的内容不太相同：</p>
<ul>
<li>keys() 返回数组的索引值；</li>
<li>values() 返回数组的元素；</li>
<li>entries() 返回数组的键值对。</li>
</ul>
<p>三个方法的语法如下：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>.keys()</span><br><span class="line"><span class="built_in">array</span>.<span class="built_in">values</span>()</span><br><span class="line"><span class="built_in">array</span>.entries()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这三个方法都没有参数：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">const iterator1 = arr.keys();</span><br><span class="line">const iterator2 = arr.values()</span><br><span class="line">const iterator3 = arr.entries()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> <span class="type">item</span> <span class="keyword">of</span> iterator1) &#123;</span><br><span class="line">  console.log(<span class="type">item</span>);</span><br><span class="line">&#125;</span><br><span class="line">// 输出结果： <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> <span class="type">item</span> <span class="keyword">of</span> iterator2) &#123;</span><br><span class="line">  console.log(<span class="type">item</span>);</span><br><span class="line">&#125;</span><br><span class="line">// 输出结果： Banana Orange Apple Mango</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> <span class="type">item</span> <span class="keyword">of</span> iterator3) &#123;</span><br><span class="line">  console.log(<span class="type">item</span>);</span><br><span class="line">&#125;</span><br><span class="line">// 输出结果：[<span class="number">0</span>, <span class="string">&#x27;Banana&#x27;</span>] [<span class="number">1</span>, <span class="string">&#x27;Orange&#x27;</span>] [<span class="number">2</span>, <span class="string">&#x27;Apple&#x27;</span>] [<span class="number">3</span>, <span class="string">&#x27;Mango&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>是否改变原数组</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>forEach()</td>
<td>否</td>
<td>没有返回值</td>
</tr>
<tr>
<td>map()</td>
<td>否</td>
<td>有返回值，可链式调用</td>
</tr>
<tr>
<td>for of()</td>
<td>否</td>
<td>for…of 遍历具有 Iterator 迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的 obj 对象，将异步循环变成同步循环</td>
</tr>
<tr>
<td>filter()</td>
<td>否</td>
<td>过滤数组，返回包含符合条件的元素的数组，可链式调用</td>
</tr>
<tr>
<td>every(),every()</td>
<td>否</td>
<td>some()只要有一个是 true，便返回 true；而 every()只要有一个是 false，便返回 false.</td>
</tr>
<tr>
<td>find(),find()</td>
<td>否</td>
<td>find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值</td>
</tr>
<tr>
<td>reduce()、reduceRight()</td>
<td>否</td>
<td>reduce()对数组正序操作；reduceRight()对数组逆序操作</td>
</tr>
<tr>
<td>keys()、values()、entries()</td>
<td>否</td>
<td>keys() 返回数组的索引值；values() 返回数组元素；entries() 返回数组的键值对。</td>
</tr>
</tbody></table>
<h2 id="对象遍历方法"><a href="#对象遍历方法" class="headerlink" title="对象遍历方法"></a>对象遍历方法</h2><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><p><code>for…in</code> 主要用于循环对象属性。循环中的代码每执行一次，就会对对象的属性进行一次操作。其语法如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> <span class="keyword">in</span> <span class="built_in">object</span>) &#123;</span><br><span class="line"> 执行的代码块</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中两个参数：</p>
<ul>
<li>var：必须。指定的变量可以是数组元素，也可以是对象的属性。</li>
<li>object：必须。指定迭代的的对象。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;键名：&#x27;</span>, i);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;键值：&#x27;</span>, obj[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">键名： <span class="selector-tag">a</span></span><br><span class="line">键值： <span class="number">1</span></span><br><span class="line">键名： <span class="selector-tag">b</span></span><br><span class="line">键值： <span class="number">2</span></span><br><span class="line">键名： c</span><br><span class="line">键值： <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>for in 方法不仅会遍历当前的对象所有的可枚举属性，还会遍历其原型链上的属性。</li>
</ul>
<h3 id="Object-keys-、Object-values-、Object-entries"><a href="#Object-keys-、Object-values-、Object-entries" class="headerlink" title="Object.keys()、Object.values()、Object.entries()"></a>Object.keys()、Object.values()、Object.entries()</h3><p>这三个方法都用来遍历对象，它会返回一个由给定对象的自身可枚举属性（不含继承的和 Symbol 属性）组成的数组，数组元素的排列顺序和正常循环遍历该对象时返回的顺序一致，这个三个元素返回的值分别如下：</p>
<ul>
<li>Object.keys()：返回包含对象键名的数组；</li>
<li>Object.values()：返回包含对象键值的数组；</li>
<li>Object.entries()：返回包含对象键名和键值的数组。</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line"> id: <span class="number">1</span>,</span><br><span class="line"> <span class="type">name</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"> age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line">console.log(<span class="keyword">Object</span>.keys(obj));   // 输出结果: [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">console.log(<span class="keyword">Object</span>.<span class="keyword">values</span>(obj)); // 输出结果: [<span class="number">1</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="number">18</span>]</span><br><span class="line">console.log(<span class="keyword">Object</span>.entries(obj));   // 输出结果: [[<span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>], [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure>

<p>注意</p>
<ul>
<li>Object.keys()方法返回的数组中的值都是字符串，也就是说不是字符串的 key 值会转化为字符串。</li>
<li>结果数组中的属性值都是对象本身可枚举的属性，不包括继承来的属性。</li>
</ul>
<h3 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames()"></a>Object.getOwnPropertyNames()</h3><p>Object.getOwnPropertyNames()方法与 Object.keys()类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但它能返回不可枚举的属性。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">let a = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>];</span><br><span class="line"></span><br><span class="line">Object.keys(a) <span class="regexp">//</span> [<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>]</span><br><span class="line">Object.getOwnPropertyNames(a) <span class="regexp">//</span> [<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;length&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>这两个方法都可以用来计算对象中属性的个数：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">var obj = &#123; <span class="number">0</span>: <span class="string">&quot;a&quot;</span>, <span class="number">1</span>: <span class="string">&quot;b&quot;</span>, <span class="number">2</span>: <span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">OwnPropertyNames(<span class="params">obj</span>)</span> <span class="comment">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>keys(obj).length <span class="comment">// 3</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">OwnPropertyNames(<span class="params">obj</span>)</span>.length <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-getOwnPropertySymbols"><a href="#Object-getOwnPropertySymbols" class="headerlink" title="Object.getOwnPropertySymbols()"></a>Object.getOwnPropertySymbols()</h3><p>Object.getOwnPropertySymbols() 方法返回对象自身的 Symbol 属性组成的数组，不包括字符串属性：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let obj = &#123;a: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 给对象添加一个不可枚举的 <span class="built_in">Symbol</span> 属性</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line"> [<span class="built_in">Symbol</span>(<span class="string">&#x27;baz&#x27;</span>)]: &#123;</span><br><span class="line">  value: <span class="string">&#x27;Symbol baz&#x27;</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 给对象添加一个可枚举的 <span class="built_in">Symbol</span> 属性</span><br><span class="line">obj[<span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)] = <span class="string">&#x27;Symbol foo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj).forEach(<span class="function"><span class="params">(key)</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(obj[key])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 输出结果：<span class="built_in">Symbol</span> baz <span class="built_in">Symbol</span> foo</span><br></pre></td></tr></table></figure>

<h3 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys()"></a>Reflect.ownKeys()</h3><p>Reflect.ownKeys() 返回一个数组，包含对象自身的所有属性。它和 Object.keys()类似，Object.keys()返回属性 key，但不包括不可枚举的属性，而 Reflect.ownKeys()会返回所有属性 key：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;method&#x27;</span>, &#123;</span><br><span class="line">	<span class="attr">value</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	    alert(<span class="string">&quot;Non enumerable property&quot;</span>)</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">enumerable</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj))</span><br><span class="line"><span class="comment">// [&quot;a&quot;, &quot;b&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(obj))</span><br><span class="line"><span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;method&quot;]</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>Object.keys() ：相当于返回对象属性数组；</li>
<li>Reflect.ownKeys() :相当于 Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj)。</li>
</ul>
<p>总结:</p>
<table>
<thead>
<tr>
<th>对象方法</th>
<th>遍历基本属性</th>
<th>遍历原型链</th>
<th>遍历不可枚举属性</th>
<th>遍历 Symbol</th>
</tr>
</thead>
<tbody><tr>
<td>for in</td>
<td>是</td>
<td>是</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td>Object.keys()</td>
<td>是</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td>Object.getOwnPropertyNames()</td>
<td>是</td>
<td>否</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>Object.getOwnPropertySymbols()</td>
<td>是</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>Reflect.ownKeys()</td>
<td>是</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
</tbody></table>
<h2 id="其他遍历方法"><a href="#其他遍历方法" class="headerlink" title="其他遍历方法"></a>其他遍历方法</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>for 循环是应该是最常见的循环方式了，它由三个表达式组成，分别是声明循环变量、判断循环条件、更新循环变量。这三个表达式用分号分隔。可以使用临时变量将数组的长度缓存起来，避免重复获取数组长度，当数组较大时优化效果会比较明显。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">const arr = <span class="selector-attr">[1,2,3,4,5]</span></span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">(let i = <span class="number">0</span>, len = arr.length; i &lt; len; i++ )</span></span>&#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(arr<span class="selector-attr">[i]</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在执行的时候，会先判断执行条件，再执行。for 循环可以用来遍历数组，字符串，类数组，DOM 节点等。可以改变原数组。</p>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>while 循环中的结束条件可以是各种类型，但是最终都会转为布尔值，转换规则如下。</p>
<ul>
<li>Boolean：true 为真，false 为假；</li>
<li>String：空字符串为假，所有非空字符串为真；</li>
<li>Number：0 为假，非 0 数字为真；</li>
<li>null/Undefined/NaN：全为假；</li>
<li>Object：全为真。</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">num</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">num</span> &lt; <span class="number">10</span>)&#123;</span><br><span class="line">   console.<span class="built_in">log</span>(<span class="built_in">num</span>);</span><br><span class="line">   <span class="built_in">num</span> ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>while 和 for 一样，都是先判断，再执行。只要指定条件为 true，循环就可以一直执行代码。</p>
<h3 id="do-while"><a href="#do-while" class="headerlink" title="do / while"></a>do / while</h3><p>该方法会先执行再判断，即使初始条件不成立，do/while 循环也至少会执行一次。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">num</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">num</span>);</span><br><span class="line">    <span class="built_in">num</span>--;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">num</span> &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">num</span>); //-<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>不建议使用 do / while 来遍历数组。</p>
<h3 id="for-await-of"><a href="#for-await-of" class="headerlink" title="for await of"></a>for await of</h3><p>for await…of 方法被称为异步迭代器，该方法是主要用来遍历异步对象。它是 ES2018 中引入的方法。</p>
<p>for await…of 语句会在异步或者同步可迭代对象上创建一个迭代循环，包括 String，Array，类数组，Map， Set 和自定义的异步或者同步可迭代对象。这个语句只能在 async function 内使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Gen</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       resolve(time)</span><br><span class="line">    &#125;,time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> arr = [Gen(<span class="number">2000</span>),Gen(<span class="number">100</span>),Gen(<span class="number">3000</span>)]</span><br><span class="line">   <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now(),item)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<img title="js循环方法" src="https://blog.img.wy1991.cn/static/images/js/jsxunhuan2.png-blogImg">
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>116-前端也需要懂nginx</title>
    <url>/20210921/116-%E5%89%8D%E7%AB%AF%E4%B9%9F%E9%9C%80%E8%A6%81%E6%87%82nginx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名前端，我们除了 node 作为服务以外，我们还有什么选择，那么简单容易上手的 Nginx 可以满足你的一切幻想。学习 nginx 可以让我们更加清晰前端项目上线的整个流程<br>作为一个前端，或多或少都会对 Nginx 有一些经验，那为什么还要学习那？ 不系统：以前可能你只会配置某项功能（网上搜集），都是碎片化的知识，不没有形成系统化。这样就导致你服务出现问题时，根本不知道从哪里下手来解决这些问题。</p>
<h2 id="Nginx-是什么？"><a href="#Nginx-是什么？" class="headerlink" title="Nginx 是什么？"></a>Nginx 是什么？</h2><p>nginx 官方介绍：</p>
<blockquote>
<p>“Nginx 是一款轻量级的 HTTP 服务器，采用事件驱动的异步非阻塞处理方式框架，这让其具有极好的 IO 性能，时常用于服务端的反向代理和负载均衡。</p>
</blockquote>
<h3 id="nginx-的优点"><a href="#nginx-的优点" class="headerlink" title="nginx 的优点"></a>nginx 的优点</h3><ul>
<li>支持海量高并发：采用 IO 多路复用 epoll。官方测试 Nginx 能够支持 5 万并发链接，实际生产环境中可以支撑 2-4 万并发连接数。</li>
<li>内存消耗少</li>
<li>可商业化</li>
<li>配置文件简单</li>
</ul>
<p>除了这些优点还有很多，比如反向代理功能，灰度发布，负载均衡功能等</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这里的文章不着重介绍怎么安装 nginx，但是也给大家留下了安装的教程地址，自取</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9uZ2lueC1pbnN0YWxsLXNldHVwLmh0bWw=">linux<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>如果是 centos 大家也可以直接用 yum 安装也是很方便的</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure>

<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdGFpeW9uZ2hhaS9wLzk0MDI3MzQuaHRtbA==">window<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAwNjUyODU4MzUzNzc4Njk1">通过 docker 安装（强烈推荐），熊猫之前弄过现成的，大家也可以拿来用<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<p>nginx.conf 文件是 nginx 总配置文件也是 nginx 读取配置的入口。</p>
<h3 id="nginx-文件介绍"><a href="#nginx-文件介绍" class="headerlink" title="nginx 文件介绍"></a>nginx 文件介绍</h3><p>nginx 我们最常用到的文件，其实就是 nginx 的配置文件，其他的文件我们就带过了，当你能熟练编写 nginx 文件，其实就等于熟练使用 nginx 了</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[wujianrong<span class="symbol">@localhost</span> ~]<span class="meta"># tree /usr/local/nginx</span></span><br><span class="line">/usr/<span class="keyword">local</span>/nginx</span><br><span class="line">├── client_body_temp</span><br><span class="line">├── conf                             <span class="meta"># Nginx所有配置文件的目录</span></span><br><span class="line">│   ├── fastcgi.conf                 <span class="meta"># fastcgi相关参数的配置文件</span></span><br><span class="line">│   ├── fastcgi.conf.<span class="literal">default</span>         <span class="meta"># fastcgi.conf的原始备份文件</span></span><br><span class="line">│   ├── fastcgi_params               <span class="meta"># fastcgi的参数文件</span></span><br><span class="line">│   ├── fastcgi_params.<span class="literal">default</span></span><br><span class="line">│   ├── koi-utf</span><br><span class="line">│   ├── koi-win</span><br><span class="line">│   ├── mime.types                   <span class="meta"># 媒体类型</span></span><br><span class="line">│   ├── mime.types.<span class="literal">default</span></span><br><span class="line">│   ├── nginx.conf                   <span class="meta"># Nginx主配置文件</span></span><br><span class="line">│   ├── nginx.conf.<span class="literal">default</span></span><br><span class="line">│   ├── scgi_params                  <span class="meta"># scgi相关参数文件</span></span><br><span class="line">│   ├── scgi_params.<span class="literal">default</span></span><br><span class="line">│   ├── uwsgi_params                 <span class="meta"># uwsgi相关参数文件</span></span><br><span class="line">│   ├── uwsgi_params.<span class="literal">default</span></span><br><span class="line">│   └── win-utf</span><br><span class="line">├── fastcgi_temp                     <span class="meta"># fastcgi临时数据目录</span></span><br><span class="line">├── html                             <span class="meta"># Nginx默认站点目录</span></span><br><span class="line">│   ├── <span class="number">50</span>x.html                     <span class="meta"># 错误页面优雅替代显示文件，例如当出现502错误时会调用此页面</span></span><br><span class="line">│   └── index.html                   <span class="meta"># 默认的首页文件</span></span><br><span class="line">├── logs                             <span class="meta"># Nginx日志目录</span></span><br><span class="line">│   ├── access.<span class="built_in">log</span>                   <span class="meta"># 访问日志文件</span></span><br><span class="line">│   ├── error.<span class="built_in">log</span>                    <span class="meta"># 错误日志文件</span></span><br><span class="line">│   └── nginx.pid                    <span class="meta"># pid文件，Nginx进程启动后，会把所有进程的ID号写到此文件</span></span><br><span class="line">├── proxy_temp                       <span class="meta"># 临时目录</span></span><br><span class="line">├── sbin                             <span class="meta"># Nginx命令目录</span></span><br><span class="line">│   └── nginx                        <span class="meta"># Nginx的启动命令</span></span><br><span class="line">├── scgi_temp                        <span class="meta"># 临时目录</span></span><br><span class="line">└── uwsgi_temp                       <span class="meta"># 临时目录</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置文件（重点）"><a href="#配置文件（重点）" class="headerlink" title="配置文件（重点）"></a>配置文件（重点）</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">conf <span class="regexp">//</span>nginx所有配置文件目录</span><br><span class="line">nginx.conf <span class="regexp">//</span>这个是Nginx的核心配置文件，这个文件非常重要，也是我们即将要学习的重点</span><br><span class="line">nginx.conf.default <span class="regexp">//</span>nginx.conf的备份文件</span><br></pre></td></tr></table></figure>

<h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span><span class="variable">s:</span> 记录入门的文件，当nginx服务器启动后</span><br><span class="line">这里面会有 access.<span class="built_in">log</span> error.<span class="built_in">log</span> 和nginx.pid三个文件出现。</span><br></pre></td></tr></table></figure>

<h4 id="资源目录"><a href="#资源目录" class="headerlink" title="资源目录"></a>资源目录</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">html <span class="regexp">//</span>存放nginx自带的两个静态的html页面</span><br><span class="line"><span class="number">50</span>x.html <span class="regexp">//</span>访问失败后的失败页面</span><br><span class="line">index.html <span class="regexp">//</span>成功访问的默认首页</span><br></pre></td></tr></table></figure>

<h4 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">fastcgi.conf:fastcgi  <span class="regexp">//</span>相关配置文件</span><br><span class="line">fastcgi.conf.default <span class="regexp">//</span>fastcgi.conf的备份文件</span><br><span class="line">fastcgi_params <span class="regexp">//</span>fastcgi的参数文件</span><br><span class="line">fastcgi_params.default <span class="regexp">//</span>fastcgi的参数备份文件</span><br><span class="line">scgi_params <span class="regexp">//</span>scgi的参数文件</span><br><span class="line">scgi_params.default <span class="regexp">//</span>scgi的参数备份文件</span><br><span class="line">uwsgi_params <span class="regexp">//u</span>wsgi的参数文件</span><br><span class="line">uwsgi_params.default <span class="regexp">//u</span>wsgi的参数备份文件</span><br><span class="line">mime.types <span class="regexp">//</span>记录的是HTTP协议中的Content-Type的值和文件后缀名的对应关系</span><br><span class="line">mime.types.default <span class="regexp">//mim</span>e.types的备份文件</span><br></pre></td></tr></table></figure>

<h4 id="编码文件"><a href="#编码文件" class="headerlink" title="编码文件"></a>编码文件</h4><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">koi-utf、koi-<span class="keyword">win</span>、<span class="keyword">win</span>-utf这三个文件都是与编码转换映射相关的配置文件，</span><br><span class="line">用来将一种编码转换成另一种编码</span><br></pre></td></tr></table></figure>

<h4 id="执行文件"><a href="#执行文件" class="headerlink" title="执行文件"></a>执行文件</h4><pre><code>  sbin: 是存放执行程序文件nginx
</code></pre>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><pre><code>  nginx: 是用来控制Nginx的启动和停止等相关的命令。
</code></pre>
<h3 id="nginx-常用命令"><a href="#nginx-常用命令" class="headerlink" title="nginx 常用命令"></a>nginx 常用命令</h3><h4 id="常见-2-种启动命令"><a href="#常见-2-种启动命令" class="headerlink" title="常见 2 种启动命令"></a>常见 2 种启动命令</h4><pre><code>  &gt; nginx //直接nginx启动，前提是配好nginx环境变量
  &gt; systemctl start nginx.service //使用systemctl命令启动
</code></pre>
<h4 id="常见的-4-种停止命令"><a href="#常见的-4-种停止命令" class="headerlink" title="常见的 4 种停止命令"></a>常见的 4 种停止命令</h4><pre><code>  &gt; nginx  -s stop //立即停止服务
  &gt; nginx -s quit // 从容停止服务 需要进程完成当前工作后再停止
  &gt; killall nginx //直接杀死nginx进程
  &gt; systemctl stop nginx.service //systemctl停止
</code></pre>
<h4 id="常见的-2-种重启命令"><a href="#常见的-2-种重启命令" class="headerlink" title="常见的 2 种重启命令"></a>常见的 2 种重启命令</h4><pre><code>  &gt; nginx -s reload //重启nginx
  &gt; systemctl reload nginx.service //systemctl重启nginx
</code></pre>
<h4 id="验证-nginx-配置文件是否正确"><a href="#验证-nginx-配置文件是否正确" class="headerlink" title="验证 nginx 配置文件是否正确"></a>验证 nginx 配置文件是否正确</h4><pre><code>  &gt; nginx -t //输出nginx.conf syntax is ok即表示nginx的配置文件正确
</code></pre>
<h3 id="nginx-配置详细介绍"><a href="#nginx-配置详细介绍" class="headerlink" title="nginx 配置详细介绍"></a>nginx 配置详细介绍</h3><h4 id="配置文件的结构介绍"><a href="#配置文件的结构介绍" class="headerlink" title="配置文件的结构介绍"></a>配置文件的结构介绍</h4><p>为了让大家有个简单的轮廓，这里先对配置文件做一个简单的描述：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>；                			<span class="comment"># worker进程的数量</span></span><br><span class="line">events &#123;                              			<span class="comment"># 事件区块开始</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>；          		<span class="comment"># 每个worker进程支持的最大连接数</span></span><br><span class="line">&#125;                               			<span class="comment"># 事件区块结束</span></span><br><span class="line">http &#123;                           			<span class="comment"># HTTP区块开始</span></span><br><span class="line">    <span class="attribute">include</span>       mime.types；         			<span class="comment"># Nginx支持的媒体类型库文件</span></span><br><span class="line">    default_type  application/octet-stream；            <span class="comment"># 默认的媒体类型</span></span><br><span class="line">    sendfile        <span class="literal">on</span>；       				<span class="comment"># 开启高效传输模式</span></span><br><span class="line">    keepalive_timeout  <span class="number">65</span>；       			<span class="comment"># 连接超时</span></span><br><span class="line">    server &#123;            		                <span class="comment"># 第一个Server区块开始，表示一个独立的虚拟主机站点</span></span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>；      			        <span class="comment"># 提供服务的端口，默认80</span></span><br><span class="line">        server_name  localhost；    			<span class="comment"># 提供服务的域名主机名</span></span><br><span class="line">        location / &#123;            	        	<span class="comment"># 第一个location区块开始</span></span><br><span class="line">            <span class="attribute">root</span>   html；       			<span class="comment"># 站点的根目录，相当于Nginx的安装目录</span></span><br><span class="line">            index  index.html index.htm；       	<span class="comment"># 默认的首页文件，多个用空格分开</span></span><br><span class="line">        &#125;          				        <span class="comment"># 第一个location区块结果</span></span><br><span class="line">        error_page   <span class="number">500502503504</span>  /50x.html；          <span class="comment"># 出现对应的http状态码时，使用50x.html回应客户</span></span><br><span class="line">        location = /50x.html &#123;          	        <span class="comment"># location区块开始，访问50x.html</span></span><br><span class="line">            <span class="attribute">root</span>   html；      		      	        <span class="comment"># 指定对应的站点目录为html</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>ngxin.conf 相当于是入口文件，nginx 启动后会先从 nginx.conf 里面读取基础配置</li>
<li>conf 目录下面的各种 xxx.conf 文件呢，一般就是每一个应用的配置，比如 a 网站的 nginx 配置叫 a.conf，b 网站的叫 b.conf，可以方便我们去便于管理</li>
<li>加载 conf 目录下的配置，在主配置文件 nginx.conf 中，一般会有这么一行代码</li>
</ol>
<h4 id="nginx-conf-主配置文件详细介绍"><a href="#nginx-conf-主配置文件详细介绍" class="headerlink" title="nginx.conf 主配置文件详细介绍"></a>nginx.conf 主配置文件详细介绍</h4><p>具体文章看掘金链接 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA3MzQ2NzA3NzY3NzU0NzY1">链接<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>117-巧用CSS filter，让你的网站更加酷炫！</title>
    <url>/20210921/117-%E5%B7%A7%E7%94%A8CSS-filter%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E6%9B%B4%E5%8A%A0%E9%85%B7%E7%82%AB%EF%BC%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><p>我们在处理图片时，经常使用的一个功能就是滤镜，它能使一张图像呈现各种不同的视觉效果。</p>
<p>在 CSS 中，也有一个 filter 属性，让我们能用 CSS 代码为元素指定各种滤镜效果，比如模糊、灰度、明暗度、颜色偏移等。<br>CSS filter 的基础使用非常简单，CSS 标准里包含了一些已实现预定义效果的函数（下面 blur、brightness、contrast 等），我们可以通过指定这些函数的值来实现想要的效果：</p>
<p>滤镜在日常开发中是很常见的，比如使用 drop-shadow 给不规则形状添加阴影；使用 blur 来实现背景模糊，以及毛玻璃效果等。<br>下面我们将进一步使用 CSS filter 实现一些动画效果，让网站交互更加酷炫，同时也加深对 CSS filter 的理解。一起开始吧！<br>（ 下面要使用到的 动画 和 伪类 知识，在 CSS 的 N 个编码技巧 中都有详细的介绍，这里就不重复了，有需要的朋友可以前往查看哦。 ）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAyODI5NDg2ODA2Nzk0Mjc2">链接<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>118-使用模块化工具打包自己开发的JS库</title>
    <url>/20210922/118-%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97%E5%8C%96%E5%B7%A5%E5%85%B7%E6%89%93%E5%8C%85%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84JS%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>我第一个想到的就是用 webpack 打包，毕竟工作经常用 React 开发，最后打包项目用的就是它。</p>
<p>基于 webpack4.x 版本</p>
<blockquote>
<p>npm i webpack webpack-cli –save-dev</p>
</blockquote>
<p>webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// production</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&#x27;/dist/&#x27;</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;monitor.js&#x27;</span>,</span><br><span class="line">        <span class="attr">libraryTarget</span>: <span class="string">&#x27;commonjs2&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span> <span class="comment">// 小程序不支持eval-source-map</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">var<span class="built_in"> monitor </span>= require(&#x27;./dist/monitor.js&#x27;);</span><br><span class="line">console.log(monitor);</span><br><span class="line"></span><br><span class="line">//var<span class="built_in"> monitor </span>= require(&#x27;./dist/monitor.js&#x27;).default;</span><br><span class="line">//monitor.init(&#x27;45454&#x27;);</span><br></pre></td></tr></table></figure>

<p>其实，使用 webpack 打包纯 JS 类库是很简单的，比我们平时开发一个应用，配置少了很多，毕竟不需要打包 css，html，图片，字体这些静态资源，也不用按需加载。</p>
<h2 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a>rollup</h2><p>特意看了下 Vue 和 React 是怎么打包代码的，结果发现，这俩都没使用 webpack，而是使用了 rollup。</p>
<blockquote>
<p>npm install –global rollup</p>
</blockquote>
<p>新建一个 rollup.config.js</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  <span class="meta">input</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="meta">output</span>: &#123;</span><br><span class="line">    <span class="meta">file</span>: <span class="string">&#x27;./dist/monitor.js&#x27;</span>,</span><br><span class="line">    <span class="meta">format</span>: <span class="string">&#x27;cjs&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>format: cjs 指定打包后的文件符合 commonjs 规范</p>
<p>运行 rollup -c</p>
<p>这时会报错，说[!] Error: Could not resolve ‘../util’ from src\module\Engine.js</p>
<p>这是因为，rollup 识别../util/时，并不会自动去查找 util 目录下的 index.js 文件(webpack 默认会去查找)，所以我们需要改成../util/index</p>
<p>rollup 打包</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">var<span class="built_in"> monitor </span>= require(&#x27;./dist/monitor.js&#x27;);</span><br><span class="line">monitor.init(&#x27;45454&#x27;);</span><br></pre></td></tr></table></figure>

<p>同样，平时开发时我们可以直接 rollup -c -w，最后打包时，也要进行压缩</p>
<blockquote>
<p>npm i rollup-plugin-uglify -D</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; uglify &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-uglify&#x27;</span>;</span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">input</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: <span class="string">&#x27;./dist/monitor.js&#x27;</span>,</span><br><span class="line">    <span class="keyword">format</span>: <span class="string">&#x27;cjs&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    uglify()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然而这样运行会报错，因为 uglify 插件只支持 es5 的压缩，而我这次开发的 sdk 并不需要转成 es5，所以换一个插件</p>
<blockquote>
<p>npm i rollup-plugin-terser -D</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-terser&#x27;</span>;</span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">input</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    file: <span class="string">&#x27;./dist/monitor.js&#x27;</span>,</span><br><span class="line">    <span class="keyword">format</span>: <span class="string">&#x27;cjs&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    terser()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然，你也可以使用 babel 转码</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm i rollup-plugin-terser <span class="keyword">babel-core </span><span class="keyword">babel-preset-latest </span><span class="keyword">babel-plugin-external-helpers </span>-D</span><br></pre></td></tr></table></figure>

<p>.babelrc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">    [<span class="string">&quot;latest&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">&quot;es2015&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;modules&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [<span class="string">&quot;external-helpers&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rollup.config.js</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-terser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-babel&#x27;</span>;</span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="keyword">input</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        file: <span class="string">&#x27;./dist/monitor.js&#x27;</span>,</span><br><span class="line">        <span class="keyword">format</span>: <span class="string">&#x27;cjs&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        babel(&#123;</span><br><span class="line">            <span class="keyword">exclude</span>: <span class="string">&#x27;node_modules/**&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        terser()</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>rollup 通常适用于打包 JS 类库，通过 rollup 打包后的代码，体积较小，而且没有冗余的代码。rollup 默认只支持 ES6 的模块化，如果需要支持 Commonjs，还需下载相应的插件 rollup-plugin-commonjs</p>
<p>webpack 通常适用于打包一个应用，如果你需要代码拆分(Code Splitting)或者你有很多静态资源需要处理，那么可以考虑使用 webpack</p>
<p>具体看文档<span class="exturl" data-url="aHR0cHM6Ly93d3cucm9sbHVwanMuY29tLw==">rollup<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>119-Vue首屏加载优化之使用CND资源</title>
    <url>/20210922/119-Vue%E9%A6%96%E5%B1%8F%E5%8A%A0%E8%BD%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E4%BD%BF%E7%94%A8CND%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>vue 项目线上首屏加载速度非常慢，查看网络中加载的资源文件发现 main.js 文件大小为 3.6MB，加载速度也是高达 6.5s，已经严重影响了用户的体验效果。经过查看发现项目本地打包后 main.js 大小也是高达三十多兆，为了减少 main.js 文件打包后的大小，查阅了众多经验文章后，发现使用 CDN 替代 package 引入后，体积可以大大减少。</p>
<p>像 echars 这种比较大的库，不要挂载比较大的库，一般使用到的地方不多按需加载就行。</p>
<h2 id="使用-CND-资源"><a href="#使用-CND-资源" class="headerlink" title="使用 CND 资源"></a>使用 CND 资源</h2><p>进入正题，这里修改了 vue、vue-router、vuex、element-ui 和 mint-ui。</p>
<p>首先修改模板文件 index.html 注意对应之前版本号。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">&lt;!-- element-ui 组件引入样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/element-ui/2.5.4/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mint-ui 组件引入样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/mint-ui/2.2.13/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.5.2/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入vuex --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vuex/3.0.1/vuex.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入vue-router --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入element-ui组件库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/element-ui/2.5.4/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入mint-ui组件库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/mint-ui/2.2.13/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 vue.config.js 里面加上</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"> ···</span><br><span class="line">···</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    <span class="built_in">resolve</span>: &#123;</span><br><span class="line">      extension<span class="variable">s:</span> [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.scss&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>],</span><br><span class="line">      alia<span class="variable">s:</span> &#123;</span><br><span class="line">       ···</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    external<span class="variable">s:</span> &#123;</span><br><span class="line">      <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vuex&#x27;</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;element-ui&#x27;</span>: <span class="string">&#x27;ELEMENT&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Axios&#x27;</span>:<span class="string">&#x27;axios&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改 src/router/index.js</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 注释掉</span><br><span class="line"><span class="regexp">//</span> import Vue from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">import VueRouter from <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="regexp">//</span> 注释掉</span><br><span class="line"><span class="regexp">//</span> Vue.use(Router)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>修改 src/store/index.js</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="regexp">//</span> 注释掉</span><br><span class="line"><span class="regexp">//</span> Vue.use(Vuex)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>最后修改 src/main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ELEMENT <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line">Vue.use(ELEMENT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;Axios&#x27;</span></span><br><span class="line">Vue.prototype.$axios= axios</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">router</span>: router,</span><br><span class="line">  <span class="attr">store</span>: store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>注意，这里 element-ui 变量名要使用 ELEMENT，因为 element-ui 的 umd 模块名是 ELEMENT</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>js-call/apply/bind区别</title>
    <url>/20210629/12-js-call-apply-bind%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="apply-bind-call"><a href="#apply-bind-call" class="headerlink" title="apply bind call"></a>apply bind call</h3><pre><code>    call 和apply 功能一样，都是改变this指向，都是立即执行
    还可以借用别的方法
    不同的是参数不一样， call后面可以一直跟参数
    apply 后面则是数组
    bind  返回一个函数，主要作用改变this固定参数
</code></pre>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bf = fn.bind(<span class="string">&#x27;this is bind&#x27;</span>, <span class="number">11</span>)</span><br><span class="line"><span class="built_in">console</span>.log(bf()) <span class="comment">// this is bind  a = 11</span></span><br><span class="line"><span class="built_in">console</span>.log(bf(<span class="number">22</span>)) <span class="comment">// this is bind a = 11 b =22</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a + x + y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>, <span class="number">10</span>) <span class="comment">//30</span></span><br><span class="line"></span><br><span class="line">sum.call(obj, <span class="number">10</span>, <span class="number">10</span>) <span class="comment">//40</span></span><br><span class="line"></span><br><span class="line">sum.apply(obj, [<span class="number">10</span>, <span class="number">10</span>]) <span class="comment">//40</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">//因为arr是数组，所以不能用call，需要用apply</span></span><br><span class="line"><span class="comment">//数组没有max 方法，所以通过apply 用null原型链的</span></span><br><span class="line"><span class="keyword">let</span> maxNum = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr)</span><br><span class="line"><span class="built_in">console</span>.log(maxNum)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">                bind 主要是绑定this和固定参数</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bf = fn.bind(<span class="string">&#x27;this is bind&#x27;</span>, <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bf()) <span class="comment">// this is bind  a = 11</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bf(<span class="number">22</span>)) <span class="comment">// this is bind a = 11 b =22</span></span><br></pre></td></tr></table></figure>

<h3 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.call(foo) <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  context.fn = <span class="built_in">this</span></span><br><span class="line">  context.fn()</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.call2(foo) <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>apply</tag>
        <tag>bind</tag>
        <tag>call</tag>
      </tags>
  </entry>
  <entry>
    <title>120-js 实现以鼠标位置为中心滚轮缩放图片</title>
    <url>/20210922/120-js-%E5%AE%9E%E7%8E%B0%E4%BB%A5%E9%BC%A0%E6%A0%87%E4%BD%8D%E7%BD%AE%E4%B8%BA%E4%B8%AD%E5%BF%83%E6%BB%9A%E8%BD%AE%E7%BC%A9%E6%94%BE%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><img title="demo" src="https://blog.img.wy1991.cn/static/images/js/wheel.webp-blogImg">

<p>不知道各位前端小伙伴蓝湖使用的多不多，反正我是经常在用，ui 将原型图设计好后上传至蓝湖，前端开发人人员就可以开始静态页面的的编写了。对于页面细节看的不是很清楚可以使用滚轮缩放后再拖拽查看，还是很方便的。于是就花了点时间研究了一下。今天分享给大家。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=&quot;<span class="symbol">container</span>&quot;&gt;</span><br><span class="line">    &lt;<span class="symbol">img</span> <span class="symbol">id</span>=&quot;<span class="symbol">image</span>&quot; <span class="symbol">alt</span>=&quot;&quot;&gt;</span><br><span class="line">&lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">&lt;<span class="symbol">div</span> <span class="symbol">class</span>=&quot;<span class="symbol">log</span>&quot;&gt;&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>设置图片宽高且居中展示</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取dom</span></span><br><span class="line"><span class="keyword">const</span> container = document.querySelector(<span class="string">&#x27;.container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">image</span> = document.getElementById(<span class="string">&#x27;image&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">log</span> = document.querySelector(<span class="string">&#x27;.log&#x27;</span>);</span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line">let result,</span><br><span class="line">    x,</span><br><span class="line">    y,</span><br><span class="line">    <span class="built_in">scale</span> = <span class="number">1</span>,</span><br><span class="line">    isPointerdown = <span class="keyword">false</span>, <span class="comment">// 按下标识</span></span><br><span class="line">    <span class="built_in">point</span> = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;, <span class="comment">// 第一个点坐标</span></span><br><span class="line">    diff = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;, <span class="comment">// 相对于上一次pointermove移动差值</span></span><br><span class="line">    lastPointermove = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;; <span class="comment">// 用于计算diff</span></span><br><span class="line"><span class="comment">// 图片加载完成后再绑定事件</span></span><br><span class="line"><span class="built_in">image</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, function () &#123;</span><br><span class="line">    result = getImgSize(<span class="built_in">image</span>.naturalWidth, <span class="built_in">image</span>.naturalHeight, window.innerWidth, window.innerHeight);</span><br><span class="line">    <span class="built_in">image</span>.style.<span class="built_in">width</span> = result.<span class="built_in">width</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    <span class="built_in">image</span>.style.<span class="built_in">height</span> = result.<span class="built_in">height</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    x = (window.innerWidth - result.<span class="built_in">width</span>) * <span class="number">0.5</span>;</span><br><span class="line">    y = (window.innerHeight - result.<span class="built_in">height</span>) * <span class="number">0.5</span>;</span><br><span class="line">    <span class="built_in">image</span>.style.transform = <span class="string">&#x27;translate3d(&#x27;</span> + x + <span class="string">&#x27;px, &#x27;</span> + y + <span class="string">&#x27;px, 0) scale(1)&#x27;</span>;</span><br><span class="line">    <span class="comment">// 拖拽查看</span></span><br><span class="line">    drag();</span><br><span class="line">    <span class="comment">// 滚轮缩放</span></span><br><span class="line">    wheelZoom();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">image</span>.src = <span class="string">&#x27;../images/liya.jpg&#x27;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取图片缩放尺寸</span></span><br><span class="line"><span class="comment">* @param &#123;number&#125; naturalWidth</span></span><br><span class="line"><span class="comment">* @param &#123;number&#125; naturalHeight</span></span><br><span class="line"><span class="comment">* @param &#123;number&#125; maxWidth</span></span><br><span class="line"><span class="comment">* @param &#123;number&#125; maxHeight</span></span><br><span class="line"><span class="comment">* @returns</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">function getImgSize(naturalWidth, naturalHeight, maxWidth, maxHeight) &#123;</span><br><span class="line">    <span class="keyword">const</span> imgRatio = naturalWidth / naturalHeight;</span><br><span class="line">    <span class="keyword">const</span> maxRatio = maxWidth / maxHeight;</span><br><span class="line">    let <span class="built_in">width</span>, <span class="built_in">height</span>;</span><br><span class="line">    <span class="comment">// 如果图片实际宽高比例 &gt;= 显示宽高比例</span></span><br><span class="line">    <span class="keyword">if</span> (imgRatio &gt;= maxRatio) &#123;</span><br><span class="line">        <span class="keyword">if</span> (naturalWidth &gt; maxWidth) &#123;</span><br><span class="line">            <span class="built_in">width</span> = maxWidth;</span><br><span class="line">            <span class="built_in">height</span> = maxWidth / naturalWidth * naturalHeight;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">width</span> = naturalWidth;</span><br><span class="line">            <span class="built_in">height</span> = naturalHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (naturalHeight &gt; maxHeight) &#123;</span><br><span class="line">            <span class="built_in">width</span> = maxHeight / naturalHeight * naturalWidth;</span><br><span class="line">            <span class="built_in">height</span> = maxHeight;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">width</span> = naturalWidth;</span><br><span class="line">            <span class="built_in">height</span> = naturalHeight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="built_in">width</span>: <span class="built_in">width</span>, <span class="built_in">height</span>: <span class="built_in">height</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拖拽查看图片逻辑</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拖拽查看</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 绑定 pointerdown</span></span><br><span class="line">    image.addEventListener(<span class="string">&#x27;pointerdown&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        isPointerdown = <span class="literal">true</span>;</span><br><span class="line">        image.setPointerCapture(e.pointerId);</span><br><span class="line">        <span class="built_in">point</span> = &#123; <span class="attribute">x</span>: e.clientX, <span class="attribute">y</span>: e.clientY &#125;;</span><br><span class="line">        lastPointermove = &#123; <span class="attribute">x</span>: e.clientX, <span class="attribute">y</span>: e.clientY &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 绑定 pointermove</span></span><br><span class="line">    image.addEventListener(<span class="string">&#x27;pointermove&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isPointerdown) &#123;</span><br><span class="line">            <span class="keyword">const</span> current1 = &#123; <span class="attribute">x</span>: e.clientX, <span class="attribute">y</span>: e.clientY &#125;;</span><br><span class="line">            diff.x = current1.x - lastPointermove.x;</span><br><span class="line">            diff.y = current1.y - lastPointermove.y;</span><br><span class="line">            lastPointermove = &#123; <span class="attribute">x</span>: current1.x, <span class="attribute">y</span>: current1.y &#125;;</span><br><span class="line">            x += diff.x;</span><br><span class="line">            y += diff.y;</span><br><span class="line">            image.style.transform = <span class="string">&#x27;translate3d(&#x27;</span> + x + <span class="string">&#x27;px, &#x27;</span> + y + <span class="string">&#x27;px, 0) scale(&#x27;</span> + scale + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            log.innerHTML = <span class="string">`x = <span class="subst">$&#123;x.toFixed(0)&#125;</span>&lt;br&gt;y = <span class="subst">$&#123;y.toFixed(0)&#125;</span>&lt;br&gt;scale = <span class="subst">$&#123;scale.toFixed(5)&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 绑定 pointerup</span></span><br><span class="line">    image.addEventListener(<span class="string">&#x27;pointerup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isPointerdown) &#123;</span><br><span class="line">            isPointerdown = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 绑定 pointercancel</span></span><br><span class="line">    image.addEventListener(<span class="string">&#x27;pointercancel&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isPointerdown) &#123;</span><br><span class="line">            isPointerdown = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>滚轮缩放逻辑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 滚轮缩放</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wheelZoom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    container.addEventListener(<span class="string">&#x27;wheel&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> ratio = <span class="number">1.1</span>;</span><br><span class="line">        <span class="comment">// 缩小</span></span><br><span class="line">        <span class="keyword">if</span> (e.deltaY &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ratio = <span class="number">0.9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 目标元素是img说明鼠标在img上，以鼠标位置为缩放中心，否则默认以图片中心点为缩放中心</span></span><br><span class="line">        <span class="keyword">if</span> (e.target.tagName === <span class="string">&#x27;IMG&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> origin = &#123;</span><br><span class="line">                <span class="attr">x</span>: (ratio - <span class="number">1</span>) * result.width * <span class="number">0.5</span>,</span><br><span class="line">                <span class="attr">y</span>: (ratio - <span class="number">1</span>) * result.height * <span class="number">0.5</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 计算偏移量</span></span><br><span class="line">            x -= (ratio - <span class="number">1</span>) * (e.clientX - x) - origin.x;</span><br><span class="line">            y -= (ratio - <span class="number">1</span>) * (e.clientY - y) - origin.y;</span><br><span class="line">        &#125;</span><br><span class="line">        scale *= ratio;</span><br><span class="line">        image.style.transform = <span class="string">&#x27;translate3d(&#x27;</span> + x + <span class="string">&#x27;px, &#x27;</span> + y + <span class="string">&#x27;px, 0) scale(&#x27;</span> + scale + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        log.innerHTML = <span class="string">`x = <span class="subst">$&#123;x.toFixed(<span class="number">0</span>)&#125;</span>&lt;br&gt;y = <span class="subst">$&#123;y.toFixed(<span class="number">0</span>)&#125;</span>&lt;br&gt;scale = <span class="subst">$&#123;scale.toFixed(<span class="number">5</span>)&#125;</span>`</span>;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>121-Vue3插槽中传递事件方法</title>
    <url>/20210924/121-Vue3%E6%8F%92%E6%A7%BD%E4%B8%AD%E4%BC%A0%E9%80%92%E4%BA%8B%E4%BB%B6%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2><blockquote>
<p>业务场景，动态组件中有插槽，然后需要每个子组件接收这两个点击事件</p>
</blockquote>
<p>父组件</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&#x27;currentComponent&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">template</span> #<span class="attr">btn</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;handleClick&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn w-full flex justify-center mt-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  @<span class="attr">click</span>=<span class="string">&quot;handleClick(&#x27;enter&#x27;)&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick(&#x27;cancel&#x27;)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                   &gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure>

<p>子组件</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">&lt;slot name=<span class="string">&quot;btn&quot;</span></span><br><span class="line">      <span class="symbol">:handleClick=<span class="string">&quot;handleClickSave&quot;</span>&gt;&lt;/slot&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>插槽</tag>
        <tag>slot</tag>
      </tags>
  </entry>
  <entry>
    <title>122-Vue3注册全局组件</title>
    <url>/20210924/122-Vue3%E6%B3%A8%E5%86%8C%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="component"><a href="#component" class="headerlink" title="component"></a>component</h2><p>在 src 下创建 plugin 目录</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">pulgin</span><br><span class="line">  - <span class="built_in">index</span>.<span class="keyword">ts</span></span><br><span class="line">  - regiser-element.<span class="keyword">ts</span></span><br><span class="line">  - register-cpn.<span class="keyword">ts</span></span><br><span class="line">  - register-filters.<span class="keyword">ts</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>index.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; registerElement &#125; <span class="keyword">from</span> <span class="string">&#x27;./regiser-element&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; registerCpn &#125; <span class="keyword">from</span> <span class="string">&#x27;./register-cpn&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> registerFilters <span class="keyword">from</span> <span class="string">&#x27;./register-filters&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">globalRegister</span>(<span class="params">app: App</span>) </span>&#123;</span><br><span class="line">  registerElement(app)</span><br><span class="line">  registerCpn(app)</span><br><span class="line">  registerFilters(app)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export default &#123;</span></span><br><span class="line"><span class="comment">//   install: (app: App, options?: any) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     registerElement(app)</span></span><br><span class="line"><span class="comment">//     console.log(options);</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>register-cpn.ts</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> WSelect <span class="keyword">from</span> <span class="string">&#x27;@/components/w-select&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">  WSelect</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">registerCpn</span>(<span class="params">app: App</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> component <span class="keyword">of</span> components) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(component.name);</span><br><span class="line"></span><br><span class="line">    app.component(component.name, component)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>regiser-element.ts</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">import &#123; App &#125; from <span class="string">&quot;vue&quot;</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line"><span class="built_in">  ElAffix,</span></span><br><span class="line"><span class="built_in">  ElButton,</span></span><br><span class="line"><span class="built_in">  ElCheckbox,</span></span><br><span class="line"><span class="built_in">  ElCheckboxGroup,</span></span><br><span class="line"><span class="built_in">  ElCol,</span></span><br><span class="line"><span class="built_in">  ElDatePicker,</span></span><br><span class="line"><span class="built_in">  ElDescriptions,</span></span><br><span class="line"><span class="built_in">  ElDescriptionsItem,</span></span><br><span class="line"><span class="built_in">  ElDialog,</span></span><br><span class="line"><span class="built_in">  ElDivider,</span></span><br><span class="line"><span class="built_in">  ElDropdown,</span></span><br><span class="line"><span class="built_in">  ElDropdownItem,</span></span><br><span class="line"><span class="built_in">  ElDropdownMenu,</span></span><br><span class="line"><span class="built_in">  ElForm,</span></span><br><span class="line"><span class="built_in">  ElFormItem,</span></span><br><span class="line"><span class="built_in">  ElInput,</span></span><br><span class="line"><span class="built_in">  ElInputNumber,</span></span><br><span class="line"><span class="built_in">  ElMenu,</span></span><br><span class="line"><span class="built_in">  ElMenuItem,</span></span><br><span class="line"><span class="built_in">  ElMenuItemGroup,</span></span><br><span class="line"><span class="built_in">  ElOption,</span></span><br><span class="line"><span class="built_in">  ElPagination,</span></span><br><span class="line"><span class="built_in">  ElRadio,</span></span><br><span class="line"><span class="built_in">  ElRadioGroup,</span></span><br><span class="line"><span class="built_in">  ElRow,</span></span><br><span class="line"><span class="built_in">  ElSelect,</span></span><br><span class="line"><span class="built_in">  ElSubmenu,</span></span><br><span class="line"><span class="built_in">  ElSwitch,</span></span><br><span class="line"><span class="built_in">  ElTable,</span></span><br><span class="line"><span class="built_in">  ElTableColumn,</span></span><br><span class="line"><span class="built_in">  ElTabPane,</span></span><br><span class="line"><span class="built_in">  ElTabs,</span></span><br><span class="line"><span class="built_in">  ElTag,</span></span><br><span class="line"><span class="built_in">  ElTimePicker,</span></span><br><span class="line">  ElTooltip</span><br><span class="line">&#125; from &#x27;element-plus&#x27;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">const components = [</span><br><span class="line"><span class="built_in">  ElButton,</span></span><br><span class="line"><span class="built_in">  ElSelect,</span></span><br><span class="line"><span class="built_in">  ElInput,</span></span><br><span class="line"><span class="built_in">  ElForm,</span></span><br><span class="line"><span class="built_in">  ElFormItem,</span></span><br><span class="line"><span class="built_in">  ElOption,</span></span><br><span class="line"><span class="built_in">  ElMenu,</span></span><br><span class="line"><span class="built_in">  ElMenuItem,</span></span><br><span class="line"><span class="built_in">  ElMenuItemGroup,</span></span><br><span class="line"><span class="built_in">  ElSubmenu,</span></span><br><span class="line"><span class="built_in">  ElTabs,</span></span><br><span class="line"><span class="built_in">  ElTabPane,</span></span><br><span class="line"><span class="built_in">  ElCheckbox,</span></span><br><span class="line"><span class="built_in">  ElRadioGroup,</span></span><br><span class="line"><span class="built_in">  ElRadio,</span></span><br><span class="line"><span class="built_in">  ElCheckboxGroup,</span></span><br><span class="line"><span class="built_in">  ElRow,</span></span><br><span class="line"><span class="built_in">  ElCol,</span></span><br><span class="line"><span class="built_in">  ElTimePicker,</span></span><br><span class="line"><span class="built_in">  ElDatePicker,</span></span><br><span class="line"><span class="built_in">  ElTag,</span></span><br><span class="line"><span class="built_in">  ElTable,</span></span><br><span class="line"><span class="built_in">  ElTableColumn,</span></span><br><span class="line"><span class="built_in">  ElSwitch,</span></span><br><span class="line"><span class="built_in">  ElTooltip,</span></span><br><span class="line"><span class="built_in">  ElPagination,</span></span><br><span class="line"><span class="built_in">  ElDescriptions,</span></span><br><span class="line"><span class="built_in">  ElDescriptionsItem,</span></span><br><span class="line"><span class="built_in">  ElAffix,</span></span><br><span class="line"><span class="built_in">  ElDialog,</span></span><br><span class="line"><span class="built_in">  ElDivider,</span></span><br><span class="line"><span class="built_in">  ElInputNumber,</span></span><br><span class="line"><span class="built_in">  ElDropdown,</span></span><br><span class="line"><span class="built_in">  ElDropdownMenu,</span></span><br><span class="line">  ElDropdownItem</span><br><span class="line">]</span><br><span class="line"><span class="title">export function registerElement(app: App):</span> void &#123;</span><br><span class="line">  for (const component of components) &#123;</span><br><span class="line">    app.component(component.name, component)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>register-filters.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">registerFilters</span>(<span class="params">app: App</span>) </span>&#123;</span><br><span class="line">  app.config.globalProperties.$filters = &#123;</span><br><span class="line">    <span class="function"><span class="title">formatDate</span>(<span class="params">time: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;2022-10-10 22:22:22&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后在 main.ts 中引入</p>
<blockquote>
<p>import { globalRegister } from ‘./plugin’;</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">const app = createApp(App)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册element 按需引入</span></span><br><span class="line"><span class="function"><span class="title">globalRegister</span><span class="params">(app)</span></span></span><br><span class="line"></span><br><span class="line">app<span class="selector-class">.config</span><span class="selector-class">.globalProperties</span>.<span class="variable">$ELEMENT</span> = &#123; size: <span class="string">&#x27;small&#x27;</span>, zIndex: <span class="number">3000</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app<span class="selector-class">.use</span>(store)<span class="selector-class">.use</span>(router)<span class="selector-class">.mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>注意:组件内一定要有 name 因为注册会用到<code> app.component(component.name, component)</code></p>
<p>关于 register-filters 的用法, 通过<code>app.config.globalProperties</code>挂载到 Vue 上成为全局属性</p>
<p>直接在 Vue template 中使用<br><code>&#123;&#123; $filters.formatDate("2222220202") &#125;&#125;</code></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>123-jenkins自动化部署详情</title>
    <url>/20210927/123-jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%AF%A6%E6%83%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="jenkins-自动化部署"><a href="#jenkins-自动化部署" class="headerlink" title="jenkins 自动化部署"></a>jenkins 自动化部署</h2><h4 id="安装-Java-环境"><a href="#安装-Java-环境" class="headerlink" title="安装 Java 环境"></a>安装 Java 环境</h4><p>Jenkins 本身是依赖 Java 的，所以我们需要先安装 Java 环境：</p>
<ul>
<li>这里我安装了 Java1.8 的环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf search java-1.8</span><br><span class="line">dnf install java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure>

<h4 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h4><p>因为 Jenkins 本身是没有在 dnf 的软件仓库包中的，所以我们需要连接 Jenkins 仓库：</p>
<ul>
<li>wget 是 Linux 中下载文件的一个工具，-O 表示输出到某个文件夹并且命名为什么文件；</li>
<li>rpm：全称为<strong>The RPM Package Manage</strong>，是 Linux 下一个软件包管理器；</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget –O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入GPG密钥以确保您的软件合法</span></span><br><span class="line">rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key</span><br></pre></td></tr></table></figure>

<p>编辑一下文件/etc/yum.repos.d/jenkins.repo</p>
<ul>
<li>可以通过 vim 编辑</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[jenkins]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name</span>=Jenkins-stable</span><br><span class="line"></span><br><span class="line"><span class="attr">baseurl</span>=http://pkg.jenkins.io/redhat</span><br><span class="line"></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>安装 Jenkins</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf install jenkins # --nogpgcheck(可以不加)</span><br></pre></td></tr></table></figure>

<p>启动 Jenkins 的服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start jenkins</span><br><span class="line">systemctl status jenkins</span><br><span class="line">systemctl enable jenkins</span><br></pre></td></tr></table></figure>

<p>Jenkins 默认使用 8080 端口提供服务，所以需要加入到安全组中：</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glbyeoz6tqj315w0bzmzj.jpg" alt="image-20201204173117359"></p>
<h4 id="安装-Jenkins-第二种方法"><a href="#安装-Jenkins-第二种方法" class="headerlink" title="安装 Jenkins 第二种方法"></a>安装 Jenkins 第二种方法</h4><p>centos 下搭建 Jenkins 持续集成环境(安装 jenkins)<br>1、安装 JDK</p>
<p><code>yum install -y java</code><br>2、安装 jenkins</p>
<p>添加 Jenkins 库到 yum 库，Jenkins 将从这里下载安装。</p>
<pre><code>  1 wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
  2 rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
  3 yum install -y jenkins
</code></pre>
<p>如果不能安装就到官网下载 jenkis 的 rmp 包，官网地址（<span class="exturl" data-url="aHR0cDovL3BrZy5qZW5raW5zLWNpLm9yZy9yZWRoYXQtc3RhYmxlLyVFRiVCQyU4OQ==">http://pkg.jenkins-ci.org/redhat-stable/）<i class="fa fa-external-link-alt"></i></span></p>
<pre><code>  1 wget http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.3-1.1.noarch.rpm
  2 rpm -ivh jenkins-2.7.3-1.1.noarch.rpm
</code></pre>
<p>配置 jenkis 的端口</p>
<p><code>vi /etc/sysconfig/jenkins</code><br>找到修改端口号：</p>
<p>JENKINS_PORT=”8080” 此端口不冲突可以不修改</p>
<p>3、启动 jenkins</p>
<h4 id="Jenkins-用户"><a href="#Jenkins-用户" class="headerlink" title="Jenkins 用户"></a>Jenkins 用户</h4><p>我们后面会访问 centos 中的某些文件夹，默认 Jenkins 使用的用户是 <code>jenkins</code>，可能会没有访问权限，所以我们需要修改一下它的用户：</p>
<p>修改文件的路径：<code>/etc/sysconfig/jenkins</code></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt46oxg53j60n00aw75302.jpg" alt="image-20210825162827962"></p>
<p>之后需要重启一下 Jenkins：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure>

<h4 id="Jenkins-配置"><a href="#Jenkins-配置" class="headerlink" title="Jenkins 配置"></a>Jenkins 配置</h4><p>打开浏览器，输入：<span class="exturl" data-url="aHR0cDovLzguMTM0LjYwLjIzNTo4MDgwLw==">http://8.134.60.235:8080/<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>注意：你输入自己的 IP 地址</li>
</ul>
<p>获取输入管理员密码：</p>
<ul>
<li>在下面的地址中 <code>cat /var/lib/jenkins/secrets/initialAdminPassword</code></li>
</ul>
<p>![image-20201203173047824](/Users/coderwhy/Library/Application Support/typora-user-images/image-20201203173047824.png)</p>
<p>可以安装推荐的插件：</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glbylb26ouj30fb082js7.jpg" alt="安装推荐的插件"></p>
<h4 id="3-1-5-Jenkins-任务"><a href="#3-1-5-Jenkins-任务" class="headerlink" title="3.1.5. Jenkins 任务"></a>3.1.5. Jenkins 任务</h4><p><strong>新建任务：</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glc0uinjzej30pa0fet9z.jpg" alt="新建任务"></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glc0v225vaj30wl0hkn05.jpg" alt="image-20201204185613061"></p>
<p><strong>配置项目和保留策略：</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt3l4fjm6j614p0d2dgl02.jpg" alt="image-20210825160744119"></p>
<p><strong>源码管理：</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt3lpcvtgj614k0j8jsn02.jpg" alt="image-20210825160818122"></p>
<p><strong>构建触发器：</strong></p>
<p>这里的触发器规则是这样的：</p>
<ul>
<li>定时字符串从左往右分别是：分 时 日 月 周</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#每半小时构建一次OR每半小时检查一次远程代码分支，有更新则构建</span><br><span class="line">H/<span class="number">30</span> * * * *</span><br><span class="line"></span><br><span class="line">#每两小时构建一次OR每两小时检查一次远程代码分支，有更新则构建</span><br><span class="line">H H/<span class="number">2</span> * * *</span><br><span class="line"></span><br><span class="line">#每天凌晨两点定时构建</span><br><span class="line">H <span class="number">2</span> * * *</span><br><span class="line"></span><br><span class="line">#每月<span class="number">15</span>号执行构建</span><br><span class="line">H H <span class="number">15</span> * *</span><br><span class="line"></span><br><span class="line">#工作日，上午<span class="number">9</span>点整执行</span><br><span class="line">H <span class="number">9</span> * * <span class="number">1</span>-<span class="number">5</span></span><br><span class="line"></span><br><span class="line">#每周<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>，从<span class="number">8</span>:<span class="number">30</span>开始，截止<span class="number">19</span>:<span class="number">30</span>，每<span class="number">4</span>小时<span class="number">30</span>分构建一次</span><br><span class="line">H/<span class="number">30</span> <span class="number">8</span>-<span class="number">20</span>/<span class="number">4</span> * * <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt419gw6tj614g0agmy402.jpg" alt="触发器"></p>
<p><strong>构建环境：</strong></p>
<p>注意：我们需要搭建 Node 的环境</p>
<ul>
<li>第一步：配置 Node 的环境；</li>
<li>第二步：安装 Node 的插件；</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glc0zyecd4j31ar0ecjuz.jpg" alt="image-20201204190055096"></p>
<p>第一步：配置 Node 的环境</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt42elwduj614h0elwfq02.jpg" alt="node环境"></p>
<p>第二步：安装 Node 的插件</p>
<ul>
<li>这里因为我已经安装过了，所以没有搜索到；</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glc0yta64bj30r907caam.jpg" alt="image-20201204185949452"></p>
<p>构建执行的任务：</p>
<ul>
<li>查看 Node 的版本等是否有问题；</li>
<li>执行 <code>npm install</code> 安装项目的依赖；</li>
<li>移除原来 mall_cms 文件的所有内容；</li>
<li>将打包的 dist 文件夹内容移动到 mall_cms 文件夹；</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pwd</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">pwd</span><br><span class="line"></span><br><span class="line">echo &#x27;构建成功&#x27;</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除/root/mall_cms文件夹里所有的内容</span></span><br><span class="line">rm -rf /root/mall_cms/*</span><br><span class="line"></span><br><span class="line">cp -rf ./dist/* /root/mall_cms/</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt43sz933j614o0dy0tk02.jpg" alt="执行构建任务"></p>
<h3 id="nginx-安装和配置"><a href="#nginx-安装和配置" class="headerlink" title="nginx 安装和配置"></a>nginx 安装和配置</h3><h4 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h4><p>后续我们部署会使用 nginx，所以需要先安装一下 nginx：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf install nginx</span><br></pre></td></tr></table></figure>

<p>启动 nginx：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl status nginx</span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure>

<h4 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h4><p>我们这里主要配置 nginx 的用户和默认访问目录：</p>
<p>配置用户：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt4bwvxc4j60f30453yk02.jpg" alt="image-20210825163329209"></p>
<p>通过 Linux 命令创建文件夹和文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /root/mall_cms</span><br><span class="line">cd /root/mall_cms</span><br><span class="line">touch index.html</span><br><span class="line"></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure>

<p>配置访问目录：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt4cka6hgj60n00bwgmc02.jpg" alt="image-20210825163406566"></p>
<p>备注： 如手动配置 nginx 太麻烦，可以装个宝塔面板</p>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>自动化部署</tag>
      </tags>
  </entry>
  <entry>
    <title>124-yarn安装与使用</title>
    <url>/20210928/124-yarn%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><p>Windows 下 Yarn 安装与使用</p>
<p>方法一：使用安装包安装</p>
<p>下载官方安装包，<span class="exturl" data-url="aHR0cHM6Ly95YXJucGtnLmNvbS96aC1IYW5zL2RvY3MvaW5zdGFsbA==">https://yarnpkg.com/zh-Hans/docs/install<i class="fa fa-external-link-alt"></i></span> ，安装完毕后，一定要配置环境变量。</p>
<p>方式二：使用 npm 安装</p>
<p>npm i yarn -g</p>
<p>-i：install</p>
<p>-g：全局安装（global）,使用 -g 或 –global</p>
<p>输入 yarn -version 可以看到版本号，说明安装成功了。我们就可以在项目中像使用 npm 一样使用 yarn 了</p>
<p>###常用命令</p>
<ul>
<li>yarn / yarn install 等同于 npm install 批量安装依赖</li>
<li>yarn add xxx 等同于 npm install xxx —save 安装指定包到指定位置</li>
<li>yarn remove xxx 等同于 npm uninstall xxx —save 卸载指定包</li>
<li>yarn add xxx —dev 等同于 npm install xxx —save-dev</li>
<li>yarn upgrade 等同于 npm update 升级全部包</li>
<li>yarn global add xxx 等同于 npm install xxx -g 全局安装指定包</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>125-收集一些牛皮的动画库</title>
    <url>/20211001/125-%E6%94%B6%E9%9B%86%E4%B8%80%E4%BA%9B%E7%89%9B%E7%9A%AE%E7%9A%84%E5%8A%A8%E7%94%BB%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Lottie-Web-Bodymovin"><a href="#Lottie-Web-Bodymovin" class="headerlink" title="Lottie-Web/Bodymovin"></a>Lottie-Web/Bodymovin</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9sb3R0aWUtd2Vi">github<i class="fa fa-external-link-alt"></i></span></p>
<p>可以从 Adobe After Effects 中创建的动画直接导出到你的网站。</p>
<h2 id="Parallax-js"><a href="#Parallax-js" class="headerlink" title="Parallax.js"></a>Parallax.js</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhZ2VyZmllbGQvcGFyYWxsYXg=">github<i class="fa fa-external-link-alt"></i></span></p>
<p>我们可以创建一个美丽的视差效果，可以用鼠标移动来控制，还可以调整移动物体的速度。</p>
<h2 id="Flat-Surface-Shader-FSS"><a href="#Flat-Surface-Shader-FSS" class="headerlink" title="Flat Surface Shader [FSS]"></a>Flat Surface Shader [FSS]</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhZ2VyZmllbGQvZmxhdC1zdXJmYWNlLXNoYWRlcg==">github<i class="fa fa-external-link-alt"></i></span></p>
<p>Flat Surface Shader 是一个超炫的 3D 模拟照明效果，可以配置使用基于 Canvas 的 2D 上下文或者基于 SVG 多边形数组绘制三角形。它还采用原生的 Float32Arrays 存储数字数据，进行高度优化的计算。可以调整颜色参数预览效果，而且可以导出图像。</p>
<h2 id="Hover-css"><a href="#Hover-css" class="headerlink" title="Hover.css"></a>Hover.css</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0lhbkx1bm4vSG92ZXI=">github<i class="fa fa-external-link-alt"></i></span></p>
<p>Hover.css 是一套基于 CSS3 的鼠标悬停效果和动画，这些可以非常轻松的被应用到按钮、LOGO 以及图片等元素。所有这些效果都是只需要单一的标签，必要的时候使用 before 和 after 伪元素。因为使用了 CSS3 过渡、转换和动画效果，因此只支持 Chrome、Firefox 和 Safari 等现代浏览器。</p>
<h2 id="Video-js-Markers"><a href="#Video-js-Markers" class="headerlink" title="Video.js Markers"></a>Video.js Markers</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwY2h1YW5nL3ZpZGVvanMtbWFya2Vycw==">github<i class="fa fa-external-link-alt"></i></span></p>
<p>Video.js 是一个通用的在网页上嵌入视频播放器的 JS 库，Video.js 自动检测浏览器对 HTML5 的支持情况,如果不支持 HTML5 则自动使用 Flash 播放器。有了这个插件，你可以在你网站上存在的视频上放置必要的标记，这样就可以轻松地切换到我们需要的时间代码。</p>
<h2 id="Magic-Grid"><a href="#Magic-Grid" class="headerlink" title="Magic Grid"></a>Magic Grid</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Utb2ovTWFnaWMtR3JpZA==">github<i class="fa fa-external-link-alt"></i></span></p>
<p>这个库帮助我们创建一个自适应网格，在这里你不需要创建单独的 @media 样式。只要指定容器，就可以了。</p>
<h2 id="Vue-React-Content-Loader"><a href="#Vue-React-Content-Loader" class="headerlink" title="Vue/React Content Loader"></a>Vue/React Content Loader</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vnb2lzdC92dWUtY29udGVudC1sb2FkZXI=">github<i class="fa fa-external-link-alt"></i></span></p>
<p>Vue Content Loader 是一个基于 Vue.js 的 SVG 占位符加载，可自定义的 SVG 组件，用于创建占位符加载，例如 Facebook 加载卡。</p>
<p>Vue Content Loader 是 react-content-loader 的 Vue 实现。</p>
<h2 id="React-Image-Gallery"><a href="#React-Image-Gallery" class="headerlink" title="React Image Gallery"></a>React Image Gallery</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYW9saW4vcmVhY3QtaW1hZ2UtZ2FsbGVyeQ==">github<i class="fa fa-external-link-alt"></i></span></p>
<p>React 图片库是用于构建图片库和轮播的 React 组件</p>
<h2 id="WebSlides"><a href="#WebSlides" class="headerlink" title="WebSlides"></a>WebSlides</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYnNsaWRlcy9XZWJTbGlkZXM=">github<i class="fa fa-external-link-alt"></i></span></p>
<p>WebSlides 是一个开源的 HTML 幻灯片项目，能够帮助熟悉前端语言的开发者快速制作出效果精美的幻灯片。页面中的每个 <section> 都是一个独立的幻灯片，只需要很少的 CSS 代码装饰即可。</p>
<h2 id="SVG-js"><a href="#SVG-js" class="headerlink" title="SVG.js"></a>SVG.js</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N2Z2RvdGpzL3N2Zy5qcw==">github<i class="fa fa-external-link-alt"></i></span></p>
<p>SVG.js 是一个轻量级的 JavaScript 库，允许你轻松操作 SVG 和定义动画。</p>
<h2 id="React-Motion"><a href="#React-Motion" class="headerlink" title="React Motion"></a>React Motion</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NoZW5nbG91L3JlYWN0LW1vdGlvbg==">github<i class="fa fa-external-link-alt"></i></span></p>
<p>React Motion 是一个 React 弹性动画库，使用 0-10 的弹性参数进行动画处理：</p>
<p>对于 95% 的动画组件使用案例，我们没有必要用硬编码(把配置写死)式的缓冲曲线和时间过渡来重排序。只需要给你的 UI 设置一个刚度系数和阻尼系数，接下来让神奇的物理原理处理即可。用这种方式，根本无需担心如中断动画等小问题。它也极大的简化了 API 。</p>
<h2 id="RELLAX"><a href="#RELLAX" class="headerlink" title="RELLAX"></a>RELLAX</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RpeG9uYW5kbW9lL3JlbGxheA==">github<i class="fa fa-external-link-alt"></i></span></p>
<p>rellax.js 是一款轻量级的纯 JavaScript 滚动视觉差特效插件。rellax.js 压缩后的版本仅 871 个字节，在手机等小屏幕设备中，插件会自动限制视觉差特性。</p>
<h2 id="Dynamics-js"><a href="#Dynamics-js" class="headerlink" title="Dynamics.js"></a>Dynamics.js</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY2hhZWx2aWxsYXIvZHluYW1pY3MuanM=">github<i class="fa fa-external-link-alt"></i></span></p>
<p>dynamics.js 是一个 Javascript 库，可以创建基于物理的 CSS 动画。</p>
<h2 id="mo-js"><a href="#mo-js" class="headerlink" title="mo.js"></a>mo.js</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vanMvbW9qcw==">github<i class="fa fa-external-link-alt"></i></span></p>
<p>Mo.js 是一个”简洁、高效”图形动画库，拥有流畅的动画和惊人的用户体验，在任何设备上，屏幕密度独立的效果都很好，你可以绘制内置的形状或者自定义形状，随便，只要你喜欢，你还可以绘制多个动画，再让它们串联在一起，逼话不多说详细的请浏览 Mo.js 官方网站</p>
<h2 id="Reveal-js"><a href="#Reveal-js" class="headerlink" title="Reveal.js"></a>Reveal.js</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hha2ltZWwvcmV2ZWFsLmpz">github<i class="fa fa-external-link-alt"></i></span></p>
<p>Reveal.js 做 PPT 的优点是可以使用 markdown 语言直接写静态的文本，并可以加入各种 html 语言支持的交互动画，然后由 Pandoc 直接转化成 PPT。缺点是使用 markdown 时对单个 HTML 元素操作不够灵活。</p>
<p>这个攻略会记录一些使用 Reveal.js 做 PPT 的心得以及经验教训。为了简单化，会尽力使用 Markdown 做静态页面，在动画演示部分使用 p5js。</p>
<h2 id="Animsition"><a href="#Animsition" class="headerlink" title="Animsition"></a>Animsition</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JsaXZlc3RhL2FuaW1zaXRpb24=">github<i class="fa fa-external-link-alt"></i></span></p>
<p>基于 javascript 的动画库</p>
<h2 id="SVG-Mesh-3d"><a href="#SVG-Mesh-3d" class="headerlink" title="SVG Mesh 3d"></a>SVG Mesh 3d</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hdHRkZXNsL3N2Zy1tZXNoLTNk">github<i class="fa fa-external-link-alt"></i></span></p>
<p>一个将 SVG 字符串转换为 3D 三角网格的高级模块。最适合用于剪影，如字体图标 SVG。</p>
<h2 id="Zdog"><a href="#Zdog" class="headerlink" title="Zdog"></a>Zdog</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21ldGFmaXp6eS96ZG9n">github<i class="fa fa-external-link-alt"></i></span></p>
<p>zdog 是一个圆形、扁平、设计师友好的伪 3D 引擎，通过这个库，可以创建伪 3D 元素，不需要知道几何或代数来创建几何图形。。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>动画库</tag>
      </tags>
  </entry>
  <entry>
    <title>126-es6实现单例模式</title>
    <url>/20211008/126-es6%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>description: 单例模式在前端开发过程中非常常见，通俗来说就是某个类只能有一个实例，只能实例化一次，之后所有实例化的操作都是返回之前已经实例化的实例</p>
</blockquote>
<h2 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Singleton &#123;</span><br><span class="line">    constructor<span class="literal">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="module-access"><span class="module"><span class="identifier">Singleton</span>.</span></span>instance) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">Singleton</span>.</span></span>instance = this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">Singleton</span>.</span></span>instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const single = <span class="keyword">new</span> <span class="constructor">Singleton()</span></span><br><span class="line">const single2 = <span class="keyword">new</span> <span class="constructor">Singleton()</span></span><br><span class="line"></span><br><span class="line">console.log(single<span class="operator"> === </span>single2); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到 single 和 single2 是相等的，因为 single2 创建实例的时候返回的还是上一次的实例，无论之后调用多少次都是如此</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>127-File-base64-Blob之间</title>
    <url>/20211012/127-File-base64-Blob%E4%B9%8B%E9%97%B4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们在日常码代码中,Blob,file,base64 之间的转换肯定用的非常多。今天我就把 file base64 blob 之间的转换总结下来。</p>
<h2 id="File-的定义"><a href="#File-的定义" class="headerlink" title="File 的定义"></a>File 的定义</h2><blockquote>
<p>HTML5 在 DOM 上为文件输入元素添加了 files 集合。当用户在文件字段中选择一个或多个文件时，这个 files 集合中会包含一组 File 对象，表示被选中的文件。每个 File 对象都有一些只读属性。</p>
</blockquote>
<p>File 对象是特殊类的 Blob,且可以用在任意的 Blob 类型的 context 中。</p>
<h2 id="file-转-base64"><a href="#file-转-base64" class="headerlink" title="file 转 base64"></a>file 转 base64</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123; * &#125;</span> </span>file 图片文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fileToBase64 = <span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.target.result</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Blob-的定义"><a href="#Blob-的定义" class="headerlink" title="Blob 的定义"></a>Blob 的定义</h2><blockquote>
<p>blob 表示二进制大对象（binary larget object），是 JavaScript 对不可修改二进制数据的封装类型。包 含字符串的数组、ArrayBuffers、ArrayBufferViews，甚至其他 Blob 都可以用来创建 blob。</p>
</blockquote>
<h2 id="Blob-是什么"><a href="#Blob-是什么" class="headerlink" title="Blob 是什么"></a>Blob 是什么</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">var <span class="keyword">debug</span> = &#123;<span class="type">name</span>: &quot;zz&quot;&#125;;</span><br><span class="line">var blob = <span class="built_in">new</span> Blob([<span class="type">JSON</span>.stringify(<span class="keyword">debug</span>,<span class="keyword">null</span>,<span class="number">2</span>)], &#123;<span class="keyword">type</span>:<span class="string">&#x27;application/json&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以看到，blob 有两个属性：size 和 type 。其中 size 属性表示数据的大小(以字节为单位),type 是 MIME 类型的字符串。</p>
<p>Blob 常用的场景</p>
<ul>
<li>大文件分片上传</li>
<li>隐藏视频链接</li>
<li>文件下载</li>
</ul>
<h2 id="blob-转-file"><a href="#blob-转-file" class="headerlink" title="blob 转 file"></a>blob 转 file</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param <span class="type">&#123; blob &#125;</span> <span class="variable">blob</span></span></span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param <span class="type">&#123; string &#125;</span> <span class="variable">fileName</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> blobToFile = <span class="function">(<span class="params">blob, fileName</span>) =&gt;</span> &#123;</span><br><span class="line">    blob.lastModifiedDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    blob.name = fileName;</span><br><span class="line">    <span class="keyword">return</span> blob;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="base64-的定义"><a href="#base64-的定义" class="headerlink" title="base64 的定义"></a>base64 的定义</h2><blockquote>
<p>Base64 是一组相似的二进制到文本的编码规则，使得二进制数据在解释成 radix-64 的表现形式后能够用 ASCII 字符串的格式表示出来。Base64 编码普遍应用于需要通过被设计为处理文本数据的媒介上储存和传输二进制数据而需要编码该二进制数据的场景。</p>
</blockquote>
<p>所谓 Base64，就是说选出 64 个字符—-小写字母 a-z、大写字母 A-Z、数字 0-9、符号”+”、”/“（再加上作为垫字的”=”，实际上是 65 个字符）—-作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。</p>
<h2 id="base64-转-file"><a href="#base64-转-file" class="headerlink" title="base64 转 file"></a>base64 转 file</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param <span class="type">&#123; base64 &#125;</span> <span class="variable">base64</span></span></span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param <span class="type">&#123; string &#125;</span> </span>filename 转换后的文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> base64ToFile = <span class="function">(<span class="params">base64, filename </span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = base64.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> suffix = mime.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>] ;</span><br><span class="line">    <span class="keyword">let</span> bstr = atob(arr[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">let</span> n = bstr.length;</span><br><span class="line">    <span class="keyword">let</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> File([u8arr], <span class="string">`<span class="subst">$&#123;filename&#125;</span>.<span class="subst">$&#123;suffix&#125;</span>`</span>, &#123; <span class="attr">type</span>: mime &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="base64-转-blob"><a href="#base64-转-blob" class="headerlink" title="base64 转 blob"></a>base64 转 blob</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  @param &#123; base64 &#125; base64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">export const base64ToBlob =<span class="function"> <span class="params">base64</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = base64.split(<span class="character">&#x27;,&#x27;</span>),</span><br><span class="line">        mime = arr<span class="literal">[<span class="number">0</span>]</span>.<span class="keyword">match</span>(/:(.*?);/)<span class="literal">[<span class="number">1</span>]</span>,</span><br><span class="line">        bstr = atob(arr<span class="literal">[<span class="number">1</span>]</span>),</span><br><span class="line">        n = bstr.length,</span><br><span class="line">        u8arr = <span class="keyword">new</span> <span class="constructor">Uint8Array(<span class="params">n</span>)</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        u8arr<span class="literal">[<span class="identifier">n</span>]</span> = bstr.<span class="built_in">char</span><span class="constructor">CodeAt(<span class="params">n</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">Blob([<span class="params">u8arr</span>], &#123; <span class="params">type</span>: <span class="params">mime</span> &#125;)</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://blog.img.wy1991.cn/static/images/js/127.png-blogImg">
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>128-深入浅出grid和flex布局</title>
    <url>/20211016/128-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAgrid%E5%92%8Cflex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h2><p>Grid 网格布局 (下面都简称为 Grid 布局)，是一个基于栅格的二维布局系统，旨在彻底改变基于网格用户界面的设计。CSS 一直以来并没有把布局做的足够好。刚开始，我们使用 table ，后来是 float ， position 和 inline-block ，这些本质上是一些 hacks 而且许多重要功能尚未解决（例如垂直居中）。虽然 flex 弹性布局可以做到这些，但是 flex 布局实际上是一维布局，而 Grid 布局是二维的，它远比 flex 布局要强大，以下是 Grid 布局的浏览器兼容性，支持 Chrome57+ 、 Edge16+ 、 Firefox52+ 、 Safari10.1+ 等</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDE5MDc3Nzg0NDAwMDM1ODQ3">grid<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>弹性盒子是一种用于按行或按列布局元素的一维布局方法，元素可以膨胀以填充额外的空间，收缩以适应更小的空间，适用于任何元素上，如果一个元素使用了 flex 弹性布局（以下都会简称为：flex 布局），则会在内部形成 BFC，flex 布局已经得到了所有浏览器的支持，这意味着，现在就能放心，安全的使用这项技术。</p>
<p>flex 布局 是目前最流行的布局方式之一，优点是浏览器兼容性较好，学习成本较低，上手简单，可以快速通过 flex 布局 实现布局效果。缺点是相较于 grid 网格布局 来说， flex 布局 是 一维布局 ，一般用于单行或者单列的布局，如果要实现多行多列的布局，推荐使用 gird 网格布局 。<br>理解轴的概念对学习 flex 布局来说至关重要，掌握 flex 布局 会对我们编写布局时，事半功倍！本文整体介绍了轴、容器、项目的概念，再结合了几个具体的布局案例来讲解 flex 布局，希望能对读者有所帮助，谢谢！</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDE5MDc1ODQ0NjY0NDU5Mjc4">flex<i class="fa fa-external-link-alt"></i></span></p>
<p>详情看链接 讲的非常详细</p>
<p>grid 布局 和 flex 弹性布局 一样，都是当下最流行的 CSS 布局方案之一。它的优点是可以实现多行多列的布局，属于 二维布局 ，基本可以满足任何的布局页面。</p>
<p>优点：</p>
<ul>
<li>固定和灵活的轨道尺寸</li>
<li>可以使用行号、名称或通过定位网格区域将项目放置在网格上的精确位置<br>可以将多个项目放入网格单元格或区域中，它们可以彼此部分重叠</li>
</ul>
<p>缺点：</p>
<ul>
<li>浏览器兼容性较差</li>
<li>学习成本较高</li>
</ul>
<p>grid 布局 可以说是目前最强大的 CSS 布局方案，在实际开发过程中，往往 grid 布局 和 flex 布局 一起结合使用。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>flex</tag>
        <tag>grid</tag>
      </tags>
  </entry>
  <entry>
    <title>129-一行代码实现rem跟元素font-size</title>
    <url>/20211018/129-%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0rem%E8%B7%9F%E5%85%83%E7%B4%A0font-size/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="clamp-clac"><a href="#clamp-clac" class="headerlink" title="clamp clac"></a>clamp clac</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">html</span>&#123; font-size:<span class="number">16</span>px; font-size:clamp(<span class="number">16</span>px,calc(<span class="number">16</span>px + <span class="number">2</span> * (<span class="number">100</span>vw - <span class="number">375</span>px) /<span class="number">39</span>),<span class="number">22</span>px) &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="不用-rem"><a href="#不用-rem" class="headerlink" title="不用 rem"></a>不用 rem</h2><p>直接用 vw<br>postcss-px-to-viewport</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2V2cm9uZS9wb3N0Y3NzLXB4LXRvLXZpZXdwb3J0">postcss-px-to-viewport<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>js html5录音RecorderJs</title>
    <url>/20210629/13-js-html5%E5%BD%95%E9%9F%B3RecorderJs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>实际业务中需要用浏览器录音</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NocmlzLXJ1ZG1pbi9vcHVzLXJlY29yZGVy">https://github.com/chris-rudmin/opus-recorder<i class="fa fa-external-link-alt"></i></span><br>具体从看实例 npm 安装<br>引入所需的 recorder.min.js ， 和 waveWorker.min.js，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/recorder.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span>&gt;</span> start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;stopButton&quot;</span>&gt;</span> stop<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;recordingslist&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">screenLogger</span>(<span class="params">text, data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            log.innerHTML += <span class="string">&quot;\n&quot;</span> + text + <span class="string">&quot; &quot;</span> + (data || <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> rec = <span class="keyword">new</span> Recorder(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">monitorGain</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">recordingGain</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">numberOfChannels</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">wavBitDepth</span>: <span class="number">16</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">encoderPath</span>: <span class="string">&quot;./js/waveWorker.min.js&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        start.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            rec.start()</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        stopButton.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            rec.stop();</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        rec.onstart = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            screenLogger(<span class="string">&#x27;Recorder is started&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        rec.onstop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            screenLogger(<span class="string">&#x27;Recorder is stop&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        rec.ondataavailable = <span class="function"><span class="keyword">function</span> (<span class="params">typedArray</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dataBlob = <span class="keyword">new</span> Blob([typedArray], &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>: <span class="string">&#x27;audio/wav&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> fileName = <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString() + <span class="string">&quot;.wav&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> url = URL.createObjectURL(dataBlob);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> audio = <span class="built_in">document</span>.createElement(<span class="string">&#x27;audio&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            audio.controls = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            audio.src = url;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            link.href = url;</span></span><br><span class="line"><span class="javascript">            link.download = fileName;</span></span><br><span class="line"><span class="javascript">            link.innerHTML = link.download;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            li.appendChild(link);</span></span><br><span class="line"><span class="javascript">            li.appendChild(audio);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            recordingslist.appendChild(li);</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>html5</tag>
        <tag>Recorder</tag>
      </tags>
  </entry>
  <entry>
    <title>130-js浏览器导出excel</title>
    <url>/20211102/130-js%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%BC%E5%87%BAexcel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Excel 的导入导出都是依赖于 js-xlsx 来实现的。</p>
<p>在 js-xlsx 的基础上又封装了 Export2Excel.js 来方便导出数据。</p>
<p>#使用<br>由于 Export2Excel 不仅依赖 js-xlsx 还依赖 file-saver 和 script-loader。</p>
<p>所以你先需要安装如下命令</p>
<pre><code>  npm install xlsx file-saver -S
  npm install script-loader -S -D
</code></pre>
<p>由于 js-xlsx 体积还是很大的，导出功能也不是一个非常常用的功能，所以使用的时候建议使用懒加载。使用方法如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">import</span><span class="params">(<span class="string">&#x27;@/vendor/Export2Excel&#x27;</span>)</span></span><span class="selector-class">.then</span>(excel =&gt; &#123;</span><br><span class="line">  excel<span class="selector-class">.export_json_to_excel</span>(&#123;</span><br><span class="line">    <span class="selector-tag">header</span>: tHeader, <span class="comment">//表头 必填</span></span><br><span class="line">    data, <span class="comment">//具体数据 必填</span></span><br><span class="line">    filename: <span class="string">&#x27;excel-list&#x27;</span>, <span class="comment">//非必填</span></span><br><span class="line">    autoWidth: true, <span class="comment">//非必填</span></span><br><span class="line">    bookType: <span class="string">&#x27;xlsx&#x27;</span> <span class="comment">//非必填</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;@/vendor/Export2Excel&#x27;</span>).then(excel =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> tHeader = [<span class="string">&#x27;Id&#x27;</span>, <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;Author&#x27;</span>, <span class="string">&#x27;Readings&#x27;</span>, <span class="string">&#x27;Date&#x27;</span>]</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">data</span> = <span class="keyword">this</span>.list</span><br><span class="line">  excel.export_json_to_excel(&#123;</span><br><span class="line">    header: tHeader, <span class="comment">//表头 必填</span></span><br><span class="line">    <span class="keyword">data</span>, <span class="comment">//具体数据 必填</span></span><br><span class="line">    filename: <span class="string">&#x27;excel-list&#x27;</span>, <span class="comment">//非必填</span></span><br><span class="line">    autoWidth: <span class="literal">true</span>, <span class="comment">//非必填</span></span><br><span class="line">    bookType: <span class="string">&#x27;xlsx&#x27;</span> <span class="comment">//非必填</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Export2Excel-js"><a href="#Export2Excel-js" class="headerlink" title="Export2Excel.js"></a>Export2Excel.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">&#x27;file-saver&#x27;</span></span><br><span class="line"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateArray</span>(<span class="params">table</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> out = [];</span><br><span class="line">  <span class="keyword">var</span> rows = table.querySelectorAll(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> ranges = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> R = <span class="number">0</span>; R &lt; rows.length; ++R) &#123;</span><br><span class="line">    <span class="keyword">var</span> outRow = [];</span><br><span class="line">    <span class="keyword">var</span> row = rows[R];</span><br><span class="line">    <span class="keyword">var</span> columns = row.querySelectorAll(<span class="string">&#x27;td&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> C = <span class="number">0</span>; C &lt; columns.length; ++C) &#123;</span><br><span class="line">      <span class="keyword">var</span> cell = columns[C];</span><br><span class="line">      <span class="keyword">var</span> colspan = cell.getAttribute(<span class="string">&#x27;colspan&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> rowspan = cell.getAttribute(<span class="string">&#x27;rowspan&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> cellValue = cell.innerText;</span><br><span class="line">      <span class="keyword">if</span> (cellValue !== <span class="string">&quot;&quot;</span> &amp;&amp; cellValue == +cellValue) cellValue = +cellValue;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Skip ranges</span></span><br><span class="line">      ranges.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">range</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (R &gt;= range.s.r &amp;&amp; R &lt;= range.e.r &amp;&amp; outRow.length &gt;= range.s.c &amp;&amp; outRow.length &lt;= range.e.c) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= range.e.c - range.s.c; ++i) outRow.push(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Handle Row Span</span></span><br><span class="line">      <span class="keyword">if</span> (rowspan || colspan) &#123;</span><br><span class="line">        rowspan = rowspan || <span class="number">1</span>;</span><br><span class="line">        colspan = colspan || <span class="number">1</span>;</span><br><span class="line">        ranges.push(&#123;</span><br><span class="line">          <span class="attr">s</span>: &#123;</span><br><span class="line">            <span class="attr">r</span>: R,</span><br><span class="line">            <span class="attr">c</span>: outRow.length</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">e</span>: &#123;</span><br><span class="line">            <span class="attr">r</span>: R + rowspan - <span class="number">1</span>,</span><br><span class="line">            <span class="attr">c</span>: outRow.length + colspan - <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Handle Value</span></span><br><span class="line">      outRow.push(cellValue !== <span class="string">&quot;&quot;</span> ? cellValue : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Handle Colspan</span></span><br><span class="line">      <span class="keyword">if</span> (colspan)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; colspan - <span class="number">1</span>; ++k) outRow.push(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    out.push(outRow);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [out, ranges];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">datenum</span>(<span class="params">v, date1904</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (date1904) v += <span class="number">1462</span>;</span><br><span class="line">  <span class="keyword">var</span> epoch = <span class="built_in">Date</span>.parse(v);</span><br><span class="line">  <span class="keyword">return</span> (epoch - <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">1899</span>, <span class="number">11</span>, <span class="number">30</span>))) / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sheet_from_array_of_arrays</span>(<span class="params">data, opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ws = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> range = &#123;</span><br><span class="line">    <span class="attr">s</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: <span class="number">10000000</span>,</span><br><span class="line">      <span class="attr">r</span>: <span class="number">10000000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">e</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">r</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> R = <span class="number">0</span>; R != data.length; ++R) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> C = <span class="number">0</span>; C != data[R].length; ++C) &#123;</span><br><span class="line">      <span class="keyword">if</span> (range.s.r &gt; R) range.s.r = R;</span><br><span class="line">      <span class="keyword">if</span> (range.s.c &gt; C) range.s.c = C;</span><br><span class="line">      <span class="keyword">if</span> (range.e.r &lt; R) range.e.r = R;</span><br><span class="line">      <span class="keyword">if</span> (range.e.c &lt; C) range.e.c = C;</span><br><span class="line">      <span class="keyword">var</span> cell = &#123;</span><br><span class="line">        <span class="attr">v</span>: data[R][C]</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (cell.v == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">var</span> cell_ref = XLSX.utils.encode_cell(&#123;</span><br><span class="line">        <span class="attr">c</span>: C,</span><br><span class="line">        <span class="attr">r</span>: R</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> cell.v === <span class="string">&#x27;number&#x27;</span>) cell.t = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> cell.v === <span class="string">&#x27;boolean&#x27;</span>) cell.t = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (cell.v <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">        cell.t = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">        cell.z = XLSX.SSF._table[<span class="number">14</span>];</span><br><span class="line">        cell.v = datenum(cell.v);</span><br><span class="line">      &#125; <span class="keyword">else</span> cell.t = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      ws[cell_ref] = cell;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (range.s.c &lt; <span class="number">10000000</span>) ws[<span class="string">&#x27;!ref&#x27;</span>] = XLSX.utils.encode_range(range);</span><br><span class="line">  <span class="keyword">return</span> ws;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Workbook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">this</span> <span class="keyword">instanceof</span> Workbook)) <span class="keyword">return</span> <span class="keyword">new</span> Workbook();</span><br><span class="line">  <span class="built_in">this</span>.SheetNames = [];</span><br><span class="line">  <span class="built_in">this</span>.Sheets = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s2ab</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(s.length);</span><br><span class="line">  <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i != s.length; ++i) view[i] = s.charCodeAt(i) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">export_table_to_excel</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> theTable = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">  <span class="keyword">var</span> oo = generateArray(theTable);</span><br><span class="line">  <span class="keyword">var</span> ranges = oo[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* original data */</span></span><br><span class="line">  <span class="keyword">var</span> data = oo[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> ws_name = <span class="string">&quot;SheetJS&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> wb = <span class="keyword">new</span> Workbook(),</span><br><span class="line">    ws = sheet_from_array_of_arrays(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add ranges to worksheet */</span></span><br><span class="line">  <span class="comment">// ws[&#x27;!cols&#x27;] = [&#x27;apple&#x27;, &#x27;banan&#x27;];</span></span><br><span class="line">  ws[<span class="string">&#x27;!merges&#x27;</span>] = ranges;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add worksheet to workbook */</span></span><br><span class="line">  wb.SheetNames.push(ws_name);</span><br><span class="line">  wb.Sheets[ws_name] = ws;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> wbout = XLSX.write(wb, &#123;</span><br><span class="line">    <span class="attr">bookType</span>: <span class="string">&#x27;xlsx&#x27;</span>,</span><br><span class="line">    <span class="attr">bookSST</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;binary&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  saveAs(<span class="keyword">new</span> Blob([s2ab(wbout)], &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line">  &#125;), <span class="string">&quot;test.xlsx&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">export_json_to_excel</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  multiHeader = [],</span></span></span><br><span class="line"><span class="params"><span class="function">  header,</span></span></span><br><span class="line"><span class="params"><span class="function">  data,</span></span></span><br><span class="line"><span class="params"><span class="function">  filename,</span></span></span><br><span class="line"><span class="params"><span class="function">  merges = [],</span></span></span><br><span class="line"><span class="params"><span class="function">  autoWidth = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  bookType = <span class="string">&#x27;xlsx&#x27;</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* original data */</span></span><br><span class="line">  filename = filename || <span class="string">&#x27;excel-list&#x27;</span></span><br><span class="line">  data = [...data]</span><br><span class="line">  data.unshift(header);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = multiHeader.length - <span class="number">1</span>; i &gt; -<span class="number">1</span>; i--) &#123;</span><br><span class="line">    data.unshift(multiHeader[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ws_name = <span class="string">&quot;SheetJS&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> wb = <span class="keyword">new</span> Workbook(),</span><br><span class="line">    ws = sheet_from_array_of_arrays(data);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (merges.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ws[<span class="string">&#x27;!merges&#x27;</span>]) ws[<span class="string">&#x27;!merges&#x27;</span>] = [];</span><br><span class="line">    merges.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      ws[<span class="string">&#x27;!merges&#x27;</span>].push(XLSX.utils.decode_range(item))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (autoWidth) &#123;</span><br><span class="line">    <span class="comment">/*设置worksheet每列的最大宽度*/</span></span><br><span class="line">    <span class="keyword">const</span> colWidth = data.map(<span class="function"><span class="params">row</span> =&gt;</span> row.map(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/*先判断是否为null/undefined*/</span></span><br><span class="line">      <span class="keyword">if</span> (val == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">&#x27;wch&#x27;</span>: <span class="number">10</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/*再判断是否为中文*/</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (val.toString().charCodeAt(<span class="number">0</span>) &gt; <span class="number">255</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">&#x27;wch&#x27;</span>: val.toString().length * <span class="number">2</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="string">&#x27;wch&#x27;</span>: val.toString().length</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="comment">/*以第一行为初始值*/</span></span><br><span class="line">    <span class="keyword">let</span> result = colWidth[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; colWidth.length; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; colWidth[i].length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result[j][<span class="string">&#x27;wch&#x27;</span>] &lt; colWidth[i][j][<span class="string">&#x27;wch&#x27;</span>]) &#123;</span><br><span class="line">          result[j][<span class="string">&#x27;wch&#x27;</span>] = colWidth[i][j][<span class="string">&#x27;wch&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ws[<span class="string">&#x27;!cols&#x27;</span>] = result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* add worksheet to workbook */</span></span><br><span class="line">  wb.SheetNames.push(ws_name);</span><br><span class="line">  wb.Sheets[ws_name] = ws;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> wbout = XLSX.write(wb, &#123;</span><br><span class="line">    <span class="attr">bookType</span>: bookType,</span><br><span class="line">    <span class="attr">bookSST</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;binary&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  saveAs(<span class="keyword">new</span> Blob([s2ab(wbout)], &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line">  &#125;), <span class="string">`<span class="subst">$&#123;filename&#125;</span>.<span class="subst">$&#123;bookType&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="js-导出压缩包"><a href="#js-导出压缩包" class="headerlink" title="js 导出压缩包"></a>js 导出压缩包</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">&#x27;file-saver&#x27;</span></span><br><span class="line"><span class="keyword">import</span> JSZip <span class="keyword">from</span> <span class="string">&#x27;jszip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">export_txt_to_zip</span>(<span class="params">th, jsonData, txtName, zipName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> zip = <span class="keyword">new</span> JSZip()</span><br><span class="line">  <span class="keyword">const</span> txt_name = txtName || <span class="string">&#x27;file&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> zip_name = zipName || <span class="string">&#x27;file&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> data = jsonData</span><br><span class="line">  <span class="keyword">let</span> txtData = <span class="string">`<span class="subst">$&#123;th&#125;</span>\r\n`</span></span><br><span class="line">  data.forEach(<span class="function">(<span class="params">row</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tempStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    tempStr = row.toString()</span><br><span class="line">    txtData += <span class="string">`<span class="subst">$&#123;tempStr&#125;</span>\r\n`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  zip.file(<span class="string">`<span class="subst">$&#123;txt_name&#125;</span>.txt`</span>, txtData)</span><br><span class="line">  zip.generateAsync(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;blob&quot;</span></span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    saveAs(blob, <span class="string">`<span class="subst">$&#123;zip_name&#125;</span>.zip`</span>)</span><br><span class="line">  &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;导出失败&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拖拽上传-excel"><a href="#拖拽上传-excel" class="headerlink" title="拖拽上传 excel"></a>拖拽上传 excel</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;excel-upload-input&quot;</span> <span class="attr">class</span>=<span class="string">&quot;excel-upload-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.xlsx, .xls&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;drop&quot;</span> @<span class="attr">drop</span>=<span class="string">&quot;handleDrop&quot;</span> @<span class="attr">dragover</span>=<span class="string">&quot;handleDragover&quot;</span> @<span class="attr">dragenter</span>=<span class="string">&quot;handleDragover&quot;</span>&gt;</span></span><br><span class="line">      Drop excel file here or</span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:16px;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpload&quot;</span>&gt;</span></span><br><span class="line">        Browse</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">beforeUpload</span>: <span class="built_in">Function</span>, <span class="comment">// eslint-disable-line</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">onSuccess</span>: <span class="built_in">Function</span><span class="comment">// eslint-disable-line</span></span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">loading</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">excelData</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">header</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">results</span>: <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">generateData</span>(<span class="params">&#123; header, results &#125;</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.excelData.header = header</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.excelData.results = results</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.onSuccess &amp;&amp; <span class="built_in">this</span>.onSuccess(<span class="built_in">this</span>.excelData)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleDrop</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      e.stopPropagation()</span></span><br><span class="line"><span class="javascript">      e.preventDefault()</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.loading) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> files = e.dataTransfer.files</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (files.length !== <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;Only support uploading one file!&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> rawFile = files[<span class="number">0</span>] <span class="comment">// only use files[0]</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!<span class="built_in">this</span>.isExcel(rawFile)) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;Only supports upload .xlsx, .xls, .csv suffix files&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.upload(rawFile)</span></span><br><span class="line"><span class="javascript">      e.stopPropagation()</span></span><br><span class="line"><span class="javascript">      e.preventDefault()</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleDragover</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      e.stopPropagation()</span></span><br><span class="line"><span class="javascript">      e.preventDefault()</span></span><br><span class="line"><span class="javascript">      e.dataTransfer.dropEffect = <span class="string">&#x27;copy&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleUpload</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs[<span class="string">&#x27;excel-upload-input&#x27;</span>].click()</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleClick</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> files = e.target.files</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> rawFile = files[<span class="number">0</span>] <span class="comment">// only use files[0]</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!rawFile) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.upload(rawFile)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">upload</span>(<span class="params">rawFile</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs[<span class="string">&#x27;excel-upload-input&#x27;</span>].value = <span class="literal">null</span> <span class="comment">// fix can&#x27;t select the same excel</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!<span class="built_in">this</span>.beforeUpload) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.readerData(rawFile)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> before = <span class="built_in">this</span>.beforeUpload(rawFile)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (before) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.readerData(rawFile)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">readerData</span>(<span class="params">rawFile</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.loading = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</span></span><br><span class="line"><span class="javascript">        reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> data = e.target.result</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> workbook = XLSX.read(data, &#123; <span class="attr">type</span>: <span class="string">&#x27;array&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> firstSheetName = workbook.SheetNames[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> worksheet = workbook.Sheets[firstSheetName]</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> header = <span class="built_in">this</span>.getHeaderRow(worksheet)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> results = XLSX.utils.sheet_to_json(worksheet)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.generateData(&#123; header, results &#125;)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.loading = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">          resolve()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        reader.readAsArrayBuffer(rawFile)</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">getHeaderRow</span>(<span class="params">sheet</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> headers = []</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> range = XLSX.utils.decode_range(sheet[<span class="string">&#x27;!ref&#x27;</span>])</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> C</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> R = range.s.r</span></span><br><span class="line"><span class="javascript">      <span class="comment">/* start in the first row */</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (C = range.s.c; C &lt;= range.e.c; ++C) &#123; <span class="comment">/* walk every column in the range */</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> cell = sheet[XLSX.utils.encode_cell(&#123; <span class="attr">c</span>: C, <span class="attr">r</span>: R &#125;)]</span></span><br><span class="line"><span class="javascript">        <span class="comment">/* find the cell in the first row */</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> hdr = <span class="string">&#x27;UNKNOWN &#x27;</span> + C <span class="comment">// &lt;-- replace with your desired default</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (cell &amp;&amp; cell.t) hdr = XLSX.utils.format_cell(cell)</span></span><br><span class="line"><span class="javascript">        headers.push(hdr)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> headers</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">isExcel</span>(<span class="params">file</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="regexp">/\.(xlsx|xls|csv)$/</span>.test(file.name)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.excel-upload-input</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">  <span class="attribute">z-index</span>: -<span class="number">9999</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.drop</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">2px</span> dashed <span class="number">#bbb</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">line-height</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#bbb</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>excel导出</tag>
      </tags>
  </entry>
  <entry>
    <title>131-如何用 css 或 js 实现多行文本溢出省略效果</title>
    <url>/20211112/131-%E5%A6%82%E4%BD%95%E7%94%A8-css-%E6%88%96-js-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E7%9C%81%E7%95%A5%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br></pre></td></tr></table></figure>

<h2 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: <span class="number">3</span>; //行数</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></table></figure>

<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="attribute">word-break</span>: break-all;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp:<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h2 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">position</span>: relative; <span class="attribute">line-height</span>: <span class="number">20px</span>; <span class="attribute">max-height</span>: <span class="number">40px</span>;<span class="attribute">overflow</span>: hidden;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span>&#123;<span class="attribute">content</span>: <span class="string">&quot;...&quot;</span>; <span class="attribute">position</span>: absolute; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">padding-left</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, transparent, <span class="number">#fff</span> <span class="number">55%</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(right, transparent, <span class="number">#fff</span> <span class="number">55%</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(right, transparent, <span class="number">#fff</span> <span class="number">55%</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, transparent, <span class="number">#fff</span> <span class="number">55%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><ul>
<li><p>使用 split + 正则表达式将单词与单个文字切割出来存入 words</p>
</li>
<li><p>加上 ‘…’</p>
</li>
<li><p>判断 scrollHeight 与 clientHeight，超出的话就从 words 中 pop 一个出来</p>
<pre><code>&lt;p&gt;这是一段测试文字，this is some test text，测试文字，测试文字测 &lt;/p&gt;
</code></pre>
</li>
</ul>
<pre><code>  const p = document.querySelector(&#39;p&#39;)
  let words = p.innerHTML.split(/(?&lt;=[\u4e00-\u9fa5])|(?&lt;=\w*?\b)/g)
  while (p.scrollHeight &gt; p.clientHeight) &#123;
    words.pop()
    p.innerHTML = words.join(&#39;&#39;) + &#39;...&#39;
  &#125;
</code></pre>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>132-大文件分片上传</title>
    <url>/20211117/132-%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分片上传"><a href="#分片上传" class="headerlink" title="分片上传"></a>分片上传</h2><p>为了方便大家阅读和理解，我将以单个大文件上传为例，先简单描述下思路。</p>
<p>antd 的上传组件有一个上传前的钩子，里面是可以拿到 file 信息，上传前将 file 切片，然后包装成一个一个的请求，放到一个数组，上传的的时候将数组的请求执行就可以了，执行完后发送一个合并请求，我没有用 Promise.all 去执行，而是 2 个 2 个的递归执行。</p>
<h2 id="对大文件先通过-slice-进行切片"><a href="#对大文件先通过-slice-进行切片" class="headerlink" title="对大文件先通过 slice 进行切片"></a>对大文件先通过 slice 进行切片</h2><p>核心是利用 <code>Blob.prototype.slice</code> 方法</p>
<p><code>createFileChunk</code>接收两个参数<br>dataSource:所上传的 File 大文件，size：每个分片大小</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切片</span></span><br><span class="line">   createFileChunk = (dataSource, <span class="keyword">size</span> = <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>) =&gt; &#123;</span><br><span class="line">      const fileChunkList = [];<span class="comment">//因为只有一个文件，数组只有1项</span></span><br><span class="line">      let cur = <span class="number">0</span>;</span><br><span class="line">      let index = <span class="number">0</span>;<span class="comment">//每个分片给一个索引，最后后端合并按序合并分片</span></span><br><span class="line">      let obj: IFileChunksList = &#123;</span><br><span class="line">          name:dataSource.name,</span><br><span class="line">          progressArr: [], <span class="comment">//记录每一个分片的上传进度</span></span><br><span class="line">          errChunkFile: [],<span class="comment">//上传失败的文件</span></span><br><span class="line">          keys: [],<span class="comment">//将每个分片包装成一个http请求</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      let arr = [];</span><br><span class="line">      <span class="keyword">while</span> (cur &lt; dataSource.<span class="keyword">size</span>) &#123;</span><br><span class="line">          arr.<span class="keyword">push</span>(<span class="keyword">this</span>.createHttp(&#123; hash:dataSource.name+<span class="string">&#x27;_&#x27;</span>+index, <span class="keyword">file</span>: dataSource.slice(cur, cur + <span class="keyword">size</span>)&#125;));</span><br><span class="line">          index += <span class="number">1</span>;</span><br><span class="line">          cur += <span class="keyword">size</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      obj.keys = arr;</span><br><span class="line">      fileChunkList.<span class="keyword">push</span>(obj);</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;fileChunkList&#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>hash</code>由文件名和序号组成，后端合并的时候需要按顺序合并。</p>
<p><code>this.createHttp</code>方法分析<br>简单的做了参数处理，this.request 里面才是真是 ajax 请求<br>onProgress：监听 ajax 进度并实时记录下来</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">createHttp = (<span class="keyword">data</span>) =&gt; &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123; hash, file &#125; = <span class="keyword">data</span>;</span><br><span class="line">     <span class="keyword">const</span> formData = new FormData();</span><br><span class="line">     formData.append(<span class="string">&#x27;chunk&#x27;</span>, file);</span><br><span class="line">     formData.append(<span class="string">&#x27;hash&#x27;</span>, hash);</span><br><span class="line">     <span class="keyword">return</span> () =&gt;</span><br><span class="line">         <span class="keyword">this</span>.request(&#123;</span><br><span class="line">             url: <span class="keyword">this</span>.props.action,</span><br><span class="line">             <span class="keyword">data</span>: formData,</span><br><span class="line">             onProgress: <span class="keyword">this</span>.createProgressHandler(<span class="keyword">data</span>, hash),</span><br><span class="line">         &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="为每个分片创建一个-http-请求"><a href="#为每个分片创建一个-http-请求" class="headerlink" title="为每个分片创建一个 http 请求"></a>为每个分片创建一个 http 请求</h2><p><code>this.request </code>方法通过 promise 和 ajax 包装<br>url:分片上传接口。data：分片参数。onProgress：监听此分片上传进度。<br>requestList：所有正在上传的分片请求集合。（断点续传用的）<br>也可以在此方法里面设置 token 认证</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>创建ajax</span><br><span class="line">request = (&#123;</span><br><span class="line">    url,</span><br><span class="line">    method = <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data,</span><br><span class="line">    onProgress = <span class="function"><span class="params">(e: any)</span> =&gt;</span> e,</span><br><span class="line">    requestList = <span class="built_in">this</span>.state.requestList,</span><br><span class="line">&#125;: IAjax) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">        const xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.upload.onprogress = onProgress;</span><br><span class="line">        xhr.open(method, url, <span class="literal">true</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">&#x27;Authorization&#x27;</span>, <span class="built_in">this</span>.props.token);</span><br><span class="line">        xhr.send(data);</span><br><span class="line">        xhr.onload = <span class="function"><span class="params">(e: any)</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="regexp">//</span> 将请求成功的 xhr 从列表中删除</span><br><span class="line">            const &#123; requestList &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">            <span class="keyword">if</span> (requestList) &#123;</span><br><span class="line">                const xhrIndex = requestList.findIndex(<span class="function"><span class="params">(item)</span> =&gt;</span> item.xhr === xhr);</span><br><span class="line">                requestList.splice(xhrIndex, <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">this</span>.setState(&#123; requestList &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            resolve(&#123;</span><br><span class="line">                data: e.target.response,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.onerror = <span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">            <span class="regexp">//</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;fail&#x27;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        requestList.push(&#123; xhr, hash:data.get(<span class="string">&#x27;hash&#x27;</span>)&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            requestList,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="记录分片进度方法"><a href="#记录分片进度方法" class="headerlink" title="记录分片进度方法"></a>记录分片进度方法</h2><p><code>this.createProgressHandler(data, hash)</code>在上面 createHttp 方法调用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">createProgressHandler = <span class="function">(<span class="params">item1, hash</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">e: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> &#123; fileChunkList &#125; = <span class="built_in">this</span>.state;</span><br><span class="line">          <span class="keyword">let</span> index=hash.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">          fileChunkList[<span class="number">0</span>].progressArr[index]=e.load</span><br><span class="line">          <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">              fileChunkList,</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="调用开始上传的方法"><a href="#调用开始上传的方法" class="headerlink" title="调用开始上传的方法"></a>调用开始上传的方法</h2><p>this.upFile(this,state.fileChunkList[0])(true)<br>参数 true 是保证 2 个请求一发</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 开始上传</span><br><span class="line"><span class="function">   <span class="title">upFile</span> = <span class="params">( item)</span> =&gt;</span> &#123;</span><br><span class="line">       let fileArr=item.keys</span><br><span class="line">       let init = <span class="number">0</span>;</span><br><span class="line">       let loopFun = <span class="function"><span class="params">(initValue)</span> =&gt;</span> &#123;</span><br><span class="line">           fileArr[initValue]()</span><br><span class="line">               .<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (<span class="built_in">JSON</span>.parse(res.data).statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">                       init++;</span><br><span class="line">                       <span class="keyword">if</span> (init &lt; fileArr.length) &#123;</span><br><span class="line">                        <span class="regexp">//</span>继续传下一个分片</span><br><span class="line">                           <span class="keyword">loop</span>();</span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (init === fileArr.length &amp;&amp; !item.errChunk.length &amp;&amp; fileArr.length !== <span class="number">1</span>) &#123;</span><br><span class="line">                       <span class="regexp">//</span>分片传完，合并分片</span><br><span class="line">                           <span class="built_in">this</span>.mergeChunk(item);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">               .<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="regexp">//</span>捕获上传失败的分片存起来</span><br><span class="line">                   let arrChunk = item.errChunkFile.concat(fileArr[initValue]);</span><br><span class="line">                   init++;</span><br><span class="line">                   item.errChunkFile = arrChunk;</span><br><span class="line">                   <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">                       fileChunkList: [...item],</span><br><span class="line">                   &#125;);</span><br><span class="line">                   <span class="keyword">if</span> (init &lt; fileArr.length) &#123;</span><br><span class="line">                       <span class="keyword">loop</span>();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">       &#125;;</span><br><span class="line">       let <span class="keyword">loop</span> = <span class="function"><span class="params">(initFlag)</span> =&gt;</span> &#123;</span><br><span class="line">           loopFun(init);</span><br><span class="line">           <span class="keyword">if</span> (initFlag) &#123;</span><br><span class="line">               loopFun(++init);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">loop</span>;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>合并分片的方法我就不写了，就调用一个接口即可。</p>
<p>假如存在上传失败的分片，会被记录在 fileChunkList[0].errChunkFile.对这个失败的数组做一个上传就可以了。</p>
<h2 id="断点续传-暂停"><a href="#断点续传-暂停" class="headerlink" title="断点续传 暂停"></a>断点续传 暂停</h2><p>this.state.requestList 是当前正在请求的分片集合。暂停就是把请求 abor</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">upFileCancel</span> = <span class="params">(itemCurrent: IFileChunksList)</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state.requestList.forEach(<span class="function"><span class="params">(item)</span> =&gt;</span> &#123;</span><br><span class="line">                item.xhr.abort();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>续传，可以获取已经上传成功的，然后把未上传的重新上传即可。</p>
<p>我只写了前端的大致实现思想，后端只需提供单个分片上传的接口，合并分片的接口。我的 hash 用文件名+索引，用 spark-md5 对文件内容生成一个 hash 才是最合适的。</p>
<p>单个大文件上传感觉其实并不复杂，知道它的大致思想再去扩展多文件排队上传，断点续传，记录每个文件的进度条、总进度条甚至每个分片的进度条，还要考虑暂停的时候，由于 onProgress 是实时监听进度条的，当分片上传了百分之 80，取消后变为 0，进度条回退的情况….</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>133-react别名@vscode没有提示</title>
    <url>/20211119/133-react%E5%88%AB%E5%90%8D-vscode%E6%B2%A1%E6%9C%89%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="jsconfig"><a href="#jsconfig" class="headerlink" title="jsconfig"></a>jsconfig</h2><p>在目录下创建 jsconfig.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span>: [<span class="string">&quot;./src/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iMGVjODcwZGRmZGY=">参考资料<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="ts-环境下"><a href="#ts-环境下" class="headerlink" title="ts 环境下"></a>ts 环境下</h2><ol>
<li>安装 yarn add @craco/craco</li>
<li>/_ package.json _/</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* package.json */</span></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">-   &quot;<span class="keyword">build</span><span class="string">&quot;: &quot;</span>react-scripts <span class="keyword">build</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">-   &quot;</span>test<span class="string">&quot;: &quot;</span>react-scripts test<span class="string">&quot;,</span></span><br><span class="line"><span class="string">+   &quot;</span><span class="keyword">start</span><span class="string">&quot;: &quot;</span>craco <span class="keyword">start</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">+   &quot;</span><span class="keyword">build</span><span class="string">&quot;: &quot;</span>craco <span class="keyword">build</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">+   &quot;</span>test<span class="string">&quot;: &quot;</span>craco test<span class="string">&quot;,</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>然后在项目根目录创建一个 craco.config.js 用于修改默认配置。</li>
</ol>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* craco.config.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> resolve = dir =&gt; path.resolve(__dirname, dir)</span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">  webpack: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>项目跟目录创建 paths.json</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;src&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span>: [<span class="string">&quot;*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>tsconfig.json 中增加 baseUrl 和 extends</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;dom&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dom.iterable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;esnext&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react-jsx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;src&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;src&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;./paths.json&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>134-react别名@ alias</title>
    <url>/20211119/134-react-%E4%BD%BF%E7%94%A8craco%E4%BF%AE%E6%94%B9ant%E4%B8%BB%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%B7%AF%E5%BE%84%E5%88%AB%E5%90%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="craco"><a href="#craco" class="headerlink" title="craco"></a>craco</h2><p><code>yarn add @craco/craco</code></p>
<p><code>yarn add craco-less</code></p>
<p>根目录下创建<code>craco.config.js</code></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CracoLessPlugin = <span class="built_in">require</span>(<span class="string">&#x27;craco-less&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> resolve = dir =&gt; path.resolve(__dirname, dir)</span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      plugin: CracoLessPlugin,</span><br><span class="line">      options: &#123;</span><br><span class="line">        lessLoaderOptions: &#123;</span><br><span class="line">          lessOptions: &#123;</span><br><span class="line">            modifyVars: &#123; <span class="string">&#x27;@primary-color&#x27;</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span><br><span class="line">            javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  webpack: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* package.json */</span></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">-   &quot;<span class="keyword">build</span><span class="string">&quot;: &quot;</span>react-scripts <span class="keyword">build</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">-   &quot;</span>test<span class="string">&quot;: &quot;</span>react-scripts test<span class="string">&quot;,</span></span><br><span class="line"><span class="string">+   &quot;</span><span class="keyword">start</span><span class="string">&quot;: &quot;</span>craco <span class="keyword">start</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">+   &quot;</span><span class="keyword">build</span><span class="string">&quot;: &quot;</span>craco <span class="keyword">build</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">+   &quot;</span>test<span class="string">&quot;: &quot;</span>craco test<span class="string">&quot;,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<ul>
<li>@import ‘antd/dist/antd.less’;</li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>135-react-使用styled-components</title>
    <url>/20211119/135-react-%E4%BD%BF%E7%94%A8styled-components/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h2><p><code>yarn add styled-components</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Title = styled.div.attrs(&#123;</span><br><span class="line">  <span class="attr">bgc</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">&#125;)<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;(props) =&gt; props.bgc&#125;</span>;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;(props) =&gt; props.color&#125;</span>;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">bg</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Title</span> <span class="attr">color</span>=<span class="string">&#123;this.state.bg&#125;</span>&gt;</span>styled-component<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9iYXNpY3MjaW5zdGFsbGF0aW9u">参考资料<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>136-react中引入taiwindcss</title>
    <url>/20211119/136-react%E4%B8%AD%E5%BC%95%E5%85%A5taiwindcss/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="tailwind"><a href="#tailwind" class="headerlink" title="tailwind"></a>tailwind</h2><p><code>yarn add tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9</code></p>
<p><code>npm install @craco/craco</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-scripts start&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;react-scripts build&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;react-scripts test&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;craco start&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;craco build&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;craco test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eject&quot;</span>: <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> craco.config.js</span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">style: &#123;</span><br><span class="line">  postcss: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;tailwindcss&#x27;</span>),</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>npx tailwindcss-cli@latest init</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">tailwind.config.js</span></span><br><span class="line"> <span class="string">module.exports</span> <span class="string">=</span> &#123;</span><br><span class="line">  <span class="attr">purge:</span> [],</span><br><span class="line">  <span class="attr">purge:</span> [<span class="string">&#x27;./src/**/*.&#123;js,jsx,ts,tsx&#125;&#x27;</span>, <span class="string">&#x27;./public/index.html&#x27;</span>],</span><br><span class="line">   <span class="attr">darkMode:</span> <span class="literal">false</span>, <span class="string">//</span> <span class="string">or</span> <span class="string">&#x27;media&#x27;</span> <span class="string">or</span> <span class="string">&#x27;class&#x27;</span></span><br><span class="line">   <span class="attr">theme:</span> &#123;</span><br><span class="line">     <span class="attr">extend:</span> &#123;&#125;,</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">variants:</span> &#123;</span><br><span class="line">     <span class="attr">extend:</span> &#123;&#125;,</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">plugins:</span> [],</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ./src/index.css */</span></span><br><span class="line"><span class="variable">@tailwind</span> base;</span><br><span class="line"><span class="variable">@tailwind</span> components;</span><br><span class="line"><span class="variable">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure>

<p>如果上面不生效 需要</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;tailwindcss/base&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;tailwindcss/components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;tailwindcss/utilities&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly90YWlsd2luZGNzcy5jb20vZG9jcy9ndWlkZXMvY3JlYXRlLXJlYWN0LWFwcA==">参考资料<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>137-react中状态管理--redux</title>
    <url>/20211122/137-react%E4%B8%AD%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86-redux/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>习惯了 Vuex 一把梭，到了 react 就太鸡愁了，太多太多选择….</p>
<p>最后还是用下 redux 官方出的 @reduxjs/toolkit</p>
<p>依赖 redux 必须装<br><code>yarn add react-redux </code><br><code>yarn add @reduxjs/toolkit</code></p>
<p>目录下创建 store</p>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h2><p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&#x27;./slice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = configureStore(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">import &#123; createSlice &#125; <span class="keyword">from</span> &#x27;@reduxjs/toolkit&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  value: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">export <span class="keyword">const</span> counterSlice = createSlice(&#123;</span><br><span class="line">  name: &#x27;counter&#x27;,</span><br><span class="line">  initialState,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    increment: (<span class="keyword">state</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">state</span>.value += <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    decrement: (<span class="keyword">state</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">state</span>.value -= <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    incrementByAmount: (<span class="keyword">state</span>, action) =&gt; &#123;</span><br><span class="line">      <span class="keyword">state</span>.value += action.payload</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">export <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.actions</span><br><span class="line">export <span class="keyword">default</span> counterSlice.reducer</span><br></pre></td></tr></table></figure>

<p>其实就是精简了一些 reducer</p>
<h2 id="示例-2：todolist"><a href="#示例-2：todolist" class="headerlink" title="示例 2：todolist"></a>示例 2：todolist</h2><p>store/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&#x27;./slice&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> todoListReducer <span class="keyword">from</span> <span class="string">&#x27;./todoSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = configureStore(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer,</span><br><span class="line">    <span class="attr">todoList</span>: todoListReducer</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>store/todoSlice.js(reducer)</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">import &#123; createSlice &#125; <span class="keyword">from</span> &#x27;@reduxjs/toolkit&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  value: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export <span class="keyword">const</span> todoSlice = createSlice(&#123;</span><br><span class="line">  name: &#x27;todoList&#x27;,</span><br><span class="line">  initialState,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    addTodo: (<span class="keyword">state</span>, action) =&gt; &#123;</span><br><span class="line">      console.<span class="keyword">log</span>(<span class="keyword">state</span>.value);</span><br><span class="line">      <span class="keyword">state</span>.value.push(action.payload)</span><br><span class="line">    &#125;,</span><br><span class="line">    clearTodo: (<span class="keyword">state</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">state</span>.value.length = <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    removeItemByid: (<span class="keyword">state</span>, &#123; type, payload &#125;) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">state</span>.value = <span class="keyword">state</span>.value.filter(item =&gt; item.id !== payload)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export <span class="keyword">const</span> &#123; addTodo, clearTodo, removeItemByid &#125; = todoSlice.actions</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> todoSlice.reducer</span><br></pre></td></tr></table></figure>

<p>组件中使用.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">counter</span>: store.getState().counter.value,</span><br><span class="line">      <span class="attr">todolist</span>: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">counter</span>: store.getState().counter.value,</span><br><span class="line">        <span class="attr">todolist</span>: store.getState().todoList.value,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; counter, todolist &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>counter:&#123;counter&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          todoList:</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;todolist.map((item) =&gt; (</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.text&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.remove(item.id)&#125;&gt;</span></span><br><span class="line"><span class="xml">                  删除</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;default&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.remove(item.id)&#125;&gt;</span></span><br><span class="line"><span class="xml">                  删除2</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            ))&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="title">remove</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.props.removeItem(id)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">remove2</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    store.dispatch(removeItemByid(id))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="案例-3"><a href="#案例-3" class="headerlink" title="案例 3"></a>案例 3</h2><p>其实在 react-redux 中可以用 hook</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; incrementByAmount &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/slice&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Home</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> counter = useSelector(<span class="function">(<span class="params">state</span>) =&gt;</span> state.counter.value)</span><br><span class="line">  <span class="keyword">const</span> dispatch = useDispatch()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;counter&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(incrementByAmount(3))&#125;&gt;+3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h2><p>注意 name（users）要对应，getUserList 返回的是 promise 所以可以 getUserList.pending</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">import &#123; createSlice, createAsyncThunk &#125; <span class="keyword">from</span> &#x27;@reduxjs/toolkit&#x27;;</span><br><span class="line">import axios <span class="keyword">from</span> &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">const</span> getUserList = createAsyncThunk(<span class="string">&quot;users/getuser&quot;</span>, async () =&gt; &#123;</span><br><span class="line">  return await axios.get(&#x27;https://www.wy1991.cn/api/index/sleep3&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">const</span> <span class="keyword">user</span>List = createSlice(&#123;</span><br><span class="line">  name: &#x27;users&#x27;,</span><br><span class="line">  initialState: &#123;</span><br><span class="line">    value: &#x27;ceshi&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;&#125;,</span><br><span class="line">  extraReducers: &#123;</span><br><span class="line">    [getUserList.pending]: (<span class="keyword">state</span>, action) =&gt; &#123;</span><br><span class="line">      console.<span class="keyword">log</span>(<span class="string">&quot;pending&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    [getUserList.fulfilled]: (<span class="keyword">state</span>, action) =&gt; &#123;</span><br><span class="line">      <span class="keyword">state</span>.value = action.payload.data.data</span><br><span class="line">      console.<span class="keyword">log</span>(<span class="string">&quot;fulfilled&quot;</span>, action);</span><br><span class="line">    &#125;,</span><br><span class="line">    [getUserList.rejected]: (<span class="keyword">state</span>, action) =&gt; &#123;</span><br><span class="line">      console.<span class="keyword">log</span>(<span class="string">&quot;rejected&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="keyword">user</span>List.reducer;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后不要忘了 把 store 放到 入口中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>也可以参考别人的掘金文章 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTI5MTc4MDA5NjEz">地址<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>138-react中用到的库</title>
    <url>/20211124/138-react%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><ul>
<li>react</li>
<li>redux</li>
<li>styled-components</li>
<li>antd</li>
<li>react-transition-group</li>
<li>react-redux-toolkit</li>
<li>react-router-dom</li>
<li>classnames</li>
<li>events</li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>139-react中使用scss</title>
    <url>/20211129/139-react%E4%B8%AD%E4%BD%BF%E7%94%A8scss/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h2><blockquote>
<p>Node Sass version 6.0.0 is incompatible with^4.0.0</p>
</blockquote>
<p><code>npm install node-sass@4.14.1</code></p>
<p>安装完成可能会提示不支持 sass 6 版本，所以需要指定版本</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>js-promise精简版</title>
    <url>/20210703/14-js-promise%E7%B2%BE%E7%AE%80%E7%89%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="精简的-Promise-实现"><a href="#精简的-Promise-实现" class="headerlink" title="精简的 Promise 实现"></a>精简的 Promise 实现</h2><blockquote>
<p>为了更好的体现 Promise 的核心实现，已决状态只留 resolved</p>
</blockquote>
<h3 id="参数值传递"><a href="#参数值传递" class="headerlink" title="参数值传递"></a>参数值传递</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">12</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>看 myPromise 内需要传一个函数，且该函数的参数还是个函数，即这种形式 myPromise(fn(f))，f 里有一个参数。之后 then 中的 data 会被赋予 f 中的参数值，then()需要传递一个函数作为参数，而 data 又是该函数的参数。<br>要实现这样的数据传递，如何做？</p>
<h3 id="myPromise-以类的方式声明"><a href="#myPromise-以类的方式声明" class="headerlink" title="myPromise 以类的方式声明"></a>myPromise 以类的方式声明</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">excu</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.data = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">(<span class="params">dat</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = dat</span><br><span class="line">    &#125;</span><br><span class="line">    excu(resolve)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">thennable</span>)</span> &#123;</span><br><span class="line">    thennable(<span class="built_in">this</span>.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一、值在类中被保存</p>
<p>在 constructor 中，该类需要传递一个函数作为参数，即 constructor(excu)，excu 中有一个 resolve 函数，最后 excu 需要在 new 的时候被执行一次，即 excu(resolve)<br>在该类中 resolve 是没有被定义的，需要定义。形式上 resolve 有个参数，需要被保存用 data 保存</p>
<p>二、值传递到 then 中</p>
<p>定义 then 方法，在 then 方法传递一个 thennable 参数<br>then 方法内，调用 thennable(this.data)</p>
<p>且看效果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">12</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//打印出12</span></span><br></pre></td></tr></table></figure>

<p>解释：js 中的值传递可以实参到形参，也可以形参到实参，貌似并没有明确的界限，很灵活 thennable(this.data)，将 data 值传到了 then(data =&gt; {console.log(data)})处。</p>
<h3 id="then-的链式调用实现"><a href="#then-的链式调用实现" class="headerlink" title="then 的链式调用实现"></a>then 的链式调用实现</h3><p>先将代码退到这一步</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">excu</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.data = <span class="number">0</span></span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&#x27;pendding&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">(<span class="params">dat</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="string">&#x27;pendding&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = dat</span><br><span class="line">        <span class="built_in">this</span>.status = <span class="string">&#x27;resolved&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    excu(resolve)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">thennable</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> promise2 = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="string">&#x27;resolved&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = thennable(<span class="built_in">this</span>.data)</span><br><span class="line">        resolve(x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加入状态 padding 和 resolved 不用多说了，主要看 then 函数中的变化。</p>
<p>then 返回的得是个 promise，因此需要 new myPromise，再 return。<br>thennable 是有返回值的，这里不考虑复杂情况，假设返回的仅仅是一个数字。那么该数字即成为下一个 promise 的 data 值。<br>用 resolve 完成关联，注意此处的 resolve 是 new myPromise 中的参数，换句话说，resolve 是 then 生成的新 promise 的，而箭头函数的使用，使得其中的 this 指向前一个 promise，最后 resolve(x)，将前 Promise 的 data 值成功传递到了后 Promise 的 data 中</p>
<p>且看效果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">12</span>)</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">/*打印结果：</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">14</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="thennable-队列的实现"><a href="#thennable-队列的实现" class="headerlink" title="thennable 队列的实现"></a>thennable 队列的实现</h3><p>myPromise 中，padding 状态不能执行 thennable 中的代码<br>切换为 resolved 状态后，才能执行 thennable 中的代码<br>采用一个数组进行存储 resolved 状态要执行的函数<br>在 resolve 函数中执行先前存储的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">excu</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.data = <span class="number">0</span></span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&#x27;pendding&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.arrayResolve = []</span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">(<span class="params">dat</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="string">&#x27;pendding&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = dat</span><br><span class="line">        <span class="built_in">this</span>.status = <span class="string">&#x27;resolved&#x27;</span></span><br><span class="line">        <span class="comment">//将压入arrayResolve的函数拿出运行</span></span><br><span class="line">        <span class="built_in">this</span>.arrayResolve.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn())</span><br><span class="line">        <span class="comment">//其实该数组最多只有一项，也可以使用一下代码执行</span></span><br><span class="line">        <span class="comment">// if(this.arrayResolve[0]!=undefined)&#123;//也可以try...catch</span></span><br><span class="line">        <span class="comment">//     this.arrayResolve[0]()</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    excu(resolve)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">thennable</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> promise2 = <span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="string">&#x27;resolved&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;resolved&#x27;</span>)</span><br><span class="line">        <span class="comment">//加setTimeout模拟异步</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = thennable(<span class="built_in">this</span>.data)</span><br><span class="line">          resolve(x)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//添加内容</span></span><br><span class="line">      <span class="comment">//如果当前promise状态为pendding，则用存储resolved状态运行的代码。</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status == <span class="string">&#x27;pendding&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;pendding&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.arrayResolve.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = thennable(<span class="built_in">this</span>.data)</span><br><span class="line">            resolve(x)</span><br><span class="line">          &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码：</span></span><br><span class="line"><span class="keyword">new</span> myPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">  resolve(<span class="number">12</span>)</span><br><span class="line">  <span class="comment">// &#125;, 1)</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><ul>
<li>promise 简单来说就是一个容器,里面保存着某个未来才会结束的事件(通常是一个异步操作)的结果.从语法上说,Promise 是一个对象,从它可以获取异步操作的消息.</li>
</ul>
<h3 id="一-特点"><a href="#一-特点" class="headerlink" title="一. 特点"></a>一. 特点</h3><ol>
<li>对象的状态不受外界影响.Promise 对象代表一个异步操作,有三种状态 Pending(进行中),Resolved(已完成 又称 Fulfiled)和 Rejected(已失败).只有异步操作的结果,可以决定当前是哪一种状态,任何其他操作都无法改变这个状态.</li>
<li>一旦状态改变就不会再变,任何时候都可以得到这个结果.Promise 对象的状态改变,只有两种可能:从 Pending 变为 Resolved 和从 Pending 变为 Rejected.只要这两种状态发生,状态就凝固了,不会再变了,会一直保持这个结果,如果改变已经发生了,你再对 Promise 对象添加回调函数,也会立即得到这个结果.这与事件(Event)完全不同,事件的特点是,如果你错过了它,再去监听,是得不到结果的.</li>
</ol>
<h3 id="二-缺点"><a href="#二-缺点" class="headerlink" title="二. 缺点"></a>二. 缺点</h3><ol>
<li>无法取消 Promise,一旦新建它就会立即执行,无法中途取消</li>
<li>如果不设置回调函数,Promise 内部抛出的错误,不会反应到外部.</li>
<li>当处于 Pending 状态时,无法得知目前进展到哪一阶段(刚刚开始还是即将完成)</li>
</ol>
<h3 id="三-基本用法"><a href="#三-基本用法" class="headerlink" title="三. 基本用法"></a>三. 基本用法</h3><p>Promise 对象是一个构造函数,用来生成 Promise 实例</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;开始执行&#x27;</span>);</span><br><span class="line">    resolve(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    reject(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise1.<span class="keyword">then</span>(<span class="function"><span class="params">(value)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;, <span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="regexp">//</span> 输出 开始执行  success</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;开始执行&#x27;</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve, ms, <span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timeout(<span class="number">1000</span>).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出开始执行  1000毫秒后输出 done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面 timeout 方法返回一个 promise,1000 毫秒后执行 resole 方法</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;p1开始执行&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;fail&#x27;</span>)), <span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;p1结束?&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">let p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;p2开始执行&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> resolve(p1), <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p2.<span class="keyword">then</span>(data =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).<span class="keyword">catch</span>(error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="regexp">//</span> 输出 p1开始执行 p1结束? p2开始执行 <span class="number">3000</span>毫秒后输出 fail</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>上面方法中 p2 的 then 方法的返回值为 promise 的实例 p1,将先执行 p1,在 p1 中 3000 毫秒后 reject 一个 error,p2 的 catch 方法输出这个 error</li>
</ul>
<h3 id="四-‘冒泡’"><a href="#四-‘冒泡’" class="headerlink" title="四. ‘冒泡’"></a>四. ‘冒泡’</h3><p>Promise 对象的错误具有’冒泡’性质,会一直向后传递,直到被捕获为止,也就是说错误总会被下一个 catch 语句捕获</p>
<pre><code>  // bad
  promise.then(data =&gt; &#123;&#125;, err =&gt; &#123;&#125;);
  // good
  promise.then(data =&gt; &#123;&#125;).catch(error =&gt; &#123;&#125;)
</code></pre>
<ul>
<li>上面代码中,第二种写法要优于第一种写法,理由是第二种写法可以捕获前面 then 方法执行中的错误,也更接近同步的写法(try/catch).因此建议使用 catch 方法,而不是使用 then 方法的第二个参数.</li>
<li>跟传统的 try/catch 代码块不同的是,如果没有使用 catch 方法指定错误处理的回调函数,Promise 对象抛出的错误不会传递到外层代码,即不会有任何反应 但是 Chrome 浏览器不遵守这条规定,它会抛出错误 “RfterenceError:”</li>
</ul>
<h3 id="五-几个小方法"><a href="#五-几个小方法" class="headerlink" title="五. 几个小方法"></a>五. 几个小方法</h3><ol>
<li>Promise.all() 方法用于将多个 Promise 实例,包装成一个新的 Promise 实例</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pall1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   resolve(<span class="string">&#x27;resolve1&#x27;</span>);</span><br><span class="line">   reject(<span class="string">&#x27;reject1&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> pall2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   resolve(<span class="string">&#x27;resolve2&#x27;</span>);</span><br><span class="line">   reject(<span class="string">&#x27;reject2&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> pall3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   resolve(<span class="string">&#x27;resolve3&#x27;</span>);</span><br><span class="line">   reject(<span class="string">&#x27;reject3&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.all([pall1, pall2, pall3]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面代码中,Promise.all 方法接收一个数组作为参数, pall1,pall2,pall3 都是 Promise 对象的实例,如果不是,就会调用 Promise.resolve 方法,将参数转为 Promise 实例,再进一步处理.</p>
<h4 id="p1-的状态由-p1-p2-p3-决定分成两种情况"><a href="#p1-的状态由-p1-p2-p3-决定分成两种情况" class="headerlink" title="p1 的状态由 p1,p2,p3 决定分成两种情况"></a>p1 的状态由 p1,p2,p3 决定分成两种情况</h4><ul>
<li><p>只有 p1,p2,p3 的状态都变成 fulFiled, p1 的状态才会变成 fulFiled,此时 p1,p2,p3 的返回值组成一个数组,传递给怕的回调函数</p>
</li>
<li><p>只要 p1,p2,p3 之中的一个被 rejected,p1 的状态变成 rejected,此时第一个被 reject 的实例的返回值,会传递给 p1 的回调函数</p>
</li>
</ul>
<h4 id="2-Promise-race-方法将多个-Promise-实例-包装成一个新的-Promise-实例"><a href="#2-Promise-race-方法将多个-Promise-实例-包装成一个新的-Promise-实例" class="headerlink" title="2)Promise.race() 方法将多个 Promise 实例,包装成一个新的 Promise 实例"></a>2)Promise.race() 方法将多个 Promise 实例,包装成一个新的 Promise 实例</h4><pre><code>  let p = Promise.race([pall1, pall2, pall3]);

  // 只要 pall1, pall2, pall3 之中的一个实例率先改变状态,p 的状态就跟着改变,那个率先改变的 Promise 实例的返回值,就传递给 p 的实例,再进一步处理
</code></pre>
<h4 id="3-Promise-resolve-将现有对象转为-Promise-对象"><a href="#3-Promise-resolve-将现有对象转为-Promise-对象" class="headerlink" title="3)Promise.resolve() 将现有对象转为 Promise 对象"></a>3)Promise.resolve() 将现有对象转为 Promise 对象</h4><ol>
<li><p> 参数是一个 Promise 实例,那么 Promise.resolve 将不做任何修改,原封不动的返回这个实例</p>
</li>
<li><p>参数是一个 thenable 对象 thenable 对象指的是具有 then 方法的对象</p>
<pre><code> let thenable = &#123;
 then: (resolve, reject) =&gt; &#123;
 resolve(11);
 &#125;
 &#125;
 // Promise.resolve 方法会将这个对象转为 Promise 对象, 然后立即执行 thenable 对象的 then 方法
 let pResoleve = Promise.resolve(thenable);
 pResoleve.then(data =&gt; &#123;
 console.log(data)
 &#125;)
</code></pre>
</li>
</ol>
<ul>
<li>上面代码中,thenable 对象的 then 方法执行后,对象 pResolve 的状态就变为 resolved 从而立即执行最后那个 then 方法指定的回调函数 输出 11</li>
</ul>
<ol start="3">
<li>参数不是具有 then 方法的对象,或根本就不是对象</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p4 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">p4.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>如果参数是一个原始值,或者是一个不具有 then 方法的对象,则 Promise.resolve 方法返回一个新的 Promise 对象,状态为 Resolved</li>
<li>上面代码生成一个新的 Promise 对象的实例 p4,由于字符串不属于异步操作(判断方法是它不具有 then 方法的对象),返回 promise 状态从一生成就是 Resolved,所以回调函数会立即执行,Promise.resolve 方法的参数,会同时传给回调函数</li>
</ul>
<ol start="4">
<li><p>不带任何参数</p>
<ul>
<li>Promise.resolve 方法允许调用时不带参数,直接返回一个 Resolved 状态的 Promise 对象</li>
</ul>
</li>
</ol>
<h4 id="4-Promise-reject"><a href="#4-Promise-reject" class="headerlink" title="4) Promise.reject()"></a>4) Promise.reject()</h4><p>Promise.reject()方法也会返回一个新的 Promise 实例,该实例的状态为 rejected</p>
<h4 id="5-done"><a href="#5-done" class="headerlink" title="5) done()"></a>5) done()</h4><ul>
<li><p>p1.then().done()</p>
</li>
<li><p>Promise 方法的回调链,不管是以 then 方法或 catch 方法结尾,要是最后一个方法抛出错误,都有可能无法捕捉到,可以用 done()方法,总是处于回调链的尾端,保证抛出任何可能出现的错误</p>
</li>
</ul>
<h4 id="6-finally"><a href="#6-finally" class="headerlink" title="6)finally()"></a>6)finally()</h4><ul>
<li><p>p2.then().done().finally()</p>
</li>
<li><p>finally()方法用于指定不管 Promise 对象最后状态如何,都会执行的操作,它与 done 方法最大的区别,它接受一个普通的回调函数作为参数,该函数不管怎样都必须执行</p>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>142-移动端react手写签名</title>
    <url>/20211224/142-%E7%A7%BB%E5%8A%A8%E7%AB%AFreact%E6%89%8B%E5%86%99%E7%AD%BE%E5%90%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="css-部分"><a href="#css-部分" class="headerlink" title="css 部分"></a>css 部分</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.canvasView</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">3.75rem</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0px</span> solid red;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* padding: 5px 10px; */</span></span><br><span class="line"><span class="selector-id">#canvasViewClear</span>,</span><br><span class="line"><span class="selector-id">#canvasViewClear1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#e1e1e1</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#canvasViewSave</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#e1e1e1</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#canvasViewCancel</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#e1e1e1</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sureAndcancel</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.canvasView-allView</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Electronic-writeView</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0.87rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: Center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Electronic-writeViewIMG</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">270deg</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0.6rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">1.57rem</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="1js-部分-react-版本"><a href="#1js-部分-react-版本" class="headerlink" title="1js 部分 react 版本"></a>1js 部分 react 版本</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../css/ElectronicContract.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd-mobile/lib/activity-indicator/style/css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;antd-mobile/lib/Toast/style/css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../css/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Modal &#125; <span class="keyword">from</span> <span class="string">&#x27;antd-mobile&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; isNullStr &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../../utils/saveDetailsAll&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; baseApi, uploadPicture &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../../utils/ServiceApi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alert = Modal.alert</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.pdfHeight = <span class="number">100</span></span><br><span class="line">    <span class="built_in">this</span>.d = <span class="number">1</span></span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">isSignature</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">imgSrcV</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">animating</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">dateNumer</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  WriteFont = <span class="function">(<span class="params">id, options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;进去&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span></span><br><span class="line">    <span class="built_in">this</span>.canvas = ReactDOM.findDOMNode(<span class="built_in">document</span>.getElementById(id))</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">canvas</span>: <span class="built_in">this</span>.canvas,</span><br><span class="line">      <span class="attr">context</span>: <span class="built_in">this</span>.canvas.getContext(<span class="string">&#x27;2d&#x27;</span>),</span><br><span class="line">      <span class="attr">isWrite</span>: <span class="literal">false</span>, <span class="comment">//是否开始</span></span><br><span class="line">      <span class="attr">lastWriteTime</span>: -<span class="number">1</span>,</span><br><span class="line">      <span class="attr">lastWriteSpeed</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">lastWriteWidth</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">canvasWidth</span>: <span class="built_in">document</span>.documentElement.clientWidth - <span class="number">10</span>, <span class="comment">//canvas宽高</span></span><br><span class="line">      <span class="attr">canvasHeight</span>: <span class="built_in">document</span>.documentElement.clientHeight - <span class="number">10</span>,</span><br><span class="line">      <span class="attr">isShowBorder</span>: <span class="literal">true</span>, <span class="comment">//是否显示网格</span></span><br><span class="line">      <span class="attr">bgColor</span>: <span class="string">&#x27;#fff&#x27;</span>, <span class="comment">//背景色</span></span><br><span class="line">      <span class="attr">borderWidth</span>: <span class="number">2</span>, <span class="comment">//	网格线宽度</span></span><br><span class="line">      <span class="attr">borderColor</span>: <span class="string">&#x27;#fff&#x27;</span>, <span class="comment">//网格颜色</span></span><br><span class="line">      <span class="attr">lastPoint</span>: &#123;&#125;, <span class="comment">//</span></span><br><span class="line">      <span class="attr">writeWidth</span>: <span class="number">2</span>, <span class="comment">//基础轨迹宽度</span></span><br><span class="line">      <span class="attr">maxWriteWidth</span>: <span class="number">30</span>, <span class="comment">// 写字模式最大线宽</span></span><br><span class="line">      <span class="attr">minWriteWidth</span>: <span class="number">1</span>, <span class="comment">// 写字模式最小线宽</span></span><br><span class="line">      <span class="attr">writeColor</span>: <span class="string">&#x27;#000&#x27;</span>, <span class="comment">//	轨迹颜色</span></span><br><span class="line">      <span class="attr">isWriteName</span>: <span class="literal">true</span>, <span class="comment">//签名模式</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> options) &#123;</span><br><span class="line">      obj[name] = options[name]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 轨迹宽度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">this</span>.setLineWidth = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">      <span class="keyword">var</span> diffTime = nowTime - obj.lastWriteTime</span><br><span class="line">      obj.lastWriteTime = nowTime</span><br><span class="line">      <span class="keyword">var</span> returnNum = obj.minWriteWidth + ((obj.maxWriteWidth - obj.minWriteWidth) * diffTime) / <span class="number">30</span></span><br><span class="line">      <span class="keyword">if</span> (returnNum &lt; obj.minWriteWidth) &#123;</span><br><span class="line">        returnNum = obj.minWriteWidth</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (returnNum &gt; obj.maxWriteWidth) &#123;</span><br><span class="line">        returnNum = obj.maxWriteWidth</span><br><span class="line">      &#125;</span><br><span class="line">      returnNum = returnNum.toFixed(<span class="number">2</span>)</span><br><span class="line">      <span class="comment">//写字模式和签名模式</span></span><br><span class="line">      <span class="keyword">if</span> (obj.isWriteName) &#123;</span><br><span class="line">        obj.context.lineWidth = obj.writeWidth</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj.context.lineWidth = obj.lastWriteWidth = (obj.lastWriteWidth / <span class="number">4</span>) * <span class="number">3</span> + returnNum / <span class="number">4</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绘制轨迹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">this</span>.writing = <span class="function"><span class="keyword">function</span> (<span class="params">point</span>) </span>&#123;</span><br><span class="line">      obj.context.beginPath()</span><br><span class="line">      obj.context.moveTo(obj.lastPoint.x, obj.lastPoint.y)</span><br><span class="line">      obj.context.lineTo(point.x, point.y)</span><br><span class="line">      self.setLineWidth()</span><br><span class="line">      obj.context.stroke()</span><br><span class="line">      obj.lastPoint = point</span><br><span class="line">      obj.context.closePath()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 轨迹样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">this</span>.writeContextStyle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      obj.context.beginPath()</span><br><span class="line">      obj.context.strokeStyle = obj.writeColor</span><br><span class="line">      obj.context.lineCap = <span class="string">&#x27;round&#x27;</span></span><br><span class="line">      obj.context.lineJoin = <span class="string">&#x27;round&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">this</span>.writeBegin = <span class="function"><span class="keyword">function</span> (<span class="params">point</span>) </span>&#123;</span><br><span class="line">      obj.isWrite = <span class="literal">true</span></span><br><span class="line">      obj.lastWriteTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">      obj.lastPoint = point</span><br><span class="line">      self.writeContextStyle()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">this</span>.writeEnd = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      obj.isWrite = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空画板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">this</span>.canvasClear = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      obj.context.save()</span><br><span class="line">      obj.context.strokeStyle = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">      obj.context.clearRect(<span class="number">0</span>, <span class="number">0</span>, obj.canvasWidth, obj.canvasHeight)</span><br><span class="line">      <span class="keyword">if</span> (obj.isShowBorder &amp;&amp; !obj.isWriteName) &#123;</span><br><span class="line">        obj.context.beginPath()</span><br><span class="line">        <span class="keyword">var</span> size = obj.borderWidth / <span class="number">2</span></span><br><span class="line">        <span class="comment">//画外面的框</span></span><br><span class="line">        obj.context.moveTo(size, size)</span><br><span class="line">        obj.context.lineTo(obj.canvasWidth - size, size)</span><br><span class="line">        obj.context.lineTo(obj.canvasWidth - size, obj.canvasHeight - size)</span><br><span class="line">        obj.context.lineTo(size, obj.canvasHeight - size)</span><br><span class="line">        obj.context.closePath()</span><br><span class="line">        obj.context.lineWidth = obj.borderWidth</span><br><span class="line">        obj.context.strokeStyle = obj.borderColor</span><br><span class="line">        obj.context.stroke()</span><br><span class="line">        <span class="comment">//画里面的框</span></span><br><span class="line">        obj.context.moveTo(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        obj.context.lineTo(obj.canvasWidth, obj.canvasHeight)</span><br><span class="line">        obj.context.lineTo(obj.canvasWidth, obj.canvasHeight / <span class="number">2</span>)</span><br><span class="line">        obj.context.lineTo(obj.canvasWidth, obj.canvasHeight / <span class="number">2</span>)</span><br><span class="line">        obj.context.lineTo(<span class="number">0</span>, obj.canvasHeight / <span class="number">2</span>)</span><br><span class="line">        obj.context.lineTo(<span class="number">0</span>, obj.canvasHeight)</span><br><span class="line">        obj.context.lineTo(obj.canvasWidth, <span class="number">0</span>)</span><br><span class="line">        obj.context.lineTo(obj.canvasWidth / <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        obj.context.lineTo(obj.canvasWidth / <span class="number">2</span>, obj.canvasHeight)</span><br><span class="line">        obj.context.stroke()</span><br><span class="line">      &#125;</span><br><span class="line">      obj.context.restore()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存图片 格式base64</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">this</span>.saveAsImg = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> that = <span class="built_in">this</span></span><br><span class="line">      <span class="keyword">let</span> image = <span class="keyword">new</span> Image()</span><br><span class="line">      image.src = that.canvas.toDataURL(<span class="string">&#x27;image/png&#x27;</span>)</span><br><span class="line">      image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">      <span class="keyword">if</span> (image.src === that.emptyCanvas) &#123;</span><br><span class="line">        alert(<span class="string">&#x27;请先书写&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//此处进行对签完名字的回显</span></span><br><span class="line">        that.setState(&#123;</span><br><span class="line">          <span class="attr">imgSrcV</span>: image.src,</span><br><span class="line">        &#125;)</span><br><span class="line">        that.rotateBase64Img(image.src, <span class="number">270</span>, that.callback) <span class="comment">//调用旋转base64的方法</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">this</span>.transPicRoate = <span class="function">(<span class="params">imageUrl</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> that = <span class="built_in">this</span></span><br><span class="line">      <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">      <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化画板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">this</span>.canvasInit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.canvas.width = obj.canvasWidth</span><br><span class="line">      <span class="built_in">this</span>.canvas.height = obj.canvasHeight</span><br><span class="line">      <span class="built_in">this</span>.emptyCanvas = <span class="built_in">this</span>.canvas.toDataURL(<span class="string">&#x27;image/png&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**======================事件绑定===========================**/</span></span><br><span class="line">    <span class="built_in">this</span>.canvas.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> point = &#123;</span><br><span class="line">        <span class="attr">x</span>: e.offsetX || e.clientX,</span><br><span class="line">        <span class="attr">y</span>: e.offsetY || e.clientY,</span><br><span class="line">      &#125;</span><br><span class="line">      self.writeBegin(point)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.canvas.addEventListener(<span class="string">&#x27;mouseup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> point = &#123;</span><br><span class="line">        <span class="attr">x</span>: e.offsetX,</span><br><span class="line">        <span class="attr">y</span>: e.offsetY,</span><br><span class="line">      &#125;</span><br><span class="line">      self.writeEnd(point)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.canvas.addEventListener(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> point = &#123;</span><br><span class="line">        <span class="attr">x</span>: e.offsetX,</span><br><span class="line">        <span class="attr">y</span>: e.offsetY,</span><br><span class="line">      &#125;</span><br><span class="line">      self.writeEnd(point)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.canvas.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.isWrite) &#123;</span><br><span class="line">        <span class="keyword">var</span> point = &#123;</span><br><span class="line">          <span class="attr">x</span>: e.offsetX,</span><br><span class="line">          <span class="attr">y</span>: e.offsetY,</span><br><span class="line">        &#125;</span><br><span class="line">        self.writing(point)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//移动端</span></span><br><span class="line">    <span class="built_in">this</span>.canvas.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> touch = e.targetTouches[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">var</span> point = &#123;</span><br><span class="line">        <span class="attr">x</span>: touch.pageX || touch.clientX,</span><br><span class="line">        <span class="attr">y</span>: touch.pageY || touch.clientY,</span><br><span class="line">      &#125;</span><br><span class="line">      self.writeBegin(point)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.canvas.addEventListener(<span class="string">&#x27;touchend&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> touch = e.changedTouches[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">var</span> point = &#123;</span><br><span class="line">        <span class="attr">x</span>: touch.pageX,</span><br><span class="line">        <span class="attr">y</span>: touch.pageY,</span><br><span class="line">      &#125;</span><br><span class="line">      self.writeEnd(point)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.canvas.addEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> touch = e.targetTouches[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">var</span> point = &#123;</span><br><span class="line">        <span class="attr">x</span>: touch.pageX,</span><br><span class="line">        <span class="attr">y</span>: touch.pageY,</span><br><span class="line">      &#125;</span><br><span class="line">      self.writeEnd(point)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.canvas.addEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> touch = e.targetTouches[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">var</span> point = &#123;</span><br><span class="line">        <span class="attr">x</span>: touch.pageX,</span><br><span class="line">        <span class="attr">y</span>: touch.pageY,</span><br><span class="line">      &#125;</span><br><span class="line">      self.writing(point)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.canvasInit()</span><br><span class="line">    <span class="built_in">this</span>.canvasClear()</span><br><span class="line">    <span class="built_in">this</span>.option = obj</span><br><span class="line">    obj.control = &#123;</span><br><span class="line">      <span class="attr">clearCanvas</span>: self.canvasClear,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 旋转生成的base64方向</span></span><br><span class="line">  <span class="function"><span class="title">rotateBase64Img</span>(<span class="params">src, edg, callback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> imgW <span class="comment">//图片宽度</span></span><br><span class="line">    <span class="keyword">var</span> imgH <span class="comment">//图片高度</span></span><br><span class="line">    <span class="keyword">var</span> size <span class="comment">//canvas初始大小</span></span><br><span class="line">    edg &lt; <span class="number">0</span> &amp;&amp; (edg = (edg % <span class="number">360</span>) + <span class="number">360</span>)</span><br><span class="line">    <span class="keyword">const</span> quadrant = (edg / <span class="number">90</span>) % <span class="number">4</span> <span class="comment">//旋转象限</span></span><br><span class="line">    <span class="keyword">const</span> cutCoor = &#123; <span class="attr">sx</span>: <span class="number">0</span>, <span class="attr">sy</span>: <span class="number">0</span>, <span class="attr">ex</span>: <span class="number">0</span>, <span class="attr">ey</span>: <span class="number">0</span> &#125; <span class="comment">//裁剪坐标</span></span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image()</span><br><span class="line">    image.crossOrigin = <span class="string">&#x27;anonymous&#x27;</span></span><br><span class="line">    image.src = src</span><br><span class="line">    image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      imgW = image.width</span><br><span class="line">      imgH = image.height</span><br><span class="line">      size = imgW &gt; imgH ? imgW : imgH</span><br><span class="line">      canvas.width = size * <span class="number">2</span></span><br><span class="line">      canvas.height = size * <span class="number">2</span></span><br><span class="line">      <span class="comment">// 在canvas绘制前填充白色背景</span></span><br><span class="line">      ctx.fillStyle = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">      ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">      <span class="keyword">switch</span> (quadrant) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          cutCoor.sx = size</span><br><span class="line">          cutCoor.sy = size</span><br><span class="line">          cutCoor.ex = size + imgW</span><br><span class="line">          cutCoor.ey = size + imgH</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          cutCoor.sx = size - imgH</span><br><span class="line">          cutCoor.sy = size</span><br><span class="line">          cutCoor.ex = size</span><br><span class="line">          cutCoor.ey = size + imgW</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          cutCoor.sx = size - imgW</span><br><span class="line">          cutCoor.sy = size - imgH</span><br><span class="line">          cutCoor.ex = size</span><br><span class="line">          cutCoor.ey = size</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          cutCoor.sx = size</span><br><span class="line">          cutCoor.sy = size - imgW</span><br><span class="line">          cutCoor.ex = size + imgH</span><br><span class="line">          cutCoor.ey = size + imgW</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      ctx.translate(size, size)</span><br><span class="line">      ctx.rotate((edg * <span class="built_in">Math</span>.PI) / <span class="number">180</span>)</span><br><span class="line">      ctx.drawImage(image, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">var</span> imgData = ctx.getImageData(cutCoor.sx, cutCoor.sy, cutCoor.ex, cutCoor.ey)</span><br><span class="line">      <span class="keyword">if</span> (quadrant % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        canvas.width = imgW</span><br><span class="line">        canvas.height = imgH</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        canvas.width = imgH</span><br><span class="line">        canvas.height = imgW</span><br><span class="line">      &#125;</span><br><span class="line">      ctx.putImageData(imgData, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      callback(canvas.toDataURL())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//回调===&gt;旋转成功后存入state中</span></span><br><span class="line">  callback = <span class="function">(<span class="params">base64data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="built_in">this</span></span><br><span class="line">    <span class="built_in">console</span>.log(base64data)</span><br><span class="line">    <span class="built_in">window</span>.plugins.PicUploadPlugin.show(&#123;</span><br><span class="line">      <span class="attr">storeUrl</span>: <span class="string">`<span class="subst">$&#123;baseApi&#125;</span><span class="subst">$&#123;uploadPicture&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">mode</span>: <span class="string">&#x27;base64&#x27;</span>,</span><br><span class="line">      <span class="attr">base64Str</span>: <span class="string">`<span class="subst">$&#123;base64data&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">quality</span>: <span class="string">&#x27;low&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">_result</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(_result, <span class="string">&#x27;-------&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> fileIdStred = <span class="built_in">JSON</span>.parse(_result).data.content</span><br><span class="line">        <span class="keyword">if</span> (isNullStr(fileIdStred) !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> fileIdStrOne = <span class="built_in">window</span>.atob(fileIdStred)</span><br><span class="line">          <span class="comment">//此处拿到上传后的图片id</span></span><br><span class="line">          <span class="built_in">console</span>.log(fileIdStrOne, <span class="string">&#x27;***************&#x27;</span>)</span><br><span class="line">          <span class="comment">//此处进行对画板的重置</span></span><br><span class="line">          that.setState(&#123;</span><br><span class="line">            <span class="attr">isSignature</span>: <span class="number">0</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">_ex</span>) </span>&#123;</span><br><span class="line">        Toast.info(<span class="string">&#x27;上传失败&#x27;</span>, <span class="number">2</span>, <span class="literal">null</span>, <span class="literal">false</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 暂时无用</span></span><br><span class="line">  <span class="comment">// dataURLtoBlob=(dataurl)=&gt;&#123;</span></span><br><span class="line">  <span class="comment">//     let arr = dataurl.split(&#x27;,&#x27;)</span></span><br><span class="line">  <span class="comment">//     let mime = arr[0].match(/:(.*?);/)[1]</span></span><br><span class="line">  <span class="comment">//     let bstr = atob(arr[1])</span></span><br><span class="line">  <span class="comment">//     let n = bstr.length</span></span><br><span class="line">  <span class="comment">//     let u8arr = new Uint8Array(n)</span></span><br><span class="line">  <span class="comment">//     while (n--) &#123;</span></span><br><span class="line">  <span class="comment">//         u8arr[n] = bstr.charCodeAt(n)</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//     return new Blob([u8arr], &#123; type: mime &#125;)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 暂时无用</span></span><br><span class="line">  <span class="comment">//将blob转换为file</span></span><br><span class="line">  <span class="comment">// blobToFile=(theBlob, fileName)=&gt;&#123;</span></span><br><span class="line">  <span class="comment">//     theBlob.lastModifiedDate = new Date()</span></span><br><span class="line">  <span class="comment">//     theBlob.name = fileName</span></span><br><span class="line">  <span class="comment">//     return theBlob</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//进入签名</span></span><br><span class="line">  signatureTheView = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">this</span>.setState(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">isSignature</span>: <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//初始化画板</span></span><br><span class="line">        <span class="built_in">this</span>.WriteFont(<span class="string">&#x27;canvasView&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">borderWidth</span>: <span class="number">10</span>,</span><br><span class="line">          <span class="attr">writeWidth</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">borderColor</span>: <span class="string">&#x27;#ff6666&#x27;</span>,</span><br><span class="line">          <span class="attr">isWriteName</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">document</span>.body.addEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="built_in">this</span>.bodyScroll, &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//取消签名</span></span><br><span class="line">  cancelSignatureView = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">800</span>)</span><br><span class="line">    <span class="built_in">document</span>.body.removeEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="built_in">this</span>.bodyScroll, &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">isSignature</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//清空签名</span></span><br><span class="line">  cleanSignatureView = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.option.control.clearCanvas()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//确定签名</span></span><br><span class="line">  SureTheSignatureView = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.removeEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="built_in">this</span>.bodyScroll, &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">13</span> * <span class="built_in">this</span>.pdfHeight)</span><br><span class="line">    <span class="built_in">this</span>.saveAsImg()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span>: 禁用滑动和启用滑动 要统一事件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;type&#125;</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  bodyScroll = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//下一步</span></span><br><span class="line">  nextBit = <span class="keyword">async</span> () =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>].style.backgroundColor = <span class="string">&#x27;rgb(240,240,240)&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;canvasView-allView&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        、</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;sign-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;sign-legend&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;legend-top&quot;</span>&gt;</span>商戶提供的负责人证件材料、营业证件材料、<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;legend-center&quot;</span>&gt;</span>收单结算账户均为自愿并仅限于申请收单业务使用。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;legend-bottom&quot;</span>&gt;</span>请商户签字确认以上承诺<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;sign-sign-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;this.state.imgSrcV === null ? (</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">className</span>=<span class="string">&quot;Electronic-writeView&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">ref</span>=<span class="string">&quot;ElectronicWriteViewId&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.signatureTheView()&#125;</span></span><br><span class="line"><span class="xml">              &gt;</span></span><br><span class="line"><span class="xml">                点击签名</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            ) : (</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">src</span>=<span class="string">&#123;this.state.imgSrcV&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">className</span>=<span class="string">&quot;Electronic-writeViewIMG&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.signatureTheView()&#125;</span></span><br><span class="line"><span class="xml">              /&gt;</span></span><br><span class="line"><span class="xml">            )&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            &#123;this.state.isSignature === 0 ? null : (</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">canvas</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">id</span>=<span class="string">&quot;canvasView&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">className</span>=<span class="string">&quot;canvasView animated rotateIn delay-0.8s&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">document.documentElement.clientHeight</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">                &gt;</span></span></span><br><span class="line"><span class="xml">                  您的浏览器不支持canvas技术,请升级浏览器!</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;sureAndcancel animated rotateIn delay-0.8s&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;canvasViewClear&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.cleanSignatureView()&#125;&gt;</span></span><br><span class="line"><span class="xml">                    清空</span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;canvasViewSave&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.SureTheSignatureView()&#125;&gt;</span></span><br><span class="line"><span class="xml">                    保存</span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;canvasViewCancel&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.cancelSignatureView()&#125;&gt;</span></span><br><span class="line"><span class="xml">                    返回</span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            )&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;legend-text&quot;</span>&gt;</span>*个体工商户/小微商户为负责人签字、企业商户为联系人签字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.nextBit()&#125;&gt;&#x27;提交审批&#x27;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2js-方法-utils-saveDetailsAll-isNullStr"><a href="#2js-方法-utils-saveDetailsAll-isNullStr" class="headerlink" title="2js 方法 utils/saveDetailsAll (isNullStr)"></a>2js 方法 utils/saveDetailsAll (isNullStr)</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> isNullStr = <span class="function">(<span class="params">sbPCode</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    sbPCode === <span class="literal">null</span> ||</span><br><span class="line">    sbPCode === <span class="string">&#x27;&#x27;</span> ||</span><br><span class="line">    sbPCode === <span class="literal">undefined</span> ||</span><br><span class="line">    sbPCode === <span class="string">&#x27;undefined&#x27;</span> ||</span><br><span class="line">    sbPCode === <span class="string">&#x27;null&#x27;</span> ||</span><br><span class="line">    sbPCode.length === <span class="number">0</span> ||</span><br><span class="line">    sbPCode === &#123;&#125; ||</span><br><span class="line">    sbPCode === <span class="literal">NaN</span> ||</span><br><span class="line">    sbPCode === <span class="string">&#x27;NaN&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sbPCode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>140-electron中利用XLSX读取excel</title>
    <url>/20211207/140-electron%E4%B8%AD%E5%88%A9%E7%94%A8XLSX%E8%AF%BB%E5%8F%96excel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="xlsx"><a href="#xlsx" class="headerlink" title="xlsx"></a>xlsx</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; showSystemMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;./useNotify&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> dialog = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).remote.dialog;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useReadExcel = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;useReadExcel&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> filePath: <span class="built_in">any</span> = dialog.showOpenDialogSync(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;打开文件&#x27;</span>,</span><br><span class="line">    <span class="attr">buttonLabel</span>: <span class="string">&#x27;打开&#x27;</span>,</span><br><span class="line">    <span class="attr">filters</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;xlsx&#x27;</span>, <span class="attr">extensions</span>: [<span class="string">&#x27;xlsx&#x27;</span>] &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果保存路径为空，说明取消了，就直接返回</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;filePath&quot;</span>, filePath);</span><br><span class="line">  <span class="keyword">if</span> (!filePath) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">let</span> workBook = XLSX.readFile(filePath[<span class="number">0</span>], &#123; <span class="attr">type</span>: <span class="string">&#x27;file&#x27;</span> &#125;);</span><br><span class="line">  <span class="comment">// console.log(workBook);</span></span><br><span class="line">  <span class="keyword">const</span> sheet2JSONOpts = &#123;</span><br><span class="line">    <span class="comment">/** Default value for null/undefined values */</span></span><br><span class="line">    <span class="attr">defval</span>: <span class="string">&#x27;&#x27;</span><span class="comment">//给defval赋值为空的字符串</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> data = XLSX.utils.sheet_to_json(workBook.Sheets[workBook.SheetNames[<span class="number">0</span>]], sheet2JSONOpts)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>141-map中使用async</title>
    <url>/20211208/141-map%E4%B8%AD%E4%BD%BF%E7%94%A8async/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>业务中需要用到 map 循环去请求或者更新数据库</p>
<p>因为 map 和 forEach 都是同步的，所以需要 顶层 async</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">  excelData.map(<span class="keyword">async</span> (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> db.run(</span><br><span class="line">      <span class="string">`REPLACE INTO data_realtime (data,flag,date) VALUES (&#x27;<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(</span></span></span><br><span class="line"><span class="subst"><span class="string">        item</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>&#x27;,1,&#x27;<span class="subst">$&#123;item.timeStr&#125;</span>&#x27;)`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><blockquote>
<p>看上面的例子，mysql 存在更新 不存在插入，需要设置 索引 (date)</p>
</blockquote>
<p>REPLACE INTO data_realtime () values ()</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>143-js实现拖拽元素大小</title>
    <url>/20211230/143-js%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E5%85%83%E7%B4%A0%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>根据鼠标位置改变鼠标样式</li>
<li>当鼠标在 div 的边缘和四个角时显示不同的样式，通过 cursor 修改</li>
<li>当鼠标在 div 的边缘和四个角按下时记录具体坐标点位置， 并开始根据鼠标的移动修改 div 的尺寸</li>
<li>鼠标松开时结束尺寸修改</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-tag">body</span>, <span class="selector-tag">html</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">margin</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-id">#container</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">width</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">height</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">padding</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">border</span>: <span class="number">#00cdcd</span> <span class="number">2px</span> solid;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">box-sizing</span>: border-box;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="selector-class">.item</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">cursor</span>: default;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">   <span class="attribute">background</span>: <span class="number">#757575</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">//需要调整尺寸的div</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">let</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// body监听移动事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="built_in">document</span>.getElementById(<span class="string">&#x27;body&#x27;</span>).addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, move)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 鼠标按下事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> c.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, down)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 鼠标松开事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="built_in">document</span>.getElementById(<span class="string">&#x27;body&#x27;</span>).addEventListener(<span class="string">&#x27;mouseup&#x27;</span>, up)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 是否开启尺寸修改</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">let</span> resizeable = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 鼠标按下时的坐标，并在修改尺寸时保存上一个鼠标的位置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">let</span> clientX, clientY</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// div可修改的最小宽高</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">let</span> minW = <span class="number">8</span>, minH = <span class="number">8</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 鼠标按下时的位置，使用n、s、w、e表示</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">let</span> direc = <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 鼠标松开时结束尺寸修改</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  resizeable = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 鼠标按下时开启尺寸修改</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> d = getDirection(e)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 当位置为四个边和四个角时才开启尺寸修改</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (d !== <span class="string">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   resizeable = <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   direc = d</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   clientX = e.clientX</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   clientY = e.clientY</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 鼠标移动事件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> d = getDirection(e)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> cursor</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (d === <span class="string">&#x27;&#x27;</span>) cursor = <span class="string">&#x27;default&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">else</span> cursor = d + <span class="string">&#x27;-resize&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 修改鼠标显示效果</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  c.style.cursor = cursor;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 当开启尺寸修改时，鼠标移动会修改div尺寸</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (resizeable) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// 鼠标按下的位置在右边，修改宽度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">if</span> (direc.indexOf(<span class="string">&#x27;e&#x27;</span>) !== -<span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    c.style.width = <span class="built_in">Math</span>.max(minW, c.offsetWidth + (e.clientX - clientX)) + <span class="string">&#x27;px&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    clientX = e.clientX</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// 鼠标按下的位置在上部，修改高度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">if</span> (direc.indexOf(<span class="string">&#x27;n&#x27;</span>) !== -<span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    c.style.height = <span class="built_in">Math</span>.max(minH, c.offsetHeight + (clientY - e.clientY)) + <span class="string">&#x27;px&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    clientY = e.clientY</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// 鼠标按下的位置在底部，修改高度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">if</span> (direc.indexOf(<span class="string">&#x27;s&#x27;</span>) !== -<span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    c.style.height = <span class="built_in">Math</span>.max(minH, c.offsetHeight + (e.clientY - clientY)) + <span class="string">&#x27;px&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    clientY = e.clientY</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="comment">// 鼠标按下的位置在左边，修改宽度</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">if</span> (direc.indexOf(<span class="string">&#x27;w&#x27;</span>) !== -<span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    c.style.width = <span class="built_in">Math</span>.max(minW, c.offsetWidth + (clientX - e.clientX)) + <span class="string">&#x27;px&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    clientX = e.clientX</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="comment">// 获取鼠标所在div的位置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="function"><span class="keyword">function</span> <span class="title">getDirection</span>(<span class="params">ev</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">let</span> xP, yP, offset, dir;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  dir = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  xP = ev.offsetX;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  yP = ev.offsetY;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  offset = <span class="number">10</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (yP &lt; offset) dir += <span class="string">&#x27;n&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">else</span> <span class="keyword">if</span> (yP &gt; c.offsetHeight - offset) dir += <span class="string">&#x27;s&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (xP &lt; offset) dir += <span class="string">&#x27;w&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">else</span> <span class="keyword">if</span> (xP &gt; c.offsetWidth - offset) dir += <span class="string">&#x27;e&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> dir;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>144-react手动实现防抖和useMount</title>
    <url>/20211231/144-react%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E9%98%B2%E6%8A%96%E5%92%8CuseMount/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p>hooks/index.js</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>利用<span class="built_in">setTimeout</span> 和useEffect 实现防抖</span><br><span class="line"><span class="keyword">export</span> const useDebounce = <span class="function"><span class="params">(val, delay)</span> =&gt;</span> &#123;</span><br><span class="line">  const [debounce, setDebounce] = useState(val);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    const timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setDebounce(val);</span><br><span class="line">    &#125;, delay);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> () =&gt; <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">  &#125;, [val, delay]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> debounce;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//Mount挂载后执行callback</span><br><span class="line"><span class="keyword">export</span> const useMount = <span class="function"><span class="params">(callback)</span> =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useDebounce, useMount &#125; <span class="keyword">from</span> <span class="string">&quot;../hooks/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Demo1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [val, setVal] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> newVal = useDebounce(val, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">  useMount(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;挂载了&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">val</span>=<span class="string">&#123;val&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setVal(e.target.value)&#125;&gt;<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;newVal&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>145-react-常用工具库</title>
    <url>/20220119/145-react-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>俗话说的好 工欲善其事，必先利其器。在开发 React 项目的时候，总结出一些很不错的 React 库，可以提高开发效率，满足业务需求，接下来将一一介绍它们。</p>
<h2 id="ant-design"><a href="#ant-design" class="headerlink" title="ant design"></a>ant design</h2><p>话不多说 ，ui 库</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2luZGV4LWNu">https://ant.design/index-cn<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="braft-editor"><a href="#braft-editor" class="headerlink" title="braft-editor"></a>braft-editor</h2><p>富文本编辑器</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcmdveC9icmFmdC1lZGl0b3I=">https://github.com/margox/braft-editor<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="Dvajs"><a href="#Dvajs" class="headerlink" title="Dvajs"></a>Dvajs</h2><p>状态管理工具 <span class="exturl" data-url="aHR0cHM6Ly9kdmFqcy5jb20v">https://dvajs.com/<i class="fa fa-external-link-alt"></i></span></p>
<p>Dvajs 是基于 redux ， react-redux ，redux-saga 的状态管理工具，<br>在 dva 中，同步触发的 reducers ，异步触发 effects 和订阅监听的 subscriptions 构成了状态管理组织模型。dvajs 在 github 目前获得 15.8k+ star 。</p>
<h2 id="React-dnd"><a href="#React-dnd" class="headerlink" title="React dnd"></a>React dnd</h2><p>React dnd 是 React 的一个推拽库，用起来还是比较得心应手的。react-dnd 在 github 上得到了 16.4k+ 的 star</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdC1kbmQuZ2l0aHViLmlvL3JlYWN0LWRuZC9kb2NzL292ZXJ2aWV3">https://react-dnd.github.io/react-dnd/docs/overview<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="echarts-for-react"><a href="#echarts-for-react" class="headerlink" title="echarts-for-react"></a>echarts-for-react</h2><p>echarts-for-react 是使用 React 基于 echarts 封装的图表库，能够满足基本的可视化图表需求。把 echarts 的配置参数通过 React 组件的 props 形式进行传递配置。目前在 github 上获得 3.3k+ star</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXQuaHVzdC5jYy9lY2hhcnRzLWZvci1yZWFjdC9leGFtcGxlcy9zaW1wbGU=">https://git.hust.cc/echarts-for-react/examples/simple<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="react-markdown"><a href="#react-markdown" class="headerlink" title="react-markdown"></a>react-markdown</h2><p>markdown 预览器 <span class="exturl" data-url="aHR0cDovL3JlbWFya2pzLmdpdGh1Yi5pby9yZWFjdC1tYXJrZG93bi8=">http://remarkjs.github.io/react-markdown/<i class="fa fa-external-link-alt"></i></span></p>
<p>如果想要让 React 项目展示 md 格式的文档结构，那么 react-markdown 是一个不错的选择。react-markdown 用法非常简单。<br>我们来看一下 react-markdown ，目前 react-markdown 在 github 上共获得 7.7k+</p>
<h2 id="qrcode-react"><a href="#qrcode-react" class="headerlink" title="qrcode.react"></a>qrcode.react</h2><p>二维码展示 qrcode.react</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pwYW8vcXJjb2RlLnJlYWN0">https://github.com/zpao/qrcode.react<i class="fa fa-external-link-alt"></i></span></p>
<p>如果想在 React 项目中，使用链接生成二维码，可以尝试一下 qrcode.react，它在 github 上共获得 2.6k+ 🌟。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>146-2行代码实现树结构</title>
    <url>/20220204/146-2%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%A0%91%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>工作中避免不要讲 扁平化数组转成树结构，一般都是递归，现在即将推出 groupBy,但是各大浏览器还么支持，遂自己造一个.</p>
<h2 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h2><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">Array</span>.prototype.groupBy = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> object = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> key = callback(<span class="keyword">this</span>[i],i,<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span>(object[key]) &#123;</span><br><span class="line">          object[key].push(<span class="keyword">this</span>[i])</span><br><span class="line">      &#125; <span class="title">else</span> &#123;</span><br><span class="line">          object[key] = [<span class="keyword">this</span>[i]]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123; <span class="attribute">id:</span><span class="string"> 1, name</span>: <span class="string">&quot;水果&quot;</span>, <span class="attribute">pid</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attribute">id:</span><span class="string"> 2, name</span>: <span class="string">&quot;香蕉&quot;</span>, <span class="attribute">pid</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attribute">id:</span><span class="string"> 3, name</span>: <span class="string">&quot;苹果&quot;</span>, <span class="attribute">pid</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attribute">id:</span><span class="string"> 4, name</span>: <span class="string">&quot;蔬菜&quot;</span>, <span class="attribute">pid</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attribute">id:</span><span class="string"> 5, name</span>: <span class="string">&quot;白菜&quot;</span>, <span class="attribute">pid</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attribute">id:</span><span class="string"> 6, name</span>: <span class="string">&quot;萝卜&quot;</span>, <span class="attribute">pid</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attribute">id:</span><span class="string"> 7, name</span>: <span class="string">&quot;胡萝卜&quot;</span>, <span class="attribute">pid</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  &#123; <span class="attribute">id:</span><span class="string"> 8, name</span>: <span class="string">&quot;白萝卜&quot;</span>, <span class="attribute">pid</span>: <span class="number">6</span> &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> groupArr = arr.groupBy(item =&gt; item.pid)</span><br><span class="line">arr.forEach(item =&gt; item.children = groupArr[item.id])</span><br><span class="line"><span class="built_in">console</span>.log(groupArr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>//写的很巧妙，自己阅读体会</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>147-yarn常用命令指南</title>
    <url>/20220208/147-yarn%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>收集了一份常用的 yarn 命令指南，当做手册来使用</p>
<h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><h2 id="yarn-常用指令"><a href="#yarn-常用指令" class="headerlink" title="yarn 常用指令"></a>yarn 常用指令</h2><h3 id="初始化新项目"><a href="#初始化新项目" class="headerlink" title="初始化新项目"></a>初始化新项目</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure>

<h3 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line">yarn add [package]@[tag]</span><br></pre></td></tr></table></figure>

<h3 id="将依赖项添加到不同依赖项类别"><a href="#将依赖项添加到不同依赖项类别" class="headerlink" title="将依赖项添加到不同依赖项类别"></a>将依赖项添加到不同依赖项类别</h3><p>分别添加到 devDependencies、peerDependencies 和 optionalDependencies：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn add [package] --dev</span><br><span class="line">yarn add [package] --peer</span><br><span class="line">yarn add [package] --optional</span><br></pre></td></tr></table></figure>

<h3 id="升级依赖包"><a href="#升级依赖包" class="headerlink" title="升级依赖包"></a>升级依赖包</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn upgrade [package]</span><br><span class="line">yarn upgrade [package]@[version]</span><br><span class="line">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure>

<h3 id="移除依赖包"><a href="#移除依赖包" class="headerlink" title="移除依赖包"></a>移除依赖包</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure>

<h3 id="安装项目的全部依赖"><a href="#安装项目的全部依赖" class="headerlink" title="安装项目的全部依赖"></a>安装项目的全部依赖</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure>

<h2 id="yarn-和-npm-对比"><a href="#yarn-和-npm-对比" class="headerlink" title="yarn 和 npm 对比"></a>yarn 和 npm 对比</h2><h3 id="1-开始一个新工程"><a href="#1-开始一个新工程" class="headerlink" title="1. 开始一个新工程"></a>1. 开始一个新工程</h3><p>yarn init 与 npm init 一样通过交互式会话创建一个 package.json</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn init <span class="comment"># yarn</span></span><br><span class="line">npm init <span class="comment"># npm</span></span><br><span class="line"><span class="comment"># 跳过会话，直接通过默认值生成 package.json</span></span><br><span class="line">yarn init --yes <span class="comment"># 简写 -y</span></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<h3 id="2-添加一个依赖"><a href="#2-添加一个依赖" class="headerlink" title="2. 添加一个依赖"></a>2. 添加一个依赖</h3><p>通过 yarn add 添加依赖会更新 package.json 以及 yarn.lock 文件</p>
<p><code>yarn add &lt;packageName&gt;</code> 依赖会记录在 <code>package.json</code> 的 <code>dependencies</code> 下</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn add webpack@<span class="number">2.3</span>.3 <span class="comment"># yarn  --save 是 yarn 默认的，默认记录在 package.json 中</span></span><br><span class="line">npm install webpack@<span class="number">2.3</span>.3 --save <span class="comment"># npm</span></span><br></pre></td></tr></table></figure>

<p><code>yarn add &lt;packageName&gt; --dev</code> 依赖会记录在 <code>package.json</code> 的 <code>devDependencies</code> 下</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn add webpack --dev <span class="comment"># yarn 简写 -D</span></span><br><span class="line">npm install webpack --save-dev <span class="comment"># npm</span></span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn global add &lt;packageName&gt; 全局安装依赖</span><br><span class="line">yarn global add webpack <span class="comment"># yarn</span></span><br><span class="line">npm install webpack -g <span class="comment"># npm</span></span><br></pre></td></tr></table></figure>

<h2 id="3-更新一个依赖"><a href="#3-更新一个依赖" class="headerlink" title="3. 更新一个依赖"></a>3. 更新一个依赖</h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn upgrade 用于更新包到基于规范范围的最新版本</span><br><span class="line">yarn upgrade <span class="comment"># 升级所有依赖项，不记录在 package.json 中</span></span><br><span class="line">npm update <span class="comment"># npm 可以通过 ‘--save|--save-dev’ 指定升级哪类依赖</span></span><br><span class="line">yarn upgrade webpack <span class="comment"># 升级指定包</span></span><br><span class="line">npm update webpack --save-dev <span class="comment"># npm</span></span><br><span class="line">yarn upgrade --latest <span class="comment"># 忽略版本规则，升级到最新版本，并且更新 package.json</span></span><br></pre></td></tr></table></figure>

<h3 id="4-移除一个依赖"><a href="#4-移除一个依赖" class="headerlink" title="4. 移除一个依赖"></a>4. 移除一个依赖</h3><p><code>yarn remove &lt;packageName&gt;</code></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn remove webpack <span class="comment"># yarn</span></span><br><span class="line">npm uninstall webpack --save <span class="comment"># npm 可以指定 --save | --save-dev</span></span><br></pre></td></tr></table></figure>

<h3 id="5-安装-package-json-中的所有文件"><a href="#5-安装-package-json-中的所有文件" class="headerlink" title="5. 安装 package.json 中的所有文件"></a>5. 安装 package.json 中的所有文件</h3><p>yarn 或者 yarn install</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn install <span class="comment"># 或者 yarn 在 node_modules 目录安装 package.json 中列出的所有依赖</span></span><br><span class="line">npm install <span class="comment"># npm</span></span><br><span class="line"><span class="comment"># yarn install 安装时，如果 node_modules 中有相应的包则不会重新下载 --force 可以强制重新下载安装</span></span><br><span class="line">yarn install --force <span class="comment"># 强制下载安装</span></span><br><span class="line">npm install --force <span class="comment"># npm</span></span><br></pre></td></tr></table></figure>

<h3 id="6-运行脚本"><a href="#6-运行脚本" class="headerlink" title="6. 运行脚本"></a>6. 运行脚本</h3><p>yarn run 用来执行在 package.json 中 scripts 属性下定义的脚本</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;node app.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;node app.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn run dev <span class="comment"># yarn 执行 dev 对应的脚本 node app.js</span></span><br><span class="line">npm run <span class="comment"># npm</span></span><br><span class="line">yarn start <span class="comment"># yarn</span></span><br><span class="line">npm start <span class="comment"># npm</span></span><br></pre></td></tr></table></figure>

<p>与 npm 一样 可以有 yarn start 和 yarn test 两个简写的运行脚本方式</p>
<h3 id="7-显示某个包信息"><a href="#7-显示某个包信息" class="headerlink" title="7. 显示某个包信息"></a>7. 显示某个包信息</h3><p><code>yarn info &lt;packageName&gt;</code> 可以用来查看某个模块的最新版本信息</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn info webpack <span class="comment"># yarn</span></span><br><span class="line">npm info webpack <span class="comment"># npm</span></span><br><span class="line"></span><br><span class="line">yarn info webpack --json <span class="comment"># 输出 json 格式</span></span><br><span class="line">npm info webpack  --json <span class="comment"># npm</span></span><br><span class="line"></span><br><span class="line">yarn info webpack readme <span class="comment"># 输出 README 部分</span></span><br><span class="line">npm info webpack readme</span><br></pre></td></tr></table></figure>

<h3 id="8-列出项目的所有依赖"><a href="#8-列出项目的所有依赖" class="headerlink" title="8. 列出项目的所有依赖"></a>8. 列出项目的所有依赖</h3><p><code>yarn list</code></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">list</span> <span class="comment"># 列出当前项目的依赖</span></span><br><span class="line">npm <span class="built_in">list</span> <span class="comment"># npm</span></span><br><span class="line"></span><br><span class="line">yarn <span class="built_in">list</span> --depth=<span class="number">0</span> <span class="comment"># 限制依赖的深度</span></span><br><span class="line">sudo yarn global <span class="built_in">list</span> <span class="comment"># 列出全局安装的模块</span></span><br></pre></td></tr></table></figure>

<h3 id="9-管理-yarn-配置文件"><a href="#9-管理-yarn-配置文件" class="headerlink" title="9. 管理 yarn 配置文件"></a>9. 管理 yarn 配置文件</h3><p><code>yarn coinfig</code></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn config set key value <span class="comment"># 设置</span></span><br><span class="line">npm config set key value</span><br><span class="line"></span><br><span class="line">yarn config get key <span class="comment"># 读取值</span></span><br><span class="line">npm config get key</span><br><span class="line"></span><br><span class="line">yarn config delete key <span class="comment"># 删除</span></span><br><span class="line">npm config delete key</span><br><span class="line"></span><br><span class="line">yarn config <span class="built_in">list</span> <span class="comment"># 显示当前配置</span></span><br><span class="line">npm config <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">yarn config set registry https://registry.npm.taobao.org <span class="comment"># 设置淘宝镜像</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org <span class="comment"># npm</span></span><br></pre></td></tr></table></figure>

<h3 id="10-缓存"><a href="#10-缓存" class="headerlink" title="10. 缓存"></a>10. 缓存</h3><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">yarn cache</span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sudo yarn cache <span class="built_in">list</span> <span class="comment"># 列出已缓存的每个包</span></span><br><span class="line">sudo yarn cache dir <span class="comment"># 返回 全局缓存位置</span></span><br><span class="line">sudo yarn cache clean <span class="comment"># 清除缓存</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>yarn</category>
      </categories>
      <tags>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>149-css3动画控制的暂停与运行</title>
    <url>/20220208/149-css3%E5%8A%A8%E7%94%BB%E6%8E%A7%E5%88%B6%E7%9A%84%E6%9A%82%E5%81%9C%E4%B8%8E%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="css3-动画控制的暂停与运行"><a href="#css3-动画控制的暂停与运行" class="headerlink" title="css3 动画控制的暂停与运行"></a>css3 动画控制的暂停与运行</h1><blockquote>
<p>面对浏览器日益蓬勃的发展，web 端技术也越来越多的被使用在移动开发中，为了提高用户体验， 作为前端工程师的我们要设计各式各样的交互效果，通过 css3 如何去控制动画的状态呢？下面我们 来看一看 animation-play-state 的特性吧。</p>
</blockquote>
<h2 id="animation-play-state-是什么"><a href="#animation-play-state-是什么" class="headerlink" title="animation-play-state 是什么"></a>animation-play-state 是什么</h2><p>属性定义一个动画是否运行或者暂停。可以通过查询它来确定动画是否正在运行。另外，它的值可 以被设置为暂停和恢复的动画的重放。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused | running;</span><br><span class="line">  //paused 暂停 running 运行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="animation-play-state-怎么用"><a href="#animation-play-state-怎么用" class="headerlink" title="animation-play-state 怎么用"></a>animation-play-state 怎么用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>stop<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;animation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.animation</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">animation</span>: move <span class="number">2s</span> linear infinite alternate;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="css">    <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">100px</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.btn&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> elem = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.animation&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = elem.style[<span class="string">&#x27;animationPlayState&#x27;</span>]</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (state === <span class="string">&#x27;paused&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">      elem.style[<span class="string">&#x27;animationPlayState&#x27;</span>] = <span class="string">&#x27;running&#x27;</span></span></span><br><span class="line"><span class="javascript">      btn.innerText = <span class="string">&#x27;stop&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">      elem.style[<span class="string">&#x27;animationPlayState&#x27;</span>] = <span class="string">&#x27;paused&#x27;</span></span></span><br><span class="line"><span class="javascript">      btn.innerText = <span class="string">&#x27;play&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="css-鼠标触动实现动画控制"><a href="#css-鼠标触动实现动画控制" class="headerlink" title="css 鼠标触动实现动画控制"></a>css 鼠标触动实现动画控制</h2><p>使用 hover 伪类，在鼠标悬停在按钮上面时，控制动画样式的暂停。代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="css-checked-伪类实现动画控制"><a href="#css-checked-伪类实现动画控制" class="headerlink" title="css:checked 伪类实现动画控制"></a>css:checked 伪类实现动画控制</h2><p>通过 input 的 checked 伪类，我们就很容易实现单击表单按钮，实现关联操作动画的状态</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;stop&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;playAnimation&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;play&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;playAnimation&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;stop&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>stop<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;play&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>play<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;animation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.animation</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: move <span class="number">2s</span> linear infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stop</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.animation</span> &#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#play</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.animation</span> &#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: running;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li>状态切换动画。</li>
<li>手势触发动画。</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>148-css去掉浏览器打印页眉页脚</title>
    <url>/20220208/148-css%E5%8E%BB%E6%8E%89%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%8D%B0%E9%A1%B5%E7%9C%89%E9%A1%B5%E8%84%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="css-去掉浏览器打印样式中的页眉和页脚"><a href="#css-去掉浏览器打印样式中的页眉和页脚" class="headerlink" title="css 去掉浏览器打印样式中的页眉和页脚"></a>css 去掉浏览器打印样式中的页眉和页脚</h1><p>css 默认去掉浏览器打印样式中的页眉和页脚</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@page</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>01-js中操作符</title>
    <url>/20210629/15-js-%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="amp-amp-与"><a href="#amp-amp-与" class="headerlink" title="&amp;&amp;与|| ?? ?."></a>&amp;&amp;与|| ?? ?.</h2><blockquote>
<p>总结： || 一个值为 true 则为真</p>
</blockquote>
<blockquote>
<p>?? 左边为 undefined 和 null 返回右边</p>
</blockquote>
<blockquote>
<p>|| 左边为假，返回右边</p>
</blockquote>
<blockquote>
<p>?. 主要是用于对象没有这个属性，导致报错问题</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a &amp;&amp; b  <span class="comment">//如果a为true 则执行b</span></span><br><span class="line"></span><br><span class="line">a || b <span class="comment">//    左侧操作数为假值时返回右侧操作数。   如果这里0是0 就返回b了</span></span><br><span class="line"><span class="comment">// 区别</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="literal">null</span> ? <span class="string">&#x27;aa&#x27;</span>   <span class="comment">// aa  　只有当左侧为null和undefined时，才会返回右侧的数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baz = <span class="number">0</span> ?? <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(baz);</span><br><span class="line"><span class="comment">// expected output: 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> adventurer = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">cat</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Dinah&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dogName = adventurer.dog?.name</span><br><span class="line"><span class="built_in">console</span>.log(dogName)</span><br><span class="line"><span class="comment">// expected output: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(adventurer.someNonExistentMethod?.())</span><br><span class="line"><span class="comment">// expected output: undefined</span></span><br><span class="line"></span><br><span class="line">不会报错而已</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>js操作符</tag>
      </tags>
  </entry>
  <entry>
    <title>151-css3-margin-before margin-start</title>
    <url>/20220208/151-css3-margin-before-margin-start/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="margin-before-margin-start"><a href="#margin-before-margin-start" class="headerlink" title="margin-before margin-start"></a>margin-before margin-start</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-webkit-<span class="attribute">margin</span>-before: <span class="number">1em</span>;</span><br><span class="line">-webkit-<span class="attribute">margin</span>-after: <span class="number">1em</span>;</span><br></pre></td></tr></table></figure>

<p>分别定义 p 的上边距和下边距的数值是<code>1倍</code>字体高度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-webkit-<span class="attribute">margin</span>-start: <span class="number">0px</span>;</span><br><span class="line">-webkit-<span class="attribute">margin</span>-end: <span class="number">0px</span>;</span><br></pre></td></tr></table></figure>

<p>上面二句则定义为左右边距都为<code>0px</code></p>
<p>因此</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  -webkit-<span class="attribute">margin</span>-before: <span class="number">1em</span>;</span><br><span class="line">  -webkit-<span class="attribute">margin</span>-after: <span class="number">1em</span>;</span><br><span class="line">  -webkit-<span class="attribute">margin</span>-start: <span class="number">0px</span>;</span><br><span class="line">  -webkit-<span class="attribute">margin</span>-end: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于 CSS2.0 中的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>152-iphoneX 安全区适配</title>
    <url>/20220208/152-iphoneX-%E5%AE%89%E5%85%A8%E5%8C%BA%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="iphoneX-安全区适配"><a href="#iphoneX-安全区适配" class="headerlink" title="iphoneX 安全区适配"></a>iphoneX 安全区适配</h1><h2 id="第一步：设置网页在可视窗口的布局方式"><a href="#第一步：设置网页在可视窗口的布局方式" class="headerlink" title="第一步：设置网页在可视窗口的布局方式"></a>第一步：设置网页在可视窗口的布局方式</h2><p><code>ios11</code> 新增 <code>viweport-fit</code> 属性，使得页面内容完全覆盖整个窗口：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, viewport-fit=cover&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第二步：页面主体内容限定在安全区域内"><a href="#第二步：页面主体内容限定在安全区域内" class="headerlink" title="第二步：页面主体内容限定在安全区域内"></a>第二步：页面主体内容限定在安全区域内</h2><p><code>env()</code> 和 <code>constant()</code> <code>ios11</code>新增特性</p>
<ul>
<li>safe-area-inset-left：安全区域距离左边边界距离</li>
<li>safe-area-inset-right：安全区域距离右边边界距离</li>
<li>safe-area-inset-top：安全区域距离顶部边界距离</li>
<li>safe-area-inset-bottom：安全区域距离底部边界距离</li>
</ul>
<p>这里我们只需要关注 <code>safe-area-inset-bottom</code> 这个变量，因为它对应的就是小黑条的高度（横竖屏时值不一样）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第三步：fixed-元素的适配"><a href="#第三步：fixed-元素的适配" class="headerlink" title="第三步：fixed 元素的适配"></a>第三步：fixed 元素的适配</h2><h3 id="类型一：fixed-完全吸底元素（bottom-0）"><a href="#类型一：fixed-完全吸底元素（bottom-0）" class="headerlink" title="类型一：fixed 完全吸底元素（bottom = 0）"></a>类型一：fixed 完全吸底元素（bottom = 0）</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型二：fixed-非完全吸底元素（bottom-≠-0），比如-“返回顶部”、“侧边广告”-等"><a href="#类型二：fixed-非完全吸底元素（bottom-≠-0），比如-“返回顶部”、“侧边广告”-等" class="headerlink" title="类型二：fixed 非完全吸底元素（bottom ≠ 0），比如 “返回顶部”、“侧边广告” 等"></a>类型二：fixed 非完全吸底元素（bottom ≠ 0），比如 “返回顶部”、“侧边广告” 等</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第四步：如果我们只希望-iPhoneX-才需要新增适配样式，我们可以配合-supports-来隔离兼容样式"><a href="#第四步：如果我们只希望-iPhoneX-才需要新增适配样式，我们可以配合-supports-来隔离兼容样式" class="headerlink" title="第四步：如果我们只希望 iPhoneX 才需要新增适配样式，我们可以配合 @supports 来隔离兼容样式"></a>第四步：如果我们只希望 iPhoneX 才需要新增适配样式，我们可以配合 @supports 来隔离兼容样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@supports</span> (<span class="attribute">bottom</span>: constant(safe-area-inset-bottom)) <span class="keyword">or</span> (<span class="attribute">bottom</span>: env(safe-area-inset-bottom)) &#123;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>150-css3动画-animation-direction</title>
    <url>/20220208/150-css3%E5%8A%A8%E7%94%BB-animation-direction/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="animation-direction-alternate"><a href="#animation-direction-alternate" class="headerlink" title="animation-direction: alternate"></a>animation-direction: alternate</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">  -webkit-<span class="attribute">animation-direction</span>: alternate; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>animation-direction 属性定义是否应该轮流反向播放动画。</p>
<p>如果 animation-direction 值是 “alternate”，则动画会在奇数次数（1、3、5 等等）正常播放，而在偶数次数（2、4、6 等等）向后播放。</p>
<p>注释：如果把动画设置为只播放一次，则该属性没有效果。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>-dirextion: normal | alternate;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>153-css-文字超出省略显示</title>
    <url>/20220208/153-css-%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E7%9C%81%E7%95%A5%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文字超出省略显示"><a href="#文字超出省略显示" class="headerlink" title="文字超出省略显示"></a>文字超出省略显示</h1><h2 id="单行超出部分显示"><a href="#单行超出部分显示" class="headerlink" title="单行超出部分显示..."></a>单行超出部分显示<code>...</code></h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br></pre></td></tr></table></figure>

<h2 id="多行超出部分显示"><a href="#多行超出部分显示" class="headerlink" title="多行超出部分显示..."></a>多行超出部分显示<code>...</code></h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>154-react-hooks利用storage实现实时存储</title>
    <url>/20220210/154-react-hooks%E5%88%A9%E7%94%A8storage%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> usePersistedState = <span class="function">(<span class="params">name, defaultValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = React.useState(defaultValue)</span><br><span class="line">  <span class="keyword">const</span> nameRef = React.useRef(name)</span><br><span class="line"></span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> storedValue = <span class="built_in">localStorage</span>.getItem(name)</span><br><span class="line">      <span class="keyword">if</span> (storedValue !== <span class="literal">null</span>) setValue(storedValue)</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">localStorage</span>.setItem(name, defaultValue)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      setValue(defaultValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">localStorage</span>.setItem(nameRef.current, value)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">  &#125;, [value])</span><br><span class="line"></span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> lastName = nameRef.current</span><br><span class="line">    <span class="keyword">if</span> (name !== lastName) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">localStorage</span>.setItem(name, value)</span><br><span class="line">        nameRef.current = name</span><br><span class="line">        <span class="built_in">localStorage</span>.removeItem(lastName)</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [name])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [value, setValue]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MyComponent = <span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [val, setVal] = usePersistedState(name, <span class="number">10</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">value</span>=<span class="string">&#123;val&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">        setVal(e.target.value)</span></span><br><span class="line"><span class="xml">      &#125;&#125;</span></span><br><span class="line"><span class="xml">    /&gt;</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyApp = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = React.useState(<span class="string">&#x27;my-value&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">value</span>=<span class="string">&#123;name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">          setName(e.target.value)</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyApp</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>155-react-hooks实现setState</title>
    <url>/20220210/155-react-hooks%E5%AE%9E%E7%8E%B0setState/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="js-版本"><a href="#js-版本" class="headerlink" title="js 版本"></a>js 版本</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useMergeState = <span class="function">(<span class="params">initialState = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = React.useState(initialState)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mergeState = <span class="function">(<span class="params">newState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> newState === <span class="string">&#x27;function&#x27;</span>) newState = newState(value)</span><br><span class="line">    setValue(&#123; ...value, ...newState &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [value, mergeState]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyApp = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useMergeState(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;data.name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setData(&#123; name: e.target.value &#125;)&#125; /&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setData((&#123; age &#125;) =&gt; (&#123; age: age - 1 &#125;))&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;data.age&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setData((&#123; age &#125;) =&gt; (&#123; age: age + 1 &#125;))&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyApp</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="TS-版本"><a href="#TS-版本" class="headerlink" title="TS 版本"></a>TS 版本</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dataType = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> newStateFunc = <span class="function">(<span class="params">args: Partial&lt;dataType&gt;</span>) =&gt;</span> Partial&lt;dataType&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useMergeState: &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> <span class="built_in">any</span>[] = <span class="function">(<span class="params">initVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [val, setVal] = useState(initVal)</span><br><span class="line">  <span class="keyword">const</span> mergeState = <span class="function">(<span class="params">newState: Partial&lt;dataType&gt; | newStateFunc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> newState === <span class="string">&#x27;function&#x27;</span>) newState = newState(val)</span><br><span class="line">    setVal(&#123; ...val, ...newState &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [val, mergeState]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test9 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = useMergeState&lt;dataType&gt;(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      Test9</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;JSON.stringify(data)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;data.name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setData(&#123; name: e.target.value &#125;)&#125; /&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span></span></span><br><span class="line"><span class="xml">          setData((&#123; age &#125;: &#123; age: number &#125;) =&gt; (&#123;</span></span><br><span class="line"><span class="xml">            age: age - 1,</span></span><br><span class="line"><span class="xml">          &#125;))</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">      &gt;</span></span><br><span class="line"><span class="xml">        -1</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setData((&#123; age &#125;: &#123; age: number &#125;) =&gt; (&#123; age: age - 1 &#125;))&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test9</span><br></pre></td></tr></table></figure>

<p>总结：写代码的时候，一定不要有固定思维。比如这个<br><code>setData((&#123; age &#125;) =&gt; (&#123; age: age - 1 &#125;))&#125; ------ newState = newState(value) </code></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>156-react-hooks实现localStorage</title>
    <url>/20220210/156-react-hooks%E5%AE%9E%E7%8E%B0localStorage/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>react-hooks 实现 localStorage,功能不重要，思想很重要!</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useLocalStorage = <span class="function">(<span class="params">keyName: <span class="built_in">string</span>, defaultVal: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [storedValue, setStoredValue] = useState(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">localStorage</span>.getItem(keyName)</span><br><span class="line">      <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(value)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">localStorage</span>.setItem(keyName, <span class="built_in">JSON</span>.stringify(defaultVal))</span><br><span class="line">        <span class="keyword">return</span> defaultVal</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> defaultVal</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> setVal = <span class="function">(<span class="params">newValue: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;keyName&#x27;</span>, keyName, newValue, storedValue)</span><br><span class="line"></span><br><span class="line">      <span class="built_in">localStorage</span>.setItem(keyName, <span class="built_in">JSON</span>.stringify(newValue))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line">    setStoredValue(newValue)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [storedValue, setVal]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Test10 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useLocalStorage(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;name&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setName(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test10</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>157-react-hooks实现useInterval解决闭包问题</title>
    <url>/20220210/157-react-hooks%E5%AE%9E%E7%8E%B0useInterval%E8%A7%A3%E5%86%B3%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="错误示例-1"><a href="#错误示例-1" class="headerlink" title="错误示例 1"></a>错误示例 1</h2><p>下例子中，虽然 useEffect 依赖了 callback,delay 没有闭包问题，但是每次父组件(show)更新,这里就会清空定时器，重新执行，因为依赖变了</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useInterval = <span class="function">(<span class="params">callback: () =&gt; <span class="built_in">void</span>, delay: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(callback, delay)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id)</span><br><span class="line">  &#125;, [callback, delay])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test11 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> [show, setShow] = React.useState(<span class="literal">false</span>)</span><br><span class="line">  useInterval(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;定时器&#x27;</span>, count)</span><br><span class="line">    setCount(count + <span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      Test11</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;show&#125;</span></span><br><span class="line"><span class="xml">      &#123;count&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShow(!show)&#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test11</span><br></pre></td></tr></table></figure>

<h2 id="错误示例-2"><a href="#错误示例-2" class="headerlink" title="错误示例 2"></a>错误示例 2</h2><p>下例子中，就是典型的闭包问题，因为子组件只有创建和销毁的时候，才会触发 useEffect 中定时器，所以 callback 函数中的 count 一直是 1</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useInterval = <span class="function">(<span class="params">callback: () =&gt; <span class="built_in">void</span>, delay: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(callback, delay)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id)</span><br><span class="line">  &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test11 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> [show, setShow] = React.useState(<span class="literal">false</span>)</span><br><span class="line">  useInterval(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;定时器&#x27;</span>, count)</span><br><span class="line">    setCount(count + <span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      Test11</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;show&#125;</span></span><br><span class="line"><span class="xml">      &#123;count&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShow(!show)&#125;&gt;click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test11</span><br></pre></td></tr></table></figure>

<h3 id="正确实例"><a href="#正确实例" class="headerlink" title="正确实例"></a>正确实例</h3><p>借助于 useRef 保存 callback ,因为 useRef 每次都是最新的值</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useInterval = <span class="function">(<span class="params">callback: () =&gt; <span class="built_in">void</span>, delay: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> savedCallback = React.useRef(callback)</span><br><span class="line"></span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    savedCallback.current = callback</span><br><span class="line">  &#125;, [callback])</span><br><span class="line"></span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      savedCallback.current()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(tick, delay)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id)</span><br><span class="line">  &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test12 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> [show, setShow] = React.useState(<span class="literal">false</span>)</span><br><span class="line">  useInterval(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(count + <span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      Test12</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;count&#125;</span></span><br><span class="line"><span class="xml">      &#123;show&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setShow(!show)&#125;&gt;show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test12</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>158-react-hooks实现useKeyPress</title>
    <url>/20220210/158-react-hooks%E5%AE%9E%E7%8E%B0useKeyPress/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useKeyPress = <span class="function">(<span class="params">target: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [keyPressed, setKeyPressed] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> downHandle = <span class="function">(<span class="params">&#123; key &#125;: &#123; key: <span class="built_in">string</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === target) setKeyPressed(<span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> upHandle = <span class="function">(<span class="params">&#123; key &#125;: &#123; key: <span class="built_in">string</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === target) setKeyPressed(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, downHandle)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, upHandle)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;keydown&#x27;</span>, downHandle)</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;keyup&#x27;</span>, upHandle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> keyPressed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test13 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> status = useKeyPress(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      test13</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;status ? &#x27;输入中...&#x27; : &#x27;停止输入&#x27;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test13</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>159-react-hooks 实现history参数获取</title>
    <url>/20220211/159-react-hooks-%E5%AE%9E%E7%8E%B0history%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>下面代码还有点问题,因为 mdn 介绍，手动点击浏览器回退才可以触发 popstate，暂未找到解决办法……….</p>
<pre><code>  当活动历史记录条目更改时，将触发 popstate 事件。如果被激活的历史记录条目是通过对 history.pushState（）的调用创建的，或者受到对 history.replaceState（）的调用的影响，popstate 事件的 state 属性包含历史条目的状态对象的副本。

  需要注意的是调用 history.pushState()或 history.replaceState()不会触发 popstate 事件。只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在 Javascript 代码中调用 history.back()或者 history.forward()方法）

  不同的浏览器在加载页面时处理 popstate 事件的形式存在差异。页面加载时 Chrome 和 Safari 通常会触发(emit )popstate 事件，但 Firefox 则不会。
</code></pre>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useSearchParams = <span class="function">(<span class="params">param: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//useCallback 返回个函数，依赖与param, 变更则重新返回函数</span></span><br><span class="line">  <span class="keyword">const</span> getValue = React.useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> URLSearchParams(<span class="built_in">window</span>.location.search).get(param)</span><br><span class="line">  &#125;, [param])</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;getValue&#x27;</span>, getValue())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = React.useState(getValue)</span><br><span class="line">  React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> onChange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;onChange&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      setValue(getValue())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;popstate&#x27;</span>, onChange)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pushstate&#x27;</span>, onChange)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;replacestate&#x27;</span>, onChange)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;popstate&#x27;</span>, onChange)</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;pushstate&#x27;</span>, onChange)</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;replacestate&#x27;</span>, onChange)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test14 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> post = useSearchParams(<span class="string">&#x27;post&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      test14</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;post&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> window.history.pushState(&#123;&#125;, &#x27;&#x27;, &#x27;?post=&#x27; + Math.random())&#125;&gt;</span></span><br><span class="line"><span class="xml">        push</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> window.history.pushState(&#123;&#125;, &#x27;&#x27;, window.location.pathname)&#125;&gt;exit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test14</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>js 常用工具utils</title>
    <url>/20210629/16-js-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7utils/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>时间处理，如果有需要可以考虑 <code>dayjs</code></p>
</blockquote>
<h2 id="获取范围内随机数"><a href="#获取范围内随机数" class="headerlink" title="获取范围内随机数"></a>获取范围内随机数</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">  <span class="function">function <span class="title">getRandomNum</span><span class="params">(max,min)</span></span>&#123;</span><br><span class="line">           <span class="keyword">return</span> Math.<span class="built_in">floor</span>(Math.<span class="built_in">random</span>() * (max - min) + min)</span><br><span class="line">   &#125;</span><br><span class="line"><span class="built_in">getRandomNum</span>(<span class="number">10</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h2 id="深度克隆-deepclone"><a href="#深度克隆-deepclone" class="headerlink" title="深度克隆 deepclone"></a>深度克隆 deepclone</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 利用迭代</span></span><br><span class="line"><span class="comment">// 思路是：判定要克隆的对象是不是引用类型，如果是引用类型，则继续迭代,如果该项是基本类型，则直接复制。</span></span><br><span class="line"><span class="keyword">function</span> deep<span class="constructor">Clone(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newObj=<span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span>is<span class="constructor">Array(<span class="params">obj</span>)</span>?<span class="literal">[]</span>:&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(obj&amp;&amp;typeof obj ===<span class="string">&quot;object&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.has<span class="constructor">OwnProperty(<span class="params">key</span>)</span>)&#123;</span><br><span class="line">                newObj<span class="literal">[<span class="identifier">key</span>]</span>=(obj<span class="operator"> &amp;&amp; </span>typeof obj<span class="literal">[<span class="identifier">key</span>]</span>===&#x27;<span class="keyword">object</span>&#x27;)?deep<span class="constructor">Clone(<span class="params">obj</span>[<span class="params">key</span>])</span>:obj<span class="literal">[<span class="identifier">key</span>]</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">parsetTime(<span class="built_in">new</span> <span class="type">Date</span>(),<span class="string">&#x27;&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">function</span> parseTime(<span class="type">time</span>, cFormat) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arguments.length === <span class="number">0</span> || !<span class="type">time</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  const <span class="keyword">format</span> = cFormat || <span class="string">&#x27;&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;&#x27;</span></span><br><span class="line">  let <span class="type">date</span></span><br><span class="line">  <span class="keyword">if</span> (typeof <span class="type">time</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="type">date</span> = <span class="type">time</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((typeof <span class="type">time</span> === <span class="string">&#x27;string&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((/^[<span class="number">0</span><span class="number">-9</span>]+$/.test(<span class="type">time</span>))) &#123;</span><br><span class="line">        // support &quot;1548221490638&quot;</span><br><span class="line">        <span class="type">time</span> = parseInt(<span class="type">time</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // support safari</span><br><span class="line">        // https://stackoverflow.com/questions/<span class="number">4310953</span>/invalid-<span class="type">date</span>-<span class="keyword">in</span>-safari</span><br><span class="line">        <span class="type">time</span> = <span class="type">time</span>.replace(<span class="built_in">new</span> RegExp(/-/gm), <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((typeof <span class="type">time</span> === <span class="string">&#x27;number&#x27;</span>) &amp;&amp; (<span class="type">time</span>.toString().length === <span class="number">10</span>)) &#123;</span><br><span class="line">      <span class="type">time</span> = <span class="type">time</span> * <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">date</span> = <span class="built_in">new</span> <span class="type">Date</span>(<span class="type">time</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  const formatObj = &#123;</span><br><span class="line">    y: <span class="type">date</span>.getFullYear(),</span><br><span class="line">    m: <span class="type">date</span>.getMonth() + <span class="number">1</span>,</span><br><span class="line">    d: <span class="type">date</span>.getDate(),</span><br><span class="line">    h: <span class="type">date</span>.getHours(),</span><br><span class="line">    i: <span class="type">date</span>.getMinutes(),</span><br><span class="line">    s: <span class="type">date</span>.getSeconds(),</span><br><span class="line">    a: <span class="type">date</span>.getDay()</span><br><span class="line">  &#125;</span><br><span class="line">  const time_str = <span class="keyword">format</span>.replace(/&#123;([ymdhisa])+&#125;/g, (result, key) =&gt; &#123;</span><br><span class="line">    const <span class="keyword">value</span> = formatObj[key]</span><br><span class="line">    // Note: getDay() <span class="keyword">returns</span> <span class="number">0</span> <span class="keyword">on</span> Sunday</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;a&#x27;</span>) &#123; <span class="keyword">return</span> [<span class="string">&#x27;日&#x27;</span>, <span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;二&#x27;</span>, <span class="string">&#x27;三&#x27;</span>, <span class="string">&#x27;四&#x27;</span>, <span class="string">&#x27;五&#x27;</span>, <span class="string">&#x27;六&#x27;</span>][<span class="keyword">value</span> ] &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">value</span>.toString().padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> time_str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="根据时间返回多久以前"><a href="#根据时间返回多久以前" class="headerlink" title="根据时间返回多久以前"></a>根据时间返回多久以前</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">export <span class="keyword">function</span> formatTime(<span class="type">time</span>, <span class="keyword">option</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> ((<span class="string">&#x27;&#x27;</span> + <span class="type">time</span>).length === <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="type">time</span> = parseInt(<span class="type">time</span>) * <span class="number">1000</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">time</span> = +<span class="type">time</span></span><br><span class="line">  &#125;</span><br><span class="line">  const d = <span class="built_in">new</span> <span class="type">Date</span>(<span class="type">time</span>)</span><br><span class="line">  const now = <span class="type">Date</span>.now()</span><br><span class="line"></span><br><span class="line">  const diff = (now - d) / <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (diff &lt; <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;刚刚&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; <span class="number">3600</span>) &#123;</span><br><span class="line">    // less <span class="number">1</span> hour</span><br><span class="line">    <span class="keyword">return</span> Math.ceil(diff / <span class="number">60</span>) + <span class="string">&#x27;分钟前&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; <span class="number">3600</span> * <span class="number">24</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> Math.ceil(diff / <span class="number">3600</span>) + <span class="string">&#x27;小时前&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; <span class="number">3600</span> * <span class="number">24</span> * <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;1天前&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">option</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> parseTime(<span class="type">time</span>, <span class="keyword">option</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      d.getMonth() +</span><br><span class="line">      <span class="number">1</span> +</span><br><span class="line">      <span class="string">&#x27;月&#x27;</span> +</span><br><span class="line">      d.getDate() +</span><br><span class="line">      <span class="string">&#x27;日&#x27;</span> +</span><br><span class="line">      d.getHours() +</span><br><span class="line">      <span class="string">&#x27;时&#x27;</span> +</span><br><span class="line">      d.getMinutes() +</span><br><span class="line">      <span class="string">&#x27;分&#x27;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params"><span class="built_in">this</span>: <span class="built_in">any</span>, fn: <span class="built_in">Function</span>, delay = <span class="number">500</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> timer = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (timer) <span class="built_in">window</span>.clearTimeout(timer);</span><br><span class="line">		timer = <span class="built_in">window</span>.setTimeout(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">			fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">		&#125;, delay);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout, args, context, timestamp, result</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 据上一次触发时间间隔</span></span><br><span class="line">    <span class="keyword">const</span> last = +<span class="keyword">new</span> <span class="built_in">Date</span>() - timestamp</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上次被包装函数被调用时间间隔 last 小于设定时间间隔 wait</span></span><br><span class="line">    <span class="keyword">if</span> (last &lt; wait &amp;&amp; last &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(later, wait - last)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timeout = <span class="literal">null</span></span><br><span class="line">      <span class="comment">// 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用</span></span><br><span class="line">      <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">        result = func.apply(context, args)</span><br><span class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    context = <span class="built_in">this</span></span><br><span class="line">    timestamp = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">const</span> callNow = immediate &amp;&amp; !timeout</span><br><span class="line">    <span class="comment">// 如果延时不存在，重新设定延时</span></span><br><span class="line">    <span class="keyword">if</span> (!timeout) timeout = <span class="built_in">setTimeout</span>(later, wait)</span><br><span class="line">    <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">      result = func.apply(context, args)</span><br><span class="line">      context = args = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 节流</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params"><span class="built_in">this</span>: <span class="built_in">any</span>, fn: <span class="built_in">Function</span>, interval = <span class="number">500</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> last = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">		<span class="comment">// 还没到时间</span></span><br><span class="line">		<span class="keyword">if</span> (now - last &lt; interval) <span class="keyword">return</span>;</span><br><span class="line">		last = now;</span><br><span class="line">		fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取-query-对象"><a href="#获取-query-对象" class="headerlink" title="获取 query 对象"></a>获取 query 对象</h2><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getQueryObject</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">url</span> = <span class="built_in">url</span> == <span class="literal">null</span> ? <span class="attribute">window.location.href</span> : <span class="built_in">url</span></span><br><span class="line">  <span class="keyword">const</span> search = <span class="built_in">url</span>.substring(<span class="built_in">url</span>.lastIndexOf(<span class="string">&#x27;?&#x27;</span>) + <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/([^?&amp;=]+)=([^?&amp;=]*)/g</span></span><br><span class="line">  search.replace(reg, (rs, $<span class="number">1</span>, $<span class="number">2</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="built_in">decodeURIComponent</span>($<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> val = <span class="built_in">decodeURIComponent</span>($<span class="number">2</span>)</span><br><span class="line">    val = <span class="built_in">String</span>(val)</span><br><span class="line">    obj[name] = val</span><br><span class="line">    <span class="keyword">return</span> rs</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字节长度"><a href="#字节长度" class="headerlink" title="字节长度"></a>字节长度</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">export</span> <span class="meta">function</span> byteLength(str) &#123;</span><br><span class="line">  <span class="comment">// returns the byte length of an utf8 string</span></span><br><span class="line">  let s = str.length</span><br><span class="line">  for (var i = str.length - <span class="number">1</span><span class="comment">; i &gt;= 0; i--) &#123;</span></span><br><span class="line">    const <span class="meta">code</span> = str.charCodeAt(i)</span><br><span class="line">    <span class="meta">if</span> (<span class="meta">code</span> &gt; <span class="number">0x7f</span> &amp;&amp; <span class="meta">code</span> &lt;= <span class="number">0x7ff</span>) s++</span><br><span class="line">    <span class="meta">else</span> <span class="meta">if</span> (<span class="meta">code</span> &gt; <span class="number">0x7ff</span> &amp;&amp; <span class="meta">code</span> &lt;= <span class="number">0xffff</span>) s += <span class="number">2</span></span><br><span class="line">    <span class="meta">if</span> (<span class="meta">code</span> &gt;= <span class="number">0xDC00</span> &amp;&amp; <span class="meta">code</span> &lt;= <span class="number">0xDFFF</span>) i--</span><br><span class="line">  &#125;</span><br><span class="line">  return s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="克隆数组"><a href="#克隆数组" class="headerlink" title="克隆数组"></a>克隆数组</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">export <span class="function"><span class="keyword">function</span> <span class="title">cleanArray</span></span>(actual) &#123;</span><br><span class="line">  const <span class="keyword">new</span><span class="type">Array</span> = []</span><br><span class="line">  <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; actual.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (actual[i]) &#123;</span><br><span class="line">      <span class="keyword">new</span><span class="type">Array</span>.push(actual[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Array</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="html-获取文本"><a href="#html-获取文本" class="headerlink" title="html 获取文本"></a>html 获取文本</h2><figure class="highlight nim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> function html2Text(val) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">div</span> = document.createElement(&#x27;<span class="keyword">div</span>&#x27;)</span><br><span class="line">  <span class="keyword">div</span>.innerHTML = val</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">div</span>.textContent || <span class="keyword">div</span>.innerText</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="切换-class"><a href="#切换-class" class="headerlink" title="切换 class"></a>切换 class</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleClass</span>(<span class="params">element, className</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!element || !className) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> classString = element.className</span><br><span class="line">  <span class="keyword">const</span> nameIndex = classString.indexOf(className)</span><br><span class="line">  <span class="keyword">if</span> (nameIndex === -<span class="number">1</span>) &#123;</span><br><span class="line">    classString += <span class="string">&#x27;&#x27;</span> + className</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    classString =</span><br><span class="line">      classString.substr(<span class="number">0</span>, nameIndex) +</span><br><span class="line">      classString.substr(nameIndex + className.length)</span><br><span class="line">  &#125;</span><br><span class="line">  element.className = classString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">ele, cls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !!ele.className.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;(\\s|^)&#x27;</span> + cls + <span class="string">&#x27;(\\s|$)&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">ele, cls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!hasClass(ele, cls)) ele.className += <span class="string">&#x27; &#x27;</span> + cls</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove class from element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;HTMLElement&#125;</span> <span class="variable">elm</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">cls</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">ele, cls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hasClass(ele, cls)) &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;(\\s|^)&#x27;</span> + cls + <span class="string">&#x27;(\\s|$)&#x27;</span>)</span><br><span class="line">    ele.className = ele.className.replace(reg, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="星号替换-135-15151"><a href="#星号替换-135-15151" class="headerlink" title="星号替换 135****15151"></a>星号替换 135****15151</h2><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 部分隐藏处理</span></span><br><span class="line"><span class="comment">** str 需要处理的字符串</span></span><br><span class="line"><span class="comment">** frontLen 保留的前几位</span></span><br><span class="line"><span class="comment">** endLen 保留的后几位</span></span><br><span class="line"><span class="comment">** cha 替换的字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">export function plusXing(<span class="built_in">str</span>, frontLen, endLen,cha) &#123;</span><br><span class="line">  <span class="built_in">var</span> len = <span class="built_in">str</span>.length - frontLen - endLen;</span><br><span class="line">  <span class="built_in">var</span> xing = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    xing += cha;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">str</span>.substring(<span class="number">0</span>, frontLen) + xing + <span class="built_in">str</span>.substring(<span class="built_in">str</span>.length - endLen);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="上午下午"><a href="#上午下午" class="headerlink" title="上午下午"></a>上午下午</h2><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//获取上午，下午晚上</span></span><br><span class="line">export function getDayType()&#123;</span><br><span class="line">  let <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  let now = <span class="keyword">new</span> Date(),<span class="built_in">hour</span> = now.getHours()</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">hour</span>)</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">hour</span> &lt; <span class="number">6</span>)&#123;</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;凌晨&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">hour</span> &lt; <span class="number">9</span>)&#123;</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;早上&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">hour</span> &lt; <span class="number">12</span>)&#123;</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;上午&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">hour</span> &lt; <span class="number">14</span>)&#123;</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;中午&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">hour</span> &lt; <span class="number">17</span>)&#123;</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;下午&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">hour</span> &lt; <span class="number">19</span>)&#123;</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;傍晚&#x27;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">hour</span> &lt; <span class="number">22</span>)&#123;</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;晚上&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&#x27;夜里&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="唯一数组"><a href="#唯一数组" class="headerlink" title="唯一数组"></a>唯一数组</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一 利用迭代</span></span><br><span class="line"><span class="comment">// 思路是：判定要克隆的对象是不是引用类型，如果是引用类型，则继续迭代,如果该项是基本类型，则直接复制。</span></span><br><span class="line"><span class="keyword">function</span> deep<span class="constructor">Clone(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newObj=<span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span>is<span class="constructor">Array(<span class="params">obj</span>)</span>?<span class="literal">[]</span>:&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(obj&amp;&amp;typeof obj ===<span class="string">&quot;object&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.has<span class="constructor">OwnProperty(<span class="params">key</span>)</span>)&#123;</span><br><span class="line">                newObj<span class="literal">[<span class="identifier">key</span>]</span>=(obj<span class="operator"> &amp;&amp; </span>typeof obj<span class="literal">[<span class="identifier">key</span>]</span>===&#x27;<span class="keyword">object</span>&#x27;)?deep<span class="constructor">Clone(<span class="params">obj</span>[<span class="params">key</span>])</span>:obj<span class="literal">[<span class="identifier">key</span>]</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//随机数</span></span><br><span class="line"><span class="keyword">function</span> get<span class="constructor">Random(<span class="params">n</span>,<span class="params">m</span>)</span>&#123;</span><br><span class="line">    return (<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>random<span class="literal">()</span><span class="operator"> * </span>(m - n) + n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> get<span class="constructor">RandomInt(<span class="params">n</span>,<span class="params">m</span>)</span>&#123;</span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>random<span class="literal">()</span><span class="operator"> * </span>(m - n) + n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">const XLSX =require(&#x27;xlsx&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载</span></span><br><span class="line"><span class="keyword">function</span> down<span class="constructor">File(<span class="params">arr</span>,<span class="params">filename</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// let arr = [</span></span><br><span class="line">    <span class="comment">//     [&#x27;姓名&#x27;, &#x27;性别&#x27;, &#x27;年龄&#x27;, &#x27;注册时间&#x27;],</span></span><br><span class="line">    <span class="comment">//     [&#x27;张三&#x27;, &#x27;男&#x27;, 18, new Date()],</span></span><br><span class="line">    <span class="comment">//     [&#x27;李四&#x27;, &#x27;女&#x27;, 22, new Date()]</span></span><br><span class="line">    <span class="comment">// ];</span></span><br><span class="line">    <span class="keyword">let</span> sheet = <span class="module-access"><span class="module"><span class="identifier">XLSX</span>.</span></span>utils.aoa<span class="constructor">_to_sheet(<span class="params">arr</span>)</span>;</span><br><span class="line">    <span class="keyword">open</span><span class="constructor">DownloadDialog(<span class="params">sheet2blob</span>(<span class="params">sheet</span>)</span>, filename + &#x27;.xlsx&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将一个sheet转成最终的excel文件的blob对象，然后利用URL.createObjectURL下载</span></span><br><span class="line"><span class="keyword">function</span> sheet2blob(sheet, sheetName) &#123;</span><br><span class="line">    sheetName = sheetName<span class="operator"> || </span>&#x27;sheet1&#x27;;</span><br><span class="line">    var workbook = &#123;</span><br><span class="line">        SheetNames: <span class="literal">[<span class="identifier">sheetName</span>]</span>,</span><br><span class="line">        Sheets: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    workbook.Sheets<span class="literal">[<span class="identifier">sheetName</span>]</span> = sheet;</span><br><span class="line">    <span class="comment">// 生成excel的配置项</span></span><br><span class="line">    var wopts = &#123;</span><br><span class="line">        bookType: &#x27;xlsx&#x27;, <span class="comment">// 要生成的文件类型</span></span><br><span class="line">        bookSST: <span class="literal">false</span>, <span class="comment">// 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性</span></span><br><span class="line">        <span class="keyword">type</span>: &#x27;binary&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var wbout = <span class="module-access"><span class="module"><span class="identifier">XLSX</span>.</span></span>write(workbook, wopts);</span><br><span class="line">    var blob = <span class="keyword">new</span> <span class="constructor">Blob([<span class="params">s2ab</span>(<span class="params">wbout</span>)</span>], &#123;<span class="keyword">type</span>:<span class="string">&quot;application/octet-stream&quot;</span>&#125;);</span><br><span class="line">    <span class="comment">// 字符串转ArrayBuffer</span></span><br><span class="line">    <span class="keyword">function</span> s2ab(s) &#123;</span><br><span class="line">        var buf = <span class="keyword">new</span> <span class="constructor">ArrayBuffer(<span class="params">s</span>.<span class="params">length</span>)</span>;</span><br><span class="line">        var view = <span class="keyword">new</span> <span class="constructor">Uint8Array(<span class="params">buf</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (var i=<span class="number">0</span>; i!=s.length; ++i) view<span class="literal">[<span class="identifier">i</span>]</span> = s.<span class="built_in">char</span><span class="constructor">CodeAt(<span class="params">i</span>)</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">        return buf;</span><br><span class="line">    &#125;</span><br><span class="line">    return blob;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的打开下载对话框方法，没有测试过具体兼容性</span></span><br><span class="line"><span class="comment"> * @param url 下载地址，也可以是一个blob对象，必选</span></span><br><span class="line"><span class="comment"> * @param saveName 保存文件名，可选</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="keyword">open</span><span class="constructor">DownloadDialog(<span class="params">url</span>, <span class="params">saveName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(typeof url<span class="operator"> == </span>&#x27;<span class="keyword">object</span>&#x27;<span class="operator"> &amp;&amp; </span>url instanceof Blob)</span><br><span class="line">    &#123;</span><br><span class="line">        url = <span class="module-access"><span class="module"><span class="identifier">URL</span>.</span></span>create<span class="constructor">ObjectURL(<span class="params">url</span>)</span>; <span class="comment">// 创建blob地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    var aLink = document.create<span class="constructor">Element(&#x27;<span class="params">a</span>&#x27;)</span>;</span><br><span class="line">    aLink.href = url;</span><br><span class="line">    aLink.download = saveName<span class="operator"> || </span>&#x27;&#x27;; <span class="comment">// HTML5新增的属性，指定保存文件名，可以不要后缀，注意，file:///模式下不会生效</span></span><br><span class="line">    var event;</span><br><span class="line">    <span class="keyword">if</span>(window.MouseEvent) event = <span class="keyword">new</span> <span class="constructor">MouseEvent(&#x27;<span class="params">click</span>&#x27;)</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        event = document.create<span class="constructor">Event(&#x27;MouseEvents&#x27;)</span>;</span><br><span class="line">        event.init<span class="constructor">MouseEvent(&#x27;<span class="params">click</span>&#x27;, <span class="params">true</span>, <span class="params">false</span>, <span class="params">window</span>, 0, 0, 0, 0, 0, <span class="params">false</span>, <span class="params">false</span>, <span class="params">false</span>, <span class="params">false</span>, 0, <span class="params">null</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    aLink.dispatch<span class="constructor">Event(<span class="params">event</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="sessionStorage-封装"><a href="#sessionStorage-封装" class="headerlink" title="sessionStorage 封装"></a>sessionStorage 封装</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> get<span class="constructor">Item(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse(window.sessionStorage.get<span class="constructor">Item(<span class="params">key</span>)</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> set<span class="constructor">Item(<span class="params">key</span>,<span class="params">value</span>)</span>&#123;</span><br><span class="line">    window.sessionStorage.set<span class="constructor">Item(<span class="params">key</span>,<span class="params">value</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> remove<span class="constructor">Item(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    window.sessionStorage.remove<span class="constructor">Item(<span class="params">key</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> clear<span class="constructor">Item()</span> &#123;</span><br><span class="line">    window.sessionStorage.clear<span class="literal">()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取差距多少天"><a href="#获取差距多少天" class="headerlink" title="获取差距多少天"></a>获取差距多少天</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">GetNumberOfDays(<span class="params">date1</span>,<span class="params">date2</span>)</span>&#123;<span class="comment">//获得天数</span></span><br><span class="line">    <span class="comment">//date1：开始日期，date2结束日期</span></span><br><span class="line">    var a1 = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>parse(<span class="keyword">new</span> <span class="constructor">Date(<span class="params">date1</span>)</span>);</span><br><span class="line">    var a2 = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>parse(<span class="keyword">new</span> <span class="constructor">Date(<span class="params">date2</span>)</span>);</span><br><span class="line">    var day = parse<span class="constructor">Int((<span class="params">a2</span>-<span class="params">a1</span>)</span>/ (<span class="number">1000</span><span class="operator"> * </span><span class="number">60</span><span class="operator"> * </span><span class="number">60</span><span class="operator"> * </span><span class="number">24</span>));<span class="comment">//核心：时间戳相减，然后除以天数</span></span><br><span class="line">    return day</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="百度地图坐标转高德"><a href="#百度地图坐标转高德" class="headerlink" title="百度地图坐标转高德"></a>百度地图坐标转高德</h2><pre><code>  function baidu*to_gaode(bd_lng, bd_lat)&#123;
  //百度坐标转高德（传入经度、纬度）
  var X_PI = Math.PI * 3000.0 / 180.0;
  var x = bd*lng - 0.0065;
  var y = bd_lat - 0.006;
  var z = Math.sqrt(x * x + y _ y) - 0.00002 _ Math.sin(y _ X_PI);
  var theta = Math.atan2(y, x) - 0.000003 _ Math.cos(x _ X_PI);
  var gg_lng = z _ Math.cos(theta);
  var gg_lat = z \* Math.sin(theta);
  return &#123;lng: gg_lng,lat: gg_lat&#125;
  &#125;
</code></pre>
<h2 id="获取最近-7-天"><a href="#获取最近-7-天" class="headerlink" title="获取最近 7 天"></a>获取最近 7 天</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取最近几天</span></span><br><span class="line"><span class="keyword">function</span> get<span class="constructor">LastDay(<span class="params">day</span>,<span class="params">start</span> = <span class="params">new</span> Date()</span>)&#123;</span><br><span class="line"></span><br><span class="line"> start.set<span class="constructor">Time(<span class="params">start</span>.<span class="params">getTime</span>()</span> - <span class="number">3600</span><span class="operator"> * </span><span class="number">1000</span><span class="operator"> * </span><span class="number">24</span><span class="operator"> * </span>day);</span><br><span class="line"> return start</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日期变星期几"><a href="#日期变星期几" class="headerlink" title="日期变星期几"></a>日期变星期几</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//日期转变成周几</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getweekDay</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> a = [<span class="string">&quot;日&quot;</span>, <span class="string">&quot;一&quot;</span>, <span class="string">&quot;二&quot;</span>, <span class="string">&quot;三&quot;</span>, <span class="string">&quot;四&quot;</span>, <span class="string">&quot;五&quot;</span>, <span class="string">&quot;六&quot;</span>];</span><br><span class="line"> <span class="keyword">let</span> day = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getDay()</span><br><span class="line"> <span class="keyword">return</span> <span class="string">`周<span class="subst">$&#123;a[day]&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="根据当前时间获取前一天后一天"><a href="#根据当前时间获取前一天后一天" class="headerlink" title="根据当前时间获取前一天后一天"></a>根据当前时间获取前一天后一天</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getpreDay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	 <span class="keyword">var</span> curDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">	 <span class="keyword">var</span> preDate = <span class="keyword">new</span> <span class="built_in">Date</span>(curDate.getTime() - <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>); <span class="comment">//前一天</span></span><br><span class="line">	 <span class="keyword">return</span> preDate</span><br><span class="line">	 <span class="comment">// var nextDate = new Date(curDate.getTime() + 24*60*60*1000); //后一天</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="localStorage-的已使用空间"><a href="#localStorage-的已使用空间" class="headerlink" title="localStorage 的已使用空间"></a>localStorage 的已使用空间</h2><p>在较新的 chrome 上测试，localStorage 的存储是按照字符个数来算的。 包含键和值的。<br>所以在测试代码中，你把 a 修改啊，不会影响存储的数量。 但是键的长度，会影响存储的数量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLSUsedSpace</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">localStorage</span>).reduce(<span class="function">(<span class="params">total, curKey</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">localStorage</span>.hasOwnProperty(curKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> total;</span><br><span class="line">        &#125;</span><br><span class="line">        total += <span class="built_in">localStorage</span>[curKey].length + curKey.length;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">localStorage</span>.clear();</span><br><span class="line"><span class="built_in">localStorage</span>.a = <span class="string">&quot;啊&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(getLSUsedSpace()); <span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="带图带事件的桌面通知"><a href="#带图带事件的桌面通知" class="headerlink" title="带图带事件的桌面通知"></a>带图带事件的桌面通知</h2><p>利用 notify</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="keyword">do</span><span class="constructor">Notify(<span class="params">title</span>, <span class="params">options</span> = &#123;&#125;, <span class="params">events</span> = &#123;&#125;)</span> &#123;</span><br><span class="line">    const notification = <span class="keyword">new</span> <span class="constructor">Notification(<span class="params">title</span>, <span class="params">options</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> event <span class="keyword">in</span> events) &#123;</span><br><span class="line">        notification<span class="literal">[<span class="identifier">event</span>]</span> = events<span class="literal">[<span class="identifier">event</span>]</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> notify(title, options = &#123;&#125;, events = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">&quot;Notification&quot;</span> <span class="keyword">in</span> window)) &#123;</span><br><span class="line">        return console.error(<span class="string">&quot;This browser does not support desktop notification&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">Notification</span>.</span></span>permission<span class="operator"> === </span><span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span><span class="constructor">Notify(<span class="params">title</span>, <span class="params">options</span>, <span class="params">events</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">Notification</span>.</span></span>permission !== <span class="string">&quot;denied&quot;</span>) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Notification</span>.</span></span>request<span class="constructor">Permission()</span>.<span class="keyword">then</span>(<span class="keyword">function</span> (permission) &#123;</span><br><span class="line">            <span class="keyword">if</span> (permission<span class="operator"> === </span><span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">do</span><span class="constructor">Notify(<span class="params">title</span>, <span class="params">options</span>, <span class="params">events</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  notify(<span class="string">&quot;中奖提示&quot;</span>, &#123;</span><br><span class="line">            icon: <span class="string">&quot;https://sf1-ttcdn-tos.pstatp.com/img/user-avatar/f1a9f122e925aeef5e4534ff7f706729~300x300.image&quot;</span>,</span><br><span class="line">            body: <span class="string">&quot;恭喜你，掘金签到一等奖&quot;</span>,</span><br><span class="line">            tag: <span class="string">&quot;prize&quot;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            onclick(ev) &#123;</span><br><span class="line">                console.log(ev);</span><br><span class="line">                ev.target.close<span class="literal">()</span>;</span><br><span class="line">                window.focus<span class="literal">()</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="原生-30-行代码实现视频截图"><a href="#原生-30-行代码实现视频截图" class="headerlink" title="原生 30 行代码实现视频截图"></a>原生 30 行代码实现视频截图</h2><p>基本原理就是把视频画到 Canvas 里面，然后调用 toDataURL 或者 toBlob，再利用 a 标签模拟点击，download 属性指定名字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">captureVideo</span>(<span class="params">videoEl</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">let</span> canvasEl;</span><br><span class="line">          <span class="keyword">let</span> dataUrl;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">const</span> cps = <span class="built_in">window</span>.getComputedStyle(videoEl);</span><br><span class="line">              <span class="keyword">const</span> width = +cps.getPropertyValue(<span class="string">&quot;width&quot;</span>).replace(<span class="string">&quot;px&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">              <span class="keyword">const</span> height = +cps.getPropertyValue(<span class="string">&quot;height&quot;</span>).replace(<span class="string">&quot;px&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">              canvasEl = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">              canvasEl.style.cssText = <span class="string">`position:fixed;left:-9999px`</span>;</span><br><span class="line">              canvasEl.height = height;</span><br><span class="line">              canvasEl.width = width;</span><br><span class="line"></span><br><span class="line">              <span class="built_in">document</span>.body.appendChild(canvasEl);</span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> ctx = canvasEl.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">              ctx.drawImage(videoEl, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">              <span class="comment">// const image = canvas.toDataURL(&quot;image/png&quot;);</span></span><br><span class="line">              dataUrl = canvasEl.toDataURL();</span><br><span class="line"></span><br><span class="line">              <span class="built_in">document</span>.body.removeChild(canvasEl);</span><br><span class="line">              canvasEl = <span class="literal">null</span>;</span><br><span class="line">              <span class="keyword">return</span> dataUrl;</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (canvasEl) &#123;</span><br><span class="line">                  <span class="built_in">document</span>.body.removeChild(canvasEl);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (dataUrl) &#123;</span><br><span class="line">                  <span class="keyword">return</span> dataUrl;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//示例注意添加crossorigin=&quot;anonymous&quot;，不然转为图片会失败。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;video id=<span class="string">&quot;videoEL&quot;</span> controls autoplay crossorigin=<span class="string">&quot;anonymous&quot;</span></span><br><span class="line">      src=<span class="string">&quot;https://api.dogecloud.com/player/get.mp4?vcode=5ac682e6f8231991&amp;userId=17&amp;ext=.mp4&quot;</span> width=<span class="string">&quot;500&quot;</span>&gt;&lt;/video&gt;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> aEl = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            aEl.href = url;</span><br><span class="line">            aEl.download = <span class="string">&quot;视频.png&quot;</span>;</span><br><span class="line">            aEl.click();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">doCaptureVideo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> url = captureVideo(videoEL);</span><br><span class="line">            download(url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        doCaptureVideo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基于-URLSearchParams-或-URL-获取-queryString-的值"><a href="#基于-URLSearchParams-或-URL-获取-queryString-的值" class="headerlink" title="基于 URLSearchParams 或 URL 获取 queryString 的值"></a>基于 URLSearchParams 或 URL 获取 queryString 的值</h2><p>常用的方式是使用正则或者 split 方法，其实不然，URLSearchParams 和 URL 都能很好的实现功能。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> urlSP = <span class="keyword">new</span> URLSearchParams(location.search);</span><br><span class="line">function getQueryString(<span class="built_in">key</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> urlSP.<span class="built_in">get</span>(<span class="built_in">key</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> urlObj = <span class="keyword">new</span> URL(location.href);</span><br><span class="line">function getQueryString(<span class="built_in">key</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> urlObj.searchParams.<span class="built_in">get</span>(<span class="built_in">key</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">测试地址： /index.html?pid=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">log</span> = console.<span class="built_in">log</span>;</span><br><span class="line">getQueryString</span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span>(<span class="string">&quot;pid&quot;</span>, getQueryString(<span class="string">&quot;pid&quot;</span>));  <span class="comment">// pid 10</span></span><br><span class="line"><span class="built_in">log</span>(<span class="string">&quot;cid&quot;</span>, getQueryString(<span class="string">&quot;cid&quot;</span>));  <span class="comment">// cid null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基于-atob-和-btoa-的-base64-编码和解码"><a href="#基于-atob-和-btoa-的-base64-编码和解码" class="headerlink" title="基于 atob 和 btoa 的 base64 编码和解码"></a>基于 atob 和 btoa 的 base64 编码和解码</h2><p>浏览器内置了 base64 编码和解码的能力</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> utf8<span class="constructor">_to_b64( <span class="params">str</span> )</span> &#123;</span><br><span class="line">  return window.btoa(unescape(encode<span class="constructor">URIComponent( <span class="params">str</span> )</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> b64<span class="constructor">_to_utf8( <span class="params">str</span> )</span> &#123;</span><br><span class="line">  return decode<span class="constructor">URIComponent(<span class="params">escape</span>(<span class="params">window</span>.<span class="params">atob</span>( <span class="params">str</span> )</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">utf8<span class="constructor">_to_b64(&#x27;✓ à <span class="params">la</span> <span class="params">mode</span>&#x27;)</span>; <span class="comment">// &quot;4pyTIMOgIGxhIG1vZGU=&quot;</span></span><br><span class="line">b64<span class="constructor">_to_utf8(&#x27;4pyTIMOgIGxhIG1vZGU=&#x27;)</span>; <span class="comment">// &quot;✓ à la mode&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="非正则替换的-html-代码-encode-和-decode"><a href="#非正则替换的-html-代码-encode-和-decode" class="headerlink" title="非正则替换的 html 代码 encode 和 decode"></a>非正则替换的 html 代码 encode 和 decode</h2><p>常规的方式是使用正则替换，这里是另外一种思路。</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">function htmlencode(s)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">div</span> = document.createElement(&#x27;<span class="keyword">div</span>&#x27;);</span><br><span class="line">    <span class="keyword">div</span>.appendChild(document.createTextNode(s));</span><br><span class="line">    <span class="keyword">var</span> <span class="literal">result</span> = <span class="keyword">div</span>.innerHTML;</span><br><span class="line">    <span class="keyword">div</span> = null;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br><span class="line">function htmldecode(s)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">div</span> = document.createElement(&#x27;<span class="keyword">div</span>&#x27;);</span><br><span class="line">    <span class="keyword">div</span>.innerHTML = s;</span><br><span class="line">    <span class="keyword">var</span> <span class="literal">result</span> = <span class="keyword">div</span>.innerText || <span class="keyword">div</span>.textContent;</span><br><span class="line">    <span class="keyword">div</span> = null;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">htmlencode(<span class="string">&quot;&lt;div&gt;3&gt;5 &amp; 666&lt;/div&gt;&quot;</span>); // &amp;lt;<span class="keyword">div</span>&amp;gt;<span class="number">3</span>&amp;gt;<span class="number">5</span> &amp;amp; <span class="number">666</span>&amp;lt;/<span class="keyword">div</span>&amp;gt;</span><br><span class="line">htmldecode(<span class="string">&quot;&amp;lt;div&amp;gt;3&amp;gt;5 &amp;amp; 666&amp;lt;/div&amp;gt;&quot;</span>) // &lt;<span class="keyword">div</span>&gt;<span class="number">3</span>&gt;<span class="number">5</span> &amp; <span class="number">666</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="相对地址转换为绝对地址"><a href="#相对地址转换为绝对地址" class="headerlink" title="相对地址转换为绝对地址"></a>相对地址转换为绝对地址</h2><p>基于当前页面的相对地址转换为绝对地址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">realativeToAbs</span>(<span class="params">href</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> aEl = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    aEl.href = href;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = aEl.href;</span><br><span class="line">    aEl = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;realativeToAbs&quot;</span>, realativeToAbs(<span class="string">&quot;../a/b/b/index.html&quot;</span>));</span><br><span class="line"><span class="comment">// realativeToAbs http://127.0.0.1:5500/a/b/b/index.html</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基于-URL-或者-Crypto-getRandomValues-生成-UUID"><a href="#基于-URL-或者-Crypto-getRandomValues-生成-UUID" class="headerlink" title="基于 URL 或者 Crypto.getRandomValues 生成 UUID"></a>基于 URL 或者 Crypto.getRandomValues 生成 UUID</h2><p>基于 URL.createObjectURL 或者 Crypto.getRandomValues<br>URL.createObjectURL 产生的地址为 blob:<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvY2I0OGI5NDAtYzYyNS00MDBhLWEzOTMtMTc2YzM2MzUwMjBi">https://developer.mozilla.org/cb48b940-c625-400a-a393-176c3635020b<i class="fa fa-external-link-alt"></i></span>, 其后部分就是一个 UUI</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genUUID</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> <span class="built_in">url</span> = URL.createObjectURL(<span class="keyword">new</span> Blob([]));</span><br><span class="line">   <span class="comment">// const uuid = url.split(&quot;/&quot;).pop();</span></span><br><span class="line">   <span class="keyword">const</span> uuid = <span class="built_in">url</span>.substring(<span class="built_in">url</span>.lastIndexOf(<span class="string">&#x27;/&#x27;</span>)+ <span class="number">1</span>);</span><br><span class="line">   URL.revokeObjectURL(<span class="built_in">url</span>);</span><br><span class="line">   <span class="keyword">return</span> uuid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">genUUID() <span class="comment">// cd205467-0120-47b0-9444-894736d873c7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uuidv4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> ([<span class="number">1e7</span>]+<span class="number">-1e3</span>+<span class="number">-4e3</span>+<span class="number">-8e3</span>+<span class="number">-1e11</span>).replace(<span class="regexp">/[018]/g</span>, c =&gt;</span><br><span class="line">   (c ^ crypto.getRandomValues(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">1</span>))[<span class="number">0</span>] &amp; <span class="number">15</span> &gt;&gt; c / <span class="number">4</span>).toString(<span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uuidv4() <span class="comment">// 38aa1602-ba78-4368-9235-d8703cdb6037</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基于-Array-from-的序列生成器"><a href="#基于-Array-from-的序列生成器" class="headerlink" title="基于 Array.from 的序列生成器"></a>基于 Array.from 的序列生成器</h2><p>造有序数据，无序数据，等等。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> range = (start, stop, step) =&gt; Array.<span class="built_in">from</span>(</span><br><span class="line">    &#123; length: (stop - start) / step + <span class="number">1</span>&#125;,</span><br><span class="line">    (_, i) =&gt; start + (i * step)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>); <span class="comment">// [0, 1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>); <span class="comment">// [0, 3, 6, 9]</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>, <span class="number">2.5</span>) <span class="comment">// [0, 2.5, 5, 7.5]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="基于-sendBeacon-的安全的数据上报"><a href="#基于-sendBeacon-的安全的数据上报" class="headerlink" title="基于 sendBeacon 的安全的数据上报"></a>基于 sendBeacon 的安全的数据上报</h2><p>sendBeacon 异步地向服务器发送数据，同时不会延迟页面的卸载或影响下一导航的载入性能。</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">report</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> navigator.sendBeacon !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">&quot;sendBeacon不被支持&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    navigator.sendBeacon(<span class="built_in">url</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;unload&#x27;</span>, logData, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   report(<span class="string">&quot;/log&quot;</span>, <span class="string">&quot;被卸载了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基于-toLocaleString-千分位"><a href="#基于-toLocaleString-千分位" class="headerlink" title="基于 toLocaleString 千分位"></a>基于 toLocaleString 千分位</h2><p>正则？ 遍历？ 不需要的。内置函数就解决。<br>当然，如果是超大的数，可能是会有问题的。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> format<span class="constructor">Money(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    return (+num).<span class="keyword">to</span><span class="constructor">LocaleString(<span class="string">&quot;en-US&quot;</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(format<span class="constructor">Money(123456789)</span>);  <span class="comment">// 123,456,789</span></span><br><span class="line">console.log(format<span class="constructor">Money(6781)</span>) <span class="comment">// 6,781</span></span><br><span class="line">console.log(format<span class="constructor">Money(5)</span>) <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">超大的数</span><br><span class="line">format<span class="constructor">Money(19999999933333333333333)</span> <span class="comment">// 19,999,999,933,333,333,000,000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Promise-顺序执行"><a href="#Promise-顺序执行" class="headerlink" title="Promise 顺序执行"></a>Promise 顺序执行</h2><p>让 Promise 顺序的执行，并支持初始化参数和结果作为参数传递。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runPromises</span>(<span class="params">promiseCreators, initData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> promiseCreators</span><br><span class="line">        .reduce(<span class="function">(<span class="params">promise, next</span>) =&gt;</span> promise</span><br><span class="line">                .then(<span class="function">(<span class="params">data</span>) =&gt;</span> next(data))</span><br><span class="line">            , <span class="built_in">Promise</span>.resolve(initData));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise1 = <span class="function"><span class="keyword">function</span> (<span class="params">data = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data + <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data -<span class="number">500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runPromises([promise1, promise2], <span class="number">1</span>).then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res));</span><br></pre></td></tr></table></figure>

<h2 id="延时执行-delay"><a href="#延时执行-delay" class="headerlink" title="延时执行 delay"></a>延时执行 delay</h2><p>延时执行某函数，且只会执行一次。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">fn = () =&gt; &#123; &#125;, delay = <span class="number">5000</span>, context = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ticket = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> runned = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">run</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (runned === <span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                runned = <span class="literal">true</span>;</span><br><span class="line">                ticket = <span class="built_in">setTimeout</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> res = <span class="keyword">await</span> fn.apply(context, args);</span><br><span class="line">                        resolve(res);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, delay)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">cancel</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(ticket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delay(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;你们好&quot;</span>);</span><br><span class="line">&#125;).run();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; run, cancel &#125; = delay(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;你好：&quot;</span>, name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">run(<span class="string">&quot;吉他&quot;</span>);</span><br><span class="line">run(<span class="string">&quot;吉他&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你们好</span></span><br><span class="line"><span class="comment">// 你好： 吉他</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="滑滚动页面到顶部"><a href="#滑滚动页面到顶部" class="headerlink" title="滑滚动页面到顶部"></a>滑滚动页面到顶部</h2><p>PC 端滚动的根元素是 document.documentElement,<br>移动端滚动的的根元素是 document.body,<br>有一个更好的属性 document.scrollingElement 能自己识别文档的滚动元素， 其在 PC 端等于 document.documentElement, 其在移动端等于 document.body</p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="comment">// smooth 选项在Safari上支持不好</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollToTop</span><span class="params">()</span>&#123;</span></span><br><span class="line">   window.scrollTo(&#123;</span><br><span class="line">       left: <span class="number">0</span>,</span><br><span class="line">       top: <span class="number">0</span>,</span><br><span class="line">       behavior: &#x27;smooth</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollToTop</span><span class="params">()</span> &#123;</span></span><br><span class="line">   <span class="built_in">let</span> scrollTop = document.documentElement.scrollTop || document.body.scrollTop;</span><br><span class="line">   <span class="keyword">if</span> (scrollTop &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       window.requestAnimationFrame(scrollToTop);</span><br><span class="line">       window.scrollTo(<span class="number">0</span>, scrollTop - scrollTop / <span class="number">8</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="禁止选择和复制"><a href="#禁止选择和复制" class="headerlink" title="禁止选择和复制"></a>禁止选择和复制</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;contextmenu&#x27;</span>, <span class="string">&#x27;selectstart&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>].<span class="keyword">forEach</span>(<span class="keyword">function</span>(ev)&#123;</span><br><span class="line">    document.addEventListener(ev, <span class="keyword">function</span>(ev)&#123;</span><br><span class="line">        ev.preventDefault();</span><br><span class="line">        ev.returnValue = <span class="keyword">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//当然也有CSS方案</span><br><span class="line">body &#123;</span><br><span class="line">    -moz-<span class="keyword">user</span>-<span class="keyword">select</span>: <span class="keyword">none</span>;</span><br><span class="line">    -webkit-<span class="keyword">user</span>-<span class="keyword">select</span>: <span class="keyword">none</span>;</span><br><span class="line">    -ms-<span class="keyword">user</span>-<span class="keyword">select</span>: <span class="keyword">none</span>;</span><br><span class="line">    -khtml-<span class="keyword">user</span>-<span class="keyword">select</span>: <span class="keyword">none</span>;</span><br><span class="line">    <span class="keyword">user</span>-<span class="keyword">select</span>: <span class="keyword">none</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="禁止图片拖拽"><a href="#禁止图片拖拽" class="headerlink" title="禁止图片拖拽"></a>禁止图片拖拽</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="literal">[&#x27;<span class="identifier">dragstart</span>&#x27;]</span>.<span class="keyword">for</span><span class="constructor">Each(<span class="params">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    document.add<span class="constructor">EventListener(<span class="params">ev</span>, <span class="params">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        ev.prevent<span class="constructor">Default()</span>;</span><br><span class="line">        ev.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="自增长-ID"><a href="#自增长-ID" class="headerlink" title="自增长 ID"></a>自增长 ID</h2><p>自己生产自增长的 ID 值，当然可以更复杂一些。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getId()); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(getId()); <span class="comment">// 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="判断是否是手机号"><a href="#判断是否是手机号" class="headerlink" title="判断是否是手机号"></a>判断是否是手机号</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPoneAvailable</span>(<span class="params">pone</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myreg = <span class="regexp">/^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (!myreg.test(pone)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="判断是否是电话"><a href="#判断是否是电话" class="headerlink" title="判断是否是电话"></a>判断是否是电话</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">isTelAvailable</span> (<span class="params">tel</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myreg = <span class="regexp">/^(([0\+]\d&#123;2,3&#125;-)?(0\d&#123;2,3&#125;)-)(\d&#123;7,8&#125;)(-(\d&#123;3,&#125;))?$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (!myreg.test(tel)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="计算文件有多大"><a href="#计算文件有多大" class="headerlink" title="计算文件有多大"></a>计算文件有多大</h2><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//计算文件多大，字节转mb</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">renderFileSize</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">null</span>==value||value==<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0 Bytes&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> unitArr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;Bytes&quot;</span>,<span class="string">&quot;KB&quot;</span>,<span class="string">&quot;MB&quot;</span>,<span class="string">&quot;GB&quot;</span>,<span class="string">&quot;TB&quot;</span>,<span class="string">&quot;PB&quot;</span>,<span class="string">&quot;EB&quot;</span>,<span class="string">&quot;ZB&quot;</span>,<span class="string">&quot;YB&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> index=<span class="number">0</span>,</span><br><span class="line">      srcsize = <span class="built_in">parseFloat</span>(value);</span><br><span class="line">  index=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.log(srcsize)/<span class="built_in">Math</span>.log(<span class="number">1024</span>));</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">size</span> =srcsize/<span class="built_in">Math</span>.pow(<span class="number">1024</span>,index);</span><br><span class="line">  <span class="comment">//  保留的小数位数</span></span><br><span class="line">  <span class="built_in">size</span>=<span class="built_in">size</span>.toFixed(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">size</span>+unitArr[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生成-guid"><a href="#生成-guid" class="headerlink" title="生成 guid"></a>生成 guid</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createGuid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&#x27;</span>.replace(<span class="regexp">/[xy]/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">Math</span>.random() * <span class="number">16</span> | <span class="number">0</span>,</span><br><span class="line">        v = c === <span class="string">&#x27;x&#x27;</span> ? r : (r &amp; <span class="number">0x3</span> | <span class="number">0x8</span>);</span><br><span class="line">    <span class="keyword">return</span> v.toString(<span class="number">16</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="param-转-object"><a href="#param-转-object" class="headerlink" title="param 转 object"></a>param 转 object</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">export <span class="keyword">function</span> param2Obj(url) &#123;</span><br><span class="line">  const <span class="keyword">search</span> = decodeURIComponent(url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>]).replace(/\+/g, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">search</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  const obj = &#123;&#125;</span><br><span class="line">  const searchArr = <span class="keyword">search</span>.split(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">  searchArr.<span class="keyword">forEach</span>(v =&gt; &#123;</span><br><span class="line">    const <span class="keyword">index</span> = v.indexOf(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">index</span> !== <span class="number">-1</span>) &#123;</span><br><span class="line">      const <span class="type">name</span> = v.substring(<span class="number">0</span>, <span class="keyword">index</span>)</span><br><span class="line">      const val = v.substring(<span class="keyword">index</span> + <span class="number">1</span>, v.length)</span><br><span class="line">      obj[<span class="type">name</span>] = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export <span class="keyword">function</span> param(<span class="type">json</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="type">json</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> cleanArray(</span><br><span class="line">    <span class="keyword">Object</span>.keys(<span class="type">json</span>).map(key =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="type">json</span>[key] === undefined) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> encodeURIComponent(key) + <span class="string">&#x27;=&#x27;</span> + encodeURIComponent(<span class="type">json</span>[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  ).<span class="keyword">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-将彻底屏蔽鼠标右键"><a href="#1-将彻底屏蔽鼠标右键" class="headerlink" title="1. 将彻底屏蔽鼠标右键"></a>1. 将彻底屏蔽鼠标右键</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">oncontextmenu=”<span class="built_in">window</span>.event.returnValue=<span class="literal">false</span>”</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; table border oncontextmenu=return(false)&gt;&lt; td&gt;no&lt; /table&gt;</span><br></pre></td></tr></table></figure>

<p>可用于 table</p>
<h2 id="2-取消选取、防止复制"><a href="#2-取消选取、防止复制" class="headerlink" title="2. 取消选取、防止复制"></a>2. 取消选取、防止复制</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; body onselectstart=”return false”&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-JS-不允许粘贴"><a href="#3-JS-不允许粘贴" class="headerlink" title="3. JS 不允许粘贴"></a>3. JS 不允许粘贴</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onpaste=”<span class="keyword">return</span> <span class="literal">false</span>”</span><br></pre></td></tr></table></figure>

<h2 id="4-JS-防止复制"><a href="#4-JS-防止复制" class="headerlink" title="4. JS 防止复制"></a>4. JS 防止复制</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">oncopy=”<span class="keyword">return</span> <span class="literal">false</span>;” oncut=”<span class="keyword">return</span> <span class="literal">false</span>;”</span><br></pre></td></tr></table></figure>

<h2 id="5-IE-地址栏前换成自己的图标"><a href="#5-IE-地址栏前换成自己的图标" class="headerlink" title="5. IE 地址栏前换成自己的图标"></a>5. IE 地址栏前换成自己的图标</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; link rel=”Shortcut Icon” href=”favicon.ico”&gt;</span><br></pre></td></tr></table></figure>

<p>在文件的根目录放进去这个图片，后缀修改成 ico 就可以了</p>
<h2 id="6-可以在收藏夹中显示出你的图标"><a href="#6-可以在收藏夹中显示出你的图标" class="headerlink" title="6. 可以在收藏夹中显示出你的图标"></a>6. 可以在收藏夹中显示出你的图标</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; link rel=”Bookmark” href=”favicon.ico”&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7-关闭输入法"><a href="#7-关闭输入法" class="headerlink" title="7. 关闭输入法"></a>7. 关闭输入法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; input style=”ime-mode:disabled”&gt;</span><br></pre></td></tr></table></figure>

<h2 id="8-永远都会带着框架"><a href="#8-永远都会带着框架" class="headerlink" title="8. 永远都会带着框架"></a>8. 永远都会带着框架</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; script language=”JavaScript”&gt;&lt; !– if (window == top)top.location.href = “frames.htm”; //frames.htm</span><br><span class="line">为框架网页 // –&gt;&lt; /script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="9-防止被人-frame"><a href="#9-防止被人-frame" class="headerlink" title="9. 防止被人 frame"></a>9. 防止被人 frame</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; SCRIPT LANGUAGE=JAVASCRIPT&gt;&lt; !– if (top.location != self.location)top.location=self.location; //</span><br><span class="line">–&gt;&lt; /SCRIPT&gt;</span><br></pre></td></tr></table></figure>

<h2 id="10-网页将不能被另存为"><a href="#10-网页将不能被另存为" class="headerlink" title="10. 网页将不能被另存为"></a>10. 网页将不能被另存为</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; noscript&gt;&lt; iframe src=x.html&gt;&lt; /iframe&gt;&lt; /noscript&gt;</span><br></pre></td></tr></table></figure>

<h2 id="11-网页源代码"><a href="#11-网页源代码" class="headerlink" title="11. 网页源代码"></a>11. 网页源代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; input type=button value=查看网页源代码 onclick=”window.location = “view-source:”+</span><br><span class="line">“http://www.csxiaoyao.com””&gt;</span><br></pre></td></tr></table></figure>

<h2 id="12-删除时确认"><a href="#12-删除时确认" class="headerlink" title="12. 删除时确认"></a>12. 删除时确认</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; a href=”javascript:if(confirm(” 确实要删除吗?”))location=”boos.asp?&amp;areyou=删除&amp;page=1″”&gt;删除&lt; /a&gt;</span><br></pre></td></tr></table></figure>

<h2 id="13-取得控件的绝对位置"><a href="#13-取得控件的绝对位置" class="headerlink" title="13. 取得控件的绝对位置"></a>13. 取得控件的绝对位置</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIE</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t=e.offsetTop;</span><br><span class="line">    <span class="keyword">var</span> l=e.offsetLeft;</span><br><span class="line">		<span class="keyword">while</span>(e=e.offsetParent)&#123;</span><br><span class="line">		t+=e.offsetTop;</span><br><span class="line">		l+=e.offsetLeft;</span><br><span class="line">	&#125;</span><br><span class="line">	alert(“top=”+t+”/nleft=”+l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">&lt; script language=”VBScript”&gt;&lt; !–</span><br><span class="line"><span class="keyword">function</span> getIE()</span><br><span class="line"><span class="keyword">dim</span> t,l,a,b</span><br><span class="line"><span class="keyword">set</span> a=document.all.img1</span><br><span class="line">t=document.all.img1.offsetTop</span><br><span class="line">l=document.all.img1.offsetLeft</span><br><span class="line"><span class="keyword">while</span> a.tagName&lt; &gt;”BODY”</span><br><span class="line"><span class="keyword">set</span> a = a.offsetParent</span><br><span class="line">t=t+a.offsetTop</span><br><span class="line">l=l+a.offsetLeft</span><br><span class="line"><span class="keyword">wend</span></span><br><span class="line">msgbox “top=”&amp;t&amp;<span class="built_in">chr</span>(<span class="number">13</span>)&amp;”left=”&amp;l,<span class="number">64</span>,”得到控件的位置”</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">function</span></span><br><span class="line">–&gt;&lt; /script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="14-光标是停在文本框文字的最后"><a href="#14-光标是停在文本框文字的最后" class="headerlink" title="14. 光标是停在文本框文字的最后"></a>14. 光标是停在文本框文字的最后</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt; script language=”javascript”&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cc</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> e = event.srcElement;</span><br><span class="line"><span class="keyword">var</span> r =e.createTextRange();</span><br><span class="line">r.moveStart(“character”,e.value.length);</span><br><span class="line">r.collapse(<span class="literal">true</span>);</span><br><span class="line">r.select();</span><br><span class="line">&#125;</span><br><span class="line">&lt; /script&gt;</span><br><span class="line">&lt; input type=text name=text1 value=”<span class="number">123</span>″ onfocus=”cc()”&gt;</span><br></pre></td></tr></table></figure>

<h2 id="15-判断上一页的来源"><a href="#15-判断上一页的来源" class="headerlink" title="15. 判断上一页的来源"></a>15. 判断上一页的来源</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">javascript: <span class="built_in">document</span>.referrer</span><br></pre></td></tr></table></figure>

<h2 id="16-最小化、最大化、关闭窗口"><a href="#16-最小化、最大化、关闭窗口" class="headerlink" title="16. 最小化、最大化、关闭窗口"></a>16. 最小化、最大化、关闭窗口</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; object id=hh1 classid=”clsid:ADB880A6-D8FF-11CF-9377-00AA003B7A11″&gt; &lt; param name=&quot;Command&quot;</span><br><span class="line">value=&quot;Minimize&quot;&gt;&lt; /object&gt; &lt; object id=hh2 classid=&quot;clsid:ADB880A6-D8FF-11CF-9377-00AA003B7A11″&gt; &lt;</span><br><span class="line">param name=&quot;Command&quot; value=&quot;Maximize&quot;&gt;&lt; /object&gt; &lt; OBJECT id=hh3</span><br><span class="line">classid=&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11″&gt; &lt; PARAM NAME=&quot;Command&quot; VALUE=&quot;Close&quot;&gt;&lt;</span><br><span class="line">/OBJECT&gt; &lt; input type=button value=最小化 onclick=hh1.Click()&gt; &lt; input type=button value=最大化</span><br><span class="line">onclick=hh2.Click()&gt; &lt; input type=button value=关闭 onclick=hh3.Click()&gt;</span><br></pre></td></tr></table></figure>

<p>本例适用于 IE</p>
<h2 id="17-屏蔽功能键-Shift-Alt-Ctrl"><a href="#17-屏蔽功能键-Shift-Alt-Ctrl" class="headerlink" title="17. 屏蔽功能键 Shift,Alt,Ctrl"></a>17. 屏蔽功能键 Shift,Alt,Ctrl</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt; script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">look</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.shiftKey)</span><br><span class="line">alert(“禁止按 Shift 键!”); <span class="comment">//可以换成 ALT CTRL</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onkeydown=look;</span><br><span class="line">&lt; /script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="18-网页不会被缓存"><a href="#18-网页不会被缓存" class="headerlink" title="18. 网页不会被缓存"></a>18. 网页不会被缓存</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; META HTTP-EQUIV=”pragma” CONTENT=”no-cache”&gt; &lt; META HTTP-EQUIV=”Cache-Control” CONTENT=”no-cache,</span><br><span class="line">must-revalidate”&gt; &lt; META HTTP-EQUIV=”expires” CONTENT=”Wed, 26 Feb 1997 08:21:57 GMT”&gt; 或者&lt; META</span><br><span class="line">HTTP-EQUIV=”expires” CONTENT=”0″&gt;</span><br></pre></td></tr></table></figure>

<h2 id="19-怎样让表单没有凹凸感"><a href="#19-怎样让表单没有凹凸感" class="headerlink" title="19. 怎样让表单没有凹凸感"></a>19. 怎样让表单没有凹凸感</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; input type=text style=”border:1 solid #000000″&gt; 或 &lt; input type=text style=”border-left:none;</span><br><span class="line">border-right:none; border-top:none; border-bottom: 1 solid #000000″&gt;&lt; /textarea&gt;</span><br></pre></td></tr></table></figure>

<h2 id="20-lt-div-gt-lt-span-gt-amp-lt-layer-gt-的区别"><a href="#20-lt-div-gt-lt-span-gt-amp-lt-layer-gt-的区别" class="headerlink" title="20. &lt; div&gt;&lt; span&gt;&amp;&lt; layer&gt;的区别?"></a>20. &lt; div&gt;&lt; span&gt;&amp;&lt; layer&gt;的区别?</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; div&gt;(division)用来定义大段的页面元素，会产生转行 &lt; span&gt;用来定义同一行内的元素，跟&lt;</span><br><span class="line">div&gt;的唯一区别是不产生转行 &lt; layer&gt;是 ns 的标记，ie 不支持，相当于&lt; div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="21-让弹出窗口总是在最上面"><a href="#21-让弹出窗口总是在最上面" class="headerlink" title="21. 让弹出窗口总是在最上面"></a>21. 让弹出窗口总是在最上面</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; body onblur=”this.focus();”&gt;</span><br></pre></td></tr></table></figure>

<h2 id="22-不要滚动条"><a href="#22-不要滚动条" class="headerlink" title="22. 不要滚动条"></a>22. 不要滚动条</h2><p>让竖条没有:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; body style=”overflow:scroll;overflow-y:hidden”&gt;&lt; /body&gt;</span><br></pre></td></tr></table></figure>

<p>让横条没有:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; body style=”overflow:scroll;overflow-x:hidden”&gt;&lt; /body&gt;</span><br></pre></td></tr></table></figure>

<p>两个都去掉？更简单了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; body scroll=”no”&gt;&lt; /body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="23-怎样去掉图片链接点击后，图片周围的虚线？"><a href="#23-怎样去掉图片链接点击后，图片周围的虚线？" class="headerlink" title="23. 怎样去掉图片链接点击后，图片周围的虚线？"></a>23. 怎样去掉图片链接点击后，图片周围的虚线？</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; a href=”#” onFocus=”this.blur()”&gt;&lt; img src=”logo.jpg” border=0&gt;&lt; /a&gt;</span><br></pre></td></tr></table></figure>

<h2 id="24-电子邮件处理提交表单"><a href="#24-电子邮件处理提交表单" class="headerlink" title="24. 电子邮件处理提交表单"></a>24. 电子邮件处理提交表单</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; form name=”form1″ method=&quot;post&quot; action=”mailto:sunjianfeng@csxiaoyao.com” enctype=”text/plain”&gt; &lt;</span><br><span class="line">input type=submit&gt; &lt; /form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="25-在打开的子窗口刷新父窗口的代码里如何写？"><a href="#25-在打开的子窗口刷新父窗口的代码里如何写？" class="headerlink" title="25. 在打开的子窗口刷新父窗口的代码里如何写？"></a>25. 在打开的子窗口刷新父窗口的代码里如何写？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.opener.location.reload()</span><br></pre></td></tr></table></figure>

<h2 id="26-如何设定打开页面的大小"><a href="#26-如何设定打开页面的大小" class="headerlink" title="26. 如何设定打开页面的大小"></a>26. 如何设定打开页面的大小</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; body onload=”top.resizeTo(300,200);”&gt;</span><br></pre></td></tr></table></figure>

<p>打开页面的位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; body onload=”top.moveBy(300,200);”&gt;</span><br></pre></td></tr></table></figure>

<h2 id="27-在页面中如何加入不是满铺的背景图片-拉动页面时背景图不动"><a href="#27-在页面中如何加入不是满铺的背景图片-拉动页面时背景图不动" class="headerlink" title="27. 在页面中如何加入不是满铺的背景图片,拉动页面时背景图不动"></a>27. 在页面中如何加入不是满铺的背景图片,拉动页面时背景图不动</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; STYLE&gt; body &#123;background-image:none; background-repeat:no-repeat;</span><br><span class="line">background-position:center;background-attachment: fixed&#125; &lt; /STYLE&gt;</span><br></pre></td></tr></table></figure>

<h2 id="28-检查一段字符串是否全由数字组成"><a href="#28-检查一段字符串是否全由数字组成" class="headerlink" title="28. 检查一段字符串是否全由数字组成"></a>28. 检查一段字符串是否全由数字组成</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; script language=”Javascript”&gt;&lt; !– function checkNum(str)&#123;return str.match(//D/)==null&#125;</span><br><span class="line">alert(checkNum(“1232142141”)) alert(checkNum(“123214214a1”)) // –&gt;&lt; /script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="29-获得一个窗口的大小"><a href="#29-获得一个窗口的大小" class="headerlink" title="29. 获得一个窗口的大小"></a>29. 获得一个窗口的大小</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.clientWidth</span><br><span class="line"><span class="built_in">document</span>.body.clientHeight</span><br></pre></td></tr></table></figure>

<h2 id="30-怎么判断是否是字符"><a href="#30-怎么判断是否是字符" class="headerlink" title="30. 怎么判断是否是字符"></a>30. 怎么判断是否是字符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="regexp">/[^/x00-/xff]/g</span>.test(s)) alert(“含有汉字”);</span><br><span class="line"><span class="keyword">else</span> alert(“全是字符”);</span><br></pre></td></tr></table></figure>

<h2 id="31-TEXTAREA-自适应文字行数的多少"><a href="#31-TEXTAREA-自适应文字行数的多少" class="headerlink" title="31.TEXTAREA 自适应文字行数的多少"></a>31.TEXTAREA 自适应文字行数的多少</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; textarea rows=1 name=s1 cols=27 onpropertychange=”this.style.posHeight=this.scrollHeight”&gt; &lt;</span><br><span class="line">/textarea&gt;</span><br></pre></td></tr></table></figure>

<h2 id="32-日期减去天数等于第二个日期"><a href="#32-日期减去天数等于第二个日期" class="headerlink" title="32. 日期减去天数等于第二个日期"></a>32. 日期减去天数等于第二个日期</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt; script language=Javascript&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cc</span>(<span class="params">dd,dadd</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//可以加上错误处理</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>(dd)</span><br><span class="line">a = a.valueOf()</span><br><span class="line">a = a – dadd * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="built_in">Date</span>(a)</span><br><span class="line">alert(a.getFullYear() + “年” + (a.getMonth() + <span class="number">1</span>) + “月” + a.getDate() + “日”)</span><br><span class="line">&#125;</span><br><span class="line">cc(“<span class="number">12</span>/<span class="number">23</span>/<span class="number">2002</span>”,<span class="number">2</span>)</span><br><span class="line">&lt; /script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="33-选择了哪一个-Radio"><a href="#33-选择了哪一个-Radio" class="headerlink" title="33. 选择了哪一个 Radio"></a>33. 选择了哪一个 Radio</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; HTML&gt;&lt; script language=”vbscript”&gt; function checkme() for each ob in radio1 if ob.checked then</span><br><span class="line">window.alert ob.value next end function &lt; /script&gt;&lt; BODY&gt; &lt; INPUT name=”radio1″ type=”radio”</span><br><span class="line">value=”style” checked&gt;Style &lt; INPUT name=”radio1″ type=”radio” value=”barcode”&gt;Barcode &lt; INPUT</span><br><span class="line">type=”button” value=”check” onclick=”checkme()”&gt; &lt; /BODY&gt;&lt; /HTML&gt;</span><br></pre></td></tr></table></figure>

<h2 id="34-脚本永不出错"><a href="#34-脚本永不出错" class="headerlink" title="34. 脚本永不出错"></a>34. 脚本永不出错</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; SCRIPT LANGUAGE=”JavaScript”&gt; &lt; !– Hide function killErrors() &#123; return true; &#125; window.onerror =</span><br><span class="line">killErrors; // –&gt; &lt; /SCRIPT&gt;</span><br></pre></td></tr></table></figure>

<h2 id="35-ENTER-键可以让光标移到下一个输入框"><a href="#35-ENTER-键可以让光标移到下一个输入框" class="headerlink" title="35. ENTER 键可以让光标移到下一个输入框"></a>35. ENTER 键可以让光标移到下一个输入框</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; input onkeydown=”if(event.keyCode==13)event.keyCode=9″&gt;</span><br></pre></td></tr></table></figure>

<h2 id="36-检测某个网站的链接速度"><a href="#36-检测某个网站的链接速度" class="headerlink" title="36. 检测某个网站的链接速度"></a>36. 检测某个网站的链接速度</h2><p>把如下代码加入&lt; body&gt;区域中:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; script language=Javascript&gt; tim=1 setInterval(“tim++”,100) b=1 var autourl=new Array()</span><br><span class="line">autourl[1]=”www.csxiaoyao.com” autourl[2]=”www.baidu.com” autourl[3]=”www.sina.com.cn”</span><br><span class="line">autourl[4]=”blog.csxiaoyao.com” autourl[5]=”www.cctv.com” function butt()&#123; document.write(“&lt; form</span><br><span class="line">name=autof&gt;”) for(var i=1;i&lt; autourl.length;i++) document.write(“&lt; input type=text name=txt”+i+”</span><br><span class="line">size=10 value=测试中……&gt; =》&lt; input type=text name=url”+i+” size=40&gt; =》&lt; input type=button value=GO</span><br><span class="line">onclick=window.open(this.form.url”+i+”.value)&gt; “) document.write(“&lt; input type=submit value=刷新&gt;&lt;</span><br><span class="line">/form&gt;”) &#125; butt() function auto(url)&#123; document.forms[0][“url”+b].value=url if(tim&gt;200)</span><br><span class="line">&#123;document.forms[0][“txt”+b].value=”链接超时”&#125; else</span><br><span class="line">&#123;document.forms[0][“txt”+b].value=”时间”+tim/10+”秒”&#125; b++ &#125; function run()&#123;for(var i=1;i&lt;</span><br><span class="line">autourl.length;i++)document.write(“&lt; img src=http://”+autourl+”/”+Math.random()+” width=1 height=1</span><br><span class="line">onerror=auto(“http://”+autourl+””)&gt;”)&#125; run()&lt; /script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="37-各种样式的光标"><a href="#37-各种样式的光标" class="headerlink" title="37. 各种样式的光标"></a>37. 各种样式的光标</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">auto ：标准光标</span><br><span class="line"><span class="keyword">default</span> ：标准箭头</span><br><span class="line">hand ：手形光标</span><br><span class="line">wait ：等待光标</span><br><span class="line">text ：I 形光标</span><br><span class="line">vertical-text ：水平 I 形光标</span><br><span class="line">no-drop ：不可拖动光标</span><br><span class="line">not-allowed ：无效光标</span><br><span class="line">help ：?帮助光标</span><br><span class="line">all-scroll ：三角方向标</span><br><span class="line">move ：移动标</span><br><span class="line">crosshair ：十字标</span><br><span class="line">e-resize</span><br><span class="line">n-resize</span><br><span class="line">nw-resize</span><br><span class="line">w-resize</span><br><span class="line">s-resize</span><br><span class="line">se-resize</span><br><span class="line">sw-resize</span><br></pre></td></tr></table></figure>

<h2 id="38-页面进入和退出的特效"><a href="#38-页面进入和退出的特效" class="headerlink" title="38. 页面进入和退出的特效"></a>38. 页面进入和退出的特效</h2><p>进入页面&lt; meta http-equiv=”Page-Enter” content=”revealTrans(duration=x, transition=y)”&gt;<br>推出页面&lt; meta http-equiv=”Page-Exit” content=”revealTrans(duration=x, transition=y)”&gt;<br>这个是页面被载入和调出时的一些特效。duration 表示特效的持续时间，以秒为单位。<br>transition 表示使用哪种特效，取值为<br>1-23:<br>0 矩形缩小<br>1 矩形扩大<br>2 圆形缩小<br>3 圆形扩大<br>4 下到上刷新<br>5 上到下刷新<br>6 左到右刷新<br>7 右到左刷新<br>8 竖百叶窗<br>9 横百叶窗<br>10 错位横百叶窗<br>11 错位竖百叶窗<br>12 点扩散<br>13 左右到中间刷新<br>14 中间到左右刷新<br>15 中间到上下<br>16 上下到中间<br>17 右下到左上<br>18 右上到左下<br>19 左上到右下<br>20 左下到右上<br>21 横条<br>22 竖条<br>23 以上 22 种随机选择一种</p>
<h2 id="39-在规定时间内跳转"><a href="#39-在规定时间内跳转" class="headerlink" title="39. 在规定时间内跳转"></a>39. 在规定时间内跳转</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; META http-equiv=V=”REFRESH” content=”5;URL=http://www.csxiaoyao.com”&gt;</span><br></pre></td></tr></table></figure>

<h2 id="40-网页是否被检索"><a href="#40-网页是否被检索" class="headerlink" title="40. 网页是否被检索"></a>40. 网页是否被检索</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt; meta name=”ROBOTS” content=”属性值”&gt;</span><br></pre></td></tr></table></figure>

<p>其中属性值有以下一些:<br>属性值为”all”: 文件将被检索，且页上链接可被查询；<br>属性值为”none”: 文件不被检索，而且不查询页上的链接；<br>属性值为”index”: 文件将被检索；<br>属性值为”follow”: 查询页上的链接；<br>属性值为”noindex”: 文件不检索，但可被查询链接；<br>属性值为”nofollow”: 文件不被检索，但可查询页上的链接。</p>
<h2 id="41-回车"><a href="#41-回车" class="headerlink" title="41. 回车"></a>41. 回车</h2><p>用客户端脚本在页面添加 document 的 onkeydown 事件,让页面在接受到回车事件后,进行 Tab<br>键的功能,即只要把 event 的 keyCode 由 13 变为 9<br>这样的处理方式,可以实现焦点往下移动,但对于按钮也起同样的作用,一般的客户在输入完<br>资料以后,跳到按钮后,最好能直接按”回车”进行数据的提交.因此,对上面的方法要进行一下<br>修改,应该对于”提交”按钮不进行焦点转移.而直接激活提交.<br>判断是否为 button, 是因为在 HTML 上会有 type=”button”<br>判断是否为 submit,是因为 HTML 上会有 type=”submit”<br>判断是否为 reset,是因为 HTML 上的”重置”应该要被执行<br>判断是否为空,是因为对于 HTML 上的”链接”也应该被执行，这种情况发生的情况不多，可以使用”tabindex=-1″的方式来取消链接获得焦点</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>159-react-hooks 实现hash参数获取</title>
    <url>/20220211/160-react-hooks-%E5%AE%9E%E7%8E%B0hash%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useCallback, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useHashQuery: <span class="function">() =&gt;</span> <span class="built_in">any</span>[] = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [hash, setHash] = useState(<span class="function">() =&gt;</span> <span class="built_in">window</span>.location.hash)</span><br><span class="line">  <span class="keyword">const</span> handleHashChange = useCallback(<span class="function">() =&gt;</span> setHash(<span class="built_in">window</span>.location.hash), [])</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, handleHashChange)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;hashchange&#x27;</span>, handleHashChange)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hashUpate = useCallback(</span><br><span class="line">    <span class="function">(<span class="params">newHash</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newHash !== hash) <span class="built_in">window</span>.location.hash = newHash</span><br><span class="line">    &#125;,</span><br><span class="line">    [hash]</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> [hash, hashUpate]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Test15 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [hash, setHash] = useHashQuery()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;&#x27; &#x27;&#125;</span></span><br><span class="line"><span class="xml">      test 15</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>window.location.href : &#123;window.location.href&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>hash<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;hash&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setHash(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test15</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>162-react-hooks 实现监听鼠标hover</title>
    <url>/20220211/162-react-hooks-%E5%AE%9E%E7%8E%B0%E7%9B%91%E5%90%AC%E9%BC%A0%E6%A0%87hover/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>注意：下面<code>handleMouseOver</code>和<code>handleMoseOut</code> 函数之所以用到 useCallback，为了优化，因为不需要每次都创建，函数内部并不会变动</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useCallback, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useHover: <span class="function">() =&gt;</span> <span class="built_in">any</span>[] = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nodeRef = useRef&lt;HTMLElement&gt;()</span><br><span class="line">  <span class="keyword">const</span> [isHovering, setIsHovering] = useState(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> handleMouseOver = useCallback(<span class="function">() =&gt;</span> setIsHovering(<span class="literal">true</span>), [])</span><br><span class="line">  <span class="keyword">const</span> handleMoseOut = useCallback(<span class="function">() =&gt;</span> setIsHovering(<span class="literal">false</span>), [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> callbackRef = useCallback(</span><br><span class="line">    <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (nodeRef.current) &#123;</span><br><span class="line">        nodeRef.current.removeEventListener(<span class="string">&#x27;mouseover&#x27;</span>, handleMouseOver)</span><br><span class="line">        nodeRef.current.removeEventListener(<span class="string">&#x27;mouseout&#x27;</span>, handleMoseOut)</span><br><span class="line">      &#125;</span><br><span class="line">      nodeRef.current = node</span><br><span class="line">      <span class="keyword">if</span> (nodeRef.current) &#123;</span><br><span class="line">        nodeRef.current.addEventListener(<span class="string">&#x27;mouseover&#x27;</span>, handleMouseOver)</span><br><span class="line">        nodeRef.current.addEventListener(<span class="string">&#x27;mouseout&#x27;</span>, handleMoseOut)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    [handleMouseOver, handleMoseOut]</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [callbackRef, isHovering]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Test17 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [hoverRef, isHovering] = useHover()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;hoverRef&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> <span class="attr">200</span>, <span class="attr">height:</span> <span class="attr">200</span>, <span class="attr">backgroundColor:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      test17</span></span><br><span class="line"><span class="xml">      &#123;isHovering ? &#x27;hover&#x27; : &#x27;nohover&#x27;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test17</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>161-react-hooks 实现窗口resize</title>
    <url>/20220211/161-react-hooks-%E5%AE%9E%E7%8E%B0%E7%AA%97%E5%8F%A3resize/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useWindowSize = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [windowSize, setWindowSize] = React.useState&lt;&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="built_in">number</span> | <span class="literal">undefined</span></span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span> | <span class="literal">undefined</span></span><br><span class="line">  &#125;&gt;(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handleResize = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setWindowSize(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="built_in">window</span>.innerWidth,</span><br><span class="line">        <span class="attr">height</span>: <span class="built_in">window</span>.innerHeight,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, handleResize)</span><br><span class="line">    handleResize()</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;resize&#x27;</span>, handleResize)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> windowSize</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test16 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> size = useWindowSize()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      test16</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;JSON.stringify(size)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test16</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>161-react-用发布订阅实现迷你版vuex</title>
    <url>/20220216/163-react-%E7%94%A8%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%AE%9E%E7%8E%B0%E8%BF%B7%E4%BD%A0%E7%89%88vuex/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>注意：要注意设计模式中的单例模式，避免创建多个实例。用了发布订阅实现数据共享</p>
</blockquote>
<h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WyStore</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> instance: <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">private</span> list: <span class="built_in">Map</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>[]&gt;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">getInstance</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.instance) &#123;</span><br><span class="line">      <span class="built_in">this</span>.instance = <span class="keyword">new</span> WyStore()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.instance</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">dispatch</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span>, payload: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cbArr = <span class="built_in">this</span>.list.get(<span class="keyword">type</span>) ?? <span class="literal">null</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;list&#x27;</span>, <span class="built_in">this</span>.list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!cbArr) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;key type 不存在&#x27;</span>)</span><br><span class="line">    cbArr.forEach(<span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">      cb(payload)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">subscribe</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span>, cb: (args: <span class="built_in">any</span>) =&gt; <span class="built_in">void</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list.has(<span class="keyword">type</span>) ?? <span class="built_in">this</span>.list.set(<span class="keyword">type</span>, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> cbArr = <span class="built_in">this</span>.list.get(<span class="keyword">type</span>) ?? []</span><br><span class="line">    <span class="built_in">this</span>.list.set(<span class="keyword">type</span>, [...cbArr, cb])</span><br><span class="line">    <span class="comment">// console.log(&quot;subscribe&quot;, this.list);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> WyStore.getInstance()</span><br></pre></td></tr></table></figure>

<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../store/wyStore&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Age = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    store.subscribe(<span class="string">&#x27;age&#x27;</span>, <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;age sub&#x27;</span>, val)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>age<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Demo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    store.subscribe(<span class="string">&#x27;userinfo&#x27;</span>, <span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;info&#x27;</span>, info)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      demo</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Age</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Test20 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    store.dispatch(<span class="string">&#x27;userinfo&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="built_in">Math</span>.random() * <span class="number">1000</span> - <span class="number">100</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    store.dispatch(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      test20</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Demo</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test20</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>发布订阅</tag>
      </tags>
  </entry>
  <entry>
    <title>164-js调试技巧</title>
    <url>/20220219/164-js%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>作为前端开发，我们会经常使用 console.log() 来调试程序中的问题。虽然这种方式也能解决一部分问题，但是它的效率不如能执行逐步调试的工具。本文就来学习一下如何使用 Google Chrome developer tools 轻松调试 JavaScript 代码。</p>
<p>多数浏览器都提供了 DevTools 供我们调试 JavaScript 应用程序，并且它们的使用方式类似，只要我们学会了如何在一个浏览器上使用调试工具，就很容易在其他浏览器上使用它。</p>
<p>以下就以 Greet Me 程序为例，这个程序非常简单，只需输入名字和愿望，最后会输出一句话：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc501471792c4104a614da7096ce6e6f~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>当输入两个表单值之后，“愿望”部分没有正确打印，而是打印出了 NaN。代码在线调试：<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ3JlZXQtbWUtZGVidWdnaW5nLnZlcmNlbC5hcHAv">greet-me-debugging.vercel.app/<i class="fa fa-external-link-alt"></i></span>。接下来，就看看 Chrome DevTools 有什么功能可以调试定位代码的问题。</p>
<h2 id="一、了解-Sources-面板"><a href="#一、了解-Sources-面板" class="headerlink" title="一、了解 Sources 面板"></a>一、了解 Sources 面板</h2><p>DevTools 提供了许多不同的工具供我们进行调试，包括 DOM 检查、分析和网络调用检查等。这里要说的是 Sources 面板，它可以帮助我们调试 JavaScript。可以使用快捷键 F12 打开控制面板，并单击 Sources 选项卡以导航到 Sources 面板，也可以直接使用快捷键 Command+Option+I（Mac）或 Control+Shift+I（Windows、Linux）来打开。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94438b29ad0b4d0f8fe722c48e4e020e~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>Sources 面板主要由三个部分组成：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45f9698c17d04713a2dc8798ceb86e23~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<ol>
<li>文件导航区：页面请求的所有文件都会在此列出；</li>
<li>代码编辑区：当我们从文件导航栏中选取一个文件时，该文件的内容就会在此列出，我们可以在这里编辑代码；</li>
<li>Debugger 区：这里会有很多工具可以用来设置断点，检查变量值、观察执行步骤等。</li>
</ol>
<p>如果 DevTools 窗口较宽或未在单独的窗口中打开，则调试器部分将显示在代码编辑器的右侧：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85f399a1ea944dfe8bc8b086dd3f76ab~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h2 id="二、设置断点"><a href="#二、设置断点" class="headerlink" title="二、设置断点"></a>二、设置断点</h2><p>要开始调试代码，首先要做的就是设置断点，断点就是代码执行暂停以便调试它的逻辑点。</p>
<p>DevTools 允许我们以不同的方式来设置断点：</p>
<ul>
<li>在代码行；</li>
<li>在条件语句中；</li>
<li>在 DOM 节点处；</li>
<li>在事件侦听器上。</li>
</ul>
<h3 id="1-在代码行设置断点"><a href="#1-在代码行设置断点" class="headerlink" title="1. 在代码行设置断点"></a>1. 在代码行设置断点</h3><p>设置代码行断点的步骤：</p>
<ul>
<li>单击切换到 Sources 选项卡；</li>
<li>从文件导航部分选中需要调试的源文件；</li>
<li>在右侧代码编辑器区域找到需要调试的代码行；</li>
<li>单击行号以在行上设置断点。</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/449381638c1f45a08af96f30f97d0a77~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>这里就在代码的第 6 行设置了一个断点，代码在执行到这里时就会暂停。</p>
<h3 id="2-设置条件断点"><a href="#2-设置条件断点" class="headerlink" title="2. 设置条件断点"></a>2. 设置条件断点</h3><p>设置条件断点的步骤：</p>
<ul>
<li>单击切换到 Sources 选项卡；</li>
<li>从文件导航部分选中需要调试的源文件；</li>
<li>在右侧代码编辑器区域找到需要调试的代码行；</li>
<li>右键单击行号并选择”Add conditional breakpoint”来添加条件断点：</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/793ba36d44044448b2974784ec00d599~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>点击之后代码行下方就会出现一个对话框，输入断点的条件即可：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2441fe2333d4852a0ba3eca498c10f7~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>按回车键（Enter）即可激活断点，这时就会在打断点行的顶部出现一个橙色的图标：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8cfe5a586194ea9b7488b849c73482a~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>当 print()方法中的 name 变量值为 Joe 时，代码的执行就会暂停。需要注意，只有我们确定调试的代码的大致范围时，才会使用条件断点。</p>
<h3 id="3-在事件监听器上设置断点"><a href="#3-在事件监听器上设置断点" class="headerlink" title="3. 在事件监听器上设置断点"></a>3. 在事件监听器上设置断点</h3><p>在事件监听器上设置断点的步骤：</p>
<ul>
<li>单击切换到 Sources 选项卡；</li>
<li>在 debugger 区域展开 Event Listener Breakpoints 选项；</li>
<li>从事件列表中选择事件监听器来设置断点。我们的程序中有一个按钮单击事件，这里就选择 Mouse 事件选项中的 click。</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5923059b66a410cb7a3840482f253fe~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>提示：当我们想暂停在事件触发后运行的事件侦听器代码时可以使用此选项。</p>
<h3 id="4-在-DOM-节点中设置断点"><a href="#4-在-DOM-节点中设置断点" class="headerlink" title="4. 在 DOM 节点中设置断点"></a>4. 在 DOM 节点中设置断点</h3><p>DevTools 在 DOM 检查和调试方面同样很强大。当在 DOM 中添加、删除或者修改某些内容时，可以设置断点来暂停代码的执行。</p>
<p>在 DOM 上设置断点的步骤：</p>
<ul>
<li>单击切换到 Elements 选项卡；</li>
<li>找到要设置断点的元素；</li>
<li>右键单击元素以获得上下文菜单，选择 Break on 选项，然后选择 Subtree modifications、Attribute modifications、Node removal 中的一个即可：</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50c0961bc2114e788cd6cd6ff48a8c71~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>这三个选项的含义如下：</p>
<ul>
<li>Subtree modifications：当节点内部子节点变化时断点；</li>
<li>Attribute modifications：当节点属性发生变化时断点；</li>
<li>Node removal：当节点被移除时断点。</li>
</ul>
<p>如上图，我们在输出消息的 div 的 DOM 发生变化时设置了一个断点。当点击按钮后，问候消息输出到 div 中，子节点的内容发生了变化，就会发生中断。</p>
<p><strong>注意：</strong> 当我们怀疑是 DOM 更改导致了错误时，就可以使用该选项，当 DOM 更改中断时，相关的 JavaScript 代码执行将自动暂停。</p>
<h2 id="三、逐步调试"><a href="#三、逐步调试" class="headerlink" title="三、逐步调试"></a>三、逐步调试</h2><p>现在我们知道了设置断点的方式。在复杂的调试情况下，我们可能需要使用这些调试的组合。调试器提供了五个控件来逐步执行代码：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d21e0ceca9504f948aaa714624fd7695~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>下面就分别来看看这些控制都是如何使用的。</p>
<h3 id="1-下一步（快捷键：F9）"><a href="#1-下一步（快捷键：F9）" class="headerlink" title="1. 下一步（快捷键：F9）"></a>1. 下一步（快捷键：F9）</h3><p>此选项使我们能够在 JavaScript 代码执行时逐行执行，如果中途有函数调用，单步执行也会进入函数内部，逐行执行，然后退出。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64d0725af2784021b634b5bd70def555~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="2-跳过（快捷键：F10）"><a href="#2-跳过（快捷键：F10）" class="headerlink" title="2. 跳过（快捷键：F10）"></a>2. 跳过（快捷键：F10）</h3><p>此选项允许我们在执行代码时跳过一些代码。有时我们可能已经确定某些功能是正常的，不想花时间去检查它们，就可以使用跳过选项。</p>
<p>下面就是单步执行 logger()函数时，会跳过函数的执行：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6539932694a41a2993a26120c37b696~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="3-进入（快捷键：F11）"><a href="#3-进入（快捷键：F11）" class="headerlink" title="3. 进入（快捷键：F11）"></a>3. 进入（快捷键：F11）</h3><p>使用该选项可以更深入的了解函数。单步执行函数时，当感觉某个函数的行为异常并想检查它时，就可以使用这个选项来进入函数内部并进行调试。</p>
<p>下面就是单步执行 logger() 函数:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdf3140630cb4f87b8d3fee9c91a6831~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="4-跳出（快捷键：Shift-F11）"><a href="#4-跳出（快捷键：Shift-F11）" class="headerlink" title="4. 跳出（快捷键：Shift+F11）"></a>4. 跳出（快捷键：Shift+F11）</h3><p>在单步执行一个函数时，我们可能不想再继续执行并退出它，就可以使用这些选项退出函数。</p>
<p>下面就是进入了 logger() 函数内部，然后立即退出：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dcce710d5274bd3b2be62c08bdfccc4~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="5-跳转（快捷键：F8）"><a href="#5-跳转（快捷键：F8）" class="headerlink" title="5. 跳转（快捷键：F8）"></a>5. 跳转（快捷键：F8）</h3><p>有时，我们希望从一个断点跳转到另一个断点，而无需在它们之间进行任何调试，就可以使用这个选项来跳转到下一个断点：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce9ad334c308495d87f91d54ebc55068~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h2 id="四、检查范围、调用堆栈和值"><a href="#四、检查范围、调用堆栈和值" class="headerlink" title="四、检查范围、调用堆栈和值"></a>四、检查范围、调用堆栈和值</h2><p>当进行逐行调试时，检查变量的范围和值以及函数调用的调用堆栈。在 Debugger 区可以这三个选项：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22f3c64f9b63409da14e28e494da3b2e~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="1-范围（Scope）"><a href="#1-范围（Scope）" class="headerlink" title="1. 范围（Scope）"></a>1. 范围（Scope）</h3><p>可以在 Scope 选项中查看局部范围和全局范围内的内容以及变量，还可以看到 this 的实时指向：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c308f47977d471b8a194264f390d743~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="2-调用堆栈"><a href="#2-调用堆栈" class="headerlink" title="2. 调用堆栈"></a>2. 调用堆栈</h3><p>调用堆栈面板有助于识别函数执行堆栈：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/296b86331e5040a38c9a79fa0264cc22~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="3-值"><a href="#3-值" class="headerlink" title="3. 值"></a>3. 值</h3><p>检查代码中的值是识别代码中错误的主要方法。在单步执行时，我们只需要将鼠标悬停在变量上即可检查值。</p>
<p>下面可以看到变量 name 在代码执行时的检查值：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bcc43e85244470d914e83772a199ba2~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>此外，我们可以选择打码的一部分作为表达式来检查值。在下面的例子中，选择了表达式 document.getElementById(‘m_wish’) 来检查值：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7df294790394c608bf55d4e04816196~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="4-Watch"><a href="#4-Watch" class="headerlink" title="4. Watch"></a>4. Watch</h3><p>Watch 部分允许添加一个或多个表达式，并在执行时监视它们的值。当我们想在代码逻辑之外进行一些计算时，这个功能非常有用。我们可以组合来自代码区域的任何变量，以形成有效的 JavaScript 表达式。在逐步执行时，就能看到表达式的值。</p>
<p>以下是添加 Watch 的步骤：</p>
<ol>
<li>单击 Watch 上的 + 按钮：</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3dd9f0b045b4284981016e6a0b1d01c~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<ol>
<li>添加要监控的表达式。在这个例子中，添加了一个希望观察其值的变量：</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eab730cd10614364ab090b1966eafac4~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>另一种观察表达式值的方法是从控制台的 console 中添加：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12d7157e307e4ed9bbca50ad581328df~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h2 id="五、禁用和删除断点"><a href="#五、禁用和删除断点" class="headerlink" title="五、禁用和删除断点"></a>五、禁用和删除断点</h2><p>可以点击以下按钮来禁用所有的断点：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0bf43396c0514f0ab5a8181e03a62f5c~tplv-k3u1fbpfcp-watermark.awebp" alt="img"> 注意，上述方法不会删除断点，只会在暂时停用它们。要再次激活这些断点，只需再点一次这个断点即可。</p>
<p>通过取消选中的复选框，可以从“Breakpoints”面板中删除一个或多个断点。通过右键单击并选择“删除所有断点”选项，可以删除所有断点：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da6c6d40013c4cca8c54f134fcd8de20~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h2 id="六、使用-VS-Code-调试-JavaScript"><a href="#六、使用-VS-Code-调试-JavaScript" class="headerlink" title="六、使用 VS Code 调试 JavaScript"></a>六、使用 VS Code 调试 JavaScript</h2><p>Visual Studio code 中一些实用的插件可以用于 JavaScript 代码的调试。可以安装一个名为“Debugger for Chrome”的插件来调试代码：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c68fee4fd17f4110a1513811092d63ff~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>安装之后，单击左侧的 run 选项并创建配置以运行/调试 JavaScript 应用程序。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57e1661aade641f3a415812be2536c7b~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>这样就会创建一个名为 launch.json 的文件，其中包含一些设置信息：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">          <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Debug the Greet Me app&quot;</span>,</span><br><span class="line">          <span class="string">&quot;url&quot;</span>: <span class="string">&quot;&lt;http://localhost:5500&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;webRoot&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以修改以下参数：</p>
<ul>
<li>name : 任意名称；</li>
<li>url：本地运行的 URL；</li>
<li>webRoot：默认值为 ${workspaceFolder}，即当前文件夹。可能将其更改为 项目入口文件即可。</li>
</ul>
<p>最后一步是通过单击左上角的播放图标开始调试：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35e3d9594e3549108ccde6c976c7b73b~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>这个调试器类似于 DevTools，主要有以下部分：</p>
<ol>
<li>启用调试。按播放按钮启用调试选项。</li>
<li>用于单步执行断点以及暂停或停止调试的控件。</li>
<li>在源代码上设置断点。</li>
<li>范围面板查看变量范围和值。</li>
<li>用于创建和监视表达式的监视面板。</li>
<li>执行函数的调用栈。</li>
<li>要启用、禁用和删除的断点列表。</li>
<li>调试控制台读取控制台日志消息。</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5107d42844743df8b8325900f2dfd42~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>最后，回到最开始的问题，这里不再一步步调试，通过上述的调试方法判定，只需要在 wish 变量前面加一个 + 即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;Hello &#x27;</span> + name + <span class="string">&#x27;, Your wish `&#x27;</span> + +wish + <span class="string">&#x27;` may come true!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>作者：CUGGZ<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDY0NDgwMDU5ODAwNjgyNTMz">https://juejin.cn/post/7064480059800682533<i class="fa fa-external-link-alt"></i></span><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>165-TS类型体操:图解一个复杂高级类型</title>
    <url>/20220219/165-TS%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D-%E5%9B%BE%E8%A7%A3%E4%B8%80%E4%B8%AA%E5%A4%8D%E6%9D%82%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21bc70066a4f48df81ee0c25d840aa0e~tplv-k3u1fbpfcp-zoom-crop-mark:1304:1304:1304:734.awebp" alt="TS 类型体操：图解一个复杂高级类型"></p>
<p>我们要实现的高级类型如下：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa977b3eb6ef46d5a8a6c3907250c5cd~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>它的类型参数是参数字符串 query string，会返回解析出的参数对象，如果有同名的参数，会把值做合并。</p>
<p>先不着急实现，我们先回顾下相关的类型体操基础：</p>
<h2 id="类型体操基础"><a href="#类型体操基础" class="headerlink" title="类型体操基础"></a>类型体操基础</h2><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><p>模式匹配是指用一个类型匹配一个模式类型来提取其中的部分类型到 infer 声明的局部变量中。</p>
<p>比如提取 a=b 中的 a 和 b：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a124805163b346bdb9ca2a5562a843dd~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>这种模式匹配的套路在数组、字符串、函数等类型中都有很多应用。</p>
<p>详细了解可以看之前的一篇文章：<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vbXAud2VpeGluLnFxLmNvbS9zP19fYml6PU16ZzNPVFl6TURrek1nPT0mbWlkPTIyNDc0ODcxMTUmaWR4PTEmc249YjkxOTZiYWM1MTJjZmYzNDc0NjhiY2MzODI3NzJiOTMmY2hrc209Y2YwMGMxYjBmODc3NDhhNjVjOTBiMDhiMWYwMDA1NGE0OTIyOGJiODQ1N2EwYzE3ZWNiMjA1YzNhNzhmZWQ2MTdhMjJmYzgwOTgyYyZzY2VuZT0xNzgmY3VyX2FsYnVtX2lkPTIxNzI3MzQwNDI0NzM5MjI1NjMlMjNyZA==">模式匹配-让你 ts 类型体操水平暴增的套路<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>映射类型用于生成索引类型，生成的过程中可以对索引或者索引值做一些修改。</p>
<p>比如指定 key 和 value 来生成一个索引类型：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd160bcde1b74c4da119011a1987bb88~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>详细了解可以看之前的一篇文章：<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vbXAud2VpeGluLnFxLmNvbS9zP19fYml6PU16ZzNPVFl6TURrek1nPT0mbWlkPTIyNDc0ODc3OTcmaWR4PTEmc249ZjkwNzgyNWYxNzBlYTBlNDZlMDVmMzRlMGExNmVlMGQmY2hrc209Y2YwMGRlMGVmODc3NTcxOGM4OTliODZjY2IxMTA5NWY1MzdmYjBiZjgwY2IxNzNiYjM0ZjljYjg2YzYxM2U3ODdmYjhiMDQ3MDI4MCZzY2VuZT0xNzgmY3VyX2FsYnVtX2lkPTIxNzI3MzQwNDI0NzM5MjI1NjMlMjNyZA==">TS 类型体操：索引类型的映射再映射<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>TypeScript 高级类型支持递归，可以处理数量不确定的问题。</p>
<p>比如不确定长度的字符串的反转：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ReverseStr&lt;</span><br><span class="line">  Str <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">  Result <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">&gt; = Str <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer First&#125;</span><span class="subst">$&#123;infer Rest&#125;</span>`</span> ? ReverseStr&lt;Rest, <span class="string">`<span class="subst">$&#123;First&#125;</span><span class="subst">$&#123;Result&#125;</span>`</span>&gt; : Result</span><br></pre></td></tr></table></figure>

<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f94cb7c5bd6a4e1f88514fb15eef92f7~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>简单了解下模式匹配、构造、递归都是什么之后，就可以开始实现这个复杂的高级类型 ParseQueryString 了：</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>假设有这样一个 query string： <code>a=1&amp;a=2&amp;b=3&amp;c=4</code>。</p>
<p>我们要首先把它分成 4 部分：也就是 a=1、a=2、b=3、c=4。这个就是用通过上面讲的模式匹配来提取。</p>
<p>每一部分又可以进一步处理，提取出 key value 构造成索引类型，比如 a=1 就可以通过模式匹配提取出 a、1，然后构造成索引类型 {a: 1}。</p>
<p>这样就有了 4 个索引类型 {a:1}、{a:2}、{b:3}、{c:4}。</p>
<p>结下来把它合并成一个就可以了，合并的时候如果有相同的 key 的值，要放到数组里。</p>
<p>就产生了最终的索引类型：{a: [1,2], b: 3, c: 4}</p>
<p>整体流程是这样的：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bec150b65a724d2a8c1215e67123323e~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>其中第一步并不知道有多少个 a=1、b=2 这种 query param，所以要递归的做模式匹配来提取。</p>
<p>这就是这个高级类型的实现思路。</p>
<p>下面我们具体来写一下：</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>我们按照上图的顺序来实现，首先提取 query string 中的每一个 query param：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40a2acf339ca492bb45bde68a871fba9~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>query param 数量不确定，所以要用递归：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ParseQueryString&lt;Str <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = Str <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Param&#125;</span>&amp;<span class="subst">$&#123;infer Rest&#125;</span>`</span></span><br><span class="line">  ? MergeParams&lt;ParseParam&lt;Param&gt;, ParseQueryString&lt;Rest&gt;&gt;</span><br><span class="line">  : ParseParam&lt;Str&gt;</span><br></pre></td></tr></table></figure>

<p>类型参数 Str 为待处理的 query string。</p>
<p>通过模式匹配提取其中第一个 query param 到 infer 声明的局部变量 Param 中，剩余的字符串放到 Rest 中。</p>
<p>用 ParseParam 来处理 Param，剩余的递归处理，最后把它们合并到一起，也就是 MergeParams&lt;ParseParam<Param>, ParseQueryString&gt; 。</p>
<p>如果模式匹配不满足，说明还剩下最后一个 query param 了，也用 ParseParam 处理。</p>
<p>然后分别实现每一个 query param 的 parse：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea87b01930e6475f9a3f292854684937~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>这个就是用模式匹配提取 key 和 value，然后构造一个索引类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ParseParam&lt;Param <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = Param <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Key&#125;</span>=<span class="subst">$&#123;infer Value&#125;</span>`</span></span><br><span class="line">  ? &#123; [K <span class="keyword">in</span> Key]: Value &#125;</span><br><span class="line">  : &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>这里构造索引类型用的就是映射类型的语法。</p>
<p>先来测试下这个 ParseParam：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7164365107e84eb7866be9195813de5f~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>做完每一个 query param 的解析了，之后把它们合并到一起就行：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/050bc3176b1c4308b60e2ba3bf9e5db7~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>合并的部分就是 MergeParams：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MergeParams&lt;OneParam <span class="keyword">extends</span> <span class="built_in">object</span>, OtherParam <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">  [Key <span class="keyword">in</span> keyof OneParam | keyof OtherParam]: Key <span class="keyword">extends</span> keyof OneParam</span><br><span class="line">    ? Key <span class="keyword">extends</span> keyof OtherParam</span><br><span class="line">      ? MergeValues&lt;OneParam[Key], OtherParam[Key]&gt;</span><br><span class="line">      : OneParam[Key]</span><br><span class="line">    : Key <span class="keyword">extends</span> keyof OtherParam</span><br><span class="line">    ? OtherParam[Key]</span><br><span class="line">    : <span class="built_in">never</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个索引类型的合并也是要用映射类型的语法构造一个新的索引类型。</p>
<p>key 是取自两者也就是 key in keyof OneParam | keyof OtherParam。</p>
<p>value 要分两种情况：</p>
<ul>
<li>如果两个索引类型都有的 key，就要做合并，也就是 MergeValues。</li>
<li>如果只有其中一个索引类型有，那就取它的值，也就是 OtherParam[key] 或者 OneParam[Key]。</li>
</ul>
<p>合并的时候，如果两者一样就返回任意一个，如果不一样，就合并到数组里返回，也就是 [One, Other]。如果本来是数组的话，那就是数组的合并 [One, …Other]。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MergeValues&lt;One, Other&gt; = One <span class="keyword">extends</span> Other</span><br><span class="line">  ? One</span><br><span class="line">  : Other <span class="keyword">extends</span> unknown[]</span><br><span class="line">  ? [One, ...Other]</span><br><span class="line">  : [One, Other]</span><br></pre></td></tr></table></figure>

<p>测试下 MergeValues：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4d2e35a506e4d42b5990950ed1be4d8~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>这样，我们就实现了整个高级类型，整体测试下：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c52debe13d384ec1bd01d898d9d8305d~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>这个案例综合运用到了递归、模式匹配、构造的套路，还是比较复杂的。</p>
<p>可以对照着这张图来看下完整代码：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b820b6a09dbf4c80a346bb32b8bf6fad~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ParseParam&lt;Param <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = Param <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Key&#125;</span>=<span class="subst">$&#123;infer Value&#125;</span>`</span></span><br><span class="line">  ? &#123;</span><br><span class="line">      [K <span class="keyword">in</span> Key]: Value</span><br><span class="line">    &#125;</span><br><span class="line">  : &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MergeValues&lt;One, Other&gt; = One <span class="keyword">extends</span> Other</span><br><span class="line">  ? One</span><br><span class="line">  : Other <span class="keyword">extends</span> unknown[]</span><br><span class="line">  ? [One, ...Other]</span><br><span class="line">  : [One, Other]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MergeParams&lt;OneParam <span class="keyword">extends</span> <span class="built_in">object</span>, OtherParam <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">  [Key <span class="keyword">in</span> keyof OneParam | keyof OtherParam]: Key <span class="keyword">extends</span> keyof OneParam</span><br><span class="line">    ? Key <span class="keyword">extends</span> keyof OtherParam</span><br><span class="line">      ? MergeValues&lt;OneParam[Key], OtherParam[Key]&gt;</span><br><span class="line">      : OneParam[Key]</span><br><span class="line">    : Key <span class="keyword">extends</span> keyof OtherParam</span><br><span class="line">    ? OtherParam[Key]</span><br><span class="line">    : <span class="built_in">never</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ParseQueryString&lt;Str <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = Str <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer Param&#125;</span>&amp;<span class="subst">$&#123;infer Rest&#125;</span>`</span></span><br><span class="line">  ? MergeParams&lt;ParseParam&lt;Param&gt;, ParseQueryString&lt;Rest&gt;&gt;</span><br><span class="line">  : ParseParam&lt;Str&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ParseQueryStringResult = ParseQueryString&lt;<span class="string">&#x27;a=1&amp;a=2&amp;b=2&amp;c=3&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们首先复习了下 3 种类型体操的套路：</p>
<ul>
<li>模式匹配：一个类型匹配一个模式类型，提取其中的部分类型到 infer 声明的局部变量中</li>
<li>构造：通过映射类型的语法来构造新的索引类型，构造过程中可以对索引和值做一些修改</li>
<li>递归：当处理数量不确定的类型时，可以每次只处理一个，剩下的递归来做</li>
</ul>
<p>然后用这些套路来实现了一个 ParseQueryString 的复杂高级类型。</p>
<p>如果能独立实现这个高级类型，说明你对这三种类型体操的套路掌握的就挺不错的了。</p>
]]></content>
      <categories>
        <category>ts</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>166-Vite源码阅读方法</title>
    <url>/20220219/166-Vue%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>对未来最好的馈赠，就是珍惜现在的时光，努力的付出，勇敢的面对，做一切想做的事，完成一个个眼前的目标，不辜负当下。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一个 Vue 源码系列文章，建议从第一篇文章 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vZWRpdG9yL2RyYWZ0cy83MDEwMjA1MTEyMjM2NzY5Mjkz">Vue 源码系列（一）：Vue 源码解读的正确姿势<i class="fa fa-external-link-alt"></i></span> 开始阅读。</p>
<p>作为一名开发人员，阅读源码是非常好的学习方式，尤其 Vue 又是当下很受欢迎的前端框架，随着用的人越来越多，不断推动着源码地完善。在源码中有着各位大佬多年积淀下来的精华，而这些精华就非常值得我们学习。或许刚开始我们看不懂或者看着很蒙圈，但只要坚持不断的摸索，总有掌握的一天。小时候在我说读书难的时候我爸就常对我说：书读百遍其义自见。小时候感觉懂这句话又感觉不是真的懂，而现在每次学习遇到困难想退缩的时候这句话却总能激励着我，我觉得他能给我动力可能是因为看着父辈越来越老而我还一事无成吧。哎~ 扯远了！总之：对未来最好的馈赠，就是把一切献给现在。</p>
<h1 id="读源码的理由"><a href="#读源码的理由" class="headerlink" title="读源码的理由"></a>读源码的理由</h1><p>源码的阅读很多人其实是为了面试，想找一个更满意的工作。但是我们也忽略了一个重要的东西，那就是在我们不断阅读源码或者熟读某个主流框架源码的同时，其实这个过程也在潜移默化改变我们的编码能力和程序的设计能力。</p>
<p>下面我们就正式开始我们的 Vue 源码之旅吧。</p>
<h1 id="Vue-源码下载"><a href="#Vue-源码下载" class="headerlink" title="Vue 源码下载"></a>Vue 源码下载</h1><p>首先找到 Vue 项目 github 地址：<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWU=">链接<i class="fa fa-external-link-alt"></i></span></p>
<p>Vue 项目大体就长下面这个样子</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/305b1e4d6f7040e2a93c9750206b2e0f~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h1 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h1><p>把 Vue 项目克隆到本地</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/vuejs/vue.git</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>本地的目录</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf47cea756354598a982c9ffc8a3b921~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h1 id="解读目录"><a href="#解读目录" class="headerlink" title="解读目录"></a>解读目录</h1><p>首先看一下 Vue 项目的一级目录</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">└── vue</span><br><span class="line">    ├── BACKERS.md</span><br><span class="line">    ├── FILE_README.md</span><br><span class="line">    ├── LICENSE</span><br><span class="line">    ├── README.md</span><br><span class="line">    ├── benchmarks</span><br><span class="line">    ├── dist</span><br><span class="line">    ├── examples</span><br><span class="line">    ├── flow</span><br><span class="line">    ├── package.json</span><br><span class="line">    ├── packages</span><br><span class="line">    ├── scripts</span><br><span class="line">    ├── src</span><br><span class="line">    ├── test</span><br><span class="line">    ├── types</span><br><span class="line">    └── yarn.lock</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后对目录做一个解析</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8630dcaea02a49bdb24f7498b0082c1f~tplv-k3u1fbpfcp-watermark.awebp" alt="vue源码目录.png"></p>
<p>主要说一下核心的源码文件“src”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">├─ src                         <span class="comment">// 主要源码所在位置，核心内容</span></span><br><span class="line">│   ├─ compiler                <span class="comment">// 模板编译相关文件，将 template 编译为 render 函数</span></span><br><span class="line">│       ├─ codegen             <span class="comment">// 把AST(抽象语法树)转换为Render函数</span></span><br><span class="line">│       ├─ directives          <span class="comment">// 生成Render函数之前需要处理的东西</span></span><br><span class="line">│       ├─ parser              <span class="comment">// 模板编译成AST</span></span><br><span class="line">│   ├─ core                    <span class="comment">// Vue核心代码，包括了内置组件、全局API封装、Vue实例化、响应式原理、vdom(虚拟DOM)、工具函数等等。</span></span><br><span class="line">│       ├─ components          <span class="comment">// 组件相关属性，包含抽象出来的通用组件 如：Keep-Alive</span></span><br><span class="line">│       ├─ <span class="built_in">global</span>-api          <span class="comment">// Vue全局API，如Vue.use(),Vue.nextTick(),Vue.config()等，包含给Vue构造函数挂载全局方法(静态方法)或属性的代码。 链接：https://012-cn.vuejs.org/api/global-api.html</span></span><br><span class="line">│       ├─ instance            <span class="comment">// 实例化相关内容，生命周期、事件等，包含Vue构造函数设计相关的代码</span></span><br><span class="line">│       ├─ observer            <span class="comment">// 响应式核心目录，双向数据绑定相关文件。包含数据观测的核心代码</span></span><br><span class="line">│       ├─ util                <span class="comment">// 工具方法</span></span><br><span class="line">│       └─ vdom                <span class="comment">// 虚拟DOM相关的代码，包含虚拟DOM创建(creation)和打补丁(patching)的代码</span></span><br><span class="line">│   ├─ platforms               <span class="comment">// vue.js和平台构建有关的内容 不同平台的不同构建的入口文件也在这里 （Vue.js 是一个跨平台的MVVM框架）</span></span><br><span class="line">│       ├── web                <span class="comment">// web端 （渲染，编译，运行时等，包括部分服务端渲染）</span></span><br><span class="line">│       │   ├── compiler       <span class="comment">// web端编译相关代码，用来编译模版成render函数basic.js</span></span><br><span class="line">│       │   ├── entry-compiler.js               <span class="comment">// vue-template-compiler 包的入口文件</span></span><br><span class="line">│       │   ├── entry-runtime-<span class="keyword">with</span>-compiler.js  <span class="comment">// 独立构建版本的入口，它在 entry-runtime 的基础上添加了模板(template)到render函数的编译器</span></span><br><span class="line">│       │   ├── entry-runtime.js                <span class="comment">// 运行时构建的入口，不包含模板(template)到render函数的编译器，所以不支持 `template` 选项，我们使用vue默认导出的就是这个运行时的版本。</span></span><br><span class="line">│       │   ├── entry-server-basic-renderer.js  <span class="comment">// 输出 packages/vue-server-renderer/basic.js 文件</span></span><br><span class="line">│       │   ├── entry-server-renderer.js        <span class="comment">// vue-server-renderer 包的入口文件</span></span><br><span class="line">│       │   ├── runtime        <span class="comment">// web端运行时相关代码，用于创建Vue实例等</span></span><br><span class="line">│       │   ├── server         <span class="comment">// 服务端渲染（ssr）</span></span><br><span class="line">│       │   └── util           <span class="comment">// 工具类相关内容</span></span><br><span class="line">│       └─ weex                <span class="comment">// 混合运用 weex框架 (一端开发，三端运行: Android、iOS 和 Web 应用) 2016年9月3日~4日 尤雨溪正式宣布以技术顾问的身份加盟阿里巴巴Weex团队， 做Vue和Weex的整合 让Vue的语法能跨三端</span></span><br><span class="line">│   ├─ server                  <span class="comment">// 服务端渲染相关内容（ssr）</span></span><br><span class="line">│   ├─ sfc                     <span class="comment">// 转换单文件组件（*.vue）</span></span><br><span class="line">│   └─ shared                  <span class="comment">// 共享代码 全局共享的方法和常量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>熟悉了大概的一个目录信息，我们可以把 Vue 项目启动起来，为之后的源码之旅做好充足的准备</p>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i</span><br><span class="line">or</span><br><span class="line">yarn add all</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h1><p>启动项目之前先说一个配置，在 package.json 文件中，咱们需要在 scripts 配置中给 dev 加上 –sourcemap。 加上以后在运行项目（npm run dev）的时候会生成带编译器版本的 vue.js 和其对应的 .map 文件，在源码解读时就可以引用 dist 目录下的 vue.js 文件，从而通过 vue.js.map 在浏览器中调试，就能关联到对应的源码文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:web-full-dev --sourcemap&quot;</span>,</span><br><span class="line">    ......</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动成功以后并生成带编译器版本的 vue.js 和其对应的 .map 文件，如下图所示</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d082f5ab4c724394beb18519a9656034~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h1 id="查看案例"><a href="#查看案例" class="headerlink" title="查看案例"></a>查看案例</h1><p>启动以后随便在 examples 文件夹中写一个案例测试一下</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b758790e9ae4436a545ca531c5ab7d1~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h2 id="加-–sourcemap-的原因"><a href="#加-–sourcemap-的原因" class="headerlink" title="加 –sourcemap 的原因"></a>加 –sourcemap 的原因</h2><p>这里咱们在测试案例中打一个 debugger 说一下加 –sourcemap 的原因，这是咱们解读源码的重要一步。</p>
<h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 首先引入运行项目生成的 dis/vue.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 然后编写测试代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">debugger</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>: <span class="string">&#x27;测试一下&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 new Vue() 之前加上 debugger，查看运行情况</p>
<h3 id="1、不加-–sourcemap"><a href="#1、不加-–sourcemap" class="headerlink" title="1、不加 –sourcemap"></a>1、不加 –sourcemap</h3><p>没有加 –sourcemap 的情况，就不会生成 vue.js 对应的 .map 文件，也就关联不到对应的源码文件</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0c4c142c07f41f1895d322ba9504f87~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f8c2a4661704c99828e2535b6b7e3e1~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h3 id="2、加上-–sourcemap"><a href="#2、加上-–sourcemap" class="headerlink" title="2、加上 –sourcemap"></a>2、加上 –sourcemap</h3><p>加上 –sourcemap 就会生成 vue.js 对应的 .map 文件，同时也就能关联到对应的源码文件</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e08fb5ad3ad8459d8e8f363ef7ec4c8c~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51644d9e12a64a76962a17ca40189eb1~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h1 id="补充说明-dist-目录"><a href="#补充说明-dist-目录" class="headerlink" title="补充说明 - dist 目录"></a>补充说明 - dist 目录</h1><p>在 Vue 项目中，dist 目录中其实有很多文件，这些文件在 dist/README.md 或者 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUvdHJlZS9kZXYvZGlzdA==">github-dist<i class="fa fa-external-link-alt"></i></span> 中其实都已经有解释了，但说的比较简洁并且还是英文文安，这里统一解释一下吧。</p>
<h2 id="生成文件的解释"><a href="#生成文件的解释" class="headerlink" title="生成文件的解释"></a>生成文件的解释</h2><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">UMD</th>
<th align="center">CommonJS</th>
<th align="center">ES Module</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Full</strong></td>
<td align="center">vue.js</td>
<td align="center">vue.common.js</td>
<td align="center">vue.esm.js</td>
</tr>
<tr>
<td align="center"><strong>Runtime-only</strong></td>
<td align="center">vue.runtime.js</td>
<td align="center">vue.runtime.common.js</td>
<td align="center">vue.runtime.esm.js</td>
</tr>
<tr>
<td align="center"><strong>Full (production)</strong></td>
<td align="center">vue.min.js</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>Runtime-only (production)</strong></td>
<td align="center">vue.runtime.min.js</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="UMD、CommonJS、ES-Module"><a href="#UMD、CommonJS、ES-Module" class="headerlink" title="UMD、CommonJS、ES Module"></a>UMD、CommonJS、ES Module</h3><p>简单的普及一下吧，AMD、CMD、CommonJS、UMD 和 ES Module 是 js 模块化规范的几个名词。出现这些规范是因为早期的 js 语言是没有模块化体系的，开发者为了方便代码组织，就逐渐形成 AMD 和 CMD 规范，后来出现了主要在 nodejs 中使用的 CommonJS 规范，但为了代码复用，又提出了 UMD 规范来统一兼容 AMD、CMD、CommonJS。最后呢随着 js 语言的不断发展，模块化也越来越重要，所以就又增加了 ES Module。</p>
<h4 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h4><p>这里的 CommonJS 主要是用来配合老的打包工具比如 webpack 1 或者 Browserify。这些打包工具的默认文件 (pkg.main) 是只包含运行时的 CommonJS 版本 (vue.runtime.common.js)。</p>
<h4 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h4><p>从 2.6 开始 Vue 提供两个 ES Modules (ESM) 构建文件：</p>
<p>1、一个是为打包工具提供的 ESM：比如 webpack 2 或 Rollup 提供的现代打包工具。ESM 格式被设计为可以被静态分析，所以打包工具可以利用这一点来进行 “tree-shaking” 并将用不到的代码排除出最终的包。为这些打包工具提供的默认文件 (pkg.module) 是只有运行时的 ES Module 构建 (vue.runtime.esm.js)。</p>
<p>2、另一个是为浏览器提供的 ESM (2.6+)：用于在现代浏览器中通过</p>
<p>注：具体的前端工程化这边有介绍：👉 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vZWRpdG9yL2RyYWZ0cy83MDEwMzE5OTA0MDU0MTgxOTI1">前端工程化浅谈和模块化方案深耕<i class="fa fa-external-link-alt"></i></span>👈</p>
<h3 id="Full"><a href="#Full" class="headerlink" title="Full"></a>Full</h3><p>包含编译器(Compiler)和运行时(Runtime)，是一个完整的构建。可以认为是 <em>Compiler-Runtime</em></p>
<h4 id="编译器-Compiler"><a href="#编译器-Compiler" class="headerlink" title="编译器(Compiler)"></a>编译器(Compiler)</h4><p>负责将模板字符串编译成为 JavaScript 渲染函数的代码。</p>
<h4 id="运行时-Runtime"><a href="#运行时-Runtime" class="headerlink" title="运行时(Runtime)"></a>运行时(Runtime)</h4><p>负责创建 Vue 实例、渲染和修补虚拟 DOM 等的代码。</p>
<h3 id="Runtime-only"><a href="#Runtime-only" class="headerlink" title="Runtime-only"></a>Runtime-only</h3><p>和 <em>Full</em> 不同的是 <em>Runtime-only</em> 只包含运行时(Runtime)的构建。</p>
<h3 id="Full-production"><a href="#Full-production" class="headerlink" title="Full (production)"></a>Full (production)</h3><p>就是生产环境的 <em>Full</em></p>
<h3 id="Runtime-only-production"><a href="#Runtime-only-production" class="headerlink" title="Runtime-only (production)"></a>Runtime-only (production)</h3><p>就是生产环境的 <em>Runtime-only</em></p>
<h3 id="补充说明：Compiler-Runtime（Full）和-Runtime-only-的区别"><a href="#补充说明：Compiler-Runtime（Full）和-Runtime-only-的区别" class="headerlink" title="补充说明：Compiler-Runtime（Full）和 Runtime-only 的区别"></a>补充说明：Compiler-Runtime（Full）和 Runtime-only 的区别</h3><p>简单概述就是：</p>
<ul>
<li>如果你需要在客户端编译模板，就将需要加上编译器，即完整版（Compiler-Runtime）， 举个例子：比如需要传入一个字符串给 template 或者 挂载到一个元素上，并以其 DOM 内部的 HTML 作为模板</li>
<li>如果你使用的是.vue 文件开发，那么就选择 Runtime-only，只需要运行时代码</li>
</ul>
<p>如果还不明白，这么可以理解为: 一个组件渲染到页面中的过程包括这几个步骤 Template ——&gt; AST(抽象语法树) ——&gt; Render ——&gt; VDom(虚拟 Dom) ——&gt; 真实的 Dom ——&gt; 最终页面</p>
<p>1、 Compiler-Runtime 需要编译器(Compiler)把 Vue 中的模板最终渲染成真实 DOM, 也就是上面的整个流程：Template ——&gt; AST ——&gt; Render ——&gt; VDom ——&gt; 真实的 Dom ——&gt; 最终页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123; App &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;.&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>2、Runtime-only 指定 render 函数，通常借助 webpack 的 vue-loader 工具，在构建时进行了预编译（将.vue 文件编译为 js），所以只包含运行时的 Vue.js 代码。</p>
<p>这里普及一下：webpack 打包时已经将 template 编译为 render 函数。具体一点就是 template 会通过 vue-template-compiler 转换为 render 函数， 所以不需要在客户端进行编译。</p>
<p>因此只需要运行时(Runtime)就可以把 Vue 中的模板最终渲染成真实 DOM</p>
<p>具体流程： Render ——&gt; VDom ——&gt; 真实的 Dom ——&gt; 最终页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="运行时版本和完整版的对比"><a href="#运行时版本和完整版的对比" class="headerlink" title="运行时版本和完整版的对比"></a>运行时版本和完整版的对比</h3><p>最终打好的包里实际上是不需要编译器的，只用运行时版本即可，因为当使用 <em>vue-loader</em> 或 <em>vueify</em> 的时候，*<em>.vue</em> 文件内部的模板会在构建时预编译成 JavaScript。</p>
<p>还有运行时版本相比完整版体积要小 30% 左右，所以尽可能使用这个版本就可以。但如果仍然想使用完整版，则需要在打包工具里做一下配置，具体配置如下：</p>
<h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="attr">vue$</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span>, <span class="comment">// 用 webpack 1 时需用 &#x27;vue/dist/vue.common.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> alias = <span class="built_in">require</span>(<span class="string">&#x27;rollup-plugin-alias&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rollup(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    alias(&#123;</span><br><span class="line">      <span class="attr">vue</span>: <span class="built_in">require</span>.resolve(<span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Browserify"><a href="#Browserify" class="headerlink" title="Browserify"></a>Browserify</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 在项目的 `package.json`中添加：</span></span><br><span class="line">  <span class="string">&quot;browser&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;vue&quot;</span>: <span class="string">&quot;vue/dist/vue.common.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a>Parcel</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 在项目的 `package.json`中添加：</span></span><br><span class="line">  <span class="string">&quot;alias&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;vue&quot;</span> : <span class="string">&quot;./node_modules/vue/dist/vue.common.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>到此 “Vue 源码解读的正确姿势” 就准备完毕了，下一篇将开始真正的源码解读：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDE3NzU4MTA4ODI3NjY0Mzkx">Vue 源码系列（二）：Vue 初始化都做了什么？<i class="fa fa-external-link-alt"></i></span></p>
<p>文章完成再把链接贴上来，希望大家多多支持，欢迎点赞加关注 🙏</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>167-函数式编程-入门篇</title>
    <url>/20220219/167-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是函数式编程"><a href="#什么是函数式编程" class="headerlink" title="什么是函数式编程"></a>什么是函数式编程</h1><p>早在 1950 年代，随着 Lisp 语言的创建，函数式编程（ Functional Programming，简称 FP）就已经开始出现在大家视野。</p>
<p>而直到近些年，函数式以其优雅，简单的特点开始重新风靡整个编程界，主流语言在设计的时候无一例外都会更多的参考函数式特性（ Lambda 表达式，原生支持 map ，reduce ……），Java8 开始支持函数式编程。</p>
<p>而在前端领域，我们同样能看到很多函数式编程的影子：ES6 中加入了箭头函数，Redux 引入 Elm 思路降低 Flux 的复杂性，React16.6 开始推出 React.memo()，使得 pure functional components 成为可能，16.8 开始主推 Hook，建议使用 pure function 进行组件编写……</p>
<p>这些无一例外的说明，函数式编程这种古老的编程范式并没有随着岁月而褪去其光彩，反而愈加生机勃勃。</p>
<p>另外还有一些例子能证明函数式编程也适应于大型软件的编写：</p>
<blockquote>
<p>WhatsApp：通过 Erlang，WhatsApp 可以支持 9 亿用户，而其团队中只有 <strong>50 名工程师</strong>。</p>
<p>Discord：使用 <strong>Elixir</strong>，类似方式的 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vYmxvZy5kaXNjb3JkYXBwLmNvbS9ob3ctZGlzY29yZC1oYW5kbGVzLXB1c2gtcmVxdWVzdC1idXJzdHMtb2Ytb3Zlci1hLW1pbGxpb24tcGVyLW1pbnV0ZS13aXRoLWVsaXhpcnMtZ2Vuc3RhZ2UtOGY4OTlmMDIyMWI0">Discord <i class="fa fa-external-link-alt"></i></span> <strong>每分钟</strong>处理超过一<strong>百万个请求</strong>。</p>
</blockquote>
<p>于我个人而言，函数式编程就像第三次工业革命，前两次分别为命令式编程（Imperative programming）和面向对象编程（Object Oriented Programming）。</p>
<h2 id="初窥"><a href="#初窥" class="headerlink" title="初窥"></a>初窥</h2><p>概念说的再多也不够例子直观</p>
<blockquote>
<p>Talk is cheap, show me the code</p>
</blockquote>
<p>假设我们有这么个需求，我们登记了一系列人名存在数组中，现在需要对这个结构进行一些修改，需要把字符串数组变成一个对象数组，方便后续的扩展，并且需要把人名做一些转换：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;john-reese&#x27;</span>, <span class="string">&#x27;harold-finch&#x27;</span>, <span class="string">&#x27;sameen-shaw&#x27;</span>]</span><br><span class="line"><span class="comment">// 转换成</span></span><br><span class="line">[&#123;<span class="built_in">name</span>: <span class="string">&#x27;John Reese&#x27;</span>&#125;, &#123;<span class="built_in">name</span>: <span class="string">&#x27;Harold Finch&#x27;</span>&#125;, &#123;<span class="built_in">name</span>: <span class="string">&#x27;Sameen Shaw&#x27;</span>&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="命令式编程"><a href="#命令式编程" class="headerlink" title="命令式编程"></a>命令式编程</h3><p>用传统的编程思路，我们一上来就可以撸代码，临时变量，循环走起来：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">const arr = [<span class="string">&#x27;john-reese&#x27;</span>, <span class="string">&#x27;harold-finch&#x27;</span>, <span class="string">&#x27;sameen-shaw&#x27;</span>];</span><br><span class="line">const <span class="keyword">new</span><span class="type">Arr</span> = [];</span><br><span class="line"><span class="keyword">for</span> (let i = <span class="number">0</span>, len = arr.length; i &lt; len ; i++) &#123;</span><br><span class="line">  let name = arr[i];</span><br><span class="line">  let names = name.split(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">  let <span class="keyword">new</span><span class="type">Name</span> = [];</span><br><span class="line">  <span class="keyword">for</span> (let j = <span class="number">0</span>, naemLen = names.length; j &lt; naemLen; j++) &#123;</span><br><span class="line">    let nameItem = names[j][<span class="number">0</span>].toUpperCase() + names[j].slice(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">new</span><span class="type">Name</span>.push(nameItem);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">new</span><span class="type">Arr</span>.push(&#123; name : <span class="type">newName</span>.join(<span class="string">&#x27; &#x27;</span>) &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>完成，这几乎是所有人下意识的编程思路，完全的面向过程。你会想我需要依次完成：</p>
<ul>
<li>定义一个临时变量 newArr。</li>
<li>我需要做一个循环。</li>
<li>循环需要做 arr.length 次。</li>
<li>每次把名字的首位取出来大写，然后拼接剩下的部分。</li>
<li>……</li>
<li>最后返回结果。</li>
</ul>
<p>这样当然能完成任务，最后的结果就是<strong>一堆中间临时变量</strong>，光想变量名就让人感到崩溃。同时过程中掺杂了大量逻辑，通常一个函数需要<strong>从头读到尾才知道它具体做了什么</strong>，而且一旦出问题很难定位。</p>
<h3 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h3><p>一直以来，我也没觉得这样编程有什么问题，直到我遇到了函数式编程。我们来看一看一个 FPer 会如何思考这个问题：</p>
<ol>
<li>我只需要一个函数能实现从 <code>String 数组</code> 到 <code>Object 数组</code> 的转换：</li>
</ol>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f43665b08f4~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">convertNames :: [<span class="built_in">String</span>] -&gt; [<span class="built_in">Object</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>这里面涉及到一个 <code>String -&gt; Object</code> 的转换，那我需要有这么个函数实现这种转换：</li>
</ol>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f43662b192f~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">convert2Obj :: <span class="built_in">String</span> -&gt; <span class="built_in">Object</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><p>至于这种转换，可以轻松想到需要两个函数完成：</p>
<ul>
<li><code>capitalizeName</code>：把名称转换成指定形式</li>
<li><code>genObj</code>：把任意类型转换成对象</li>
</ul>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f43661763ce~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
</li>
<li><p>如果再细想一下，<code>capitalizeName</code> 其实也是几个方法的组合（<code>split</code>, <code>join</code>, <code>capitalize</code>），剩下的几个函数都是非常容易实现的。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f43667a603a~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
</li>
</ol>
<p>好了，我们的任务完成了，可以 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vY29kZXBlbi5pby92b2lkc2t5L3Blbi9OUU9Zamo=">运行代码<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalize = x =&gt; x[<span class="number">0</span>].toUpperCase() + x.slice(<span class="number">1</span>).toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> genObj = curry((<span class="built_in">key</span>, x) =&gt; &#123;</span><br><span class="line">  let obj = &#123;&#125;;</span><br><span class="line">  obj[<span class="built_in">key</span>] = x;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> capitalizeName = compose(<span class="built_in">join</span>(<span class="string">&#x27; &#x27;</span>), <span class="built_in">map</span>(capitalize), <span class="built_in">split</span>(<span class="string">&#x27;-&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> convert2Obj = compose(genObj(<span class="string">&#x27;name&#x27;</span>), capitalizeName)</span><br><span class="line"><span class="keyword">const</span> convertName = <span class="built_in">map</span>(convert2Obj);</span><br><span class="line"></span><br><span class="line">convertName([<span class="string">&#x27;john-reese&#x27;</span>, <span class="string">&#x27;harold-finch&#x27;</span>, <span class="string">&#x27;sameen-shaw&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>你可以先忽略其中的 <code>curry</code> 和 <code>compose</code> 函数（<a href="#%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E6%9E%84%E5%BB%BA">后面</a> 会介绍)。只是看这个编程思路，可以清晰看出，函数式编程的思维过程是完全不同的，它的着眼点是<strong>函数</strong>，而不是<strong>过程</strong>，它强调的是如何通过函数的组合变换去解决问题，而不是我通过写什么样的语句去解决问题，当你的代码越来越多的时候，这种函数的拆分和组合就会产生出强大的力量。</p>
<h2 id="为什么叫函数式编程"><a href="#为什么叫函数式编程" class="headerlink" title="为什么叫函数式编程"></a>为什么叫函数式编程</h2><p>之前我们已经初窥了函数式编程，知道了它的魅力，现在我们继续深入了解一下函数式编程吧。</p>
<p>其实函数我们从小就学，什么一次函数，二次函数……根据学术上函数的定义，函数即是一种描述集合和集合之间的<strong>转换关系</strong>，输入通过函数都会返回<strong>有且只有一个</strong>输出值。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f436bd171df~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<p>所以，<strong>函数</strong>实际上是一个<strong>关系</strong>，或者说是一种映射，而这种映射关系是可以组合的，一旦我们知道一个函数的输出类型可以匹配另一个函数的输入，那他们就可以进行组合。还记得之前写的 <code>convert2Obj</code>这个函数：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">const convert2Obj = compose(<span class="name">genObj</span>(&#x27;name&#x27;), capitalizeName)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>它实际上就完成了映射关系的组合，把一个数据从 <code>String</code> 转换成了 <code>String</code> 然后再转换成 <code>Object</code>。数学好的童鞋就知道，这就是数学上的复合运算：<code>g°f = g(f(x))</code></p>
<p>在我们的编程世界中，我们需要处理的其实也只有“数据”和“关系”，而关系就是函数。我们所谓的<strong>编程工作</strong>也不过就是在找一种<strong>映射关系</strong>，一旦关系找到了，问题就解决了，剩下的事情，就是让数据流过这种关系，然后转换成另一个数据罢了。</p>
<p>我特别喜欢用<strong>流水线</strong>去形容这种工作，把输入当做原料，把输出当做产品，<strong>数据可以不断的从一个函数的输出可以流入另一个函数输入</strong>，最后再输出结果，这不就是一套流水线嘛？</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f438a16ebfe~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<p>所以，现在你明确了函数式编程是什么了吧？它其实就是强调在编程过程中把更多的关注点放在如何去<strong>构建关系</strong>。通过构建一条高效的建流水线，一次解决所有问题。而不是把精力分散在不同的加工厂中来回奔波传递数据。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f438b83168e~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<h2 id="函数式编程的特点"><a href="#函数式编程的特点" class="headerlink" title="函数式编程的特点"></a>函数式编程的特点</h2><h3 id="函数是“一等公民”-First-Class-Functions"><a href="#函数是“一等公民”-First-Class-Functions" class="headerlink" title="函数是“一等公民” (First-Class Functions)"></a>函数是“一等公民” (First-Class Functions)</h3><p>这是函数式编程得以实现的<strong>前提</strong>，因为我们基本的操作都是在操作函数。这个特性意味着函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值，例如前面的</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">const convert2Obj = compose(<span class="name">genObj</span>(&#x27;name&#x27;), capitalizeName)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="声明式编程-Declarative-Programming"><a href="#声明式编程-Declarative-Programming" class="headerlink" title="声明式编程 (Declarative Programming)"></a>声明式编程 (Declarative Programming)</h3><p>通过上面的例子可以看出来，函数式编程大多时候都是在声明我需要做什么，而非怎么去做。这种编程风格称为 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vemgud2lraXBlZGlhLm9yZy96aC1jbi8lRTUlQUUlQTMlRTUlOTElOEElRTUlQkMlOEYlRTclQjclQTglRTclQTglOEIlRUYlQkMlOUZvbGRmb3JtYXQ9dHJ1ZQ==">声明式编程<i class="fa fa-external-link-alt"></i></span> 。这样有个好处是代码的可读性特别高，因为声明式代码大多都是接近自然语言的，同时，它解放了大量的人力，因为它不关心具体的实现，因此它可以把优化能力交给具体的实现，这也方便我们进行分工协作。</p>
<p>SQL 语句就是声明式的，你无需关心 Select 语句是如何实现的，不同的数据库会去实现它自己的方法并且优化。React 也是声明式的，你只要描述你的 UI，接下来状态变化后 UI 如何更新，是 React 在运行时帮你处理的，而不是靠你自己去渲染和优化 diff 算法。</p>
<h3 id="惰性执行（Lazy-Evaluation）"><a href="#惰性执行（Lazy-Evaluation）" class="headerlink" title="惰性执行（Lazy Evaluation）"></a>惰性执行（Lazy Evaluation）</h3><p>所谓惰性执行指的是函数只在需要的时候执行，即不产生无意义的中间变量。像刚才的例子，函数式编程跟命令式编程最大的区别就在于几乎没有中间变量，它从头到尾都在写函数，只有在最后的时候才通过调用 <code>convertName</code> 产生实际的结果。</p>
<h3 id="无状态和数据不可变-Statelessness-and-Immutable-data"><a href="#无状态和数据不可变-Statelessness-and-Immutable-data" class="headerlink" title="无状态和数据不可变 (Statelessness and Immutable data)"></a>无状态和数据不可变 (Statelessness and Immutable data)</h3><p>这是函数式编程的核心概念：</p>
<ul>
<li><strong>数据不可变：</strong> 它要求你所有的数据都是不可变的，这意味着如果你想修改一个对象，那你应该创建一个新的对象用来修改，而不是修改已有的对象。</li>
<li><strong>无状态：</strong> 主要是强调对于一个函数，不管你何时运行，它都应该像第一次运行一样，给定相同的输入，给出相同的输出，完全不依赖外部状态的变化。</li>
</ul>
<p>为了实现这个目标，函数式编程提出函数应该具备的特性：没有副作用和纯函数。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f438daa6474~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<h3 id="没有副作用（No-Side-Effects）"><a href="#没有副作用（No-Side-Effects）" class="headerlink" title="没有副作用（No Side Effects）"></a>没有副作用（No Side Effects）</h3><p>副作用这个词我们可算听的不少，它的含义是：在完成函数主要功能之外完成的其他副要功能。在我们函数中最主要的功能当然是根据输入<strong>返回结果</strong>，而在函数中我们最常见的副作用就是<strong>随意操纵外部变量</strong>。由于 JS 中对象传递的是引用地址，哪怕我们用 <code>const</code> 关键词声明对象，它依旧是可以变的。而正是这个“漏洞”让我们有机会随意修改对象。</p>
<p>例如： <code>map</code> 函数的本来功能是将输入的数组根据一个函数转换，生成一个新的数组：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">map :: [a] -&gt; [b]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而在 JS 中，我们经常可以看到下面这种对 <code>map</code> 的 “错误” 用法，把 <code>map</code> 当作一个循环语句，然后去直接修改数组中的值。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">const list = [...];</span><br><span class="line">// 修改 list 中的 <span class="keyword">type</span> <span class="type">和 </span>age</span><br><span class="line">list.map(item =&gt; &#123;</span><br><span class="line">  item.<span class="keyword">type</span> <span class="type">= </span><span class="number">1</span>;</span><br><span class="line">  item.age++;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样函数最主要的输出功能没有了，变成了直接修改了外部变量，这就是它的副作用。而没有副作用的写法应该是：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [...];</span><br><span class="line"><span class="comment">// 修改 list 中的 type 和 age</span></span><br><span class="line"><span class="keyword">const</span> newList = list.<span class="keyword">map</span>(item =&gt; (&#123;...item, <span class="keyword">type</span>: <span class="number">1</span>, age:item.age + <span class="number">1</span>&#125;));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>保证函数没有副作用，一来能保证数据的不可变性，二来能避免很多因为共享状态带来的问题。当你一个人维护代码时候可能还不明显，但随着项目的迭代，项目参与人数增加，大家对同一变量的依赖和引用越来越多，这种问题会越来越严重。最终可能连维护者自己都不清楚变量到底是在哪里被改变而产生 Bug。</p>
<blockquote>
<p>传递引用一时爽，代码重构火葬场</p>
</blockquote>
<h3 id="纯函数-pure-functions"><a href="#纯函数-pure-functions" class="headerlink" title="纯函数 (pure functions)"></a>纯函数 (pure functions)</h3><p>纯函数算是在 “没有副作用” 的要求上再进一步了。相信你已经在很多地方接触过这个词，在 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vcmVkdXguanMub3JnL2ludHJvZHVjdGlvbi90aHJlZS1wcmluY2lwbGVz">Redux 的三大原则中<i class="fa fa-external-link-alt"></i></span>，我们看到，它要求所有的修改必须使用纯函数。</p>
<blockquote>
<p>Changes are made with pure functions</p>
</blockquote>
<p>其实纯函数的概念很简单就是两点：</p>
<ul>
<li><strong>不依赖外部状态（无状态）：</strong> 函数的的运行结果不依赖全局变量，this 指针，IO 操作等。</li>
<li><strong>没有副作用（数据不变）：</strong> 不修改全局变量，不修改入参。</li>
</ul>
<p>所以纯函数才是真正意义上的 “函数”， 它意味着<strong>相同的输入，永远会得到相同的输出</strong>。</p>
<p>以下几个函数都是不纯的，因为他们都依赖外部变量，试想一下，如果有人调用了 <code>changeName</code> 对 <code>curUser</code> 进行了修改，然后你在另外的地方调用了 <code>saySth</code> ，这样就会产生你预料之外的结果。</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">const curUser = &#123;</span><br><span class="line">  <span class="built_in">name</span>: <span class="string">&#x27;Peter&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const saySth = <span class="built_in">str</span> =&gt; curUser.<span class="built_in">name</span> + <span class="string">&#x27;: &#x27;</span> + <span class="built_in">str</span>;   <span class="comment">// 引用了全局变量</span></span><br><span class="line">const changeName = (obj, <span class="built_in">name</span>) =&gt; obj.<span class="built_in">name</span> = <span class="built_in">name</span>;  <span class="comment">// 修改了输入参数</span></span><br><span class="line">changeName(curUser, <span class="string">&#x27;Jay&#x27;</span>);  <span class="comment">// &#123; name: &#x27;Jay&#x27; &#125;</span></span><br><span class="line">saySth(<span class="string">&#x27;hello!&#x27;</span>); <span class="comment">// Jay: hello!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果改成纯函数的写法会是怎么样呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> curUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Peter&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> saySth = <span class="function">(<span class="params">user, str</span>) =&gt;</span> user.name + <span class="string">&#x27;: &#x27;</span> + str;   <span class="comment">// 不依赖外部变量</span></span><br><span class="line"><span class="keyword">const</span> changeName = <span class="function">(<span class="params">user, name</span>) =&gt;</span> (&#123;...user, name &#125;);  <span class="comment">// 未修改外部变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newUser = changeName(curUser, <span class="string">&#x27;Jay&#x27;</span>);  <span class="comment">// &#123; name: &#x27;Jay&#x27; &#125;</span></span><br><span class="line">saySth(curUser, <span class="string">&#x27;hello!&#x27;</span>); <span class="comment">// Peter: hello!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样就没有之前说的那些问题了。</p>
<p>我们这么强调使用纯函数，纯函数的意义是什么？</p>
<ul>
<li><strong>便于测试和优化</strong>：这个意义在实际项目开发中意义非常大，由于纯函数对于相同的输入永远会返回相同的结果，因此我们可以轻松断言函数的执行结果，同时也可以保证函数的优化不会影响其他代码的执行。这十分符合<strong>测试驱动开发 TDD（Test-Driven Development )</strong> 的思想，这样产生的代码往往健壮性更强。</li>
<li><strong>可缓存性</strong>：因为相同的输入总是可以返回相同的输出，因此，我们可以提前缓存函数的执行结果，有很多库有所谓的 <code>memoize</code> 函数，下面以一个简化版的 <code>memoize</code> 为例，这个函数就能缓存函数的结果，对于像 <code>fibonacci</code> 这种计算，就可以起到很好的缓存效果。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memoize</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="built_in">JSON</span>.stringify(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> value = cache[key];</span><br><span class="line">    <span class="keyword">if</span>(!value) &#123;</span><br><span class="line">      value = [fn.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>)];  <span class="comment">// 放在一个数组中，方便应对 undefined，null 等异常情况</span></span><br><span class="line">      cache[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fibonacci = memoize(<span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">2</span> ? n: fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(fibonacci(<span class="number">4</span>))  <span class="comment">// 执行后缓存了 fibonacci(2), fibonacci(3),  fibonacci(4)</span></span><br><span class="line"><span class="built_in">console</span>.log(fibonacci(<span class="number">10</span>)) <span class="comment">// fibonacci(2), fibonacci(3),  fibonacci(4) 的结果直接从缓存中取出，同时缓存其他的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>自文档化</strong>：由于纯函数没有副作用，所以其依赖很明确，因此更易于观察和理解（配合后面介绍的 [类型签名](#hindly-milner 类型签名）更佳)。</li>
<li><strong>更少的 Bug</strong>：使用纯函数意味着你的函数中<strong>不存在指向不明的 this，不存在对全局变量的引用，不存在对参数的修改</strong>，这些共享状态往往是绝大多数 bug 的源头。</li>
</ul>
<p>好了，说了这么多，接下来就让我们看看在 JS 中如何使用函数式编程吧。</p>
<h1 id="流水线的构建"><a href="#流水线的构建" class="headerlink" title="流水线的构建"></a>流水线的构建</h1><p>如果说函数式编程中有两种操作是必不可少的那无疑就是<strong>柯里化（Currying）**和**函数组合（Compose）</strong>，柯里化其实就是流水线上的<strong>加工站</strong>，函数组合就是我们的<strong>流水线</strong>，它由多个加工站组成。</p>
<p>接下来，就让我们看看如何在 JS 中利用函数式编程的思想去组装一套高效的流水线。</p>
<h2 id="加工站——柯里化"><a href="#加工站——柯里化" class="headerlink" title="加工站——柯里化"></a>加工站——柯里化</h2><p>柯里化的意思是将一个多元函数，转换成一个依次调用的<strong>单元函数</strong>。</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">f<span class="comment">(a,b,c)</span> → f<span class="comment">(a)</span><span class="comment">(b)</span><span class="comment">(c)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们尝试写一个 <code>curry</code> 版本的 <code>add</code> 函数</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span><span class="params">(x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> increment = add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">increment(<span class="number">10</span>); <span class="comment">// 11</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>为什么这个单元函数很重要？还记得我们之前说过的，函数的返回值，<strong>有且只有一个嘛？</strong> 如果我们想顺利的组装流水线，那我就必须保证我每个加工站的输出刚好能流向下个工作站的输入。<strong>因此，在流水线上的加工站必须都是单元函数。</strong></p>
<p>现在很好理解为什么柯里化配合函数组合有奇效了，因为柯里化处理的结果刚好就是<strong>单输入</strong>的。</p>
<h3 id="部分函数应用-vs-柯里化"><a href="#部分函数应用-vs-柯里化" class="headerlink" title="部分函数应用 vs 柯里化"></a>部分函数应用 vs 柯里化</h3><p>经常有人搞不清柯里化和<strong>部分函数应用</strong> ( Partial Function Application )，经常把他们混为一谈，其实这是不对的，在维基百科里有明确的定义，部分函数应用强调的是固定一定的参数，返回一个<strong>更小元的函数</strong>。通过以下表达式展示出来就明显了：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 柯里化</span></span><br><span class="line">f<span class="comment">(a,b,c)</span> → f<span class="comment">(a)</span><span class="comment">(b)</span><span class="comment">(c)</span></span><br><span class="line"><span class="comment">// 部分函数调用</span></span><br><span class="line">f<span class="comment">(a,b,c)</span> → f<span class="comment">(a)</span><span class="comment">(b,c)</span> / f<span class="comment">(a,b)</span><span class="comment">(c)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>柯里化</strong>强调的是<strong>生成单元函数</strong>，<strong>部分函数应用</strong>的强调的<strong>固定任意元参数</strong>，而我们平时生活中常用的其实是<strong>部分函数应用</strong>，这样的好处是可以固定参数，降低函数通用性，提高函数的适合用性。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设一个通用的请求 API</span></span><br><span class="line"><span class="keyword">const</span> request = (type, url, options) =&gt; ...</span><br><span class="line"><span class="comment">// GET 请求</span></span><br><span class="line">request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://....&#x27;</span>)</span><br><span class="line"><span class="comment">// POST 请求</span></span><br><span class="line">request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://....&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是通过部分调用后，我们可以抽出特定 type 的 request</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">get</span> = request(<span class="string">&#x27;GET&#x27;</span>);</span><br><span class="line"><span class="keyword">get</span>(<span class="string">&#x27;http://&#x27;</span>, &#123;..&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="高级柯里化"><a href="#高级柯里化" class="headerlink" title="高级柯里化"></a>高级柯里化</h3><p>通常我们不会自己去写 <code>curry</code> 函数，现成的库大多都提供了 <code>curry</code> 函数的实现，但是使用过的人肯定有会有疑问，我们使用的 Lodash，Ramda 这些库中实现的 <code>curry</code> 函数的行为好像和柯里化不太一样呢，他们实现的好像是部分函数应用呢？</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">const</span> add = R.curry((x, y, z) =&gt;  x + y + z);</span><br><span class="line"><span class="attribute">const</span> add<span class="number">7</span> = add(<span class="number">7</span>);</span><br><span class="line"><span class="attribute">add7</span>(<span class="number">1</span>,<span class="number">2</span>) // <span class="number">10</span></span><br><span class="line"><span class="attribute">const</span> add<span class="number">1</span>_<span class="number">2</span> = add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="attribute">add1_2</span>(<span class="number">7</span>) // <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其实，这些库中的 <code>curry</code> 函数都做了很多优化，导致这些库中实现的柯里化其实不是纯粹的柯里化，我们可以把他们理解为“高级柯里化”。这些版本实现可以根据你输入的参数个数，<strong>返回一个柯里化函数/结果值</strong>。即，<strong>如果你给的参数个数满足了函数条件，则返回值</strong>。这样可以解决一个问题，就是如果一个函数是多输入，就可以避免使用 <code>(a)(b)(c)</code> 这种形式传参了。</p>
<p>所以上面的 <code>add7(1, 2)</code> 能直接输出结果不是因为 <code>add(7)</code> 返回了一个接受 2 个参数的函数，而是你刚好传了 2 个参数，满足了所有参数，因此给你计算了结果，下面的代码就很明显了：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">add</span> = R.curry((x, y, z) =&gt;  x + y + z);</span><br><span class="line"><span class="keyword">const</span> add7 = <span class="keyword">add</span>(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">add</span>(<span class="number">7</span>)(<span class="number">1</span>) <span class="comment">// function</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果 <code>add7</code> 是一个接受 2 个参数的函数，那么 <code>add7(1)</code> 就不应该返回一个 function 而是一个值了。</p>
<p>因此，记住这句话：<strong>我们可以用高级柯里化去实现部分函数应用，但是柯里化不等于部分函数应用</strong>。</p>
<h3 id="柯里化的应用"><a href="#柯里化的应用" class="headerlink" title="柯里化的应用"></a>柯里化的应用</h3><p>通常，我们在实践中使用柯里化都是为了把某个函数变得单值化，这样可以增加函数的多样性，使得其适用性更强：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> replace = curry(<span class="function">(<span class="params">a, b, str</span>) =&gt;</span> str.replace(a, b));</span><br><span class="line"><span class="keyword">const</span> replaceSpaceWith = replace(<span class="regexp">/\s*/</span>);</span><br><span class="line"><span class="keyword">const</span> replaceSpaceWithComma = replaceSpaceWith(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> replaceSpaceWithDash = replaceSpaceWith(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过上面这种方式，我们从一个 <code>replace</code> 函数中产生很多新函数，可以在各种场合进行使用。</p>
<p>更重要的是，单值函数是我们即将讲到的<strong>函数组合的基础</strong>。</p>
<h2 id="流水线——函数组合"><a href="#流水线——函数组合" class="headerlink" title="流水线——函数组合"></a>流水线——函数组合</h2><p>上面我们借助 <code>curry</code>，已经可以很轻松的构造一个加工站了，现在就是我们组合成流水线的时候了。</p>
<h3 id="函数组合概念"><a href="#函数组合概念" class="headerlink" title="函数组合概念"></a>函数组合概念</h3><p>函数组合的目的是将多个函数组合成一个函数。下面来看一个简化版的实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">f, g</span>) =&gt;</span> <span class="function"><span class="params">x</span> =&gt;</span> f(g(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> fg = compose(f, g);</span><br><span class="line">fg(<span class="number">1</span>) <span class="comment">//3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以看到 <code>compose</code> 就实现了一个简单的功能：形成了一个全新的函数，而这个函数就是一条从 <code>g -&gt; f</code> 的流水线。同时我们可以很轻易的发现 <code>compose</code> 其实是满足结合律的</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">compose(<span class="name">f</span>, compose(<span class="name">g</span>, <span class="literal">t</span>)) = compose(<span class="name">compose</span>(<span class="name">f</span>, g), <span class="literal">t</span>)  = f(<span class="name">g</span>(<span class="name">t</span>(<span class="name">x</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>只要其顺序一致，最后的结果是一致的，因此，我们可以写个更高级的 <code>compose</code>，支持多个函数组合：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">compose(<span class="name">f</span>, g, <span class="literal">t</span>) =&gt; x =&gt; f(<span class="name">g</span>(<span class="name">t</span>(<span class="name">x</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>简单实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...fns</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> fns.reduceRight(<span class="function">(<span class="params">val, fn</span>) =&gt;</span> fn.apply(<span class="literal">null</span>, [].concat(val)), args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> t = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fgt = compose(f, g, t);</span><br><span class="line">fgt(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3 -&gt; 6 -&gt; 7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数组合应用"><a href="#函数组合应用" class="headerlink" title="函数组合应用"></a>函数组合应用</h3><p>考虑一个小功能：将数组最后一个元素大写，假设 <code>log</code>, <code>head</code>，<code>reverse</code>，<code>toUpperCase</code> 函数存在（我们通过 <code>curry</code> 可以很容易写出来）</p>
<p>命令式的写法：</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">log</span>(<span class="title">toUpperCase</span>(<span class="title">head</span>(<span class="title">reverse</span>(<span class="variable">arr</span>))))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>面向对象的写法：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">arr.reverse<span class="comment">()</span></span><br><span class="line">  .head<span class="comment">()</span></span><br><span class="line">  .toUpperCase<span class="comment">()</span></span><br><span class="line">  .log<span class="comment">()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>链式调用看起来顺眼多了，然而问题在于，原型链上可供我们链式调用的函数是有限的，而需求是无限的 ，这限制了我们的逻辑表现力。</p>
<p>再看看，现在通过组合，我们如何实现之前的功能：</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> upperLastItem = compose(<span class="keyword">log</span>, <span class="keyword">to</span>UpperCase, head, reverse);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过参数我们可以很清晰的看出发生了 uppderLastItem 做了什么，它完成了一套流水线，所有经过这条流水线的参数都会经历：<code>reverse</code> -&gt; <code>head</code> -&gt; <code>toUpperCase</code> -&gt; <code>log</code> 这些函数的加工，最后生成结果。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f438eba5b11~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<p>最完美的是，这些函数都是非常简单的纯函数，你可以随意组合，随意拿去用，不用有任何的顾忌。</p>
<p>其实有些经验丰富的程序猿已经看出来一些蹊跷，这不就是所谓管道 ( <code>pipe</code> ) 的概念嘛？在 Linux 命令中常会用到，类似<code>ps</code> <code>grep</code>的组合</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef | <span class="keyword">grep</span> nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>只是管道的执行方向和 compose (从右往左的组合 ) 好像刚好相反，因此很多函数库（Lodash，Ramda）中也提供了另一种组合方式：<code>pipe</code>（从左往右的组合）</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> upperLastItem = R.pipe(reverse, head, <span class="keyword">to</span>UppderCase, <span class="keyword">log</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其实函数式编程的理念和 Linux 的设计哲学很像：</p>
<blockquote>
<p>有众多单一目的的小程序，一个程序只实现一个功能，多个程序组合完成复杂任务。</p>
</blockquote>
<h3 id="函数组合的好处"><a href="#函数组合的好处" class="headerlink" title="函数组合的好处"></a>函数组合的好处</h3><p>函数组合的好处显而易见，它让代码变得简单而富有可读性，同时通过不同的组合方式，我们可以轻易组合出其他常用函数，让我们的代码更具表现力</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合方式 1</span></span><br><span class="line"><span class="keyword">const</span> last = compose(head, <span class="built_in">reverse</span>);</span><br><span class="line"><span class="keyword">const</span> shout = compose(<span class="built_in">log</span>, toUpperCase);</span><br><span class="line"><span class="keyword">const</span> shoutLast = compose(shout, last);</span><br><span class="line"><span class="comment">// 组合方式 2</span></span><br><span class="line"><span class="keyword">const</span> lastUppder = compose(toUpperCase, head, <span class="built_in">reverse</span>);</span><br><span class="line"><span class="keyword">const</span> logLastUpper = compose(<span class="built_in">log</span>, lastUppder);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个过程，就像搭乐高积木一样。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f43950415d2~tplv-t2oaga2asx-watermark.awebp" alt="lego"></p>
<p>由此可见，大型的程序，都可以通过这样一步步的拆分组合实现，而剩下要做的，就是去构造足够多的积木块（函数）。</p>
<h2 id="实践经验"><a href="#实践经验" class="headerlink" title="实践经验"></a>实践经验</h2><p>在使用柯里化和函数组合的时候，有一些经验可以借鉴一下：</p>
<h3 id="柯里化中把要操作的数据放到最后"><a href="#柯里化中把要操作的数据放到最后" class="headerlink" title="柯里化中把要操作的数据放到最后"></a>柯里化中把要操作的数据放到最后</h3><p>因为我们的输出通常是需要操作的数据，这样当我们固定了之前的参数（我们可以称为<strong>配置</strong>）后，可以变成一个单元函数，直接被<strong>函数组合</strong>使用，这也是其他的函数式语言遵循的规范：</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">split</span> = curry((x, <span class="built_in">str</span>) =&gt; <span class="built_in">str</span>.<span class="built_in">split</span>(x));</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">join</span> = curry((x, arr) =&gt; arr.<span class="built_in">join</span>(x));</span><br><span class="line"><span class="keyword">const</span> replaceSpaceWithComma = compose(<span class="built_in">join</span>(<span class="string">&#x27;,&#x27;</span>), <span class="built_in">split</span>(<span class="string">&#x27; &#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> replaceCommaWithDash = compose(<span class="built_in">join</span>(<span class="string">&#x27;-&#x27;</span>), <span class="built_in">split</span>(<span class="string">&#x27;,&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是如果有些函数没遵循这个约定，我们的函数该如何组合？当然也不是没办法，很多库都提供了占位符的概念，例如 Ramda 提供了一个占位符号（<code>R.__</code>）。假设我们的 <code>split</code> 把 <code>str</code> 放在首位</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">split</span> = curry((<span class="built_in">str</span>, x) =&gt; <span class="built_in">str</span>.<span class="built_in">split</span>(x));</span><br><span class="line"><span class="keyword">const</span> replaceSpaceWithComma = compose(<span class="built_in">join</span>(<span class="string">&#x27;,&#x27;</span>), <span class="built_in">split</span>(R.__, <span class="string">&#x27; &#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数组合中函数要求单输入"><a href="#函数组合中函数要求单输入" class="headerlink" title="函数组合中函数要求单输入"></a>函数组合中函数要求单输入</h3><p>函数组合有个使用要点，就是中间的函数一定是<strong>单输入</strong>的，这个很好理解，之前也说过了，因为函数的输出都是单个的（数组也只是一个元素）。</p>
<h3 id="函数组合的-Debug"><a href="#函数组合的-Debug" class="headerlink" title="函数组合的 Debug"></a>函数组合的 Debug</h3><p>当遇到函数出错的时候怎么办？我们想知道在哪个环节出错了，这时候，我们可以借助一个辅助函数 <code>trace</code>，它会临时输出当前阶段的结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> trace = curry(<span class="function">(<span class="params">tip, x</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(tip, x); <span class="keyword">return</span> x; &#125;);</span><br><span class="line"><span class="keyword">const</span> lastUppder = compose(toUpperCase, head, trace(<span class="string">&#x27;after reverse&#x27;</span>), reverse);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="多参考-Ramda"><a href="#多参考-Ramda" class="headerlink" title="多参考 Ramda"></a>多参考 Ramda</h3><p>现有的函数式编程工具库很多，Lodash/fp 也提供了，但是不是很推荐使用 Lodash/fp 的函数库，因为它的很多函数把需要处理的参数放在了首位（ 例如 <code>map</code> ）这不符合我们之前说的最佳实践。</p>
<p>这里推荐使用 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHA6Ly9SYW1kYS5jbi9kb2NzLw==">Ramda<i class="fa fa-external-link-alt"></i></span>，它应该是目前最符合函数式编程的工具库，它里面的所有函数都是 <code>curry</code> 的，而且需要操作的参数都是放在最后的。上述的 <code>split</code>，<code>join</code>，<code>replace</code> 这些基本的都在 Ramda 中可以直接使用，它一共提供了 200 多个超实用的函数，合理使用可以大大提高你的编程效率（目前我的个人经验来说，我需要的功能它 90%都提供了）。</p>
<h1 id="实战一下"><a href="#实战一下" class="headerlink" title="实战一下"></a>实战一下</h1><p>现在你已经基本学会了所有的基础概念，那让我们来实战一下吧！</p>
<p>假设我现在有一套数据：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">data</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&#x27;Peter&#x27;</span>,</span><br><span class="line">    sex: <span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    grade: <span class="number">99</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ……</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实现以下几个常用功能：</p>
<ol>
<li>获取所有年龄小于 18 岁的对象，并返回他们的名称和年龄。</li>
<li>查找所有男性用户。</li>
<li>更新一个指定名称用户的成绩（不影响原数组）。</li>
<li>取出成绩最高的 10 名，并返回他们的名称和分数。</li>
</ol>
<p>我这边提供以下 Ramda 库中的参考函数：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象操作（最后一个参数是对象），均会返回新的对象拷贝</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>prop(&#x27;name&#x27;)    <span class="comment">// 获取对象 name 字段的值</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>prop<span class="constructor">Eq(&#x27;<span class="params">name</span>&#x27;, &#x27;123&#x27;)</span>   <span class="comment">// 判断对象 name 字段是否等于‘123’</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>assoc(&#x27;name&#x27;, &#x27;<span class="number">123</span>&#x27;)   <span class="comment">// 更新对象的&#x27;name&#x27;的值为&#x27;123&#x27;</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>pick(<span class="literal">[&#x27;<span class="identifier">a</span>&#x27;, &#x27;<span class="identifier">d</span>&#x27;]</span>); <span class="comment">//=&gt; &#123;a: 1, d: 4&#125;  // 获取对象某些属性，如果对应属性不存在则不返回</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>pick<span class="constructor">All([&#x27;<span class="params">a</span>&#x27;, &#x27;<span class="params">d</span>&#x27;])</span>; <span class="comment">//=&gt; &#123;a: 1, d: 4&#125;  // 获取对象某些属性，如果对应属性不存在则返回`key : undefined`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组操作</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>map(func)  <span class="comment">// 传统的 map 操作</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>filter(func)  <span class="comment">// 传统的 filter 操作</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>reject(func)  <span class="comment">// filter 的补集</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>take(n)    <span class="comment">// 取出数组前 n 个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较操作</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>equals(a, b)  <span class="comment">// 判断 b 是否等于 a</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>gt(<span class="number">2</span>, <span class="number">1</span>) =&gt; <span class="literal">true</span>  <span class="comment">// 判断第一个参数是否大于第二个参数</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>lt(<span class="number">2</span>, <span class="number">1</span>) =&gt; <span class="literal">false</span> <span class="comment">// 判断第一个参数是否小于第二个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序操作</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>sort(func)    <span class="comment">// 根据某个排序函数排序</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>ascend(func)    <span class="comment">// 根据 func 转换后的值，生成一个升序比较函数</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>descend(func)    <span class="comment">// 根据 func 转换后的值，生成一个降序比较函数</span></span><br><span class="line"><span class="comment">// 例子：</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>sort(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>ascend(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>prop(&#x27;age&#x27;)))  <span class="comment">// 根据 age 进行升序排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必备函数</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>pipe<span class="literal">()</span>   <span class="comment">//compose 的反向，从前往后组合</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>compose<span class="literal">()</span>  <span class="comment">// 从后到前组合</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>curry<span class="literal">()</span>  <span class="comment">// 柯里化</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以想想看，如果是你会如何写这些函数，我这里提供了一个 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vY29kZXBlbi5pby92b2lkc2t5L3Blbi93dndLTndl">codepen 的模板<i class="fa fa-external-link-alt"></i></span>，可以在这里写你的答案，会自动测试。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f43b8ec524e~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<p>（我的答案放在文章后面，请先思考完再看）</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="Hindly-Milner-类型签名"><a href="#Hindly-Milner-类型签名" class="headerlink" title="Hindly Milner 类型签名"></a>Hindly Milner 类型签名</h2><p>之前我们遇到了类似这样的说明：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">:: <span class="built_in">String</span> -&gt; <span class="built_in">Object</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这叫类型签名，最早是在 Hindley-Milner 类型系统中提出来的。</p>
<p>你也能在 Ramda 的官网上看到类似的类型签名：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/5/16d00f43b9255b6c~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<p>引入它的好处显而易见，短短一行，就能暴露函数的行为和目的，方便我们了解语义。有时候一个函数可能很长，光从代码上很难理解它到底做了什么：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">const replace = <span class="string">reg =&gt;</span> <span class="string">sub =&gt;</span> <span class="string">str =&gt;</span> str.replace(reg, <span class="function"><span class="keyword">sub</span>)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而加上类型签名，我们至少能知道每一步它做了哪些转换，最后输出一个什么样的结果。</p>
<p>例如这个 replace ，通过类型签名我们知道它接受一个 <code>正则表达</code> 式和两个 <code>String</code>，最后会返回一个 <code>String</code>。</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">//  <span class="built_in">replace</span> :: Regex -&gt; String -&gt; String -&gt; String</span><br><span class="line">const <span class="built_in">replace</span> = reg =&gt; sub =&gt; str =&gt; str.<span class="built_in">replace</span>(reg, sub);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样的连续箭头看起来可能很头疼，其实稍微组合一下可以发现，它就是柯里化的意思：先传一个 <code>正则表达式</code> 会返回一个函数，如果再传一个 <code>String</code>，也会返回函数……直到你输入了最后一个 <code>String</code>，就会返回一个 <code>String</code> 的结果。</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">//  <span class="built_in">replace</span> :: Regex -&gt; （String -&gt; （String -&gt; String))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同时类型签名可以避免我们在合并函数的时候输入和输出的类型不一致。</p>
<p>例如 join 函数通过类型签名很明显是传入一个 String 的配置，然后就可以将一个 <code>String 数组</code> 转换成 <code>String</code>。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> join :: <span class="built_in">String</span> -&gt; [<span class="built_in">String</span>] -&gt; <span class="built_in">String</span></span><br><span class="line">const join = curry(<span class="function"><span class="params">(sep, arr)</span> =&gt;</span> arr.join(sep));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同样，下面这个函数，它接受一个 <code>String</code>，然后经过 strLen 转换能返回一个 <code>Number</code>。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="comment">// strLen :: String -&gt; Number</span></span><br><span class="line"><span class="keyword">const</span> strLen = <span class="built_in">str</span> =&gt; <span class="built_in">str</span>.length();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那我们很容易知道，以上两个函数完全可以组合，因为他们输入和输出类型一致，通过组合我们可以完成一个 <code>String 数组</code> 到 <code>Number</code> 的流水线。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> joinDash = <span class="keyword">join</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> lengthWithDash = compose(strLen, joinDash);</span><br><span class="line">lengthWithDash([<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;def&#x27;</span>]);  <span class="comment">// 7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然还有时候你的函数可能不是接受特定的类型，而只是做一些通用的事情，此时我们可以用 a, b, c…… 这些来替代一些通用类型，例如 <code>map</code> ，它传入一个可以把 a 转换成 b 的函数，然后把<code>a 数组</code> 转换成<code>b 数组</code>。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  map :: (a -&gt; b) -&gt; [a] -&gt; [b]</span></span><br><span class="line"><span class="keyword">var</span> map = curry(<span class="function"><span class="keyword">function</span><span class="params">(f, xs)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xs.map(f);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  head :: [a] -&gt; a</span></span><br><span class="line"><span class="keyword">var</span> head = <span class="function"><span class="keyword">function</span><span class="params">(xs)</span></span>&#123; <span class="keyword">return</span> xs[<span class="number">0</span>]; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在你就学会了类型签名的使用了，我们推荐你写的每个函数都加上类型签名，方便他人，方便自己。</p>
<h2 id="Pointfree-编程风格"><a href="#Pointfree-编程风格" class="headerlink" title="Pointfree 编程风格"></a>Pointfree 编程风格</h2><p>我之前提过一下 Pointfree 这种编程风格，它其实就是强调在整个函数编写过程中不出现参数（point），而只是通过函数的组合生成新的函数，实际数据只需要在最后使用函数的时候再传入即可。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Pointfree  没有出现需要操作的参数</span></span><br><span class="line"><span class="keyword">const</span> upperLastItem = compose(toUpperCase, head, <span class="keyword">reverse</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非 Pointfree 出现了需要操作的参数</span></span><br><span class="line"><span class="keyword">const</span> upperLastItem = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> reverseArr = arr.<span class="keyword">reverse</span>();</span><br><span class="line">  <span class="keyword">const</span> head = reverseArr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> head.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们在使用函数式编程的时候，其实自然就会形成这种风格，它有什么好处呢？</p>
<ul>
<li><strong>无需考虑参数命名</strong>：能减轻不少思维负担，毕竟参数命名也是个很费事的过程。</li>
<li><strong>关注点集中</strong>：你无需考虑数据，只需要把所有的注意力集中在转换关系上。</li>
<li><strong>代码精简</strong>：可以省去通过中间变量不断的去传递数据的过程。</li>
<li><strong>可读性强</strong>：一眼就可以看出来数据的整个的转换关系。</li>
</ul>
<p>刚开始使用这种编程风格肯定会有很多不适应，但是当你能合理运用这种编程风格后确实会让代码更加简洁和易于理解了。但是凡事无绝对，学了 Pointfree 这种风格并不意味着你要强迫自己做到一个参数都不能出现（比如很多基础函数，他们本身的编写就不是 Pointfree 的），函数式编程也不是所有场合都完全适用的，<strong>具体情况具体分析</strong>。</p>
<p>记住，你学习各种编程范式的<strong>最终目的都是为了让自己的编码更加高效，易懂，同时减少出错概率</strong>，不能因为学了一种编程范式，反而导致自己的编程成本大大增加，这就有点本末倒置了。</p>
<h2 id="实战答案"><a href="#实战答案" class="headerlink" title="实战答案"></a>实战答案</h2><p>当你写完函数，你可以看一下，你写的函数是不是足够的通用？如果我现在需求由获取男性用户变成获取所有的女性用户，如果我现在要取所有年龄前 10 名的用户，你的函数是否可以很好的复用呢？答案的 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vY29kZXBlbi5pby92b2lkc2t5L3Blbi9Qb1lQSnFt">codepen 地址<i class="fa fa-external-link-alt"></i></span>，我这里的答案也不一定是最优的，只是提供一个思路（就像 <code>update</code>，你可以不用 <code>map</code>，而用 <code>R.update</code> 直接更新数组元素）。</p>
<p>如果在不看答案前，你能写出所有这些操作，那说明你对函数的组合应用的很好了！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>前面介绍了很多函数式编程的概念可以总结出函数式编程的优点：</p>
<ul>
<li><strong>代码简洁，开发快速</strong>：函数式编程大量使用函数的组合，函数的复用率很高，减少了代码的重复，因此程序比较短，开发速度较快。Paul Graham 在《黑客与画家》一书中写道：同样功能的程序，极端情况下，Lisp 代码的长度可能是 C 代码的二十分之一。</li>
<li><strong>接近自然语言，易于理解</strong>：函数式编程大量使用声明式代码，基本都是接近自然语言的，加上它没有乱七八糟的循环，判断的嵌套，因此特别易于理解。</li>
<li>**易于”并发编程”**：函数式编程没有副作用，所以函数式编程不需要考虑“死锁”（Deadlock），所以根本不存在“锁”线程的问题。</li>
<li><strong>更少的出错概率</strong>：因为每个函数都很小，而且相同输入永远可以得到相同的输出，因此测试很简单，同时函数式编程强调使用纯函数，没有副作用，因此也很少出现奇怪的 Bug。</li>
</ul>
<p>因此，如果用一句话来形容函数式编程，应该是：<code>Less code, fewer bugs</code> 。因为写的代码越少，出错的概率就越小。人是最不可靠的，我们应该尽量把工作交给计算机。</p>
<p>一眼看下来好像函数式可以解决所有的问题，但是实际上，函数式编程也不是什么万能的灵丹妙药。正因为函数式编程有以上特点，所以它天生就有以下缺陷：</p>
<ul>
<li><strong>性能</strong>：函数式编程相对于指令式编程，性能绝对是一个短板，因为它往往会对一个方法进行过度包装，从而产生上下文切换的性能开销。同时，在 JS 这种非函数式语言中，函数式的方式必然会比直接写语句指令慢（引擎会针对很多指令做特别优化）。就拿原生方法 <code>map</code> 来说，它就要比纯循环语句实现迭代慢 8 倍。</li>
<li><strong>资源占用</strong>：在 JS 中为了实现对象状态的不可变，往往会创建新的对象，因此，它对垃圾回收（Garbage Collection）所产生的压力远远超过其他编程方式。这在某些场合会产生十分严重的问题。</li>
<li><strong>递归陷阱</strong>：在函数式编程中，为了实现迭代，通常会采用递归操作，为了减少递归的性能开销，我们往往会把递归写成尾递归形式，以便让解析器进行优化。但是众所周知，JS 是不支持尾递归优化的（虽然 ES6 中将尾递归优化作为了一个规范，但是真正实现的少之又少，<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHA6Ly9rYW5nYXguZ2l0aHViLmlvL2NvbXBhdC10YWJsZS9lczYv">传送门<i class="fa fa-external-link-alt"></i></span>）</li>
<li>……</li>
</ul>
<p>因此，在性能要求很严格的场合，函数式编程其实并不是太合适的选择。</p>
<p>但是换种思路想，软件工程界从来就没有停止过所谓的银弹之争，却也从来没诞生过什么真正的银弹，各种编程语言层出不穷，各种框架日新月异，各种编程范式推陈出新，结果谁也没有真正的替代谁。</p>
<p>学习函数式编程真正的意义在于：让你意识到在指令式编程，面向对象编程之外，还有一种全新的编程思路，一种用函数的角度去<strong>抽象</strong>问题的思路。学习函数式编程能大大丰富你的武器库，不然，**<em>当你手中只有一个锤子，你看什么都像钉子</em>**。</p>
<p>我们完全可以在日常工作中将函数式编程作为一种辅助手段，在条件允许的前提下，借鉴函数式编程中的思路，例如：</p>
<ul>
<li>多使用纯函数减少副作用的影响。</li>
<li>使用柯里化增加函数适用率。</li>
<li>使用 Pointfree 编程风格，减少无意义的中间变量，让代码更且可读性。</li>
<li>……</li>
</ul>
<p>最后，还是那句老生常谈的话：</p>
<blockquote>
<p>没有最好的，只有最适合的</p>
</blockquote>
<p>希望大家在实际项目中，能根据自己的需求选择最适合自己的编程范式，也希望通过学习这种新的编程范式，可以让我们在二进制的世界行走得更加游刃有余。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vbGVnYWN5LmdpdGJvb2suY29tL2Jvb2svbGxoOTExMDAxL21vc3RseS1hZGVxdWF0ZS1ndWlkZS1jaGluZXNl">mostly-adequate-guide-chinese<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vYmFpa2UuYmFpZHUuY29tL2l0ZW0vJUU1JTg3JUJEJUU2JTk1JUIwJUU1JUJDJThGJUU3JUJDJTk2JUU3JUE4JThCLzQwMzUwMzE/ZnI9YWxhZGRpbg==">百度百科：函数式编程<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vYmFpa2UuYmFpZHUuY29tL2l0ZW0vJUU4JThDJTgzJUU3JTk1JUI0JUU4JUFFJUJBLzgyODExMTQ/ZnI9YWxhZGRpbg==">百度百科：范畴学<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vb3lhbmdsdWwudXMvY2xvanVyZS1mbGF2b3JlZC1qYXZhc2NyaXB0L3poLw==">clojure-flavored-javascript<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1cnJ5aW5n">en.wikipedia.org/wiki/Curryi…<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BhcnRpYWxfYXBwbGljYXRpb24=">en.wikipedia.org/wiki/Partia…<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZGV2LnRvL2FsbGFubWFjZ3JlZ29yL3lvdS1zaG91bGQtbGVhcm4tZnVuY3Rpb25hbC1wcm9ncmFtbWluZy1pbi0yMDE4LTRuZmY=">why you should learn functional programming<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHA6Ly9kanlkZS5naXRodWIuaW8vYmxvZy9kZWNsYXJhdGl2ZS1wcm9ncmFtbWluZy1pcy10aGUtZnV0dXJlLw==">未来属于声明式编程<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>168-推荐6个有意思的CSS tools</title>
    <url>/20220219/168-%E6%8E%A8%E8%8D%906%E4%B8%AA%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84CSS-tools/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-PurgeCSS-——-删除无用-css-代码"><a href="#1-PurgeCSS-——-删除无用-css-代码" class="headerlink" title="1. PurgeCSS —— 删除无用 css 代码"></a>1. <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vcHVyZ2Vjc3MuY29tLw==">PurgeCSS<i class="fa fa-external-link-alt"></i></span> —— 删除无用 css 代码</h1><p>PurgeCSS 可以删除 CSS 中未使用的代码。这个工具非常有用，尤其是当使用 CSS 框架时。因为大多数时候框架都带有很多我们并不真正需要的代码。 它可以是开发工作流程的一部分。当你正在构建一个网站时，你可能会决定使用一个 CSS 框架，如 TailwindCSS, Bootstrap, MaterializeCSS, Foundation 等。但我们只使用一小部分框架，并且将包括许多未使用的 CSS 样式。 这就是 PurgeCSS 发挥作用的地方。PurgeCSS 分析你的内容和 CSS 文件。然后，它将文件中使用的选择器与内容文件中的选择器进行匹配。它会从 CSS 中删除未使用的选择器，从而生成更小的 CSS 文件。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0726ebcb032f436faae5f2862f453f7e~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h1 id="2-Neumorphism-——-最小类型设计能力"><a href="#2-Neumorphism-——-最小类型设计能力" class="headerlink" title="2. Neumorphism —— 最小类型设计能力"></a>2. <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vbmV1bW9ycGhpc20uaW8vJTIzZTBlMGUw">Neumorphism<i class="fa fa-external-link-alt"></i></span> —— 最小类型设计能力</h1><p>Neumorphism 设计现在很流行，很多用户喜欢它，因为它是一种最小类型的设计。 这是一个很棒的工具，它允许你设计生成软 UI CSS 代码。这对于创建 Neumorphism 设计非常有用。可以选择颜色、编辑大小、半径、距离等等。试一试，你会喜欢的。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/588c9bf256c841eea2bf96388d9843ec~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h1 id="3-CSS-clip-path-maker-——-营销图设计赋能"><a href="#3-CSS-clip-path-maker-——-营销图设计赋能" class="headerlink" title="3. CSS clip-path maker —— 营销图设计赋能"></a>3. <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vYmVubmV0dGZlZWx5LmNvbS9jbGlwcHkv">CSS clip-path maker<i class="fa fa-external-link-alt"></i></span> —— 营销图设计赋能</h1><p>这个工具基于 CSS 属性 clip-path，它允许你创建复杂的形状（多边形、圆形、椭圆形等）。如果你不熟悉这个 CSS 属性，那没什么大不了的，因为剪辑路径制作工具就在这里。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/419e70b6e91f47819a7ca0044e52e294~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h1 id="4-Animista-——-可视化动画创建"><a href="#4-Animista-——-可视化动画创建" class="headerlink" title="4. Animista —— 可视化动画创建"></a>4. <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vYW5pbWlzdGEubmV0Lw==">Animista<i class="fa fa-external-link-alt"></i></span> —— 可视化动画创建</h1><p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vYW5pbWlzdGEubmV0Lw==">Animista<i class="fa fa-external-link-alt"></i></span>是可用于动画的最佳 CSS 工具之一。它为你提供了一组可以在 CSS 中使用的预制动画。你可以选择你喜欢的任何类型的动画并根据需要进行编辑。完成后，你可以为动画生成 CSS 代码并将其用于你的项目代码。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f8ae729aad04b639cc6e9998817a4ed~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h1 id="5-Shadow-Brumm-——-可视化阴影制作"><a href="#5-Shadow-Brumm-——-可视化阴影制作" class="headerlink" title="5. Shadow Brumm —— 可视化阴影制作"></a>5. <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vc2hhZG93cy5icnVtbS5hZi8=">Shadow Brumm<i class="fa fa-external-link-alt"></i></span> —— 可视化阴影制作</h1><p>这是一个很棒的<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vc2hhZG93cy5icnVtbS5hZi8=">工具<i class="fa fa-external-link-alt"></i></span>，可让你使用 CSS 轻松创建凉爽且平滑的阴影。你只需定义一些阴影选项，它就会自动为你生成代码。 如果你想在短时间内创建阴影，请使用此工具。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3acf897afb71486fab746bb0f260bd05~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h1 id="6-Get-Waves-——-海浪制造机"><a href="#6-Get-Waves-——-海浪制造机" class="headerlink" title="6. Get Waves —— 海浪制造机"></a>6. <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2V0d2F2ZXMuaW8v">Get Waves<i class="fa fa-external-link-alt"></i></span> —— 海浪制造机</h1><p>这是另一个了不起的工具，它允许你使用 CSS 为你的项目创建 SVG 波形。它使它变得更容易，你只需选择选项，然后该工具就会为你的 wave 设计生成正确的 CSS 代码。 如果这是你想要的，你还可以下载你创建的 SVG 波形。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d812f154e08643adabf22acc924eb007~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>169-vue-react面试专栏</title>
    <url>/20220219/169-vue-react%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>适合初次全面复习的同学，查缺补漏，知识面比较全，复习完成后，再按照本人整理的面试高频题配合复习，使得找工作事半功倍，一定要理解，不要死记硬背，对于一些概念性的和原理的内容要深入理解。</p>
<blockquote>
<p>“你从头读，尽量往下读，直到你一窍不通时，再从头开始，这样坚持往下读，直到你完全读懂为止。”</p>
</blockquote>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="说说你对-Vue-的理解"><a href="#说说你对-Vue-的理解" class="headerlink" title="说说你对 Vue 的理解"></a>说说你对 Vue 的理解</h3><p>Vue 是一个构建数据驱动的渐进性框架，它的目标是通过 API 实现响应数据绑定和视图更新。</p>
<p>优点：<br>1、<code>数据驱动视图</code>，对真实 dom 进行抽象出 virtual dom， 并配合 diff 算法、响应式和观察者、异步队列等手段以最小代价更新 dom，渲染页面<br>2、由于<code>采用虚拟 dom</code>，但让 Vue ssr 先天不足<br>3、<code>生命周期钩子函数</code>，选项式的代码组织方式，写熟了还是蛮顺畅的，但仍然 有优化空间（Vue3 composition-api）<br>4、<code>强大且丰富的 API</code> 提供一系列的 api 能满足业务开发中各类需求<br>5、<code>组件化</code>，组件用单文件的形式进行代码的组织编写，使得我们可以在一个文 件里编写 html\css\js 并且配合 Vue-loader 之后，支持更强大的预处理器等功能<br>6、<code>生态好</code>，社区活跃</p>
<p>缺点：<br>1、由于<code>底层基于 Object.defineProperty 实现响应式</code>，而这个 api 本身不支持 IE8 及以下浏览器<br>2、csr 的先天不足，首屏性能问题（白屏）seo 不友好</p>
<h3 id="使用框架一定比原生的或者-jQuery-好吗？为什么"><a href="#使用框架一定比原生的或者-jQuery-好吗？为什么" class="headerlink" title="使用框架一定比原生的或者 jQuery 好吗？为什么"></a>使用框架一定比原生的或者 jQuery 好吗？为什么</h3><p><strong>使用框架的优点：</strong><br>用户体验会更好<br>开发效率高，成本降低，便于后期维护<br>采用虚拟 DOM 操作，更新性能更高</p>
<p><strong>使用框架的缺点：</strong><br>代码臃肿，使用者使用框架的时候会将整个框架引入，而框架封装了很多功能和组件，使用者必须按照它的规则使用，而实际开发中很多功能和组件是用不到的。<br>前端框架迭代更新太快，需要时间熟悉</p>
<h3 id="浅谈-MVC、MVP、MVVM-架构模式的区别和联系"><a href="#浅谈-MVC、MVP、MVVM-架构模式的区别和联系" class="headerlink" title="浅谈 MVC、MVP、MVVM 架构模式的区别和联系"></a>浅谈 MVC、MVP、MVVM 架构模式的区别和联系</h3><h5 id="一、MVC（Model-View-Controller）"><a href="#一、MVC（Model-View-Controller）" class="headerlink" title="一、MVC（Model-View-Controller）"></a>一、MVC（Model-View-Controller）</h5><p>MVC 全名是 Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，是比较直观的架构模式。</p>
<ul>
<li>Model（模型）：是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据</li>
<li>View（视图）：是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的</li>
<li>Controller（控制器）：是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据</li>
</ul>
<p><strong>MVC 的思想</strong>：一句话描述就是 Controller 负责将 Model 的数据用 View 显示出来。</p>
<h4 id="二、MVP（Model-View-Presenter）"><a href="#二、MVP（Model-View-Presenter）" class="headerlink" title="二、MVP（Model-View-Presenter）"></a>二、MVP（Model-View-Presenter）</h4><p>MVP 是把 MVC 中的 Controller 换成了 Presenter（呈现），<code>目的就是为了完全切断View跟Model之间的联系，由Presenter充当桥梁，做到View-Model之间通信的完全隔离</code>。</p>
<h4 id="三、MVVM（Model-View-ViewModel）"><a href="#三、MVVM（Model-View-ViewModel）" class="headerlink" title="三、MVVM（Model-View-ViewModel）"></a>三、MVVM（Model-View-ViewModel）</h4><p>如果说 MVP 是对 MVC 的进一步改进，那么 MVVM 则是思想的完全变革。<code>它是将“数据模型数据双向绑定”的思想作为核心，因此在View和Model之间没有联系，通过ViewModel进行交互，而且Model和ViewModel之间的交互是双向的，因此视图的数据的变化会同时修改数据源，而数据源数据的变化也会立即反应到View上</code>。</p>
<h4 id="四、MVVM-与-MVC-的区别"><a href="#四、MVVM-与-MVC-的区别" class="headerlink" title="四、MVVM 与 MVC 的区别"></a>四、MVVM 与 MVC 的区别</h4><p>MVVM 与 MVC 最大的区别就是：它实现了 View 和 Model 的自动同步，也就是当 Model 的属性改变时，我们不用再自己手动操作 Dom 元素，来改变 View 的显示，而是改变属性后该属性对应 View 层显示会自动改变（对应 Vue 数据驱动的思想）</p>
<h3 id="简述-MVVM"><a href="#简述-MVVM" class="headerlink" title="简述 MVVM"></a>简述 MVVM</h3><p><strong>什么是 MVVM？</strong></p>
<p><code>视图模型双向绑定</code>，是<code>Model-View-ViewModel</code>的缩写，也就是把<code>MVC</code>中的<code>Controller</code>演变成<code>ViewModel。Model</code>层代表数据模型，<code>View</code>代表 UI 组件，<code>ViewModel</code>是<code>View</code>和<code>Model</code>层的桥梁，数据会绑定到<code>viewModel</code>层并自动将数据渲染到页面中，视图变化的时候会通知<code>viewModel</code>层更新数据。以前是操作 DOM 结构更新视图，现在是<code>数据驱动视图</code>。</p>
<p>ViewModel 层：做了两件事实现数据的双向绑定 一是将 Model 转化成 View，即将后端传递的数据渲染到页面上。实现的方式是：<code>数据绑定</code>。二是将 View 转化成 Model，即将所看到的页面变化转化成后端的数据。实现的方式是：<code>DOM 事件监听</code>。</p>
<blockquote>
<p>注意：Vue 并没有完全遵循 MVVM 的思想 这一点官网自己也有说明</p>
</blockquote>
<p>为什么官方要说 Vue 没有完全遵循 MVVM 思想呢？</p>
<blockquote>
<p>严格的 MVVM 要求 View 不能和 Model 直接通信，而 Vue 提供了$refs 这个属性，让 Model 可以直接操作 View，违反了这一规定，所以说 Vue 没有完全遵循 MVVM。</p>
</blockquote>
<p><strong>MVVM 的优点：</strong></p>
<p>1.<code>低耦合</code>。视图（View）可以独立于 Model 变化和修改，一个 Model 可以绑定到不同的 View 上，当 View 变化的时候 Model 可以不变化，当 Model 变化的时候 View 也可以不变； 2.<code>可重用性</code>。你可以把一些视图逻辑放在一个 Model 里面，让很多 View 重用这段视图逻辑。 3.<code>独立开发</code>。开发人员可以专注于业务逻辑和数据的开发(ViewModel)，设计人员可以专注于页面设计。 4.<code>可测试</code>。</p>
<h3 id="说说-Vue-的-MVVM-实现原理"><a href="#说说-Vue-的-MVVM-实现原理" class="headerlink" title="说说 Vue 的 MVVM 实现原理"></a>说说 Vue 的 MVVM 实现原理</h3><ol>
<li><p>Vue 作为 MVVM 模式的实现库的 2 种技术</p>
<p>a. 模板解析<br>b. 数据绑定</p>
</li>
<li><p>模板解析：实现初始化显示</p>
<p>a. 解析大括号表达式<br>b. 解析指令</p>
</li>
<li><p>数据绑定：实现更新显示</p>
<p>a. 通过数据劫持实现</p>
</li>
</ol>
<p>创建了两种对象 Observer 和 complie，先创建的 Observer，后创建的 complie，observer 是为了监视/劫持 data 中所有层次的属性，同时还为每一种属性创建了另外一种对象 dep，dep 与 data 中的属性一一对应，complie 作用是用来编译模版，初始化界面，调用 update 对象，complie 还为每个表达式创建了对应的 watcher 同时指定了更新节点的回调函数，将 watcher 添加到所有对应的 dep 中。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a8d50844e2e432583bc594698c9418d~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="Vue-底层实现原理"><a href="#Vue-底层实现原理" class="headerlink" title="Vue 底层实现原理"></a>Vue 底层实现原理</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Vue是采用数据劫持结合发布者-订阅者模式的方式，通过<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>define<span class="constructor">Property()</span>来劫持各个属性的setter和getter，在数据变动时发布消息给订阅者，触发相应的监听回调</span><br></pre></td></tr></table></figure>

<p>Vue 是一个典型的 MVVM 框架，模型（Model）只是普通的 javascript 对象，修改它则试图（View）会自动更新。这种设计让状态管理变得非常简单而直观。</p>
<p><strong>Observer（数据监听器）</strong>: Observer 的核心是通过 Object.defineProprtty()来监听数据的变动，这个函数内部可以定义 setter 和 getter，每当数据发生变化，就会触发 setter。这时候 Observer 就要通知订阅者，订阅者就是 Watcher</p>
<p><strong>Watcher（订阅者）</strong>: Watcher 订阅者作为 Observer 和 Compile 之间通信的桥梁，主要做的事情是：</p>
<ol>
<li>在自身实例化时往属性订阅器(dep)里面添加自己</li>
<li>自身必须有一个 update()方法</li>
<li>待属性变动 dep.notice()通知时，能调用自身的 update()方法，并触发 Compile 中绑定的回调</li>
</ol>
<p><strong>Compile（指令解析器）</strong>: Compile 主要做的事情是解析模板指令，将模板中变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加鉴定数据的订阅者，一旦数据有变动，收到通知，更新试图</p>
<h3 id="请描述下响应式原理"><a href="#请描述下响应式原理" class="headerlink" title="请描述下响应式原理"></a>请描述下响应式原理</h3><p>响应式数据原理详解 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTM1MzQ0NjA1NDI0NTE3MTI4">传送门<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>监听 data 变化过程</li>
<li>组件渲染和更新的流程</li>
</ul>
<h3 id="监听-data-变化的核心-API-是什么"><a href="#监听-data-变化的核心-API-是什么" class="headerlink" title="监听 data 变化的核心 API 是什么"></a>监听 data 变化的核心 API 是什么</h3><ul>
<li>Object.defineProperty</li>
<li>以及深度监听、监听数组</li>
<li>有何缺点</li>
</ul>
<h3 id="Vue-如何监听数组变化"><a href="#Vue-如何监听数组变化" class="headerlink" title="Vue 如何监听数组变化"></a>Vue 如何监听数组变化</h3><ul>
<li>Object.defineProperty 不能监听数组变化</li>
<li>重新定义原型，重写 pushpop 等方法，实现监听</li>
<li>Proxy 可以原生支持监听数组变化</li>
</ul>
<h3 id="双向绑定-v-model-实现原理"><a href="#双向绑定-v-model-实现原理" class="headerlink" title="双向绑定 v-model 实现原理"></a>双向绑定 v-model 实现原理</h3><ul>
<li>input 元素的 value = this.name</li>
<li>绑定 input 事件 this.name = $event.target.value</li>
<li>data 更新触发 re-render</li>
</ul>
<p>当一个<strong>Vue</strong>实例创建时，Vue 会遍历 data 选项的属性，用 <strong>Object.defineProperty</strong> 将它们转为 getter/setter 并且在内部追踪相关依赖，在属性被访问和修改时通知变化。每个组件实例都有相应的 watcher 程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。</p>
<h3 id="如何自己实现一个-v-model"><a href="#如何自己实现一个-v-model" class="headerlink" title="如何自己实现一个 v-model"></a>如何自己实现一个 v-model</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;text&#x27; @input=&quot;</span>$<span class="attr">emit</span>(&#x27;<span class="attr">change</span>&#x27;, $<span class="attr">event.</span> <span class="attr">target.value</span>)&quot;/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">注意</span></span><br><span class="line"><span class="comment">第一，上面使用：value而没用v-model</span></span><br><span class="line"><span class="comment">第二，上面的change和model.event 对应起来即可，名字自己改</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">model</span>:&#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">prop</span>: <span class="string">&#x27;text&#x27;</span>, <span class="comment">// 对应到props text</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">event</span>: <span class="string">&#x27;change&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">text</span>: <span class="built_in">String</span></span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">default</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 --&gt;</span></span><br><span class="line">&#123;&#123;name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">Components</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">Components</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Vue-模板编译原理"><a href="#Vue-模板编译原理" class="headerlink" title="Vue 模板编译原理"></a>Vue 模板编译原理</h3><p>Vue 的编译过程就是将 template 转化为 render 函数的过程 分为以下三步</p>
<ol>
<li>将 模板字符串 转换成 element ASTs（解析器）</li>
<li>对 AST 进行静态节点标记，主要用来做虚拟 DOM 的渲染优化（优化器）</li>
<li>使用 element ASTs 生成 render 函数代码字符串（代码生成器）</li>
</ol>
<p>模板编译原理详解 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTM2MDI0NTMwMDE2MDEwMjc2">传送门<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Vue-组件渲染和更新过程"><a href="#Vue-组件渲染和更新过程" class="headerlink" title="Vue 组件渲染和更新过程"></a>Vue 组件渲染和更新过程</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bb096d0622b42809b1841031af29ced~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<ul>
<li>初始化渲染过程：<ul>
<li>解析模板为 render 函数（或在开发环境已完成，vue-loader）</li>
<li>触发响应式，监听 data 属性 getter setter，并作为依赖被 watch 观察起来</li>
<li>执行 render 函数，生成 vnode，进行 patch（elem，vnode）</li>
</ul>
</li>
<li>更新过程：<ul>
<li>修改 data，触发 setter（此前在 getter 中已被监听）通过 notify 在属性被访问和修改时通知变化 watch，每个组件实例都有相应的 watcher 程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，重新执行 render 函数。</li>
<li>重新执行 render 函数，生成 newVnode</li>
<li>patch(vnode, newVnode)</li>
</ul>
</li>
<li>异步渲染：</li>
</ul>
<h3 id="怎样理解-Vue-的单向数据流"><a href="#怎样理解-Vue-的单向数据流" class="headerlink" title="怎样理解 Vue 的单向数据流"></a>怎样理解 Vue 的单向数据流</h3><p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p>
<blockquote>
<p>注意：在子组件直接用 v-model 绑定父组件传过来的 prop 这样是不规范的写法 开发环境会报警告</p>
</blockquote>
<p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改。</p>
<h3 id="Vue-事件绑定原理"><a href="#Vue-事件绑定原理" class="headerlink" title="Vue 事件绑定原理"></a>Vue 事件绑定原理</h3><p>原生事件绑定是通过 addEventListener 绑定给真实元素的，组件事件绑定是通过 Vue 自定义的$on 实现的。如果要在组件上使用原生事件，需要加.native 修饰符，这样就相当于在父组件中把子组件当做普通 html 标签，然后加上原生事件。</p>
<p>on、on、on、emit 是基于发布订阅模式的，维护一个事件中心，on 的时候将事件按名称存在事件中心里，称之为订阅者，然后 emit 将对应的事件进行发布，去执行事件中心里的对应的监听器</p>
<p>手写发布订阅原理 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTUzNDM3NzAwMTAzI2hlYWRpbmctMg==">传送门<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="说说你对-vue-虚拟-DOM-的理解"><a href="#说说你对-vue-虚拟-DOM-的理解" class="headerlink" title="说说你对 vue 虚拟 DOM 的理解"></a>说说你对 vue 虚拟 DOM 的理解</h3><p><strong>一、什么是 vdom？</strong></p>
<p>虚拟 Dom 的产生是<code>为减小浏览器频繁的操作 DOM，所产生的性能问题</code>。Vue2 的 Virtual DOM 借鉴了<code>开源库 snabbdom</code> 的实现。Virtual DOM 本质就是用一个原生的 JS 对象去描述一个 DOM 节点，是对真实 DOM 的一层抽象。</p>
<p>Virtual DOM 是用 JS 对象来模拟真实 DOM 结构，然后用 JS 对象树构建真实的 DOM 树。当状态变更时，重新构建一棵新的对象树，然后新旧树通过 diff 算法进行比较，若存在差异则将差异应用到所构建的真正的树上，视图就更新了。这个比较过程，由原来的查询真实 DOM 树变成查找 js 对象属性，性能开销小了，效率也就高了。Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。</p>
<p><strong>二、为何要用 vdom？</strong></p>
<p>虚拟 dom 是为了解决浏览器操作真实 dom 带来的性能问题而出现的，将 DOM 操作放在 JS 层，在内存中操作 JS 对象可提高效率。</p>
<p><strong>三、vdom 核心函数有哪些</strong></p>
<p>核心函数：<br>h(‘标签名’, {…属性名…}, […子元素…])<br>h(‘标签名’, {…属性名…}, ‘………’)<br>patch(container, vnode)<br>patch(vnode, newVnode)</p>
<p><strong>四、优点：</strong></p>
<ol>
<li><code>保证性能下限</code>： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，即保证性能的下限；</li>
<li><code>无需手动操作 DOM</code>： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；</li>
<li><code>跨平台</code>： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。</li>
</ol>
<p><strong>五、缺点:</strong></p>
<ol>
<li><code>无法进行极致优化</code>： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</li>
<li><code>首屏白屏</code>。首次渲染大量 DOM 时，由于多了一层虚拟 DOM 的计算，会比 innerHTML 插入慢。</li>
<li><code>SEO不友好</code></li>
</ol>
<h3 id="请用-vnode-描述一个-DOM-结构"><a href="#请用-vnode-描述一个-DOM-结构" class="headerlink" title="请用 vnode 描述一个 DOM 结构"></a>请用 vnode 描述一个 DOM 结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span></span></span><br><span class="line"><span class="tag">    &lt;<span class="attr">p</span>&gt;</span>vdom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;font-size:20px&quot;</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Vnode 结构如下： tag、props、children</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    tag:&#x27;div&#x27;,</span><br><span class="line">    props:&#123;</span><br><span class="line">        className:&#x27;container&#x27;,</span><br><span class="line">        id:&#x27;div1&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">    &#123;</span><br><span class="line">        tag: &#x27;p&#x27;,</span><br><span class="line">        children: &#x27;vdom&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        tag:&#x27;ul&#x27;,</span><br><span class="line">        props: &#123; style:&#x27;font-size:<span class="number">20</span>px&#x27;&#125;,</span><br><span class="line">        children:[</span><br><span class="line">            &#123;</span><br><span class="line">                tag: &#x27;li&#x27;</span><br><span class="line">                children: &#x27;a&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="你怎么理解-Vue-中的-diff-算法"><a href="#你怎么理解-Vue-中的-diff-算法" class="headerlink" title="你怎么理解 Vue 中的 diff 算法?"></a>你怎么理解 Vue 中的 diff 算法?</h3><p>简述 diff 算法过程</p>
<ul>
<li>patch（elem，vnode）和 patch（vnode，newVnode）</li>
<li>patchVnode 和 addVnodes 和 removeVnodes</li>
<li>updateChildren （ key 的重要性）</li>
</ul>
<p>在 js 中,渲染真实<code>DOM</code>的开销是非常大的, 比如我们修改了某个数据,如果直接渲染到真实 DOM, 会引起整个<code>dom树的重绘和重排</code>。那么有没有可能实现只更新我们修改的那一小块 dom 而不要更新整个<code>dom</code>呢？此时我们就需要先根据真实<code>dom</code>生成虚拟<code>dom</code>， 当虚拟<code>dom</code>某个节点的数据改变后会生成有一个新的<code>Vnode</code>, 然后新的<code>Vnode</code>和旧的<code>Vnode</code>作比较，发现有不一样的地方就直接修改在真实 DOM 上，然后使旧的<code>Vnode</code>的值为新的<code>Vnode</code>。</p>
<p>注意：在<code>采取diff算法比较的时候，只会在同层级进行，不会跨层级比较</code>。 当数据发生改变时，set 方法会让调用 Dep.notify()方法通知所有订阅者 Watcher，订阅者就会调用 patch 函数给真实的 DOM 打补丁，更新响应的试图。</p>
<p><strong>Diff 对比流程</strong></p>
<p>当数据改变时，会触发<code>setter</code>，并且通过<code>Dep.notify</code>去通知所有<code>订阅者Watcher</code>，订阅者们就会调用<code>patch方法</code>，给真实 DOM 打补丁，更新相应的视图。</p>
<p><strong>Diff 对比的过程</strong></p>
<p>就是调用<code>patch</code>函数，比较新旧节点，一边比较一边给真实的<code>DOM</code>打补丁。在采取<code>diff</code>算法比较新旧节点的时候，比较只会在同层级进行。 在<code>patch</code>方法中，首先进行树级别的比较, <code>new Vnode</code>不存在就删除 <code>old Vnode</code>, <code>old Vnode</code> 不存在就增加新的<code>Vnode</code>, 都存在就执行 diff 更新,当确定需要执行 diff 算法时，比较两个<code>Vnode</code>，包括三种类型操作：属性更新，文本更新，子节点更新。新老节点均有子节点，则对子节点进行<code>diff</code>操作，调用<code>updatechidren</code> ，如果老节点没有子节点而新节点有子节点，先清空老节点的文本内容，然后为其新增子节点 如果新节点没有子节点，而老节点有子节点的时候，则移除该节点的所有子节点，老新老节点都没有子节点的时候，进行文本的替换</p>
<p><strong>updateChildren</strong> 是<code>patchVnode</code>里最重要的一个方法，新旧虚拟节点的子节点对比，就是发生在<code>updateChildren方法</code>中，采用的是<code>首尾指针法</code>。将<code>Vnode</code>的子节点 Vch 和 oldVnode 的子节点 oldCh 提取出来。 <code>oldCh和vCh</code>各有两个头尾的变量<code>StartIdx和EndIdx</code>，它们的 2 个变量相互比较，一共有 4 种比较方式。如果 4 种比较都没匹配，如果设置了<code>key</code>，就会用<code>key</code>进行比较，在比较的过程中，变量会往中间靠，一旦<code>StartIdx&gt;EndIdx</code>表明<code>oldCh和vCh</code>至少有一个已经遍历完了，就会结束比较。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk0OTU5OTk4MjgzOTA3MTAy">Vue 的 diff 算法传送门<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Vue-的数据为什么频繁变化但只会更新一次"><a href="#Vue-的数据为什么频繁变化但只会更新一次" class="headerlink" title="Vue 的数据为什么频繁变化但只会更新一次"></a>Vue 的数据为什么频繁变化但只会更新一次</h3><p>Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 <code>Promise.then</code> 和 <code>MessageChannel</code>，如果执行环境不支持，会采用 setTimeout(fn, 0) 代替。</p>
<p>另外，关于<code>waiting</code>变量，这是很重要的一个标志位，它保证<code>flushSchedulerQueue</code>回调（$nextTick 中执行）允许被置入<code>callbacks</code>一次。</p>
<p>因为 Vue 的事件机制是通过事件队列来调度执行，会等主进程执行空闲后进行调度，所以先会去等待所有的同步代码执行完成之后再去一次更新。这样的性能优势很明显，比如：</p>
<p>现在有这样的一种情况，<code>mounted</code>的时候<code>test</code>的值会被循环执行++1000 次。 每次++时，都会根据响应式触发<code>setter-&gt;Dep-&gt;Watcher-&gt;update-&gt;run</code>。 如果这时候没有异步更新视图，那么每次++都会直接操作 DOM 更新视图，这是非常消耗性能的。 所以 Vue 实现了一个 queue 队列，在下一个 tick（或者是当前 tick 的微任务阶段）统一执行 queue 中 Watcher 的 run。同时，拥有相同 id 的 Watcher 不会被重复加入到该 queue 中去，所以不会执行 1000 次 Watcher 的 run。最终更新视图只会直接将 test 对的 DOM 的 0 变成 1000。 保证更新视图操作 DOM 的动作是在当前栈执行完以后下一个 tick（或者是当前 tick 的微任务阶段）的时候调用，大大优化了性能。</p>
<p>执行顺序<code>update -&gt; queueWatcher -&gt; 维护观察者队列（重复id的Watcher处理） -&gt; waiting标志位处理（保证需要更新DOM或者Watcher视图更新的方法flushSchedulerQueue只会被推入异步执行的$nextTick回调数组一次） -&gt; 处理$nextTick（在为微任务或者宏任务中异步更新DOM）-&gt;</code></p>
<ul>
<li>Vue 是异步更新 Dom 的，Dom 的更新放在下一个宏任务或者当前宏任务的末尾（微任务）中进行执行</li>
</ul>
<p>由于 VUE 的数据驱动视图更新是异步的，即修改数据的当下，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。在同一事件循环中的数据变化后，DOM 完成更新，立即执行<code>nextTick(callback)</code>内的回调。</p>
<p>vue 和 react 一样，对 dom 的修改都是异步的。它会在队列里记录你对 dom 的操作并进行 diff 操作，后一个操作会覆盖前一个，然后更新 dom。</p>
<h3 id="函数式组件使用场景和原理"><a href="#函数式组件使用场景和原理" class="headerlink" title="函数式组件使用场景和原理"></a>函数式组件使用场景和原理</h3><p><strong>函数式组件与普通组件的区别：</strong></p>
<p>1.函数式组件需要在声明组件是指定 functional:true 2.不需要实例化，所以没有 this,this 通过 render 函数的第二个参数 context 来代替 3.没有生命周期钩子函数，不能使用计算属性，watch 4.不能通过<code>$emit</code> 对外暴露事件，调用事件只能通过 context.listeners.click 的方式调用外部传入的事件 5.因为函数式组件是没有实例化的，所以在外部通过 ref 去引用组件时，实际引用的是 HTMLElement 6.函数式组件的 props 可以不用显示声明，所以没有在 props 里面声明的属性都会被自动隐式解析为 prop,而普通组件所有未声明的属性都解析到<code>$attrs</code>里面，并自动挂载到组件根元素上面(可以通过 inheritAttrs 属性禁止)</p>
<p><strong>优点：</strong></p>
<p>1.由于函数式组件不需要实例化，无状态，没有生命周期，所以渲染性能要好于普通组件 2.函数式组件结构比较简单，代码结构更清晰</p>
<p><strong>使用场景：</strong></p>
<p>一个简单的展示组件，作为容器组件使用 比如 router-view 就是一个函数式组件 “高阶组件”——用于接收一个组件作为参数，返回一个被包装过的组件</p>
<h3 id="导航钩子有哪些？它们有哪些参数"><a href="#导航钩子有哪些？它们有哪些参数" class="headerlink" title="导航钩子有哪些？它们有哪些参数"></a>导航钩子有哪些？它们有哪些参数</h3><p>导航钩子翻译过来就是路由的生命周期函数(vue-router) 他其实主要分为两种全局和局部</p>
<p>全局的钩子函数<br>beforeEach：在路由切换开始时调用<br>afterEach：在路由切换离开是调用</p>
<p>局部到单个路由 beforeEnter</p>
<p>组件的钩子函数<br>beforeRouterEnter,<br>beforeRouterUpdate,<br>beforeRouterLeave</p>
<p>to：即将进入的目标对象<br>from：当前导航要高开的导航对象<br>next：是一个函数调用 resolve 执行下一步</p>
<h3 id="谈谈对-vue-生命周期的理解及每个阶段做的事？"><a href="#谈谈对-vue-生命周期的理解及每个阶段做的事？" class="headerlink" title="谈谈对 vue 生命周期的理解及每个阶段做的事？"></a>谈谈对 vue 生命周期的理解及每个阶段做的事？</h3><p>每个<code>Vue</code>实例在创建时都会经过一系列的初始化过程，<code>vue</code>的生命周期钩子，就是说在达到某一阶段或条件时去触发的函数，目的就是为了完成一些动作或者事件</p>
<ul>
<li><code>create阶段</code>：vue 实例被创建<br><code>beforeCreate</code>: 创建前，此时 data 和 methods 中的数据都还没有初始化<br><code>created</code>： 创建完毕，data 中有值，属性和方法的运算，初始化事件，$el 属性还没有显示出来，未挂载,。</li>
<li><code>mount阶段</code>： vue 实例被挂载到真实 DOM 节点<br><code>beforeMount</code>：可以发起服务端请求，去数据，在挂载开始之前被调用，相关的 render 函数首次被调用。实例已完成以下的配置:编译模板，把 data 里面的数据和模板生成 html。此时还没有挂载 html 到页面上。<br><code>mounted</code>: 此时可以操作 DOM，在 el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置:用上面编译好的 html 内容替换 el 属性指向的 DOM 对象。完成模板中的 html 渲染到 html 页面中。此过程中进行 ajax 交互。</li>
<li><code>update阶段</code>：当 vue 实例里面的 data 数据变化时，触发组件的重新渲染<br><code>beforeUpdate</code> :更新前，在数据更新之前调用，发生在虚拟 DOM 重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。<br><code>updated</code>：更新后，在由于数据更改导致的虚拟 DOM 重新渲染和打补丁之后调用。调用时，组件 DOM 已经更新，所以可以执行依赖于 DOM 的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</li>
<li><code>destroy阶段</code>：vue 实例被销毁<br><code>beforeDestroy</code>：在实例销毁之前调用。此时可以手动销毁一些方法，实例仍然完全可用。<br><code>destroyed</code>:销毁后，在实例销毁之后调用。调用后，所有的时间监听器都会被溢出，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</li>
</ul>
<h4 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h4><p>生命周期（父子组件） 父组件 beforeCreate –&gt; 父组件 created –&gt; 父组件 beforeMount –&gt; 子组件 beforeCreate –&gt; 子组件 created –&gt; 子组件 beforeMount –&gt; 子组件 mounted –&gt; 父组件 mounted –&gt;父组件 beforeUpdate –&gt;子组件 beforeDestroy–&gt; 子组件 destroyed –&gt; 父组件 updated</p>
<p><strong>加载渲染过程</strong> 父 beforeCreate-&gt;父 created-&gt;父 beforeMount-&gt;子 beforeCreate-&gt;子 created-&gt;子 beforeMount-&gt;子 mounted-&gt;父 mounted</p>
<p><strong>挂载阶段</strong> 父 created-&gt;子 created-&gt;子 mounted-&gt;父 mounted</p>
<p><strong>父组件更新阶段</strong> 父 beforeUpdate-&gt;父 updated</p>
<p><strong>子组件更新阶段</strong> 父 beforeUpdate-&gt;子 beforeUpdate-&gt;子 updated-&gt;父 updated</p>
<p><strong>销毁阶段</strong> 父 beforeDestroy-&gt;子 beforeDestroy-&gt;子 destroyed-&gt;父 destroyed</p>
<h3 id="何时需要使用-beforeDestory"><a href="#何时需要使用-beforeDestory" class="headerlink" title="何时需要使用 beforeDestory"></a>何时需要使用 beforeDestory</h3><ul>
<li>解绑自定义事件 event.$off</li>
<li>清除定时器</li>
<li>解绑自定义的 DOM 事件，如 window scroll 等</li>
</ul>
<h3 id="组件中的-data-为什么是一个函数？"><a href="#组件中的-data-为什么是一个函数？" class="headerlink" title="组件中的 data 为什么是一个函数？"></a>组件中的 data 为什么是一个函数？</h3><ol>
<li>一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。这样每复用一次组件，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。</li>
<li>如果 data 是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间 data 不冲突，data 必须是一个函数。</li>
</ol>
<h3 id="computed-和-watch-的区别和运用的场景？"><a href="#computed-和-watch-的区别和运用的场景？" class="headerlink" title="computed 和 watch 的区别和运用的场景？"></a>computed 和 watch 的区别和运用的场景？</h3><p>通俗来讲，既能用 computed 实现又可以用 watch 监听来实现的功能，推荐用 computed， 重点在于 computed 的缓存功能。</p>
<p><strong>computed：</strong> 是计算属性，是用来声明式的描述一个值依赖了其它的属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；<code>computed</code>中的函数必须用<code>return</code>返回最终的结果，它可以设置 getter 和 setter。</p>
<p><strong>watch：</strong> 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作； watch 监听的是已经在 data 中定义的变量，当该变量变化时，会触发 watch 中的方法。</p>
<p><strong>运用场景：</strong></p>
<ul>
<li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；例：购物车商品结算功能</li>
<li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。当一条数据影响多条数据的时候使用，例：搜索数据</li>
</ul>
<h3 id="Watch-的运行原理"><a href="#Watch-的运行原理" class="headerlink" title="Watch 的运行原理"></a>Watch 的运行原理</h3><h3 id="ajax-请求应该放在哪个生命周期"><a href="#ajax-请求应该放在哪个生命周期" class="headerlink" title="ajax 请求应该放在哪个生命周期"></a>ajax 请求应该放在哪个生命周期</h3><ul>
<li>mounted</li>
<li>JS 是单线程的，ajax 异步获取数据</li>
<li>放在 mounted 之前没有用，只会让逻辑更加混乱</li>
</ul>
<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul>
<li>v-if：判断是否隐藏；</li>
<li>v-for：数据循环出来；</li>
<li>v-bind:class：绑定一个属性；</li>
<li>v-model：实现双向绑定</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c0176b2c3d543af923576b19e09c535~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<h3 id="v-model-是什么？有什么用呢？"><a href="#v-model-是什么？有什么用呢？" class="headerlink" title="v-model 是什么？有什么用呢？"></a>v-model 是什么？有什么用呢？</h3><p>v-model 只是语法糖而已，v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件。相当于 v-bind:value=”xxx” 和 @input，意思是绑定了一个 value 属性的值， 子组件可对 value 属性监听，通过$emit(‘input’, xxx)的方式给父组件通讯。自己实现 v-model 方式的组件也是这样的思路。</p>
<ul>
<li>text 和 textarea 元素使用 value property 和 input 事件；</li>
<li>checkbox 和 radio 使用 checked property 和 change 事件；</li>
<li>select 字段将 value 作为 prop 并将 change 作为事件。</li>
</ul>
<h3 id="Vue-修饰符有哪些"><a href="#Vue-修饰符有哪些" class="headerlink" title="Vue 修饰符有哪些"></a>Vue 修饰符有哪些</h3><p><strong>事件修饰符</strong></p>
<ul>
<li>.stop 阻止事件继续传播</li>
<li>.prevent 阻止标签默认行为</li>
<li>.capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理</li>
<li>.self 只当在 event.target 是当前元素自身时触发处理函数</li>
<li>.once 事件将只会触发一次</li>
<li>.passive 告诉浏览器你不想阻止事件的默认行为</li>
</ul>
<p><strong>v-model 的修饰符</strong></p>
<ul>
<li>.lazy 通过这个修饰符，转变为在 change 事件再同步</li>
<li>.number 自动将用户的输入值转化为数值类型</li>
<li>.trim 自动过滤用户输入的首尾空格</li>
</ul>
<h3 id="vue-loader-解释下"><a href="#vue-loader-解释下" class="headerlink" title="vue-loader 解释下"></a>vue-loader 解释下</h3><p>vue-loader 就是一个加载器，能把 vue 组件转化成 javascript 模块 为什么要转译 vue 组件？ 可以动态的渲染一些数据，对三个标签 template(结构)、style(表现)、script(行为)都做了优化，script 中可以直接使用 es6 style 也默认可以使用 sass 并且还给你提供作用域的选择，另外开发阶段还给你提供热加载 还可以如下使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">src</span>=<span class="string">&quot;../hello.vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-show-和-v-if-的区别"><a href="#v-show-和-v-if-的区别" class="headerlink" title="v-show 和 v-if 的区别"></a>v-show 和 v-if 的区别</h3><ul>
<li>v-show 通过 CSS display 控制显示和隐藏</li>
<li>v-if 组件真正的渲染和销毁，而不是显示和隐藏</li>
<li>频繁切换显示状态用 v-show，否则用 v-if</li>
</ul>
<h3 id="为什么-v-for-和-v-if-不建议用在一起"><a href="#为什么-v-for-和-v-if-不建议用在一起" class="headerlink" title="为什么 v-for 和 v-if 不建议用在一起"></a>为什么 v-for 和 v-if 不建议用在一起</h3><p>1.当 v-for 和 v-if 处于同一个节点时，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。如果要遍历的数组很大，而真正要展示的数据很少时，这将造成很大的性能浪费 2.这种场景建议使用 computed，先对数据进行过滤</p>
<h3 id="v-for-中-key-的作用"><a href="#v-for-中-key-的作用" class="headerlink" title="v-for 中 key 的作用"></a>v-for 中 key 的作用</h3><ul>
<li><p>必须用 key，且不能是 index 和 random</p>
</li>
<li><p>当 Vue.js 用 <code>v-for</code> 更新已渲染过的元素列表时，它默认用“<code>就地复用</code>”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。重复的 key 会造成渲染错误。</p>
</li>
<li><p><code>减少渲染次数，提升渲染性能。key</code>的作用主要是为了让 vue 可以区分元素，更高效的对比更新虚拟 DOM;</p>
</li>
<li><p>diff 算法中通过 tag 和 key 来判断，是否是 sameNode。从源码中可以知道，Vue 在</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">patch</span></span><br></pre></td></tr></table></figure>

<p>过程中判断两个节点是否是相同节点时主要判断两者的 key 和元素类型等，因此 key 是一个必要条件，如果不设置 key，它的值就是</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<p>，则可能永远认为这是两个是同一个节点，只能去做更新操作，这导致了频繁更新元素，使得整个</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">patch</span></span><br></pre></td></tr></table></figure>

<p>过程比较低效，影响性能;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 咱们来看看sameVnode方法的核心原理代码，就一目了然了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameVnode</span>(<span class="params">oldVnode, newVnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    oldVnode.key === newVnode.key &amp;&amp; <span class="comment">// key值是否一样</span></span><br><span class="line">    oldVnode.tagName === newVnode.tagName &amp;&amp; <span class="comment">// 标签名是否一样</span></span><br><span class="line">    oldVnode.isComment === newVnode.isComment &amp;&amp; <span class="comment">// 是否都为注释节点</span></span><br><span class="line">    isDef(oldVnode.data) === isDef(newVnode.data) &amp;&amp; <span class="comment">// 是否都定义了data</span></span><br><span class="line">    sameInputType(oldVnode, newVnode) <span class="comment">// 当标签为input时，type必须是否相同</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="vue-组件的通信-通讯方式"><a href="#vue-组件的通信-通讯方式" class="headerlink" title="vue 组件的通信/通讯方式"></a>vue 组件的通信/通讯方式</h3><ul>
<li><p>父子组件通信</p>
<p>父-&gt;子<code>props</code>，子-&gt;父 <code> $on、$emit</code>；或者使用自定义事件 <code>event.$on、event.$off、event.$emit</code>； 获取父子组件实例 <code>parent、children</code> <code>Ref </code> 获取实例的方式调用组件的属性或者方法 父-&gt;子孙 <code>Provide、inject</code> 官方不推荐使用，但是写组件库时很常用</p>
</li>
<li><p>兄弟组件通信</p>
<p><code>Event Bus</code> 实现跨组件通信 <code>Vue.prototype.$bus = new Vue()</code> 自定义事件</p>
</li>
<li><p>跨级组件通信</p>
<p><code>Vuex</code>、<code>$attrs、$listeners Provide、inject</code></p>
</li>
</ul>
<h3 id="v-model-的实现以及它的实现原理吗？"><a href="#v-model-的实现以及它的实现原理吗？" class="headerlink" title="v-model 的实现以及它的实现原理吗？"></a>v-model 的实现以及它的实现原理吗？</h3><ol>
<li><code>vue</code>中双向绑定是一个指令<code>v-model</code>，可以绑定一个动态值到视图，同时视图中变化能改变该值。<code>v-model</code>是语法糖，默认情况下相于:<code>value和@input</code>。</li>
<li>使用<code>v-model</code>可以减少大量繁琐的事件处理代码，提高开发效率，代码可读性也更好</li>
<li>通常在表单项上使用<code>v-model</code></li>
<li>原生的表单项可以直接使用<code>v-model</code>，自定义组件上如果要使用它需要在组件内绑定 value 并处理输入事件</li>
<li>我做过测试，输出包含<code>v-model</code>模板的组件渲染函数，发现它会被转换为 value 属性的绑定以及一个事件监听，事件回调函数中会做相应变量更新操作，这说明神奇魔法实际上是 vue 的编译器完成的。</li>
</ol>
<h3 id="nextTick-的实现"><a href="#nextTick-的实现" class="headerlink" title="nextTick 的实现"></a>nextTick 的实现</h3><ol>
<li><code>nextTick</code>是<code>Vue</code>提供的一个全局<code>API</code>,是在下次<code>DOM</code>更新循环结束之后执行延迟回调，在修改数据之后使用<code>$nextTick</code>，则可以在回调中获取更新后的<code>DOM</code>；</li>
<li>Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，<code>Vue</code>将开启 1 个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个<code>watcher</code>被多次触发，只会被推入到队列中-次。这种在缓冲时去除重复数据对于避免不必要的计算和<code>DOM</code>操作是非常重要的。<code>nextTick</code>方法会在队列中加入一个回调函数，确保该函数在前面的 dom 操作完成后才调用；</li>
<li>比如，我在干什么的时候就会使用 nextTick，传一个回调函数进去，在里面执行 dom 操作即可；</li>
<li>我也有简单了解<code>nextTick</code>实现，它会在<code>callbacks</code>里面加入我们传入的函数，然后用<code>timerFunc</code>异步方式调用它们，首选的异步方式会是<code>Promise</code>。这让我明白了为什么可以在<code>nextTick</code>中看到<code>dom</code>操作结果。</li>
</ol>
<h3 id="nextTick-的实现原理是什么？"><a href="#nextTick-的实现原理是什么？" class="headerlink" title="nextTick 的实现原理是什么？"></a>nextTick 的实现原理是什么？</h3><p>在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用 nextTick 来获取更新后的 DOM。<code>思路就是采用微任务优先的方式调用异步方法去执行 nextTick 包装的方法。主要使用了宏任务和微任务</code>。根据执行环境分别尝试采用 Promise、MutationObserver、setImmediate，如果以上都不行则采用 setTimeout 定义了一个异步方法，多次调用 nextTick 会将方法存入队列中，通过这个异步方法清空当前队列。</p>
<h3 id="使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽"><a href="#使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽" class="headerlink" title="使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽"></a>使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽</h3><p>vue 中的插槽是一个非常好用的东西 slot 说白了就是一个占位的 在 vue 当中插槽包含三种一种是默认插槽（匿名）一种是具名插槽还有一种就是作用域插槽 匿名插槽就是没有名字的只要默认的都填到这里具名插槽指的是具有名字的</p>
<h3 id="keep-alive-的实现"><a href="#keep-alive-的实现" class="headerlink" title="keep-alive 的实现"></a>keep-alive 的实现</h3><p>keep-alive 是 Vue 内置的一个组件，可以实现组件缓存，当组件切换时不会对当前组件进行卸载。</p>
<ul>
<li>常用的两个属性 include/exclude，允许组件有条件的进行缓存。</li>
<li>两个生命周期 activated/deactivated，用来得知当前组件是否处于活跃状态。</li>
<li>keep-alive 的中还运用了 LRU(最近最少使用) 算法，选择最近最久未使用的组件予以淘汰。</li>
</ul>
<p>作用：实现组件缓存，不需要重复渲染 ,保持这些组件的状态，以避免反复渲染导致的性能问题。</p>
<p>什么时候使用：缓存组件，不需要重复渲染。如有多个静态 Tab 页的切换。优化性能的时候。</p>
<p>场景：tabs 标签页 后台导航，vue 性能优化</p>
<p>原理：<code>Vue.js</code>内部将<code>DOM</code>节点抽象成了一个个的<code>VNode</code>节点，<code>keep-alive</code>组件的缓存也是基于<code>VNode</code>节点的而不是直接存储<code>DOM</code>结构。它将满足条件<code>（pruneCache与pruneCache）</code>的组件在<code>cache</code>对象中缓存起来，在需要重新渲染的时候再将<code>vnode</code>节点从<code>cache</code>对象中取出并渲染。</p>
<h3 id="多个组件有相同的逻辑，如何抽离？mixin"><a href="#多个组件有相同的逻辑，如何抽离？mixin" class="headerlink" title="多个组件有相同的逻辑，如何抽离？mixin"></a>多个组件有相同的逻辑，如何抽离？mixin</h3><p>在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立，可以通过 Vue 的 mixin 功能<code>抽离公共的业务逻辑</code>，原理类似“对象的继承”，当组件初始化时会调用 mergeOptions 方法进行合并，采用策略模式针对不同的属性进行合并。当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</p>
<p>mixin 项目变得复杂的时候，多个组件间有重复的逻辑就可以用 mixin 抽离出来</p>
<p>mixin 并不是完美的解决方案，会有一些问题,<code>vue3 提出的 Composition API</code>旨在解决这些问题【追求完美是要消耗一定的成本的，如开发成本】</p>
<p>场景：PC 端新闻列表和详情页一样的右侧栏目，可以使用 mixin 进行混合</p>
<p>劣势： 1.变量来源不明确，不利于阅读 2.多 mixin 可能会造成命名冲突<br>3.mixin 和组件可能出现多对多的关系，使得项目复杂度变高</p>
<h3 id="何时要使用异步组件？"><a href="#何时要使用异步组件？" class="headerlink" title="何时要使用异步组件？"></a>何时要使用异步组件？</h3><ul>
<li>加载大组件的时候</li>
<li>路由异步加载的时候</li>
</ul>
<h3 id="Vuex-的理解及使用场景"><a href="#Vuex-的理解及使用场景" class="headerlink" title="Vuex 的理解及使用场景"></a>Vuex 的理解及使用场景</h3><p>Vuex 是一个专为 Vue 应用程序开发的状态管理模式。主要是为了解决组件间状态共享的问题，强调的是数据的集中式管理，每一个 Vuex 应用的核心就是 store（仓库）。用于多个组件中数据共享、数据缓存等。（无法持久化、内部核心原理是通过创造一个全局实例 new Vue）</p>
<ol>
<li><code>Vuex 的状态存储是响应式的</code>；当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新</li>
<li><code>改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation</code>，这样使得我们可以方便地跟踪每一个状态的变化</li>
</ol>
<p>Vuex 主要包括以下几个核心模块：</p>
<ol>
<li><code>State</code>：定义了应用的状态数据</li>
<li><code>Getter</code>：在 store 中定义“getter”（可以认为是 store 的计算属性），就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算</li>
<li><code>Mutation</code>：是唯一更改 store 中状态的方法，且必须是同步函数</li>
<li><code>Action</code>：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作</li>
<li><code>Module</code>：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03b13210426f4a1a9522ae7381ed7992~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="Vuex-管理状态的机制"><a href="#Vuex-管理状态的机制" class="headerlink" title="Vuex 管理状态的机制"></a>Vuex 管理状态的机制</h3><p>集中式管理 vue 多个组件共享的状态和从后台获取的数据 states 帮助组件管理状态的，基于 state 的还有一个计算属性数据 getters，getters 是从 state 中读取数据并计算的，他们两个的数据都是给组件去读，组件中读取 state 状态数据使用 store.state 或 mapState(),读取计算属性数据也有两个方法是 store.state 或 mapState(),读取计算属性数据也有两个方法是 store.state 或 mapState(),读取计算属性数据也有两个方法是 store.getters 和 mapGetters()；更新状态数据涉及到 actions 和 mutations，通过$store.dispatch 或 mapAction()触发 action 的调用,然后 actions 会通过 commit()触发 mutations 调用，mutations 则直接更新状态；actions 还可以同后台 API 进行双向通信。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2f2b132bed14d9db214edc36ef426a4~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<h3 id="为什么-Vuex-的-mutation-中不能做异步操作？"><a href="#为什么-Vuex-的-mutation-中不能做异步操作？" class="headerlink" title="为什么 Vuex 的 mutation 中不能做异步操作？"></a>为什么 Vuex 的 mutation 中不能做异步操作？</h3><p>Vuex 中所有的状态更新的唯一途径都是 mutation，同步操作通过 Action 来提交 mutation 实现，这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。 如果 mutation 支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。</p>
<h3 id="Vuex-中-action-和-mutation-有何区别"><a href="#Vuex-中-action-和-mutation-有何区别" class="headerlink" title="Vuex 中 action 和 mutation 有何区别"></a>Vuex 中 action 和 mutation 有何区别</h3><ul>
<li>action 中处理异步，mutation 不可以</li>
<li>mutation 做原子操作</li>
<li>action 可以整合多个 mutation</li>
</ul>
<h3 id="Vuex-页面刷新数据丢失怎么解决"><a href="#Vuex-页面刷新数据丢失怎么解决" class="headerlink" title="Vuex 页面刷新数据丢失怎么解决"></a>Vuex 页面刷新数据丢失怎么解决</h3><p>需要做 vuex 数据持久化 一般使用本地存储的方案来保存数据 可以自己设计存储方案 也可以使用第三方插件</p>
<p>推荐使用 vuex-persist 插件，它就是为 Vuex 持久化存储而生的一个插件。不需要你手动存取 storage ，而是直接将状态保存至 cookie 或者 localStorage 中。</p>
<h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>“单向数据流”理念的极简示意：</p>
<ul>
<li>state：驱动应用的数据源。</li>
<li>view：以声明方式将 state 映射到视图 。</li>
<li>actions：响应在 view 上的用户输入导致的状态变化</li>
</ul>
<h4 id="单向数据流过程："><a href="#单向数据流过程：" class="headerlink" title="单向数据流过程："></a>单向数据流过程：</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c249c931ca3e4bbf9187610c14a83653~tplv-k3u1fbpfcp-watermark.awebp" alt="img"> 简单的单向数据流（unidirectional data flow）是指用户访问 View，View 发出用户交互的 Action，在 Action 里对 state 进行相应更新，state 更新后会触发 View 更新页面的过程。这样数据总是清晰的单向进行流动，便于维护并且可以预测。</p>
<h3 id="懒加载的原理"><a href="#懒加载的原理" class="headerlink" title="懒加载的原理"></a>懒加载的原理</h3><p><strong>路由懒加载：</strong> 将不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p>
<p>结合 Vue 的异步组件和 Webpack 的代码分割功能，轻松实现路由组件的懒加载。</p>
<p>首先，可以将异步组件定义为返回一个 Promise 的工厂函数 (该函数返回的 Promise 应该 resolve 组件本身)。</p>
<p>第二，在 Webpack 2 中，我们可以使用动态 import 语法来定义代码分块点 (split point)： 结合这两者，这就是如何定义一个能够被 Webpack 自动代码分割的异步组件。</p>
<p><strong>图片懒加载原理实现：</strong> getBoundingClientRect DOM 元素包含一个 getBoundingClientRect 方法， 执行该方法返回当前 DOM 节点相关的 Css 边框集合，其中有一个 Top 属性代表当前 DOM 节点距离浏览器窗口顶部的高度，只需判断 top 值是否小于当前浏览器窗口的高度(window.innerHeight),若小于说明已经进入用户视野，然后替换为真正的图片即可 另外使用 getBoundingClientRect 作图片懒加载需要注意三点 1。 因为需要监听 scroll 事件，不停的判断 top 的值和浏览器高度的关系，请对监听事件进行函数节流 2. 当屏幕首次渲染时，不会触发 scroll 事件，请主动调用一次事件处理程序，否则若用户不滚动则首屏的图片会一直使用懒加载的默认图片 3. 当所有需要懒加载 的图片都被加载完，需要移除事件监听，避免不必要的内存占用</p>
<p>intersectionObserver intersectionObserver 作为一个构造函数，传入一个回调函数作为参数，生成一个实例 observer， 这个实例有一个 observe 方法用来观察指定元素是否进入了用户的可视范围，随即触发传入构造函数中的回调函数 同时给回调函数传入一个 entries 的参数，记录着这个实例观察的所有元素的对象，其中 intersectionRatio 属性表示图片已经进入可视范围百分比，大于 0 表示已经有部分进入了用户视野 此时替换为真实的图片，并且调用实例的 unobtrusive 将这个 img 元素从这个实例的观察列表的去除</p>
<h3 id="实现双向绑定-Proxy-与-Object-defineProperty-相比优劣如何"><a href="#实现双向绑定-Proxy-与-Object-defineProperty-相比优劣如何" class="headerlink" title="实现双向绑定 Proxy 与 Object.defineProperty 相比优劣如何?"></a>实现双向绑定 Proxy 与 Object.defineProperty 相比优劣如何?</h3><ol>
<li><strong>Object.definedProperty</strong>的作用是劫持一个对象的属性，劫持属性的 getter 和 setter 方法，在对象的属性发生变化时进行特定的操作。而 Proxy 劫持的是整个对象。</li>
<li><strong>Proxy</strong>会返回一个代理对象，我们只需要操作新对象即可，而 Object.defineProperty 只能遍历对象属性直接修改。</li>
<li><strong>Object.definedProperty</strong>不支持数组，更准确的说是不支持数组的各种 API，因为如果仅仅考虑 arry[i] = value 这种情况，是可以劫持的，但是这种劫持意义不大。而 Proxy 可以支持数组的各种 API。</li>
<li>尽管 Object.defineProperty 有诸多缺陷，但是其<code>兼容性要好于Proxy</code>。</li>
</ol>
<h3 id="Vue-项目中实现路由按需加载（路由懒加载）的-3-中方式："><a href="#Vue-项目中实现路由按需加载（路由懒加载）的-3-中方式：" class="headerlink" title="Vue 项目中实现路由按需加载（路由懒加载）的 3 中方式："></a>Vue 项目中实现路由按需加载（路由懒加载）的 3 中方式：</h3><ol>
<li>vue 异步组件</li>
<li>es6 提案的 import()</li>
<li>webpack 的 require.ensure()</li>
</ol>
<h3 id="vue-router-中常用的路由模式实现原理"><a href="#vue-router-中常用的路由模式实现原理" class="headerlink" title="vue-router 中常用的路由模式实现原理"></a>vue-router 中常用的路由模式实现原理</h3><p><strong>hash 模式</strong></p>
<ol>
<li>location.hash 的值实际就是 URL 中#后面的东西 它的特点在于：hash 虽然出现 URL 中，但不会被包含在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。</li>
<li>可以为 hash 的改变添加监听事件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, funcRef, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<p>每一次改变 hash（window.location.hash），都会在浏览器的访问历史中增加一个记录利用 hash 的以上特点，就可以来实现前端路由“更新视图但不重新请求页面”的功能了</p>
<blockquote>
<p>特点：兼容性好但是不美观</p>
</blockquote>
<p><strong>history 模式</strong></p>
<p>利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。</p>
<p>这两个方法应用于浏览器的历史记录站，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。这两个方法有个共同的特点：当调用他们修改浏览器历史记录栈后，虽然当前 URL 改变了，但浏览器不会刷新页面，这就为单页应用前端路由“更新视图但不重新请求页面”提供了基础。</p>
<blockquote>
<p>特点：虽然美观，但是刷新会出现 404 需要后端进行配置</p>
</blockquote>
<h3 id="Vue-中的-scoped-实现原理"><a href="#Vue-中的-scoped-实现原理" class="headerlink" title="Vue 中的 scoped 实现原理"></a>Vue 中的 scoped 实现原理</h3><p>一个项目中的所有 style 标签全部<code>加上了scoped，相当于实现了样式的模块化</code>。 vue 中的 scoped 属性的效果主要<code>通过PostCSS转译实现</code>，即：PostCSS 给一个组件中的所有 dom 添加了一个独一无二的动态属性，然后，给 CSS 选择器额外添加一个对应的属性选择器来选择该组件中 dom，这种做法使得样式只作用于含有该属性的 dom——组件内部 dom。</p>
<h3 id="vue-中使用了哪些设计模式"><a href="#vue-中使用了哪些设计模式" class="headerlink" title="vue 中使用了哪些设计模式"></a>vue 中使用了哪些设计模式</h3><p>1.工厂模式 - 传入参数即可创建实例</p>
<p>虚拟 DOM 根据参数的不同返回基础标签的 Vnode 和组件 Vnode</p>
<p>2.单例模式 - 整个程序有且仅有一个实例</p>
<p>vuex 和 vue-router 的插件注册方法 install 判断如果系统存在实例就直接返回掉</p>
<p>3.发布-订阅模式 (vue 事件机制)</p>
<p>4.观察者模式 (响应式数据原理)</p>
<p>5.装饰模式: (@装饰器的用法)</p>
<p>6.策略模式 策略模式指对象有某个行为,但是在不同的场景中,该行为有不同的实现方案-比如选项的合并策略</p>
<h3 id="观察者模式与发布-订阅模式两者的区别"><a href="#观察者模式与发布-订阅模式两者的区别" class="headerlink" title="观察者模式与发布-订阅模式两者的区别"></a>观察者模式与发布-订阅模式两者的区别</h3><p><strong>观察者模式</strong>：允许观察者实例对象(订阅者)执行适当的事件处理程序来注册和接收目标实例对象(发布者)发出的通知（即在观察者实例对象上注册<code>update</code>方法），<code>使订阅者和发布者之间产生了依赖关系</code>，且没有事件通道。不存在封装约束的单一对象，目标对象和观察者对象必须合作才能维持约束。 观察者对象向订阅它们的对象发布其感兴趣的事件。<code>通信只能是单向的</code>。</p>
<p><strong>发布/订阅模式</strong>：单一目标通常有很多观察者，有时一个目标的观察者是另一个观察者的目标。<code>通信可以实现双向</code>。该模式存在不稳定性，发布者无法感知订阅者的状态。</p>
<h3 id="使用过-Vue-SSR-吗？说说-SSR"><a href="#使用过-Vue-SSR-吗？说说-SSR" class="headerlink" title="使用过 Vue SSR 吗？说说 SSR"></a>使用过 Vue SSR 吗？说说 SSR</h3><p>SSR 也就是<code>服务端渲染</code>，也就是将 Vue 在客户端把标签渲染成 HTML 的工作放在服务端完成，然后再把 html 直接返回给客户端。</p>
<p><strong>优点：</strong></p>
<p>SSR 有着更好的 SEO、并且首屏加载速度更快</p>
<p><strong>缺点：</strong> 开发条件会受到限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。</p>
<p>服务器会有更大的负载需求</p>
<h3 id="你知道-Vue3-有哪些新特性吗？它们会带来什么影响？"><a href="#你知道-Vue3-有哪些新特性吗？它们会带来什么影响？" class="headerlink" title="你知道 Vue3 有哪些新特性吗？它们会带来什么影响？"></a>你知道 Vue3 有哪些新特性吗？它们会带来什么影响？</h3><ul>
<li><strong>性能提升</strong><ul>
<li>更小巧、更快速 支持自定义渲染器 支持摇树优化：一种在打包时去除无用代码的优化手段 支持 Fragments 和跨组件渲染</li>
<li>其它方面的更改 Suspense 支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。 基于 treeshaking 优化，提供了更多的内置功能。</li>
<li><code>静态树提升</code>降低渲染成本</li>
<li>在设计时也考虑 TypeScript 的类型推断特性 <code>重写虚拟DOM</code>可以期待更多的编译时提示来减少运行时的开销</li>
</ul>
</li>
<li><strong>API 变动</strong><ul>
<li>响应式原理的改变 Vue3.x 使用 Proxy 取代 Vue2.x 版本的 Object.defineProperty,<code>基于Proxy的观察者机制</code>节省内存开销</li>
<li>组件选项声明方式 Vue3.x 使用 Composition API setup 是 Vue3.x 新增的一个选项， 他是组件内使用 Composition API 的入口。</li>
<li>模板语法变化 slot 具名插槽语法,<code>优化插槽生成</code>可以单独渲染父组件和子组件。 自定义指令 v-model 升级</li>
</ul>
</li>
<li><strong>不兼容 IE11</strong>：<code>检测机制</code>更加全面、精准、高效,更具可调试式的响应跟踪</li>
</ul>
<p>Vue3.0 新特性以及使用经验总结 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTQwNDU0NzY0NDIxMzE2NjQ0">传送门<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Vue3-0-编译做了哪些优化？"><a href="#Vue3-0-编译做了哪些优化？" class="headerlink" title="Vue3.0 编译做了哪些优化？"></a>Vue3.0 编译做了哪些优化？</h3><p>a. 生成 Block tree Vue.js 2.x 的数据更新并触发重新渲染的粒度是组件级的，单个组件内部 需要遍历该组 件的整个 vnode 树。在 2.0 里，渲染效率的快慢与组件大小成正相关：组件越大，渲染 效率越慢。并且，对于一些静态节点，又无数据更新，这些遍历都是性能浪费。 Vue.js 3.0 做到了通过编译阶段对静态模板的分析，编译生成了 Block tree。 Block tree 是一个将模版基于动态节点指令切割的嵌套区块，每个 区块内部的节点结构是固定的， 每个区块只需要追踪自身包含的动态节点。所以，在 3.0 里，渲染效率不再与模板大小 成正相关，而是与模板中动态节点的数量成正相关。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de75972691ff4388b1f683960e00dc3a~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p>
<p>b. slot 编译优化 Vue.js 2.x 中，如果有一个组件传入了 slot，那么每次父组件更新的时候，会强制使子组 件 update，造成性能的浪费。 Vue.js 3.0 优化了 slot 的生成，使得非动态 slot 中属性的更新只会触发子组件的更新。 动态 slot 指的是在 slot 上面使用 v-if，v-for，动态 slot 名字等会导致 slot 产生运行时动 态变化但是又无法被子组件 track 的操作。 c. diff 算法优化</p>
<h3 id="Vue3-0-是如何变得更快的？（底层，源码）"><a href="#Vue3-0-是如何变得更快的？（底层，源码）" class="headerlink" title="Vue3.0 是如何变得更快的？（底层，源码）"></a>Vue3.0 是如何变得更快的？（底层，源码）</h3><p>a. diff 方法优化 Vue2.x 中的虚拟 dom 是进行全量的对比。 Vue3.0 中新增了静态标记（PatchFlag）：在与上次虚拟结点进行对比的时候，值对比 带有 patch flag 的节点，并且可以通过 flag 的信息得知当前节点要对比的具体内容化。 b. hoistStatic 静态提升 Vue2.x : 无论元素是否参与更新，每次都会重新创建。 Vue3.0 : 对不参与更新的元素，只会被创建一次，之后会在每次渲染时候被不停的复用。 c. cacheHandlers 事件侦听器缓存 默认情况下 onClick 会被视为动态绑定，所以每次都会去追踪它的变化但是因为是同一 个函数，所以没有追踪变化，直接缓存起来复用即可。 原作者姓名： 欧阳呀</p>
<p>2.0 存在的问题 1.对原始数据进行克隆一份 2.需要分别给对象中的每个属性设置监听 3.0 里面使用的是 proxy 监听对象中的所有的属性</p>
<h3 id="Vue3-0-和-2-0-的响应式原理区别"><a href="#Vue3-0-和-2-0-的响应式原理区别" class="headerlink" title="Vue3.0 和 2.0 的响应式原理区别"></a>Vue3.0 和 2.0 的响应式原理区别</h3><p>Vue3.x 改用 <code>Proxy 替代 Object.defineProperty</code>。因为 Proxy 可以直接监听对象和数组的变化，并且有多达 13 种拦截方法。</p>
<h3 id="vue-性能优化的方法-你都做过哪些-Vue-的性能优化？"><a href="#vue-性能优化的方法-你都做过哪些-Vue-的性能优化？" class="headerlink" title="vue 性能优化的方法 你都做过哪些 Vue 的性能优化？"></a>vue 性能优化的方法 你都做过哪些 Vue 的性能优化？</h3><p><strong>编码阶段</strong></p>
<ul>
<li><code>尽量减少data中的数据及层次结构</code>，否则性能就会差，data 中的数据都会增加 getter 和 setter，会收集对应的 watcher</li>
<li>不需要响应式的数据不要放到 data 中（可以用 Object.freeze() 冻结数据）</li>
<li><code>v-if 和 v-show 区分使用场景</code>，在更多的情况下，使用 v-if 替代 v-show</li>
<li><code>computed 和 watch 区分使用场景</code></li>
<li><code>v-for 遍历必须加 key</code>，key 保证唯一，最好是 id 值，且避免同时使用 v-if</li>
<li><code>防止内部泄漏，自定义事件、DOM事件及时销毁</code>，组件销毁后把全局变量和事件销毁</li>
<li><code>使用路由懒加载、异步组件</code></li>
<li>SPA 页面<code>采用keep-alive缓存组件</code></li>
<li>使用 vue-loader 在开发环境做模板编译（预编译）</li>
<li>如果需要使用 v-for 给每项元素绑定事件时使用事件代理</li>
<li><code>防抖、节流运用</code></li>
<li>长列表滚动到可视区域动态加载</li>
<li>大数据列表和表格性能优化-虚拟列表/虚拟表格</li>
<li><code>第三方模块按需导入</code></li>
<li>图片懒加载</li>
<li>使用 服务端渲染 SSR</li>
</ul>
<p><strong>SEO 优化</strong>\</p>
<ul>
<li>服务端渲染 SSR or 预渲染</li>
<li>打包优化</li>
<li>压缩代码</li>
<li>Tree Shaking/Scope Hoisting</li>
<li>使用 cdn 加载第三方模块</li>
<li>多线程打包 happypack</li>
<li>splitChunks 抽离公共文件</li>
<li>sourceMap 优化\</li>
</ul>
<p><strong>用户体验</strong>\</p>
<ul>
<li>骨架屏</li>
<li>PWA</li>
<li>还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启 gzip 压缩等。</li>
</ul>
<h3 id="vue-与-React-比较"><a href="#vue-与-React-比较" class="headerlink" title="vue 与 React 比较"></a>vue 与 React 比较</h3><p>相同点：</p>
<ol>
<li>都是<code>组件化开发和虚拟DOM(Virtual Dom)</code></li>
<li>都<code>支持通过props进行父子组件间数据通信</code></li>
<li>都<code>支持数据驱动视图，不直接操作DOM</code>，更新状态数据界面就自动更新</li>
<li>都<code>支持服务端渲染SSR</code></li>
<li>都<code>支持native的方案</code>，React 的 React Native， Vue 的 Weex</li>
</ol>
<p>不同点：</p>
<ol>
<li>数据绑定：vue 实现了数据的双向绑定，react 的数据流动是单向的</li>
<li>组件的写法不一样，React 推荐的是 JSX 语法，也就是把 HTML 和 CSS 都写进 JavaScript，即”all in js”;vue 推荐的做法是 webpack+vue+loader 的单文件组件格式，即 html，css，js 写在同一个文件中；</li>
<li>数据状态管理不同，state 对象在 react 应用中是不可变的，需要使用 setState 方法更新状态；在 vue 中 state 对象不是必须的，数据由 data 属性在 vue 对象中管理</li>
<li>Virtual Dom 不一样，vue 会跟踪每个组件的依赖关系，不需要重新渲染整个组件树；而对于 react 而言，每当应用的状态改变时，全部的组件都会被渲染，所以 react 中会需要 shouldComponentUpdate 这个生命周期函数方法来进行控制</li>
<li>React 严格上只针对 MVC 的 View 层，Vue 则是 MVVM 模式</li>
</ol>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="函数式组件使用场景和原理-1"><a href="#函数式组件使用场景和原理-1" class="headerlink" title="函数式组件使用场景和原理"></a>函数式组件使用场景和原理</h3><p>函数式组件与普通组件的区别</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>函数式组件需要在声明组件是指定 functional:<span class="literal">true</span></span><br><span class="line"><span class="number">2.</span>不需要实例化，所以没有<span class="keyword">this</span>,<span class="keyword">this</span>通过render函数的第二个参数context来代替</span><br><span class="line"><span class="number">3.</span>没有生命周期钩子函数，不能使用计算属性，watch</span><br><span class="line"><span class="number">4.</span>不能通过$emit 对外暴露事件，调用事件只能通过context.listeners.click的方式调用外部传入的事件</span><br><span class="line"><span class="number">5.</span>因为函数式组件是没有实例化的，所以在外部通过ref去引用组件时，实际引用的是HTMLElement</span><br><span class="line"><span class="number">6.</span>函数式组件的props可以不用显示声明，所以没有在props里面声明的属性都会被自动隐式解析为prop,而普通组件所有未声明的属性都解析到$attrs里面，并自动挂载到组件根元素上面(可以通过inheritAttrs属性禁止)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>优点 1.由于函数式组件不需要实例化，无状态，没有生命周期，所以渲染性能要好于普通组件 2.函数式组件结构比较简单，代码结构更清晰</p>
<p>使用场景：</p>
<p>一个简单的展示组件，作为容器组件使用 比如 router-view 就是一个函数式组件</p>
<p>“高阶组件”——用于接收一个组件作为参数，返回一个被包装过的组件</p>
<p>相关代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (isTrue(Ctor.options.functional)) &#123;</span><br><span class="line">  <span class="comment">// 带有functional的属性的就是函数式组件</span></span><br><span class="line">  <span class="keyword">return</span> createFunctionalComponent(Ctor, propsData, data, context, children)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> listeners = data.on</span><br><span class="line">data.on = data.nativeOn</span><br><span class="line">installComponentHooks(data) <span class="comment">// 安装组件相关钩子 （函数式组件没有调用此方法，从而性能高于普通组件）</span></span><br></pre></td></tr></table></figure>

<h3 id="React-组件通信方式"><a href="#React-组件通信方式" class="headerlink" title="React 组件通信方式"></a>React 组件通信方式</h3><p>react 组件间通信常见的几种情况:</p>
<ul>
<li><ol>
<li>父组件向子组件通信</li>
</ol>
</li>
<li><ol>
<li>子组件向父组件通信</li>
</ol>
</li>
<li><ol>
<li>跨级组件通信</li>
</ol>
</li>
<li><ol>
<li>非嵌套关系的组件通信</li>
</ol>
</li>
</ul>
<h4 id="1）父组件向子组件通信"><a href="#1）父组件向子组件通信" class="headerlink" title="1）父组件向子组件通信"></a>1）父组件向子组件通信</h4><p>父组件通过 props 向子组件传递需要的信息。父传子是在父组件中直接绑定一个正常的属性，这个属性就是指具体的值，在子组件中，用 props 就可以获取到这个值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件: Child</span></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件 Parent</span></span><br><span class="line"><span class="keyword">const</span> Parent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&quot;京程一灯&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2）子组件向父组件通信"><a href="#2）子组件向父组件通信" class="headerlink" title="2）子组件向父组件通信"></a>2）子组件向父组件通信</h4><p>props+回调的方式，使用公共组件进行状态提升。子传父是先在父组件上绑定属性设置为一个函数，当子组件需要给父组件传值的时候，则通过 props 调用该函数将参数传入到该函数当中，此时就可以在父组件中的函数中接收到该参数了，这个参数则为子组件传过来的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子组件: Child</span></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cb = <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      props.callback(msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;cb(</span>&#x27;京程一灯欢迎你!&#x27;)&#125;&gt;</span>京程一灯欢迎你<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件 Parent</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">callback</span>(<span class="params">msg</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">callback</span>=<span class="string">&#123;this.callback.bind(this)&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3）跨级组件通信"><a href="#3）跨级组件通信" class="headerlink" title="3）跨级组件通信"></a>3）跨级组件通信</h4><p>即父组件向子组件的子组件通信，向更深层子组件通信。</p>
<ul>
<li>使用 props，利用中间组件层层传递,但是如果父组件结构较深，那么中间每一层组件都要去传递 props，增加了复杂度，并且这些 props 并不是中间组件自己需要的。</li>
<li>使用 context，context 相当于一个大容器，我们可以把要通信的内容放在这个容器中，这样不管嵌套多深，都可以随意取用，对于跨越多层的全局数据可以使用 context 实现。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// context方式实现跨级组件通信</span></span><br><span class="line"><span class="comment">// Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BatteryContext = createContext()</span><br><span class="line"></span><br><span class="line"><span class="comment">//  子组件的子组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandChild</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">BatteryContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;(color) =&gt; <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">color</span> &#125;&#125;&gt;</span>我是红色的:&#123;color&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">BatteryContext.Consumer</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  子组件</span></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">GrandChild</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; color &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">BatteryContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;color&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">BatteryContext.Provider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4）非嵌套关系的组件通信"><a href="#4）非嵌套关系的组件通信" class="headerlink" title="4）非嵌套关系的组件通信"></a>4）非嵌套关系的组件通信</h4><p>即没有任何包含关系的组件，包括兄弟组件以及不在同一个父级中的非兄弟组件。</p>
<ul>
<li><ol>
<li>可以使用自定义事件通信（发布订阅模式），使用 pubsub-js</li>
</ol>
</li>
<li><ol>
<li>可以通过 redux 等进行全局状态管理</li>
</ol>
</li>
<li><ol>
<li>如果是兄弟组件通信，可以找到这两个兄弟节点共同的父节点, 结合父子间通信方式进行通信。</li>
</ol>
</li>
<li><ol>
<li>也可以 new 一个 Vue 的 EventBus,进行事件监听，一边执行监听，一边执行新增 VUE 的 eventBus 就是发布订阅模式，是可以在 React 中使用的;</li>
</ol>
</li>
</ul>
<h3 id="setState-既存在异步情况也存在同步情况"><a href="#setState-既存在异步情况也存在同步情况" class="headerlink" title="setState 既存在异步情况也存在同步情况"></a>setState 既存在异步情况也存在同步情况</h3><p>1.异步情况 在<code>React事件当中是异步操作</code></p>
<p>2.同步情况 如果是在<code>setTimeout事件或者自定义的dom事件</code>中，都是同步的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//setTimeout事件</span></span><br><span class="line"><span class="keyword">import</span> React,&#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>count:&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.btnAction&#125;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    btnAction = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//不能直接修改state，需要通过setState进行修改</span></span><br><span class="line">        <span class="comment">//同步</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">                <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.count);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Count;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义dom事件</span></span><br><span class="line"><span class="keyword">import</span> React,&#123; Component &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>count:&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>绑定点击事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//自定义dom事件，也是同步修改</span></span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">                <span class="attr">count</span>: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.count);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Count;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a093675cbac04e02a17459088c846ae7~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">当组件的实例被创建并插入到 DOM 中时，这些方法按以下顺序调用：</span><br><span class="line"></span><br><span class="line"><span class="title">constructor</span>(<span class="params"></span>)</span><br><span class="line"><span class="title">static</span> <span class="title">getDerivedStateFromProps</span>(<span class="params"></span>)</span><br><span class="line"><span class="title">render</span>(<span class="params"></span>)</span><br><span class="line"><span class="title">componentDidMount</span>(<span class="params"></span>)</span><br><span class="line"></span><br><span class="line">更新中</span><br><span class="line">更新可能由道具或状态的更改引起。当重新渲染组件时，这些方法按以下顺序调用：</span><br><span class="line"></span><br><span class="line"><span class="title">static</span> <span class="title">getDerivedStateFromProps</span>(<span class="params"></span>)</span><br><span class="line"><span class="title">shouldComponentUpdate</span>(<span class="params"></span>)</span><br><span class="line"><span class="title">render</span>(<span class="params"></span>)</span><br><span class="line"><span class="title">getSnapshotBeforeUpdate</span>(<span class="params"></span>)</span><br><span class="line"><span class="title">componentDidUpdate</span>(<span class="params"></span>)</span><br><span class="line"></span><br><span class="line">卸载</span><br><span class="line">当组件从 <span class="title">DOM</span> 中移除时调用此方法：</span><br><span class="line"></span><br><span class="line"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="说一下-react-fiber"><a href="#说一下-react-fiber" class="headerlink" title="说一下 react-fiber"></a>说一下 react-fiber</h3><h4 id="1）背景"><a href="#1）背景" class="headerlink" title="1）背景"></a>1）背景</h4><p>react-fiber 产生的根本原因，是<code>大量的同步计算任务阻塞了浏览器的 UI 渲染</code>。默认情况下，JS 运算、页面布局和页面绘制都是运行在浏览器的主线程当中，他们之间是互斥的关系。如果 JS 运算持续占用主线程，页面就没法得到及时的更新。当我们调用<code>setState</code>更新页面的时候，React 会遍历应用的所有节点，计算出差异，然后再更新 UI。如果页面元素很多，整个过程占用的时机就可能超过 16 毫秒，就容易出现掉帧的现象。</p>
<h4 id="2）实现原理"><a href="#2）实现原理" class="headerlink" title="2）实现原理"></a>2）实现原理</h4><ul>
<li>react 内部运转分三层：<ul>
<li>Virtual DOM 层，描述页面长什么样。</li>
<li>Reconciler 层，负责调用组件生命周期方法，进行 Diff 运算等。</li>
<li>Renderer 层，根据不同的平台，渲染出相应的页面，比较常见的是 ReactDOM 和 ReactNative。</li>
</ul>
</li>
</ul>
<p><code>Fiber 其实指的是一种数据结构，它可以用一个纯 JS 对象来表示</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fiber = &#123;</span><br><span class="line">    stateNode,    <span class="comment">// 节点实例</span></span><br><span class="line">    child,        <span class="comment">// 子节点</span></span><br><span class="line">    sibling,      <span class="comment">// 兄弟节点</span></span><br><span class="line">    <span class="keyword">return</span>,       <span class="comment">// 父节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>为了实现不卡顿，就需要有一个调度器 (Scheduler) 来进行任务分配。优先级高的任务（如键盘输入）可以打断优先级低的任务（如 Diff）的执行，从而更快的生效。任务的优先级有六种：<ul>
<li>synchronous，与之前的 Stack Reconciler 操作一样，同步执行</li>
<li>task，在 next tick 之前执行</li>
<li>animation，下一帧之前执行</li>
<li>high，在不久的将来立即执行</li>
<li>low，稍微延迟执行也没关系</li>
<li>offscreen，下一次 render 时或 scroll 时才执行</li>
</ul>
</li>
<li>Fiber Reconciler（react ）执行过程分为 2 个阶段：<ul>
<li>阶段一，生成 Fiber 树，得出需要更新的节点信息。这一步是一个渐进的过程，可以被打断。阶段一可被打断的特性，让优先级更高的任务先执行，从框架层面大大降低了页面掉帧的概率。</li>
<li>阶段二，将需要更新的节点一次过批量更新，这个过程不能被打断。</li>
</ul>
</li>
<li>Fiber 树：React 在 render 第一次渲染时，会通过 React.createElement 创建一颗 Element 树，可以称之为 Virtual DOM Tree，由于要记录上下文信息，加入了 Fiber，每一个 Element 会对应一个 Fiber Node，将 Fiber Node 链接起来的结构成为 Fiber Tree。Fiber Tree 一个重要的特点是链表结构，将递归遍历编程循环遍历，然后配合 requestIdleCallback API, 实现任务拆分、中断与恢复。</li>
</ul>
<p>从 Stack Reconciler 到 Fiber Reconciler，源码层面其实就是干了一件递归改循环的事情</p>
<h3 id="React-和-Vue-在虚拟-DOM-的-diff-算法有什么不同"><a href="#React-和-Vue-在虚拟-DOM-的-diff-算法有什么不同" class="headerlink" title="React 和 Vue 在虚拟 DOM 的 diff 算法有什么不同"></a>React 和 Vue 在虚拟 DOM 的 diff 算法有什么不同</h3><h3 id="Portals"><a href="#Portals" class="headerlink" title="Portals"></a>Portals</h3><p>Portals 提供了一种一流的方式来将子组件渲染到存在于父组件的 DOM 层次结构之外的 DOM 节点中。结构不受外界的控制的情况下就可以使用 portals 进行创建</p>
<h3 id="何时要使用异步组件？如和使用异步组件"><a href="#何时要使用异步组件？如和使用异步组件" class="headerlink" title="何时要使用异步组件？如和使用异步组件"></a>何时要使用异步组件？如和使用异步组件</h3><ul>
<li>加载大组件的时候</li>
<li>路由异步加载的时候</li>
</ul>
<p>react 中要配合 Suspense 使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步懒加载</span></span><br><span class="line"><span class="keyword">const</span> Box = lazy(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Box&#x27;</span>));</span><br><span class="line"><span class="comment">// 使用组件的时候要用suspense进行包裹</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">    &#123;show &amp;&amp; <span class="tag">&lt;<span class="name">Box</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="React-高阶组件的作用有哪些"><a href="#React-高阶组件的作用有哪些" class="headerlink" title="React 高阶组件的作用有哪些"></a>React 高阶组件的作用有哪些</h3><p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vd3d3LmNuYmxvZ3MuY29tL21lbmdmZi9wLzk2NTcyMzIuaHRtbA==">传送门<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="immutable-js"><a href="#immutable-js" class="headerlink" title="immutable.js"></a>immutable.js</h3><p>immutable 内部提供的所有数据类型，对其数据进行任意操作，<code>操作得到的结果是修改后的值并且修改后的值是一个新的对象，原来的对象没有发生任何变化</code>。 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS9pbW11dGFibGUtanMvaW1tdXRhYmxlLWpz">immutable.js 文档<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS9pbW11dGFibGUtanMvaW1tdXRhYmxlLWpz">github.com/immutable-j…<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vcmhhZG93LmdpdGh1Yi5pby8yMDE1LzA1LzEwL2ZsdXgtaW1tdXRhYmxlLw==">学习文档<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vcmhhZG93LmdpdGh1Yi5pby8yMDE1LzA1LzEwL2ZsdXgtaW1tdXRhYmxlLw==">rhadow.github.io/2015/05/10/…<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">&#x27;b&#x27;</span>,<span class="number">50</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map1);</span><br><span class="line"><span class="built_in">console</span>.log(map2);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="vuex-和-redux-之间的区别？"><a href="#vuex-和-redux-之间的区别？" class="headerlink" title="vuex 和 redux 之间的区别？"></a>vuex 和 redux 之间的区别？</h3><p>从实现原理上来说，最大的区别是两点：</p>
<p><strong>Redux</strong>使用的是不可变数据，而<code>Vuex</code>的数据是可变的。<code>Redux</code>每次都是用新的<code>state</code>替换旧的<code>state</code>，而<code>Vuex</code>是直接修改</p>
<p><strong>Redux</strong>在检测数据变化的时候，是通过<code>diff</code>的方式比较差异的，而<code>Vuex</code>其实和 Vue 的原理一样，是通过 <code>getter/setter</code>来比较的(如果看<code>Vuex</code>源码会知道，其实他内部直接创建一个<code>Vue</code>实例用来跟踪数据变化)</p>
<h3 id="React-事件绑定原理"><a href="#React-事件绑定原理" class="headerlink" title="React 事件绑定原理"></a>React 事件绑定原理</h3><p>React 并不是将 click 事件绑在该 div 的真实 DOM 上，而是<code>在document处监听所有支持的事件</code>，当事件发生并冒泡至 document 处时，React 将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。<br>另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用 <code>event.preventDefault</code>。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbc4e0ed50c54cffaeaf1557b482464a~tplv-k3u1fbpfcp-watermark.awebp" alt="react事件绑定原理"></p>
<h3 id="React-项目中有哪些细节可以优化？实际开发中都做过哪些性能优化"><a href="#React-项目中有哪些细节可以优化？实际开发中都做过哪些性能优化" class="headerlink" title="React 项目中有哪些细节可以优化？实际开发中都做过哪些性能优化"></a>React 项目中有哪些细节可以优化？实际开发中都做过哪些性能优化</h3><p><strong>编译阶段</strong> -&gt;<br><strong>路由阶段</strong> -&gt;<br><strong>渲染阶段</strong> -&gt;<br><strong>细节优化</strong> -&gt;<br><strong>状态管理</strong> -&gt;<br><strong>海量数据源，长列表渲染</strong></p>
<h4 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h4><p>① include 或 exclude 限制 loader 范围。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    include: path.resolve(__dirname, <span class="string">&#x27;../src&#x27;</span>),</span><br><span class="line">    <span class="attr">use</span>:[<span class="string">&#x27;happypack/loader?id=babel&#x27;</span>]</span><br><span class="line">    <span class="comment">// loader: &#x27;babel-loader&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>② happypack 多进程编译 除了上述改动之外，在 plugin 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 多线程编译 */</span></span><br><span class="line"><span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;babel&#x27;</span>,</span><br><span class="line">  <span class="attr">loaders</span>: [<span class="string">&#x27;babel-loader?cacheDirectory=true&#x27;</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>③ 缓存 babel 编译过的文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">loaders: [<span class="string">&#x27;babel-loader?cacheDirectory=true&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>④tree Shaking 删除冗余代码</p>
<p>⑤ 按需加载，按需引入。</p>
<h4 id="路由懒加载，路由监听器"><a href="#路由懒加载，路由监听器" class="headerlink" title="路由懒加载，路由监听器"></a>路由懒加载，路由监听器</h4><p>asyncRouter 实际就是一个高级组件,将()=&gt;import()作为加载函数传进来，然后当外部 Route 加载当前组件的时候，在 componentDidMount 生命周期函数，加载真实的组件，并渲染组件，我们还可以写针对路由懒加载状态定制属于自己的路由监听器 beforeRouterComponentLoad 和 afterRouterComponentDidLoaded，类似 vue 中 watch $route 功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// asyncRouter.js 文件</span></span><br><span class="line"><span class="keyword">const</span> routerObserveQueue = [] <span class="comment">/* 存放路由卫视钩子 */</span></span><br><span class="line"><span class="comment">/* 懒加载路由卫士钩子 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RouterHooks = &#123;</span><br><span class="line">  <span class="comment">/* 路由组件加载之前 */</span></span><br><span class="line">  <span class="attr">beforeRouterComponentLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    routerObserveQueue.push(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;before&#x27;</span>,</span><br><span class="line">      callback,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* 路由组件加载之后 */</span></span><br><span class="line">  <span class="function"><span class="title">afterRouterComponentDidLoaded</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">    routerObserveQueue.push(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;after&#x27;</span>,</span><br><span class="line">      callback,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 路由懒加载HOC */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">AsyncRouter</span>(<span class="params">loadRouter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(props)</span><br><span class="line">      <span class="comment">/* 触发每个路由加载之前钩子函数 */</span></span><br><span class="line">      <span class="built_in">this</span>.dispatchRouterQueue(<span class="string">&#x27;before&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    state = &#123; <span class="attr">Component</span>: <span class="literal">null</span> &#125;</span><br><span class="line">    <span class="function"><span class="title">dispatchRouterQueue</span>(<span class="params">type</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; history &#125; = <span class="built_in">this</span>.props</span><br><span class="line">      routerObserveQueue.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.type === type) item.callback(history)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state.Component) <span class="keyword">return</span></span><br><span class="line">      loadRouter()</span><br><span class="line">        .then(<span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> <span class="built_in">module</span>.default)</span><br><span class="line">        .then(<span class="function">(<span class="params">Component</span>) =&gt;</span></span><br><span class="line">          <span class="built_in">this</span>.setState(&#123; Component &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">/* 触发每个路由加载之后钩子函数 */</span></span><br><span class="line">            <span class="built_in">this</span>.dispatchRouterQueue(<span class="string">&#x27;after&#x27;</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; Component &#125; = <span class="built_in">this</span>.state</span><br><span class="line">      <span class="keyword">return</span> Component ? <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span> : <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AsyncRouter, &#123; RouterHooks &#125; <span class="keyword">from</span> <span class="string">&#x27;./asyncRouter.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; beforeRouterComponentLoad &#125; = RouterHooks</span><br><span class="line"><span class="keyword">const</span> Index = AsyncRouter(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../src/page/home/index&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> List = AsyncRouter(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../src/page/list&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> Detail = AsyncRouter(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../src/page/detail&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> index = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* 增加监听函数 */</span></span><br><span class="line">    beforeRouterComponentLoad(<span class="function">(<span class="params">history</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;当前激活的路由是&#x27;</span>, history.location.pathname)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Meuns</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;</span>&#x27;/<span class="attr">index</span>&#x27;&#125; <span class="attr">component</span>=<span class="string">&#123;Index&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;</span>&#x27;/<span class="attr">list</span>&#x27;&#125; <span class="attr">component</span>=<span class="string">&#123;List&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;</span>&#x27;/<span class="attr">detail</span>&#x27;&#125; <span class="attr">component</span>=<span class="string">&#123;Detail&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">from</span>=<span class="string">&quot;/*&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/index&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="受控性组件颗粒化-，独立请求服务渲染单元"><a href="#受控性组件颗粒化-，独立请求服务渲染单元" class="headerlink" title="受控性组件颗粒化 ，独立请求服务渲染单元"></a>受控性组件颗粒化 ，独立请求服务渲染单元</h4><p>可控性组件颗粒化，独立请求服务渲染单元是笔者在实际工作总结出来的经验。目的就是避免因自身的渲染更新或是副作用带来的全局重新渲染。</p>
<h4 id="shouldComponentUpdate-PureComponent-和-React-memo-immetable-js-助力性能调优"><a href="#shouldComponentUpdate-PureComponent-和-React-memo-immetable-js-助力性能调优" class="headerlink" title="shouldComponentUpdate ,PureComponent 和 React.memo ,immetable.js 助力性能调优"></a>shouldComponentUpdate ,PureComponent 和 React.memo ,immetable.js 助力性能调优</h4><p>在这里我们拿<code>immetable.js</code>为例，讲最传统的限制更新方法，第六部分将要将一些避免重新渲染的细节。</p>
<ol>
<li>PureComponent 和 React.memo</li>
</ol>
<p>React.PureComponent 与 React.Component 用法差不多 ,但 React.PureComponent 通过 props 和 state 的浅对比来实现 shouldComponentUpate()。如果对象包含复杂的数据结构(比如对象和数组)，他会浅比较，如果深层次的改变，是无法作出判断的，React.PureComponent 认为没有变化，而没有渲染试图。</p>
<ol>
<li>shouldComponentUpdate</li>
</ol>
<p>使用 shouldComponentUpdate()以让 React 知道当 state 或 props 的改变是否影响组件的重新 render，默认返回 ture，返回 false 时不会重新渲染更新，而且该方法并不会在初始化渲染或当使用 forceUpdate() 时被调用，通常一个 shouldComponentUpdate 应用是这么写的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//控制状态 仅当`state` 中 `data1` 发生改变的时候，重新更新组件。</span></span><br><span class="line"><span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>)</span> &#123;</span><br><span class="line">  <span class="comment">/* 当 state 中 data1 发生改变的时候，重新更新组件 */</span></span><br><span class="line">  <span class="keyword">return</span> nextState.data1 !== <span class="built_in">this</span>.state.data1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制props属性 仅当`props` 中 `data2` 发生改变的时候，重新更新组件。</span></span><br><span class="line"><span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>)</span> &#123;</span><br><span class="line">  <span class="comment">/* 当 props 中 data2发生改变的时候，重新更新组件 */</span></span><br><span class="line">  <span class="keyword">return</span> nextProps.data2 !== <span class="built_in">this</span>.props.data2</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>immetable.js</li>
</ol>
<p>immetable.js 是 Facebook 开发的一个 js 库，可以提高对象的比较性能，像之前所说的 pureComponent 只能对对象进行浅比较，,对于对象的数据类型,却束手无策,所以我们可以用 immetable.js 配合 shouldComponentUpdate 或者 react.memo 来使用。immutable 中</p>
<h4 id="合理处理细节问题"><a href="#合理处理细节问题" class="headerlink" title="合理处理细节问题"></a>合理处理细节问题</h4><ul>
<li>① 绑定事件尽量不要使用箭头函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有状态组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  handerClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">666</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  handerClick1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">777</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">handerClick</span>=<span class="string">&#123;this.handerClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handerClick1&#125;</span>&gt;</span>hello,world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无状态组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handerClick1 = useMemo(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">777</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  ) <span class="comment">/* [] 存在当前 handerClick1 的依赖项*/</span></span><br><span class="line">  <span class="keyword">const</span> handerClick = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">666</span>)</span><br><span class="line">  &#125;, []) <span class="comment">/* [] 存在当前 handerClick 的依赖项*/</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">handerClick</span>=<span class="string">&#123;handerClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;handerClick1&#125;</span>&gt;</span>hello,world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>② 循环正确使用 key</li>
</ul>
<p>无论是<code>react</code> 和 <code>vue</code>,正确使用<code>key</code>,目的就是在一次循环中，找到与新节点对应的老节点，复用节点，节省开销。</p>
<ul>
<li>③ 无状态组件<code>hooks-useMemo</code> 避免重复声明。</li>
<li>④ 懒加载 Suspense 和 lazy</li>
</ul>
<h4 id="防止重复渲染"><a href="#防止重复渲染" class="headerlink" title="防止重复渲染"></a>防止重复渲染</h4><ul>
<li>① 学会使用的批量更新 state</li>
<li>② 合并 state</li>
<li>③ useMemo React.memo 隔离单元</li>
<li>④ ‘取缔’state，学会使用缓存。</li>
<li>⑤ useCallback 回调</li>
</ul>
<h4 id="使用状态管理"><a href="#使用状态管理" class="headerlink" title="使用状态管理"></a>使用状态管理</h4><p>对于不变的数据，多个页面或组件需要的数据，为了避免重复请求,我们可以将数据放在状态管理里面。</p>
<h4 id="海量数据优化"><a href="#海量数据优化" class="headerlink" title="海量数据优化"></a>海量数据优化</h4><ol>
<li>时间分片</li>
</ol>
<p>时间分片的概念，就是一次性渲染大量数据，初始化的时候会出现卡顿等现象。我们必须要明白的一个道理，<strong>js 执行永远要比 dom 渲染快的多。</strong> ，所以对于大量的数据，一次性渲染，容易造成卡顿，卡死的情况。</p>
<p><code>setTimeout</code> 可以用 <code>window.requestAnimationFrame()</code> 代替，会有更好的渲染效果。我们<code>demo</code>使用列表做的，实际对于列表来说，最佳方案是虚拟列表，而时间分片，更适合<strong>热力图，地图点位比较多的情况</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>, <span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">list</span>: [],</span><br><span class="line">  &#125;</span><br><span class="line">  handerClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.sliceTime(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">40000</span>).fill(<span class="number">0</span>), <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  sliceTime = <span class="function">(<span class="params">list, times</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (times === <span class="number">400</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newList = list.slice(times, (times + <span class="number">1</span>) * <span class="number">100</span>) <span class="comment">/* 每次截取 100 个 */</span></span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">list</span>: <span class="built_in">this</span>.state.list.concat(newList),</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">this</span>.sliceTime(list, times + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; list &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handerClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;list.map((item, index) =&gt; (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;item + &#x27;&#x27; + index&#125; Item</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ))&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>虚拟列表</li>
</ol>
<p><strong>虚拟列表</strong> 是解决长列表渲染的最佳方案。</p>
<p>为了防止大量<code>dom</code>存在影响性能，我们只对，渲染区和缓冲区的数据做渲染，，虚拟列表区 没有真实的 dom 存在。 缓冲区的作用就是防止快速下滑或者上滑过程中，会有空白的现象。</p>
<p>虚拟列表是按需显示的一种技术，可以根据用户的滚动，不必渲染所有列表项，而只是渲染可视区域内的一部分列表元素的技术。正常的虚拟列表分为 渲染区，缓冲区 ，虚拟列表区。</p>
<h4 id="首屏加载："><a href="#首屏加载：" class="headerlink" title="首屏加载："></a>首屏加载：</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">-   首屏优化一般涉及到几个指标<span class="constructor">FP(First Paint 首次绘制)</span>、<span class="constructor">FCP(First Contentful Paint 首次有内容的渲染)</span>、<span class="constructor">FMP(First Meaningful Paint 首次有意义的绘制)</span>、<span class="constructor">TTI(Time To <span class="params">interactive</span> 可交互时间)</span>；要有一个良好的体验是尽可能的把FCP提前，需要做一些工程化的处理，去优化资源的加载</span><br><span class="line">-   方式及分包策略，资源的减少是最有效的加快首屏打开的方式；</span><br><span class="line">-   对于CSR的应用，FCP的过程一般是首先加载js与css资源，js在本地执行完成，然后加载数据回来，做内容初始化渲染，这中间就有几次的网络反复请求的过程；所以CSR可以考虑使用骨架屏及预渲染（部分结构预渲染）、suspence与<span class="keyword">lazy</span>做懒加载动态组件的方式</span><br><span class="line">-   当然还有另外一种方式就是<span class="constructor">SSR(服务端渲染)</span>的方式，SSR对于首屏的优化有一定的优势，但是这种瓶颈一般在Node服务端的处理，建议使用stream流的方式来处理，对于体验与node端的内存管理等，都有优势；</span><br><span class="line">-   不管对于<span class="constructor">CSR(客户端渲染)</span>或者<span class="constructor">SSR(服务端渲染)</span>，都建议配合使用Service worker，来控制资源的调配及骨架屏秒开的体验</span><br><span class="line">-   react项目上线之后，首先需要保障的是可用性，所以可以通过React.Profiler分析组件的渲染次数及耗时的一些任务，但是Profile记录的是commit阶段的数据，所以对于react的调和阶段就需要结合performance API一起分析；</span><br><span class="line">-   由于React是父级props改变之后，所有与props不相关子组件在没有添加条件控制的情况之下，也会触发render渲染，这是没有必要的，可以结合React的PureComponent以及<span class="module-access"><span class="module"><span class="identifier">React</span>.</span></span>memo等做浅比较处理，这中间有涉及到不可变数据的处理，当然也可以结合使用ShouldComponentUpdate做深比较处理；</span><br><span class="line">-   所有的运行状态优化，都是减少不必要的render，<span class="module-access"><span class="module"><span class="identifier">React</span>.</span></span>useMemo与<span class="module-access"><span class="module"><span class="identifier">React</span>.</span></span>useCallback也是可以做很多优化的地方；</span><br><span class="line">-   在很多应用中，都会涉及到使用redux以及使用context，这两个都可能造成许多不必要的render，所以在使用的时候，也需要谨慎的处理一些数据；</span><br><span class="line">-   最后就是保证整个应用的可用性，为组件创建错误边界，可以使用componentDidCatch来处理；</span><br><span class="line">- 使用script 的 async 和 defer 属性，异步加载避免阻塞</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="首屏优化"><a href="#首屏优化" class="headerlink" title="首屏优化"></a>首屏优化</h3><ul>
<li>Vue-Router 路由懒加载（利用 Webpack 的代码切割）</li>
<li>使用 CDN 加速，将通用的库从 vendor 进行抽离</li>
<li>Nginx 的 gzip 压缩</li>
<li>Vue 异步组件</li>
<li>服务端渲染 SSR</li>
<li>如果使用了一些 UI 库，采用按需加载</li>
<li>Webpack 开启 gzip 压缩</li>
<li>如果首屏为登录页，可以做成多入口</li>
<li>Service Worker 缓存文件处理</li>
<li>使用 link 标签的 rel 属性设置 prefetch（这段资源将会在未来某个导航或者功能要用到，但是本资源的下载顺序权重比较低，prefetch 通常用于加速下一次导航）、preload（preload 将会把资源得下载顺序权重提高，使得关键数据提前下载好，优化页面打开速度）</li>
</ul>
<h3 id="hooks-用过吗？聊聊-react-中-class-组件和函数组件的区别"><a href="#hooks-用过吗？聊聊-react-中-class-组件和函数组件的区别" class="headerlink" title="hooks 用过吗？聊聊 react 中 class 组件和函数组件的区别"></a>hooks 用过吗？聊聊 react 中 class 组件和函数组件的区别</h3><p>类组件是使用 ES6 的 class 来定义的组件。 函数组件是接收一个单一的 <code>props</code> 对象并返回一个 React 元素。</p>
<p>关于 React 的两套 API（类（class）API 和基于函数的钩子（hooks） API）。官方推荐使用钩子（函数），而不是类。因为钩子更简洁，代码量少，用起来比较”轻”，而类比较”重”。而且，钩子是函数，更符合 React 函数式的本质。</p>
<p>函数一般来说，只应该做一件事，就是返回一个值。 如果你有多个操作，每个操作应该写成一个单独的函数。而且，数据的状态应该与操作方法分离。根据函数这种理念，React 的函数组件只应该做一件事情：返回组件的 HTML 代码，而没有其他的功能。函数的返回结果只依赖于它的参数。不改变函数体外部数据、函数执行过程里面没有副作用。</p>
<p>类（class）是数据和逻辑的封装。 也就是说，组件的状态和操作方法是封装在一起的。如果选择了类的写法，就应该把相关的数据和操作，都写在同一个 class 里面。</p>
<p><strong>类组件的缺点</strong> :</p>
<p>大型组件很难拆分和重构，也很难测试。<br>业务逻辑分散在组件的各个方法之中，导致重复逻辑或关联逻辑。<br>组件类引入了复杂的编程模式，比如 render props 和高阶组件。<br>难以理解的 class，理解 JavaScript 中 <code>this</code> 的工作方式。</p>
<p><strong>区别</strong>：</p>
<p>函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。</p>
<p>1.状态的有无<br>hooks 出现之前，函数组件<code>没有实例</code>，<code>没有生命周期</code>，<code>没有state</code>，<code>没有this</code>，所以我们称函数组件为无状态组件。 hooks 出现之前，react 中的函数组件通常只考虑负责 UI 的渲染，没有自身的状态没有业务逻辑代码，是一个纯函数。它的输出只由参数 props 决定，不受其他任何因素影响。</p>
<p>2.调用方式的不同<br>函数组件重新渲染，将重新调用组件方法返回新的 react 元素。类组件重新渲染将 new 一个新的组件实例，然后调用 render 类方法返回 react 元素，这也说明为什么类组件中 this 是可变的。</p>
<p>3.因为调用方式不同，在函数组件使用中会出现问题<br>在操作中改变状态值，类组件可以获取最新的状态值，而函数组件则会按照顺序返回状态值</p>
<p><strong>React Hooks（钩子的作用）</strong></p>
<p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>
<p>React Hooks 的几个常用钩子:</p>
<ol>
<li><code>useState()</code> //状态钩子</li>
<li><code>useContext()</code> //共享状态钩子</li>
<li><code>useReducer()</code> //action 钩子</li>
<li><code>useEffect()</code> //副作用钩子</li>
</ol>
<p>还有几个不常见的大概的说下，后续会专门写篇文章描述下</p>
<ul>
<li><p>1.useCallback 记忆函数 一般把<strong>函数式组件理解为 class 组件 render 函数的语法糖</strong>，所以每次重新渲染的时候，函数式组件内部所有的代码都会重新执行一遍。而有了 useCallback 就不一样了，你可以通过 useCallback 获得一个记忆后的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> memoizedHandleClick = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Click happened&#x27;</span>)</span><br><span class="line">  &#125;, []) <span class="comment">// 空数组代表无论什么情况下该函数都不会发生改变</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">SomeComponent</span> <span class="attr">onClick</span>=<span class="string">&#123;memoizedHandleClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">SomeComponent</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个参数传入一个数组，数组中的每一项一旦值或者引用发生改变，useCallback 就会重新返回一个新的记忆函数提供给后面进行渲染。</p>
</li>
<li><p>2.useMemo 记忆组件 useCallback 的功能完全可以由 useMemo 所取代，如果你想通过使用 useMemo 返回一个记忆函数也是完全可以的。 唯一的区别是：<strong>useCallback 不会执行第一个参数函数，而是将它返回给你，而 useMemo 会执行第一个函数并且将函数执行结果返回给你</strong>。<br>所以 useCallback 常用记忆事件函数，生成记忆后的事件函数并传递给子组件使用。而 useMemo 更适合经过函数计算得到一个确定的值，比如记忆组件。</p>
</li>
<li><p>3.useRef 保存引用值</p>
<p>useRef 跟 createRef 类似，都可以用来生成对 DOM 对象的引用。useRef 返回的值传递给组件或者 DOM 的 ref 属性，就可以通过 ref.current 值<strong>访问组件或真实的 DOM 节点，重点是组件也是可以访问到的</strong>，从而可以对 DOM 进行一些操作，比如监听事件等等。</p>
</li>
<li><p>4.useImperativeHandle 穿透 Ref</p>
<p>通过 useImperativeHandle 用于让父组件获取子组件内的索引</p>
</li>
<li><p>5.useLayoutEffect 同步执行副作用</p>
<p>大部分情况下，使用 useEffect 就可以帮我们处理组件的副作用，但是如果想要同步调用一些副作用，比如对 DOM 的操作，就需要使用 useLayoutEffect，useLayoutEffect 中的副作用会在 DOM 更新之后同步执行。</p>
<p><strong>useEffect 和 useLayoutEffect 有什么区别</strong>：简单来说就是调用时机不同，useLayoutEffect 和原来 componentDidMount&amp;componentDidUpdate 一致，在 react 完成 DOM 更新后马上同步调用的代码，会阻塞页面渲染。而 useEffect 是会在整个页面渲染完才会调用的代码。<code>官方建议优先使用useEffect</code></p>
</li>
</ul>
<h3 id="Composition-API-与-React-js-中-Hooks-的异同点"><a href="#Composition-API-与-React-js-中-Hooks-的异同点" class="headerlink" title="Composition API 与 React.js 中 Hooks 的异同点"></a>Composition API 与 React.js 中 Hooks 的异同点</h3><p>a. React.js 中的 Hooks 基本使用 React Hooks 允许你 “勾入” 诸如组件状态和副作用处理等 React 功能中。Hooks 只能 用在函数组件中，并允许我们在不需要创建类的情况下将状态、副作用处理和更多东西 带入组件中。 React 核心团队奉上的采纳策略是不反对类组件，所以你可以升级 React 版本、在新组 件中开始尝试 Hooks，并保持既有组件不做任何更改。 案例： useState 和 useEffect 是 React Hooks 中的一些例子，使得函数组件中也能增加状态和 运行副作用。 我们也可以自定义一个 Hooks，它打开了代码复用性和扩展性的新大门。</p>
<p>b. Vue Composition API 基本使用 Vue Composition API 围绕一个新的组件选项 setup 而创建。setup() 为 Vue 组件提供了 状态、计算值、watcher 和生命周期钩子。 并没有让原来的 API（Options-based API）消失。允许开发者 结合使用新旧两种 API （向下兼容）。</p>
<p>c. 原理 React hook 底层是基于链表实现，调用的条件是每次组件被 render 的时候都会顺序执行 所有的 hooks。 Vue hook 只会被注册调用一次，Vue 能避开这些麻烦的问题，原因在于它对数据的响 应是基于 proxy 的，对数据直接代理观察。（这种场景下，只要任何一个更改 data 的地 方，相关的 function 或者 template 都会被重新计算，因此避开了 React 可能遇到的性能 上的问题）。 React 中，数据更改的时候，会导致重新 render，重新 render 又会重新把 hooks 重新注 册一次，所以 React 复杂程度会高一些。 m</p>
<h3 id="react-最新版本解决了什么问题-加了哪些东西"><a href="#react-最新版本解决了什么问题-加了哪些东西" class="headerlink" title="react 最新版本解决了什么问题 加了哪些东西"></a>react 最新版本解决了什么问题 加了哪些东西</h3><p>React 16.x 的三大新特性 Time Slicing, Suspense，hooks</p>
<ul>
<li><ol>
<li>Time Slicing（解决 CPU 速度问题）使得在执行任务的期间可以随时暂停，跑去干别的事情，这个特性使得 react 能在性能极其差的机器跑时，仍然保持有良好的性能</li>
</ol>
</li>
<li><ol>
<li>Suspense （解决网络 IO 问题）和 lazy 配合，实现异步加载组件。 能暂停当前组件的渲染, 当完成某件事以后再继续渲染，解决从 react 出生到现在都存在的「异步副作用」的问题，而且解决得非</li>
</ol>
</li>
<li>的优雅，使用的是「异步但是同步的写法」，我个人认为，这是最好的解决异步问题的方式</li>
<li><ol>
<li>此外，还提供了一个内置函数 componentDidCatch，当有错误发生时, 我们可以友好地展示 fallback 组件；可以捕捉到它的子元素（包括嵌套子元素）抛出的异常；可以复用错误组件。</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js-基础语法</title>
    <url>/20210629/17-js-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><h4 id="forin-用于对象迭代"><a href="#forin-用于对象迭代" class="headerlink" title="forin 用于对象迭代"></a>forin 用于对象迭代</h4><blockquote>
<p>forin 出现的比较早，不是 es6 的，不过后来都推荐用 forof</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.hasOwnProperty(item)) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = obj[item]</span><br><span class="line">    <span class="built_in">console</span>.log(element)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h4><blockquote>
<p>利用 Object.keys Object.values, Object.entries</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//案例1：</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, obj[key])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例2：</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="for-跳出"><a href="#for-跳出" class="headerlink" title="for 跳出"></a>for 跳出</h4><blockquote>
<p>利用 start: 跳出循环 ，比较冷门，一般不用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line"><span class="attr">start</span>: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  onsole.log(<span class="string">&#x27;i: &#x27;</span> + i)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;j:&#x27;</span> + j)</span><br><span class="line">    <span class="keyword">if</span> (j === <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="comment">// continue start</span></span><br><span class="line">      <span class="keyword">break</span> start</span><br><span class="line">    &#125;</span><br><span class="line">    num++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="date-函数"><a href="#date-函数" class="headerlink" title="date 函数"></a>date 函数</h3><blockquote>
<p>时间常用函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">//比如计算程序运行时间</span></span><br><span class="line"><span class="keyword">let</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> endTiem = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">&lt;!--时间差--&gt;</span><br><span class="line"><span class="built_in">console</span>.log(endTime - startTime)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleString());</span><br><span class="line"><span class="built_in">console</span>.log(date.toString());</span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleTimeString());</span><br><span class="line"><span class="built_in">console</span>.log(date.toTimeString());</span><br><span class="line"><span class="built_in">console</span>.log(date.toUTCString());</span><br><span class="line"><span class="built_in">console</span>.log(date.toDateString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(date.getDate());</span><br><span class="line"><span class="built_in">console</span>.log(date.getDay());</span><br><span class="line"><span class="built_in">console</span>.log(date.getFullYear());</span><br><span class="line"><span class="built_in">console</span>.log(date.getHours());</span><br><span class="line"><span class="built_in">console</span>.log(date.getMinutes());</span><br><span class="line"><span class="built_in">console</span>.log(date.getSeconds());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(date.getTime());</span><br></pre></td></tr></table></figure>

<h3 id="eval-运行脚本"><a href="#eval-运行脚本" class="headerlink" title="eval 运行脚本"></a>eval 运行脚本</h3><blockquote>
<p>比如拼接的 js 脚本或者后端返回的 js 代码段，来执行(比较危险，一般不用)</p>
</blockquote>
<blockquote>
<p>注意会有 this 的问题</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;alert(&#x27;ddd&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Math-函数"><a href="#Math-函数" class="headerlink" title="Math 函数"></a>Math 函数</h3><blockquote>
<p>数字一般常用方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil()   <span class="comment">//向上取整</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.floor()  <span class="comment">// 向下取整</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.round()  <span class="comment">//四舍五入</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.fround() <span class="comment">// 返回值最接近的单精度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.random()  随机数</span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> +<span class="number">1</span>)  <span class="comment">//10-1的随机数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.abs(x)   <span class="comment">//返回x的绝对值</span></span><br><span class="line">...其他不常用的百度搜或者文档吧</span><br></pre></td></tr></table></figure>

<h4 id="random-随机数"><a href="#random-随机数" class="headerlink" title="random 随机数"></a>random 随机数</h4><blockquote>
<p>返回介于 0（包含） ~ 1（不包含） 之间的一个随机数。<br>Math.random（）函数不是加密安全的随机数生成器。</p>
</blockquote>
<p><code>window.crypto.getRandomValues Crypto.getRandomValues() </code>方法让你可以获取符合密码学要求的安全的随机值。传入参数的数组被随机值填充（在加密意义上的随机）。</p>
<p>为了确保足够的性能，不使用真正的随机数生成器，但是它们正在使用具有足够熵值伪随机数生成器。它所使用的 PRNG 的实现与其他不同，但适用于加密的用途。该实现还需要使用具有足够熵的种子，如系统级熵源。</p>
<p>语法</p>
<p><code>cryptoObj.getRandomValues(typedArray);</code><br>参数</p>
<p>typedArray 是一个基于整数的 TypedArray，它可以是 <code>Int8Array、Uint8Array、Int16Array、 ``Uint16Array、 Int32Array 或者 Uint32Array。</code>在数组中的所有的元素会被随机数重写。（注释：生成的随机数储存在 typedArray 数组上。）</p>
<p>例子</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">window</span>.crypto.getRandomValues(new Int<span class="number">8</span>Array(<span class="number">2</span>))//Int<span class="number">8</span>Array(<span class="number">2</span>)<span class="meta"> [44, -3]</span></span><br><span class="line"><span class="attribute">window</span>.crypto.getRandomValues(new Uint<span class="number">8</span>Array(<span class="number">2</span>))//Uint<span class="number">8</span>Array(<span class="number">2</span>)<span class="meta"> [218, 119]</span></span><br><span class="line"><span class="attribute">window</span>.crypto.getRandomValues(new Int<span class="number">16</span>Array(<span class="number">2</span>))//Int<span class="number">16</span>Array(<span class="number">2</span>)<span class="meta"> [24582, -15808]</span></span><br><span class="line"><span class="attribute">window</span>.crypto.getRandomValues(new Uint<span class="number">16</span>Array(<span class="number">2</span>))//Uint<span class="number">16</span>Array(<span class="number">2</span>)<span class="meta"> [55391, 55756]</span></span><br><span class="line"><span class="attribute">window</span>.crypto.getRandomValues(new Int<span class="number">32</span>Array(<span class="number">2</span>))//Int<span class="number">32</span>Array(<span class="number">2</span>)<span class="meta"> [1574608122, -836595554]</span></span><br><span class="line"><span class="attribute">window</span>.crypto.getRandomValues(new Uint<span class="number">32</span>Array(<span class="number">2</span>))//Uint<span class="number">32</span>Array(<span class="number">2</span>)<span class="meta"> [1906545366, 2391348462]</span></span><br></pre></td></tr></table></figure>

<h3 id="Set-和-Map"><a href="#Set-和-Map" class="headerlink" title="Set 和 Map"></a>Set 和 Map</h3><blockquote>
<p>set 字符串， 一般用于去重</p>
</blockquote>
<blockquote>
<p>Map (key,val) 一般数组大了，可以用这个，代替数组，提高性能</p>
</blockquote>
<blockquote>
<p>总结:注意理解 set map 的区别，set 值都是唯一的，主要是数组<br>map 是对象，不是唯一的<br>set 或者 Map 后，可以进行迭代<br>Map 对象是键值对集合，和 JSON 对象类似，但是 key 不仅可以是字符串还可以是对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以通过字面量创建</span></span><br><span class="line"><span class="comment">//案例1：</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(</span><br><span class="line">    [</span><br><span class="line">        [<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;zhagnsan&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>]</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">map.set(<span class="string">&#x27;name&#x27;</span>,<span class="number">18</span>)   <span class="comment">//可以通过set添加</span></span><br><span class="line">map.set(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;zhangsan&#x27;</span>).set(<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>)   <span class="comment">//可以链式添加</span></span><br><span class="line">map.has(<span class="string">&#x27;name&#x27;</span>)   <span class="comment">//true has判断你是否存在</span></span><br><span class="line"></span><br><span class="line">map.get(<span class="string">&#x27;name&#x27;</span>)  <span class="comment">//zhangsan  get获取</span></span><br><span class="line"></span><br><span class="line">map.size   <span class="comment">//2   获取长度</span></span><br><span class="line">map.clear()   <span class="comment">//清空所有实例中键值对</span></span><br><span class="line"></span><br><span class="line">map.delete(<span class="string">&#x27;name&#x27;</span>)   <span class="comment">//delete  删除键</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//案例2:</span></span><br><span class="line">  <span class="number">1</span>  <span class="built_in">Array</span>.from(<span class="string">&#x27;hello&#x27;</span>)   <span class="comment">//从String中生成数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>  <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])  <span class="comment">//从set生成数组，注意set会去除重复的值可以用来去重</span></span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>  <span class="built_in">Array</span>.from(set);</span><br><span class="line">    <span class="comment">//[&quot;foo&quot;,&quot;bar&quot;,&quot;b&quot;]</span></span><br><span class="line"></span><br><span class="line">  <span class="number">4</span> <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">8</span>]]); <span class="comment">//从map中生成数组</span></span><br><span class="line">    <span class="built_in">Array</span>.from(map);</span><br><span class="line">    <span class="comment">// [[1, 2], [2, 4], [4, 8]]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mapper = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]);</span><br><span class="line">    <span class="built_in">Array</span>.from(mapper.values());</span><br><span class="line">    <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;];</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Array</span>.from(mapper.keys());</span><br><span class="line">    <span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;];</span></span><br><span class="line"></span><br><span class="line"> <span class="number">5</span> <span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>)  <span class="comment">//[2,3,6]</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//后面可以跟一个函数，不必要Array.from().map()遍历了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="built_in">Array</span>.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)    <span class="comment">//[1,2,3]  可以把参数转换为数组</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Object-assign-浅拷贝"><a href="#Object-assign-浅拷贝" class="headerlink" title="Object.assign() 浅拷贝"></a>Object.assign() 浅拷贝</h3><blockquote>
<p>对象，深拷贝（不会变） 浅拷贝（会变）</p>
</blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">深拷贝可以通过JSON</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span><span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse(<span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>stringify(obj)) <span class="comment">//先转换成字符在换成对象，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是有一个缺点，对象的方法会为 undefined</span></span><br><span class="line"></span><br><span class="line">还可以通过<span class="keyword">object</span>.assign<span class="literal">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;,</span><br><span class="line">    obj1 =&#123;name:&#x27;zhangsan&#x27;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newObj = <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>assign(obj,obj1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组可以通过<span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span>form</span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="literal">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span>;</span><br><span class="line"> <span class="keyword">let</span> arr2 = <span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span>form(arr1);</span><br></pre></td></tr></table></figure>

<h3 id="deepClone-深克隆"><a href="#deepClone-深克隆" class="headerlink" title="deepClone 深克隆"></a>deepClone 深克隆</h3><p>还可以用函数递归调用来实现 深拷贝</p>
<p>或者就是一些工具库了。比如 lodash,或者 jquery 的 extend</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> deep<span class="constructor">Clone(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> objClone = <span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span>is<span class="constructor">Array(<span class="params">obj</span>)</span>?<span class="literal">[]</span>:&#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(obj<span class="operator"> &amp;&amp; </span>typeof obj===<span class="string">&quot;object&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.has<span class="constructor">OwnProperty(<span class="params">key</span>)</span>)&#123;</span><br><span class="line">                <span class="comment">//判断ojb子元素是否为对象，如果是，递归复制</span></span><br><span class="line">                <span class="keyword">if</span>(obj<span class="literal">[<span class="identifier">key</span>]</span>&amp;&amp;typeof obj<span class="literal">[<span class="identifier">key</span>]</span> ===<span class="string">&quot;object&quot;</span>)&#123;</span><br><span class="line">                    objClone<span class="literal">[<span class="identifier">key</span>]</span> = deep<span class="constructor">Clone(<span class="params">obj</span>[<span class="params">key</span>])</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//如果不是，简单复制</span></span><br><span class="line">                    objClone<span class="literal">[<span class="identifier">key</span>]</span> = obj<span class="literal">[<span class="identifier">key</span>]</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return objClone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a=<span class="literal">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span>,</span><br><span class="line">    b=deep<span class="constructor">Clone(<span class="params">a</span>)</span>;</span><br><span class="line">a<span class="literal">[<span class="number">0</span>]</span>=<span class="number">2</span>;</span><br><span class="line">console.log(a,b);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="hasOwnProperty-判断是否原型链"><a href="#hasOwnProperty-判断是否原型链" class="headerlink" title="hasOwnProperty 判断是否原型链"></a>hasOwnProperty 判断是否原型链</h3><blockquote>
<p><code>hasOwnProperty</code> 判断对象属性是实例的还是原型的</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="string">&#x27;18&#x27;</span>,</span><br><span class="line">    <span class="built_in">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>))   <span class="comment">//false 如果是实例就返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.hasOwnproperty(<span class="string">&#x27;age&#x27;</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="createDocumentFragment-文档碎片"><a href="#createDocumentFragment-文档碎片" class="headerlink" title="createDocumentFragment 文档碎片"></a>createDocumentFragment 文档碎片</h3><blockquote>
<p>如果 dom 中更新插入大量元素，可能会导致性能问题<br>可以用文档碎片解决<br>最好用模板 text/html</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/html&quot;</span> id=<span class="string">&quot;tpl&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ifrag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> body = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> ul = <span class="built_in">document</span>.createElement(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> tpl = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tpl&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    body.appendChild(ul);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        li.setAttribute(<span class="string">&#x27;index&#x27;</span>,i+<span class="number">1</span>)</span><br><span class="line">        li.innerHTML = <span class="string">`第<span class="subst">$&#123;i + <span class="number">1</span> &#125;</span> 个`</span> + tpl.innerHTML.replace(<span class="regexp">/&#123;&#123;(.*?)&#125;&#125;/</span>,<span class="string">`<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>`</span>);</span><br><span class="line">        ifrag.appendChild(li);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ul.appendChild(ifrag)</span><br><span class="line"></span><br><span class="line">    ul.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(e.target);</span><br><span class="line">    &#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<h3 id="块级作用域，var-函数作用域"><a href="#块级作用域，var-函数作用域" class="headerlink" title="块级作用域，var 函数作用域"></a>块级作用域，var 函数作用域</h3><pre><code>总结：

1.  var 可以重复定义，但是 let 不可以，
2.  var 可以变量提升，let 不可以
3.  全局生命，var 会成为 window 的对象，let 则不会
</code></pre>
<p>仔细理解，<img title="let注意" src="https://blog.img.wy1991.cn/static/images/js/var-let.png-blogImg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(name) <span class="comment">// 空，因为let是块级作用域</span></span><br><span class="line">  <span class="built_in">console</span>.log(age) <span class="comment">//18 var可以访问到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(sex) <span class="comment">//男，不会报错</span></span><br><span class="line">  <span class="keyword">var</span> sex = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(say) <span class="comment">//语法错误，say未定义</span></span><br><span class="line">  <span class="keyword">let</span> say = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> title = <span class="string">&#x27;学习javascript&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.title) <span class="comment">//学习javascript</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;复习javascript&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="array-form"><a href="#array-form" class="headerlink" title="array.form"></a>array.form</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">//案例1 实现浅拷贝</span></span><br><span class="line">  <span class="comment">//  概念： 浅拷贝深拷贝什么区别？</span></span><br><span class="line">  <span class="comment">//  浅拷贝只复制对象一层的属性， 深拷贝则每层都赋值</span></span><br><span class="line"> <span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"> <span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.form(arr1);</span><br><span class="line">arr1.push(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//1,2,3,4</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//1,2,3</span></span><br><span class="line"><span class="comment">//Array.form 可以实现数组的浅拷贝</span></span><br><span class="line"><span class="comment">//其他Object.assgin()</span></span><br><span class="line"><span class="comment">//JSON.string (如果对象属性有方法就会被转成字符串function（）)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">Array</span>.from(text); <span class="comment">//[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;...]  //会被分成数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(arr1,<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>)  <span class="comment">//第二个参数，每个属性遍历会触发  //2,4,6,8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//案例2</span></span><br><span class="line">cosnt arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过这些方法返回迭代器，可以通过Array.from转位数组实例</span></span><br><span class="line"><span class="keyword">const</span> akeys = <span class="built_in">Array</span>.from(a.keys())</span><br><span class="line"><span class="keyword">const</span> avalue = <span class="built_in">Array</span>.from(a.values())</span><br><span class="line"><span class="keyword">const</span> aEntries = <span class="built_in">Array</span>.from(a.entries())</span><br><span class="line"></span><br><span class="line"><span class="comment">//另外也可以使用es6de循环</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">const</span> [id,ele] <span class="keyword">of</span> a.entries())&#123;</span><br><span class="line">    alert(id)</span><br><span class="line">    alert(ele)</span><br><span class="line">    <span class="comment">//0</span></span><br><span class="line">    <span class="comment">//A</span></span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="comment">//b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h3><blockquote>
<p>Array.isArray(arr) 判断是否是数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">    <span class="comment">//操作数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">instanceof</span> 有一个缺点，只能在一个全局执行上下文</span><br><span class="line">因此建议，使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(value))&#123;</span><br><span class="line">    <span class="comment">//操作数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h3><blockquote>
<p>copyWithin() 方法用于从数组的指定位置拷贝元素到数组的另一个指定位置中。</p>
</blockquote>
<p>array.copyWithin(target, start, end)</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">target</td>
<td align="center">必需。复制到指定目标索引位置。</td>
</tr>
<tr>
<td align="center">start</td>
<td align="center">可选。元素复制的起始位置</td>
</tr>
<tr>
<td align="center">end</td>
<td align="center">可选。停止复制的索引位置 (默认为 array.length)。如果为负值，表示倒数。</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&#x27;Banana&#x27;</span>, <span class="string">&#x27;Orange&#x27;</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Mango&#x27;</span>]</span><br><span class="line">fruits.copyWithin(<span class="number">2</span>, <span class="number">0</span>) <span class="comment">//Banana,Orange,Banana,Orange</span></span><br></pre></td></tr></table></figure>

<h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><blockquote>
<p>fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</p>
</blockquote>
<blockquote>
<p>arr.fill(value[, start[, end]])</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>用来填充数组元素得值</td>
</tr>
<tr>
<td>start</td>
<td>可选，起始索引，默认值是 0</td>
</tr>
<tr>
<td>end</td>
<td>可选，终止索引，默认值是 this.length</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// fill with 0 from position 2 until position 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.fill(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">// expected output: [1, 2, 0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fill with 5 from position 1</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.fill(<span class="number">5</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">// expected output: [1, 5, 5, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1.fill(<span class="number">6</span>))</span><br><span class="line"><span class="comment">// expected output: [6, 6, 6, 6]</span></span><br></pre></td></tr></table></figure>

<pre><code>  fill 方法接受三个参数 value, start 以及 end. start 和 end 参数是可选的, 其默认值分别为 0 和 this 对象的 length 属性值。

  如果 start 是个负数, 则开始索引会被自动计算成为 length+start, 其中 length 是 this 对象的 length 属性值。如果 end 是个负数, 则结束索引会被自动计算成为 length+end。

  fill 方法故意被设计成通用方法, 该方法不要求 this 是数组对象。

  fill 方法是个可变方法, 它会改变调用它的 this 对象本身, 然后返回它, 而并不是返回一个副本。

  当一个对象被传递给 fill方法的时候, 填充数组的是这个对象的引用。
</code></pre>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><blockquote>
<p>所有对象都有 toLocaleString()</p>
</blockquote>
<p>数组调用 toString()会返回一个字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">alert(arr.toString()) <span class="comment">//a,b,c</span></span><br></pre></td></tr></table></figure>

<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">arr.join(<span class="string">&quot;-&quot;</span>)  <span class="comment">//a-b-c  如果想用别的分隔符，可以用join</span></span><br><span class="line">使用split(<span class="string">&#x27;,&#x27;</span>)可以分割回数组</span><br></pre></td></tr></table></figure>

<h3 id="数组-push-pop-shift-unshift"><a href="#数组-push-pop-shift-unshift" class="headerlink" title="数组(push,pop,shift,unshift)"></a>数组(push,pop,shift,unshift)</h3><blockquote>
<p>数组常用进栈出栈方法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">push,pop,shift,unshift</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">arr.push(<span class="string">&#x27;e&#x27;</span>)  <span class="comment">//a,b,c,e</span></span><br><span class="line">arr.pop() <span class="comment">//a,b,c</span></span><br><span class="line"></span><br><span class="line">数组队方法</span><br><span class="line">shift 从第一位插入元素</span><br><span class="line">unshift从第一个删除元素</span><br></pre></td></tr></table></figure>

<h3 id="数组-sort-reverse"><a href="#数组-sort-reverse" class="headerlink" title="数组(sort reverse)"></a>数组(sort reverse)</h3><blockquote>
<p>都是排序，一个是正序是个是翻转倒叙</p>
</blockquote>
<p>sort() 可以传入一个函数用于自定义排序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function">(<span class="params">a.b</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a-b</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数组-concat-slice-splice"><a href="#数组-concat-slice-splice" class="headerlink" title="数组(concat,slice,splice)"></a>数组(concat,slice,splice)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">concat() 数组拼接</span><br><span class="line"><span class="keyword">let</span> a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">slice() 切割数组，不影响元数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b =a.slice(<span class="number">1</span>)</span><br><span class="line">alert(b)   <span class="comment">//[&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> c = a.slice(<span class="number">1</span>,<span class="number">2</span>)   <span class="comment">//[&#x27;b&#x27;]  //参数，开始与结束索引</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">splice() 可以在数组中插入元素,此方法修改原数组</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>:删除  splice()传入<span class="number">2</span>个参数，比如splice(<span class="number">0</span>,<span class="number">2</span>) ，参数：从<span class="number">0</span>下标开始，删除<span class="number">2</span>位</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>：插入,splice() 最少传入<span class="number">3</span>个参数, 比如splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>) 从数组下标<span class="number">2</span>开始插入e f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>： 替换，splice() 传入<span class="number">3</span>个参数，splice(<span class="number">2</span>,<span class="number">2</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>)  开始位置，要删除元素的数量，插入的元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总结: 如果splice()第二个参数是<span class="number">0</span>，则直接从第一个参数下标开始插入</span><br><span class="line">如果是大于<span class="number">0</span>则表示删除数量</span><br></pre></td></tr></table></figure>

<h3 id="数组-indexOf-lastIndexOf-includes"><a href="#数组-indexOf-lastIndexOf-includes" class="headerlink" title="数组(indexOf,lastIndexOf,includes)"></a>数组(indexOf,lastIndexOf,includes)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">indexOf()   <span class="comment">//开始查找</span></span><br><span class="line">lastIndexOf(),  <span class="comment">//倒数查找</span></span><br><span class="line">includes()   <span class="comment">//是否包含</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> number = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">alert(number.indexOf(<span class="number">4</span>));   <span class="comment">//3</span></span><br><span class="line">number.lastIndexOf(<span class="number">4</span>);      <span class="comment">//5</span></span><br><span class="line">number.includes(<span class="number">4</span>)     <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">number.indexOf(<span class="number">4</span>,<span class="number">4</span>)   <span class="comment">//2个参数，查找4，从4索引开始</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = [&#123;<span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> morePeople = [<span class="string">&#x27;1&#x27;</span>,person]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( people.indexOf(person) );     <span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( people.includes(person)  );  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( morePeople.indexOf(person) );   <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( morePeople.includes(person)  );  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">总结，因为[&#123;&#125;] 和<span class="keyword">let</span> 对比的内存地址不一样</span><br><span class="line">因此对比是全等(===) 不单单是指一样</span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">const people = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">        age： <span class="number">27</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name:<span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">        age: <span class="number">35</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">people.find((ele,index,arr) =&gt; ele.age &lt; <span class="number">30</span>)</span><br><span class="line"> <span class="regexp">//</span>&#123; name:<span class="string">&#x27;zhangsan&#x27;</span>,age:<span class="number">27</span> &#125;</span><br><span class="line"> <span class="regexp">//</span>箭头函数，如果只有一行代码，可以不写return和｛｝中括号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">people.findIndex((ele,index,arr) =&gt; ele.age &gt; <span class="number">30</span>)</span><br><span class="line">    <span class="regexp">//</span><span class="number">1</span></span><br><span class="line">    <span class="regexp">//</span>返回下标</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">find找到元素后，不会继续往后搜索</span><br></pre></td></tr></table></figure>

<h3 id="数组迭代-every-filter-foreach-map-some"><a href="#数组迭代-every-filter-foreach-map-some" class="headerlink" title="数组迭代(every,filter,foreach,map,some)"></a>数组迭代(every,filter,foreach,map,some)</h3><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">every</span>()    对数组每一项都运行传入的函数  全<span class="built_in">部true</span> 则返<span class="built_in">回true</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">filter</span>()   对数组每一项都运行传入的函数  返<span class="built_in">回true</span>后组成数组返回</span><br><span class="line">foreach()  对数组每一项都运行传入的函数 没有返回值</span><br><span class="line"><span class="keyword">map</span>()      对数组每一项都运行传入的函数 返回由每次函数调用的结果够成的数组</span><br><span class="line"><span class="keyword">some</span>()     对数组每一项都运行传入的函数 如果有一项返<span class="built_in">回true</span>，则这个方法返<span class="built_in">回true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以下这些方法都不改变原数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbes = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> everyResult = numbers.<span class="keyword">every</span>((<span class="type">item</span>,index,<span class="keyword">array</span>) =&gt; <span class="type">item</span> &gt; <span class="number">2</span>);</span><br><span class="line">alert(everyResult)  //false  <span class="keyword">every</span>所有返<span class="built_in">回true</span>才<span class="built_in">是true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someResult = numbers.<span class="keyword">some</span>((<span class="type">item</span>,index,<span class="keyword">array</span>) =&gt; <span class="type">item</span> &gt; <span class="number">2</span> );</span><br><span class="line">alert(someResult) //true  <span class="keyword">some</span>只要有一<span class="built_in">个true</span>就<span class="built_in">为true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filterResult = numbers<span class="built_in">.filter</span>((<span class="type">item</span>,index,<span class="keyword">array</span>) =&gt; <span class="type">item</span> &gt; <span class="number">2</span>);</span><br><span class="line">alert(filterResult)  //[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]  <span class="built_in">，filter</span>过滤，返回个数组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mapResult = numbers.<span class="keyword">map</span>((<span class="type">item</span>,index,arr) =&gt; <span class="type">item</span> * <span class="number">2</span>);</span><br><span class="line">alert(mapResult)  //[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>]  //<span class="keyword">map</span>非常适合复制和原数组元素对应的新数组</span><br><span class="line"></span><br><span class="line">forEach修改原数组，没有返回值</span><br><span class="line">numbres.forEach((<span class="type">item</span>,index,<span class="keyword">array</span>)=&gt;&#123;</span><br><span class="line">    //执行操作，</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="数组-reduce-reduceRight"><a href="#数组-reduce-reduceRight" class="headerlink" title="数组(reduce,reduceRight)"></a>数组(reduce,reduceRight)</h3><blockquote>
<p>归并方法 一般用于求和</p>
</blockquote>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">reduce(), reduceRight()</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="built_in">values</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="built_in">sum</span> = <span class="built_in">values</span>.reduce((prev,cur,index,<span class="built_in">array</span>) =&gt; prev + cur )</span><br><span class="line"></span><br><span class="line">alert(<span class="built_in">sum</span>)   //<span class="number">15</span></span><br><span class="line"></span><br><span class="line">reduceRight 与reduce方法是类似的，方向是相反的</span><br><span class="line"></span><br><span class="line"> <span class="built_in">let</span> <span class="built_in">sum</span> = <span class="built_in">values</span>.reduce(((prev,cur,index,<span class="built_in">array</span>) =&gt; prev + cur),<span class="number">10</span>)</span><br><span class="line"> alert(<span class="built_in">sum</span>)   //<span class="number">25</span></span><br><span class="line"> //后面可以加个参数， 不加默认是<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><blockquote>
<ol>
<li>利用 indexOf</li>
<li>利用 set</li>
<li>利用 includes</li>
</ol>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;数组去重&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;includes 和 indexOf 的区别,</span><br><span class="line">        includes  返回true和false</span><br><span class="line">        indexOf 返回 -<span class="number">1</span>  index, 可以知道具体位置</span><br><span class="line"></span><br><span class="line">    &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    let arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="regexp">//</span> <span class="number">1</span>：es5最常用的方法， filter相当于每个元素过一遍，返回indexOf 下标 等于index循环下标的</span><br><span class="line">    <span class="regexp">//</span>    let a = arr.filter((item,index,arr)=&gt;&#123;</span><br><span class="line">    <span class="regexp">//</span>         console.log(item,index,arr);</span><br><span class="line">    <span class="regexp">//</span>         return arr.indexOf(item) == index;   <span class="regexp">//</span>手动去重</span><br><span class="line">    <span class="regexp">//</span>     &#125;).sort()</span><br><span class="line"></span><br><span class="line">    <span class="regexp">//</span>     console.log(a);</span><br><span class="line"></span><br><span class="line">    <span class="regexp">//</span> <span class="number">2</span>: 可以利用set特性</span><br><span class="line">        <span class="regexp">//</span> let a = new Set(arr);</span><br><span class="line">        <span class="regexp">//</span> console.log(Array.from(a));</span><br><span class="line"></span><br><span class="line">    <span class="regexp">//</span> <span class="number">3</span>：foreach</span><br><span class="line">        let newArr = [];</span><br><span class="line">        arr.forEach(item=&gt;&#123;</span><br><span class="line">            <span class="regexp">//</span>方法<span class="number">1</span>：</span><br><span class="line">            <span class="regexp">//</span> <span class="keyword">if</span>(newArr.indexOf(item) == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="regexp">//</span>     newArr.push(item)</span><br><span class="line">            <span class="regexp">//</span> &#125;</span><br><span class="line">            <span class="regexp">//</span>方法<span class="number">2</span>：</span><br><span class="line">            <span class="keyword">if</span>(!newArr.includes(item))&#123;</span><br><span class="line">                newArr.push(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(newArr);   <span class="regexp">//</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="数组扁平化-flat"><a href="#数组扁平化-flat" class="headerlink" title="数组扁平化(flat)"></a>数组扁平化(flat)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = arr.flat(<span class="literal">Infinity</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.flat())</span><br><span class="line"><span class="comment">// expected output: [0, 1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, [[[<span class="number">3</span>, <span class="number">4</span>]]]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr2.flat(<span class="number">2</span>))</span><br><span class="line"><span class="comment">// expected output: [0, 1, 2, [3, 4]]</span></span><br></pre></td></tr></table></figure>

<h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><blockquote>
<p>contains 方法来判断元素包含关系</p>
</blockquote>
<blockquote>
<p>contains 方法可以判断 A 元素是否包含 B 元素，返回布尔值</p>
</blockquote>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">var <span class="literal">result</span>=document.getElementById(<span class="built_in">id</span>).classList.<span class="keyword">contains</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="literal">result</span>)</span><br></pre></td></tr></table></figure>

<h3 id="自定义属性-dataset"><a href="#自定义属性-dataset" class="headerlink" title="自定义属性 dataset"></a>自定义属性 dataset</h3><blockquote>
<p>dataset 获取自定义属性(自己添加的属性就叫自定义属性)</p>
</blockquote>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;dv&quot;</span> <span class="keyword">data</span>-<span class="keyword">name</span>=<span class="string">&quot;帅哥&quot;</span> <span class="keyword">data</span>-job=<span class="string">&quot;前端&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">  var dt=document.querySelector(<span class="string">&quot;#dv&quot;</span>).dataset;</span><br><span class="line">  console.<span class="built_in">log</span>(dt.<span class="keyword">name</span>);</span><br><span class="line">  <span class="comment">// 通过代码为标签添加自定义属性</span></span><br><span class="line">  dt.age=<span class="string">&quot;25&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="FileReader-读取文件"><a href="#FileReader-读取文件" class="headerlink" title="FileReader 读取文件"></a>FileReader 读取文件</h3><blockquote>
<p>通过 FileReader 对象可以读取本地存储的文件，使用 File 对象来指定所要读取的文件或数据。用户可以通过选择文件按钮或者拖移上传文件</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="keyword">type</span>=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件,获取上传文件标签的这个对象</span></span><br><span class="line">  <span class="keyword">var</span> f1 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#file&quot;</span>);</span><br><span class="line">  <span class="comment">//上传文件的触发事件--(只要上传文件就会触发该事件)</span></span><br><span class="line">  f1.onchange=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.files[<span class="number">0</span>], <span class="string">&#x27;this&#x27;</span>)</span><br><span class="line">    <span class="comment">//可以获取上传的文件</span></span><br><span class="line">    <span class="keyword">var</span> fl1=<span class="built_in">this</span>.files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//读取文件,创建读取文件的对象</span></span><br><span class="line">    <span class="keyword">var</span> fReader=<span class="keyword">new</span> FileReader();</span><br><span class="line">    <span class="comment">//读取文件</span></span><br><span class="line">    fReader.readAsText(fl1);</span><br><span class="line">    <span class="comment">//开始读取文件的加载的事件</span></span><br><span class="line">    fReader.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//css的代码最终是可以在style标签写的</span></span><br><span class="line">      <span class="keyword">var</span> style=<span class="built_in">document</span>.createElement(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">      <span class="comment">//获取的读取的结果</span></span><br><span class="line">      <span class="keyword">var</span> result=fReader.result;</span><br><span class="line">      style.innerHTML=result;</span><br><span class="line">      <span class="built_in">document</span>.querySelector(<span class="string">&quot;head&quot;</span>).appendChild(style);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<pre><code>  • 属性
  FileReader 接口有3个用来读取文件方法返回结果在result中
  readAsBinaryString ---将文件读取为二进制编码
  readAsText ---将文件读取为文本
  readAsDataURL ---将文件读取为DataURL
  FileReader 提供的事件模型
  onabort 中断时触发
  onerror 出错时触发
  onload 文件读取成功完成时触发
  onloadend 读取完成触发，无论成功或失败
  onloadstart 读取开始时触发
  onprogress 读取中
</code></pre>
<h3 id="onLine-监测网络状态"><a href="#onLine-监测网络状态" class="headerlink" title="onLine 监测网络状态"></a>onLine 监测网络状态</h3><blockquote>
<p>window.navigator.onLine</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> state = <span class="built_in">window</span>.navigator.onLine;</span><br><span class="line">  <span class="keyword">if</span> (state) &#123;</span><br><span class="line">      alert(<span class="string">&quot;在线的&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">&quot;不在线&quot;</span>); <span class="comment">//回去自己试试</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ononline联网触发,onoffline掉线触发</span></span><br><span class="line">  <span class="built_in">window</span>.ononline = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">&quot;连接上了&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">window</span>.onoffline = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">&quot;掉线了&quot;</span>)</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="当前地理位置"><a href="#当前地理位置" class="headerlink" title="当前地理位置"></a>当前地理位置</h3><blockquote>
<ol>
<li>获取当前地理信息 navigator.geolocation.getCurrentPosition(successCallback, errorCallback)</li>
<li>获取实时地理信息 navigator.geolocation.watchPosition(successCallback, errorCallback) 当成功获取地理信息后，会调用 succssCallback，并返回一个包含位置信息的对象。 获取地理信息失败后，会调用 errorCallback，并返回一个包含错误信息的对象。</li>
</ol>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">window<span class="selector-class">.navigator</span><span class="selector-class">.geolocation</span><span class="selector-class">.getCurrentPosition</span>(success, error)</span><br><span class="line">  <span class="comment">// 定位成功</span></span><br><span class="line">  function success (msg) &#123;</span><br><span class="line">    console<span class="selector-class">.log</span>(msg<span class="selector-class">.coords</span>.latitude)</span><br><span class="line">    console<span class="selector-class">.log</span>(msg<span class="selector-class">.coords</span>.longitude)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<pre><code>  属性
  position.coords.latitude 纬度
  position.coords.longitude 经度
  position.coords.accuracy 精度
  position.coords.altitude 海拔高度
</code></pre>
<h3 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h3><p>这两个的出现，总感觉是为了开发的代码规范而出现的。我们要逐渐放弃 var，在项目中多用 let 和 const</p>
<p>与 var 的区别：</p>
<ul>
<li>var 有变量提升，有初始化提升，值可变</li>
<li>let 有变量提升，没有初始化提升，值可变</li>
<li>const 有变量提升，没有初始化提升，值不可变，但如果是定义对象，则属性可变</li>
</ul>
<p>暂时性死区问题说明：其实 let 和 const 是有变量提升的，但是没有初始化提升：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">var <span class="type">name</span> = <span class="string">&#x27; 闲心&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> fn () &#123;</span><br><span class="line">  console.log(<span class="type">name</span>)</span><br><span class="line">  let <span class="type">name</span> = <span class="string">&#x27; 闲心&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">fn() // Cannot <span class="keyword">access</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">before</span> initialization</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>块级作用域解决问题：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(var i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="regexp">//</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(let i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="regexp">//</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>曾经的我，想要拼接多个数组，我只能这么做</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">const</span> arr<span class="number">1</span> =<span class="meta"> [1, 2, 4]</span></span><br><span class="line"><span class="attribute">const</span> arr<span class="number">2</span> =<span class="meta"> [4, 5, 7]</span></span><br><span class="line"><span class="attribute">const</span> arr<span class="number">3</span> =<span class="meta"> [7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">const</span> arr = arr<span class="number">1</span>.concat(arr<span class="number">2</span>).concat(arr<span class="number">3</span>)<span class="meta"></span></span><br><span class="line"><span class="meta">[</span></span><br><span class="line"><span class="meta">  1, 2, 4, 4, 5,</span></span><br><span class="line"><span class="meta">  7, 7, 8, 9</span></span><br><span class="line"><span class="meta">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在的我，可以更优雅地进行拼接</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">const</span> arr<span class="number">1</span> =<span class="meta"> [1, 2, 4]</span></span><br><span class="line"><span class="attribute">const</span> arr<span class="number">2</span> =<span class="meta"> [4, 5, 7]</span></span><br><span class="line"><span class="attribute">const</span> arr<span class="number">3</span> =<span class="meta"> [7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">const</span> arr =<span class="meta"> [...arr1, ...arr2, ...arr3]</span><span class="meta"></span></span><br><span class="line"><span class="meta">[</span></span><br><span class="line"><span class="meta">  1, 2, 4, 4, 5,</span></span><br><span class="line"><span class="meta">  7, 7, 8, 9</span></span><br><span class="line"><span class="meta">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>大家可能遇到过这种问题，一个函数，传入参数的个数是不确定的，这就可以用 ES6 的剩余参数</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> <span class="params">(name, <span class="rest_arg">...params</span>)</span> </span>&#123;</span><br><span class="line">  console.log(name)</span><br><span class="line">  console.log(params)</span><br><span class="line">&#125;</span><br><span class="line">fn (<span class="string">&#x27; 闲心&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">//  闲心 [ 1, 2 ]</span></span><br><span class="line">fn (<span class="string">&#x27; 闲心&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">//  闲心 [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>以前的我，拼接字符串只能这么做</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">name</span> = <span class="string">&#x27; 闲心&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="string">&#x27;22&#x27;</span></span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">name</span> + <span class="string">&#x27;今年&#x27;</span> + age + <span class="string">&#x27;岁啦&#x27;</span>) <span class="comment">//  闲心今年22岁啦const name = &#x27; 闲心&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="string">&#x27;22&#x27;</span></span><br><span class="line"></span><br><span class="line">console.log(<span class="keyword">name</span> + <span class="string">&#x27;今年&#x27;</span> + age + <span class="string">&#x27;岁啦&#x27;</span>) <span class="comment">//  闲心今年22岁啦</span></span><br></pre></td></tr></table></figure>

<p>现在我可以这么做，会更优雅</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27; 闲心&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="string">&#x27;22&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>今年<span class="subst">$&#123;age&#125;</span>岁啦`</span>) <span class="comment">//  闲心今年22岁啦</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h3><p>可以用来获取对象的 key 的集合，进而可以获得对应 key 的 value</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27; 闲心&#x27;</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  gender: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const <span class="built_in">keys</span> = Object.<span class="built_in">keys</span>(obj)</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">keys</span>) // [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;gender&#x27;</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>以前我们使用普通函数</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ES6 新加了箭头函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="function"><span class="keyword">fn</span> = (<span class="params"></span>) =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果只有一个参数，可以省略括号</span></span><br><span class="line"><span class="keyword">const</span> <span class="function"><span class="keyword">fn</span> = <span class="title">name</span> =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果函数体里只有一句return</span></span><br><span class="line"><span class="keyword">const</span> <span class="function"><span class="keyword">fn</span> = <span class="title">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可简写为</span></span><br><span class="line"><span class="keyword">const</span> <span class="function"><span class="keyword">fn</span> = <span class="title">name</span> =&gt;</span> <span class="number">2</span> * name</span><br><span class="line"><span class="comment">// 如果返回的是对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="function"><span class="keyword">fn</span> = <span class="title">name</span> =&gt;</span> (&#123; name: name &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>普通函数和箭头函数的区别：</p>
<ol>
<li>箭头函数不可作为构造函数，不能使用 new</li>
<li>箭头函数没有自己的 this</li>
<li>箭头函数没有 arguments 对象</li>
<li>箭头函数没有原型对象</li>
</ol>
<h3 id="Array-forEach"><a href="#Array-forEach" class="headerlink" title="Array.forEach"></a>Array.forEach</h3><p>ES6 新加的数组遍历方法</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">const eachArr = <span class="selector-attr">[1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个参数：遍历项 索引 数组本身</span></span><br><span class="line"><span class="comment">// 配合箭头函数</span></span><br><span class="line">eachArr<span class="selector-class">.forEach</span>((item, index, arr) =&gt; &#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(item, index, arr)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="selector-attr">[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="selector-attr">[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="selector-attr">[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="selector-attr">[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="selector-attr">[ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map"></a>Array.map</h3><p>常用于返回一个处理过后的新数组</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mapArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个参数：遍历项 索引 数组本身</span></span><br><span class="line"><span class="comment">// 配合箭头函数，对每一个元素进行翻倍</span></span><br><span class="line"><span class="keyword">const</span> mapArr2 = mapArr.map((<span class="built_in">num</span>, index, arr) =&gt; <span class="number">2</span> * <span class="built_in">num</span>)</span><br><span class="line">console.log(mapArr2)</span><br><span class="line">[ <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter"></a>Array.filter</h3><p>顾名思义，用来过滤的方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> filterArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个参数：遍历项 索引 数组本身</span></span><br><span class="line"><span class="comment">// 配合箭头函数，返回大于3的集合</span></span><br><span class="line"><span class="keyword">const</span> filterArr2 = filterArr.filter((<span class="built_in">num</span>, index, arr) =&gt; <span class="built_in">num</span> &gt; <span class="number">3</span>)</span><br><span class="line">console.log(filterArr2)</span><br><span class="line">[ <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Array-some"><a href="#Array-some" class="headerlink" title="Array.some"></a>Array.some</h3><p>some，意思就是只有一个是真，那就返回真</p>
<pre><code>  const someArr = [false, true, false, true, false]

  // 三个参数：遍历项 索引 数组本身
  // 配合箭头函数，只要有一个为true，就返回true，一个都true都没有，就返回false
  const someArr2 = someArr.some((bol, index, arr) =&gt; bol)
  console.log(someArr2)
  true
</code></pre>
<h3 id="Array-every"><a href="#Array-every" class="headerlink" title="Array.every"></a>Array.every</h3><p>every 跟 some 是相反的，some 是只有一个就行，every 是要所有为真才返回真</p>
<pre><code>  const everyArr = [false, true, false, true, false]

  // 三个参数：遍历项 索引 数组本身
  // 配合箭头函数，需要所有为true，才返回true，否则返回false
  const everyArr2 = everyArr.every((bol, index, arr) =&gt; bol)
  console.log(everyArr2)
</code></pre>
<h3 id="Array-reduce"><a href="#Array-reduce" class="headerlink" title="Array.reduce"></a>Array.reduce</h3><ul>
<li>第一个参数 callback 函数： pre 为上次 return 的值，next 为数组的本次遍历的项</li>
<li>第二个参数为初始值，也是第一个 pre</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// 计算 <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> + <span class="number">5</span></span><br><span class="line">const reduceArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">const sum = reduceArr.reduce((<span class="keyword">pre</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">pre</span> + <span class="keyword">next</span></span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">console.<span class="built_in">log</span>(sum) // <span class="number">15</span></span><br><span class="line"></span><br><span class="line">// 统计元素出现个数</span><br><span class="line">const nameArr = [<span class="string">&#x27; 闲心&#x27;</span>, <span class="string">&#x27;sunshine_lin&#x27;</span>, <span class="string">&#x27; 闲心&#x27;</span>, <span class="string">&#x27; 闲心&#x27;</span>, <span class="string">&#x27;科比&#x27;</span>]</span><br><span class="line">const totalObj = nameArr.reduce((<span class="keyword">pre</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">pre</span>[<span class="keyword">next</span>]) &#123;</span><br><span class="line">    <span class="keyword">pre</span>[<span class="keyword">next</span>]++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">pre</span>[<span class="keyword">next</span>] = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">pre</span></span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line">console.<span class="built_in">log</span>(totalObj) // &#123; <span class="string">&#x27; 闲心&#x27;</span>: <span class="number">3</span>, sunshine_lin: <span class="number">1</span>, <span class="string">&#x27;科比&#x27;</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="对象属性同名简写"><a href="#对象属性同名简写" class="headerlink" title="对象属性同名简写"></a>对象属性同名简写</h3><p>以前同名属性需要这么写</p>
<pre><code>  const name = &#39; 闲心&#39;
  const age = &#39;22&#39;

  const obj = &#123;
    name: name,
    age: age
  &#125;

  console.log(obj) // &#123; name: &#39; 闲心&#39;, age: &#39;22&#39; &#125;
</code></pre>
<p>ES6 新增语法，只需这么写</p>
<pre><code>  const name = &#39; 闲心&#39;
  const age = &#39;22&#39;

  // 属性同名可简写
  const obj = &#123;
    name
    age
  &#125;

  console.log(obj) // &#123; name: &#39; 闲心&#39;, age: &#39;22&#39; &#125;
</code></pre>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise，中文名为承诺，承诺在哪呢？承诺在，一旦他的状态改变，就不会再改</p>
<p>看看基本使用</p>
<ul>
<li><p>成功状态</p>
<pre><code>function requestData () &#123;
  // 模拟请求
  return new Promise((resolve, reject) =&gt; &#123;
    setTimeout(() =&gt; &#123;
      resolve(&#39; 闲心&#39;)
    &#125;, 1000)
  &#125;)
&#125;

requestData().then(res =&gt; &#123;
  console.log(res) // 一秒钟后输出 &#39; 闲心&#39;
&#125;, err =&gt; &#123;
  console.log(err)
&#125;)
</code></pre>
</li>
<li><p>失败状态</p>
<pre><code>function requestData () &#123;
  // 模拟请求
  return new Promise((resolve, reject) =&gt; &#123;
    setTimeout(() =&gt; &#123;
      reject(&#39;错误啦&#39;)
    &#125;, 1000)
  &#125;)
&#125;

requestData().then(res =&gt; &#123;
  console.log(res)
&#125;, err =&gt; &#123;
  console.log(err) // 一秒钟后输出 &#39;错误啦&#39;
&#125;)
</code></pre>
</li>
<li><p>all 方法</p>
</li>
<li><p>接收一个 Promise 数组，数组中如有非 Promise 项，则此项当做成功</p>
</li>
<li><p>如果所有 Promise 都成功，则返回成功结果数组</p>
</li>
<li><p>如果有一个 Promise 失败，则返回这个失败结果</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果全都为成功</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">88</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我成功啦！！！`</span>)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([fn(<span class="number">2000</span>), fn(<span class="number">3000</span>), fn(<span class="number">1000</span>)]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 3秒后输出 [ &#x27;2000毫秒后我成功啦！！！&#x27;, &#x27;3000毫秒后我成功啦！！！&#x27;, &#x27;1000毫秒后我成功啦！！！&#x27; ]</span></span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有一个失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">time, isResolve</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isResolve ? resolve(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我成功啦！！！`</span>) : reject(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我失败啦！！！`</span>)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([fn(<span class="number">2000</span>, <span class="literal">true</span>), fn(<span class="number">3000</span>), fn(<span class="number">1000</span>, <span class="literal">true</span>)]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err) <span class="comment">// 3秒后输出 &#x27;3000毫秒后我失败啦！！！&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>race 方法</p>
<ul>
<li>接收一个 Promise 数组，数组中如有非 Promise 项，则此项当做成功</li>
<li>哪个 Promise 最快得到结果，就返回那个结果，无论成功失败</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">time, isResolve</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isResolve ? resolve(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我成功啦！！！`</span>) : reject(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我失败啦！！！`</span>)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([fn(<span class="number">2000</span>, <span class="literal">true</span>), fn(<span class="number">3000</span>), fn(<span class="number">1000</span>)]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err) <span class="comment">// 1秒后输出</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>以前咱们使用构造函数生成对象，这么做</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> kobe = <span class="keyword">new</span> Person(<span class="string">&#x27;科比&#x27;</span>)</span><br><span class="line">kobe.sayName() <span class="comment">// 科比</span></span><br></pre></td></tr></table></figure>

<p>而有了 ES6 的 class 可以这么做</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> kobe = <span class="keyword">new</span> Person(<span class="string">&#x27;科比&#x27;</span>)</span><br><span class="line">kobe.sayName() <span class="comment">// 科比</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>值得一提的是，class 本质也是 function，class 是 function 的语法糖</p>
<pre><code>  class Person &#123;&#125;

  console.log(typeof Person) // function
</code></pre>
<p>除了以上，还需要知道 class 的以下知识点</p>
<p>静态属性和静态方法，使用 static 定义的属性和方法只能 class 自己用，实例用不了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> age = <span class="number">22</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">fn</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.age) <span class="comment">// 22</span></span><br><span class="line">Person.fn() <span class="comment">// 哈哈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sunshine_lin = <span class="keyword">new</span> Person(<span class="string">&#x27; 闲心&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sunshine_lin.age) <span class="comment">// undefined</span></span><br><span class="line">sunshine_lin.fn() <span class="comment">// fn is not a function</span></span><br></pre></td></tr></table></figure>

<p>extend 继承</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  constructor(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  say() &#123;</span><br><span class="line">    console.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const cat = <span class="keyword">new</span> <span class="type">Cat</span>(<span class="symbol">&#x27;kett</span>y&#x27;, <span class="number">5</span>) <span class="comment">// 继承了Animal的构造器</span></span><br><span class="line">cat.say() <span class="comment">// ketty 5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>以前想提取对象里的属性需要这么做</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  name: &#x27; 闲心&#x27;,</span></span><br><span class="line"><span class="comment">  age: 22,</span></span><br><span class="line"><span class="comment">  gender: &#x27;男&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">name</span> = obj.<span class="keyword">name</span></span><br><span class="line"><span class="keyword">const</span> age = obj.age</span><br><span class="line"><span class="keyword">const</span> gender = obj.gender</span><br><span class="line">console.log(<span class="keyword">name</span>, age, gender) <span class="comment">//  闲心 22 男</span></span><br></pre></td></tr></table></figure>

<p>ES6 新增了解构赋值的语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27; 闲心&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="attr">doing</span>: &#123;</span><br><span class="line">    <span class="attr">morning</span>: <span class="string">&#x27;摸鱼&#x27;</span>,</span><br><span class="line">    <span class="attr">afternoon</span>: <span class="string">&#x27;摸鱼&#x27;</span>,</span><br><span class="line">    <span class="attr">evening</span>: <span class="string">&#x27;sleep&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, age, gender &#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(name, age, gender) <span class="comment">//  闲心 22 男</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构重名</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: myname &#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(myname) <span class="comment">//  闲心</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套解构</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">doing</span>: &#123; evening &#125; &#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(evening) <span class="comment">// sleep</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>也可以进行数组的解构</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">const arr = <span class="selector-attr">[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">const <span class="selector-attr">[a, b, c]</span> = arr</span><br><span class="line">console<span class="selector-class">.log</span>(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c) <span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认赋值</span></span><br><span class="line">const <span class="selector-attr">[a, b, c, d = 5]</span> = arr</span><br><span class="line">console<span class="selector-class">.log</span>(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c, d) <span class="comment">// 1 2 3 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 乱序解构</span></span><br><span class="line">const &#123; <span class="number">1</span>: <span class="selector-tag">a</span>, <span class="number">0</span>: <span class="selector-tag">b</span>, <span class="number">2</span>: c &#125; = arr</span><br><span class="line">console<span class="selector-class">.log</span>(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c) <span class="comment">// 2 1 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="find-和-findIndex"><a href="#find-和-findIndex" class="headerlink" title="find 和 findIndex"></a>find 和 findIndex</h3><ul>
<li>find：找到返回被找元素，找不到返回 undefined</li>
<li>findIndex：找到返回被找元素索引，找不到返回-1</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">const findArr = [</span><br><span class="line">  &#123; <span class="type">name</span>: <span class="string">&#x27;科比&#x27;</span>, <span class="keyword">no</span>: <span class="string">&#x27;24&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="type">name</span>: <span class="string">&#x27;罗斯&#x27;</span>, <span class="keyword">no</span>: <span class="string">&#x27;1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="type">name</span>: <span class="string">&#x27;利拉德&#x27;</span>, <span class="keyword">no</span>: <span class="string">&#x27;0&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const kobe = findArr.find((&#123; <span class="type">name</span> &#125;) =&gt; <span class="type">name</span> === <span class="string">&#x27;科比&#x27;</span>)</span><br><span class="line">const kobeIndex = findArr.findIndex((&#123; <span class="type">name</span> &#125;) =&gt; <span class="type">name</span> === <span class="string">&#x27;科比&#x27;</span>)</span><br><span class="line">console.log(kobe) // &#123; <span class="type">name</span>: <span class="string">&#x27;科比&#x27;</span>, <span class="keyword">no</span>: <span class="string">&#x27;24&#x27;</span> &#125;</span><br><span class="line">console.log(kobeIndex) // <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="for-of-和-for-in"><a href="#for-of-和-for-in" class="headerlink" title="for of 和 for in"></a>for of 和 for in</h3><ul>
<li>for in ：遍历方法，可遍历对象和数组</li>
<li>for of ：遍历方法，只能遍历数组，不能遍历对象</li>
</ul>
<p>先看 for in：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">const obj = &#123; name: <span class="string">&#x27; 闲心&#x27;</span>, age: <span class="number">22</span>, gender: <span class="string">&#x27;男&#x27;</span> &#125;</span><br><span class="line">const arr = <span class="selector-attr">[1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">(let key in obj)</span></span> &#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(key)</span><br><span class="line">&#125;</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">gender</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">(let index in arr)</span></span> &#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(index)</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>再看 for of：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(let item of arr)</span></span> &#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="Set-和-Map-1"><a href="#Set-和-Map-1" class="headerlink" title="Set 和 Map"></a>Set 和 Map</h3><ul>
<li>Set</li>
</ul>
<p>先说说 Set 的基本用法</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 可不传数组</span><br><span class="line">const set1 = new Set()</span><br><span class="line">set1.add(<span class="number">1</span>)</span><br><span class="line">set1.add(<span class="number">2</span>)</span><br><span class="line">console.log(set1) <span class="regexp">//</span> Set(<span class="number">2</span>) &#123; <span class="number">1</span>, <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 也可传数组</span><br><span class="line">const set2 = new Set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="regexp">//</span> 增加元素 使用 add</span><br><span class="line">set2.add(<span class="number">4</span>)</span><br><span class="line">set2.add(<span class="string">&#x27; 闲心&#x27;</span>)</span><br><span class="line">console.log(set2) <span class="regexp">//</span> Set(<span class="number">5</span>) &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27; 闲心&#x27;</span> &#125;</span><br><span class="line"><span class="regexp">//</span> 是否含有某个元素 使用 has</span><br><span class="line">console.log(set2.has(<span class="number">2</span>)) <span class="regexp">//</span> true</span><br><span class="line"><span class="regexp">//</span> 查看长度 使用 size</span><br><span class="line">console.log(set2.size) <span class="regexp">//</span> <span class="number">5</span></span><br><span class="line"><span class="regexp">//</span> 删除元素 使用 <span class="keyword">delete</span></span><br><span class="line">set2.<span class="keyword">delete</span>(<span class="number">2</span>)</span><br><span class="line">console.log(set2) <span class="regexp">//</span> Set(<span class="number">4</span>) &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27; 闲心&#x27;</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再说说 Set 的不重复性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加一个已有元素，则增加无效，会被自动去重</span></span><br><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>])</span><br><span class="line">set1.add(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(set1) <span class="comment">// Set(1) &#123; 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入的数组中有重复项，会自动去重</span></span><br><span class="line"><span class="keyword">const</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27; 闲心&#x27;</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27; 闲心&#x27;</span>])</span><br><span class="line"><span class="built_in">console</span>.log(set2) <span class="comment">// Set(4) &#123; 1, 2, &#x27; 闲心&#x27;, 3 &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Set 的不重复性中，要注意引用数据类型和 NaN</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// 两个对象都是不用的指针，所以没法去重</span><br><span class="line">const set1 = <span class="built_in">new</span> <span class="keyword">Set</span>([<span class="number">1</span>, &#123;<span class="type">name</span>: <span class="string">&#x27; 闲心&#x27;</span>&#125;, <span class="number">2</span>, &#123;<span class="type">name</span>: <span class="string">&#x27; 闲心&#x27;</span>&#125;])</span><br><span class="line">console.log(set1) // <span class="keyword">Set</span>(<span class="number">4</span>) &#123; <span class="number">1</span>, &#123; <span class="type">name</span>: <span class="string">&#x27; 闲心&#x27;</span> &#125;, <span class="number">2</span>, &#123; <span class="type">name</span>: <span class="string">&#x27; 闲心&#x27;</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 如果是两个对象是同一指针，则能去重</span><br><span class="line">const obj = &#123;<span class="type">name</span>: <span class="string">&#x27; 闲心&#x27;</span>&#125;</span><br><span class="line">const set2 = <span class="built_in">new</span> <span class="keyword">Set</span>([<span class="number">1</span>, obj, <span class="number">2</span>, obj])</span><br><span class="line">console.log(set2) // <span class="keyword">Set</span>(<span class="number">3</span>) &#123; <span class="number">1</span>, &#123; <span class="type">name</span>: <span class="string">&#x27; 闲心&#x27;</span> &#125;, <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line">咱们都知道 <span class="keyword">NaN</span> !== <span class="keyword">NaN</span>，<span class="keyword">NaN</span>是自身不等于自身的，但是在<span class="keyword">Set</span>中他还是会被去重</span><br><span class="line">const <span class="keyword">set</span> = <span class="built_in">new</span> <span class="keyword">Set</span>([<span class="number">1</span>, <span class="keyword">NaN</span>, <span class="number">1</span>, <span class="keyword">NaN</span>])</span><br><span class="line">console.log(<span class="keyword">set</span>) // <span class="keyword">Set</span>(<span class="number">2</span>) &#123; <span class="number">1</span>, <span class="keyword">NaN</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用 Set 的不重复性，可以实现数组去重</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">66</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set可利用扩展运算符转为数组哦</span></span><br><span class="line"><span class="keyword">const</span> quchongArr = [...<span class="keyword">new</span> <span class="built_in">Set</span>(arr)]</span><br><span class="line">console.<span class="built_in">log</span>(quchongArr) <span class="comment">// [1,  2, 3, 4, 5, 66, 9]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Map<br>Map 对比 object 最大的好处就是，key 不受类型限制</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 定义map</span><br><span class="line">const map1 = new Map()</span><br><span class="line"><span class="regexp">//</span> 新增键值对 使用 set(key, value)</span><br><span class="line">map1.set(true, <span class="number">1</span>)</span><br><span class="line">map1.set(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">map1.set(<span class="string">&#x27;哈哈&#x27;</span>, <span class="string">&#x27;嘻嘻嘻&#x27;</span>)</span><br><span class="line">console.log(map1) <span class="regexp">//</span> Map(<span class="number">3</span>) &#123; true =&gt; <span class="number">1</span>, <span class="number">1</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;哈哈&#x27;</span> =&gt; <span class="string">&#x27;嘻嘻嘻&#x27;</span> &#125;</span><br><span class="line"><span class="regexp">//</span> 判断map是否含有某个key 使用 has(key)</span><br><span class="line">console.log(map1.has(<span class="string">&#x27;哈哈&#x27;</span>)) <span class="regexp">//</span> true</span><br><span class="line"><span class="regexp">//</span> 获取map中某个key对应的value 使用 get(key)</span><br><span class="line">console.log(map1.get(true)) <span class="regexp">//</span> <span class="number">2</span></span><br><span class="line"><span class="regexp">//</span> 删除map中某个键值对 使用 <span class="keyword">delete</span>(key)</span><br><span class="line">map1.<span class="keyword">delete</span>(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">console.log(map1) <span class="regexp">//</span> Map(<span class="number">2</span>) &#123; true =&gt; <span class="number">1</span>, <span class="number">1</span> =&gt; <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 定义map，也可传入键值对数组集合</span><br><span class="line">const map2 = new Map([[true, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>], [<span class="string">&#x27;哈哈&#x27;</span>, <span class="string">&#x27;嘻嘻嘻&#x27;</span>]])</span><br><span class="line">console.log(map2) <span class="regexp">//</span> Map(<span class="number">3</span>) &#123; true =&gt; <span class="number">1</span>, <span class="number">1</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;哈哈&#x27;</span> =&gt; <span class="string">&#x27;嘻嘻嘻&#x27;</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>传入元素，如果数组中能找到此元素，则返回 true，否则返回 false</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> includeArr = [<span class="number">1</span>, <span class="number">2</span> , <span class="number">3</span>, <span class="string">&#x27; 闲心&#x27;</span>, <span class="string">&#x27;科比&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isKobe = includeArr.includes(<span class="string">&#x27;科比&#x27;</span>)</span><br><span class="line">console.<span class="built_in">log</span>(isKobe) // <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>跟 indexOf 很像，但还是有区别的</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">const arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="literal">NaN</span>)) <span class="regexp">//</span> <span class="number">-1</span>  indexOf找不到<span class="literal">NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="literal">NaN</span>)) <span class="regexp">//</span> <span class="literal">true</span> includes能找到<span class="literal">NaN</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="求幂运算符"><a href="#求幂运算符" class="headerlink" title="求幂运算符"></a>求幂运算符</h3><p>以前求幂，我们需要这么写</p>
<pre><code>  const num = Math.pow(3, 2) // 9
</code></pre>
<p>ES7 提供了求幂运算符：**</p>
<pre><code>  const num = 3 ** 2 // 9
</code></pre>
<h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values"></a>Object.values</h3><p>可以用来获取对象的 value 的集合</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">  <span class="type">name</span>: <span class="string">&#x27; 闲心&#x27;</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  gender: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const <span class="keyword">values</span> = <span class="keyword">Object</span>.<span class="keyword">values</span>(obj)</span><br><span class="line">console.log(<span class="keyword">values</span>) // [ <span class="string">&#x27; 闲心&#x27;</span>, <span class="number">22</span>, <span class="string">&#x27;男&#x27;</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries"></a>Object.entries</h3><p>可以用来获取对象的键值对集合</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27; 闲心&#x27;</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  gender: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const entries = <span class="symbol">Object</span>.entries(obj)</span><br><span class="line">console.log(entries)</span><br><span class="line">// [ [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27; 闲心&#x27;</span> ], [ <span class="string">&#x27;age&#x27;</span>, <span class="number">22</span> ], [ <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;男&#x27;</span> ] ]</span><br></pre></td></tr></table></figure>

<h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>这个是很常用的语法了，我的理解就是：以同步方式执行异步操作</p>
<p>我们平时可能会遇到这种场景，接口一，请求到数据一，而数据一被当做请求二的参数去请求数据二，我们会用 Promise 这么做</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 模拟第一次请求</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">5</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟第二次请求</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 拿第一次请求的数据去乘10，当做第二次请求的数据</span></span><br><span class="line">        resolve(res * <span class="number">10</span>)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">sres</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(sres)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">fn() <span class="comment">// 1 + 2 = 3 3秒后输出 50</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样的嵌套是不美观的，如果有很多个接口，那就会嵌套很多层，此时我们可以使用 async/await 来以同步方式执行异步，注意以下几点：</p>
<ul>
<li>await 只能在 async 函数里使用</li>
<li>await 后面最好接 Promise，如果后面接的是普通函数则会直接执行</li>
<li>async 函数返回的是一个 Promise</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">5</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(data * <span class="number">10</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">req</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 同步方式执行异步，像排队一样</span></span><br><span class="line">  <span class="keyword">const</span> data1 = <span class="keyword">await</span> fn1() <span class="comment">// 等待1秒后返回数据再往下执行</span></span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">await</span> fn2(data1) <span class="comment">// 拿data1去请求2秒后，往下走</span></span><br><span class="line">  <span class="built_in">console</span>.log(data2) <span class="comment">// 总共3秒后 输出 50</span></span><br><span class="line">&#125;</span><br><span class="line">req()</span><br></pre></td></tr></table></figure>

<h3 id="for-await-of"><a href="#for-await-of" class="headerlink" title="for await of"></a>for await of</h3><p>这个主要是同步迭代用,我们来看以下场景哈</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我成功啦！！！`</span>)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">3000</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">fn(<span class="number">1000</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">fn(<span class="number">2000</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line"></span><br><span class="line">结果是</span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>毫秒后我成功啦！！！</span><br><span class="line"><span class="number">2000</span>毫秒后我成功啦！！！</span><br><span class="line"><span class="number">3000</span>毫秒后我成功啦！！！</span><br></pre></td></tr></table></figure>

<p>但是我想要这个结果</p>
<pre><code>  3000毫秒后我成功啦！！！
  1000毫秒后我成功啦！！！
  2000毫秒后我成功啦！！！
</code></pre>
<p>第一时间我们肯定想到的是 async/await</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我成功啦！！！`</span>)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 排队</span></span><br><span class="line">  <span class="keyword">const</span> data1 = <span class="keyword">await</span> fn(<span class="number">3000</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(data1) <span class="comment">// 3秒后 3000毫秒后我成功啦！！！</span></span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">await</span> fn(<span class="number">1000</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(data2) <span class="comment">// 再过1秒 1000毫秒后我成功啦！！！</span></span><br><span class="line">  <span class="keyword">const</span> data3 = <span class="keyword">await</span> fn(<span class="number">2000</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(data3) <span class="comment">// 再过2秒 2000毫秒后我成功啦！！！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是上面代码也是有缺点的，如果有几十个，那不是得写几十个 await，有没有一种方法可以通过循环来输出呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我成功啦！！！`</span>)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [fn(<span class="number">3000</span>), fn(<span class="number">1000</span>), fn(<span class="number">1000</span>), fn(<span class="number">2000</span>), fn(<span class="number">500</span>)]</span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> x <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFn()</span><br><span class="line"><span class="number">3000</span>毫秒后我成功啦！！！</span><br><span class="line"><span class="number">1000</span>毫秒后我成功啦！！！</span><br><span class="line"><span class="number">1000</span>毫秒后我成功啦！！！</span><br><span class="line"><span class="number">2000</span>毫秒后我成功啦！！！</span><br><span class="line"><span class="number">500</span>毫秒后我成功啦！！！</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Promise-finally"><a href="#Promise-finally" class="headerlink" title="Promise.finally"></a>Promise.finally</h3><p>新增的 Promise 方法，无论失败或者成功状态，都会执行这个函数</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> cheng</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功喽&#x27;</span>)</span><br><span class="line">&#125;).<span class="keyword">then</span>(</span><br><span class="line">  res =&gt; &#123; <span class="built_in">console</span>.log(res) &#125;,</span><br><span class="line">  err =&gt; &#123; <span class="built_in">console</span>.log(err) &#125;</span><br><span class="line">).<span class="keyword">finally</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;我是finally&#x27;</span>) &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&#x27;失败喽&#x27;</span>)</span><br><span class="line">&#125;).<span class="keyword">then</span>(</span><br><span class="line">  res =&gt; &#123; <span class="built_in">console</span>.log(res) &#125;,</span><br><span class="line">  err =&gt; &#123; <span class="built_in">console</span>.log(err) &#125;</span><br><span class="line">).<span class="keyword">finally</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&#x27;我是finally&#x27;</span>) &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Array-flat"><a href="#Array-flat" class="headerlink" title="Array.flat"></a>Array.flat</h3><p>有一个二维数组，我想让他变成一维数组：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(arr.<span class="keyword">flat</span>()) <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还可以传参数，参数为降维的次数</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">const arr = <span class="comment">[1, 2, 3, <span class="comment">[4, 5, 6, <span class="comment">[7, 8, 9]</span>]</span>]</span></span><br><span class="line"></span><br><span class="line">console.log(arr.flat(2))</span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  1, 2, 3, 4, 5,</span></span><br><span class="line"><span class="comment">  6, 7, 8, 9</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果传的是一个无限大的数字，那么就实现了多维数组(无论几维)降为一维数组</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">const arr = <span class="comment">[1, 2, 3, <span class="comment">[4, 5, 6, <span class="comment">[7, 8, 9, <span class="comment">[10, 11, 12]</span>]</span>]</span>]</span></span><br><span class="line"></span><br><span class="line">console.log(arr.flat(Infinity))</span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">   1,  2, 3, 4,  5,</span></span><br><span class="line"><span class="comment">   6,  7, 8, 9, 10,</span></span><br><span class="line"><span class="comment">   11, 12</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Array-flatMap"><a href="#Array-flatMap" class="headerlink" title="Array.flatMap"></a>Array.flatMap</h3><p>现在给你一个需求</p>
<pre><code>  let arr = [&quot;科比 詹姆斯 安东尼&quot;, &quot;利拉德 罗斯 麦科勒姆&quot;];
</code></pre>
<p>将上面数组转为</p>
<pre><code>  [ &#39;科比&#39;, &#39;詹姆斯&#39;, &#39;安东尼&#39;, &#39;利拉德&#39;, &#39;罗斯&#39;, &#39;麦科勒姆&#39; ]
</code></pre>
<p>第一时间想到 map + flat</p>
<pre><code>  console.log(arr.map(x =&gt; x.split(&quot; &quot;)).flat());
  // [ &#39;科比&#39;, &#39;詹姆斯&#39;, &#39;安东尼&#39;, &#39;利拉德&#39;, &#39;罗斯&#39;, &#39;麦科勒姆&#39; ]
</code></pre>
<p>flatMap 就是 flat + map，一个方法顶两个</p>
<pre><code>  console.log(arr.flatMap(x =&gt; x.split(&quot; &quot;)));
  // [ &#39;科比&#39;, &#39;詹姆斯&#39;, &#39;安东尼&#39;, &#39;利拉德&#39;, &#39;罗斯&#39;, &#39;麦科勒姆&#39; ]
</code></pre>
<h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><p>BigInt 是 ES10 新加的一种 JavaScript 数据类型，用来表示表示大于 2^53 - 1 的整数，2^53 - 1 是 ES10 之前，JavaScript 所能表示最大的数字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> theBiggestInt = <span class="number">9007199254740991n</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alsoHuge = <span class="built_in">BigInt</span>(<span class="number">9007199254740991</span>);</span><br><span class="line"><span class="comment">// 9007199254740991n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hugeString = <span class="built_in">BigInt</span>(<span class="string">&quot;9007199254740991&quot;</span>);</span><br><span class="line"><span class="comment">// 9007199254740991n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hugeHex = <span class="built_in">BigInt</span>(<span class="string">&quot;0x1fffffffffffff&quot;</span>);</span><br><span class="line"><span class="comment">// 9007199254740991n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hugeBin = <span class="built_in">BigInt</span>(<span class="string">&quot;0b11111111111111111111111111111111111111111111111111111&quot;</span>);</span><br><span class="line"><span class="comment">// 9007199254740991n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>哦对了，既然是 JavaScript 新的数据类型，那他的 typeof 是啥？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bigNum = <span class="built_in">BigInt</span>(<span class="number">1728371927189372189739217</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> bigNum) <span class="comment">// bigint</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以以后面试官问你 JavaScript 有多少种数据类型，别傻傻答 6 种了，要答 8 种，把 ES6 的 Symbol 和 ES10 的 BigInt 也加上去</p>
<h3 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries"></a>Object.fromEntries</h3><p>前面 ES8 的 Object.entries 是把对象转成键值对数组，而 Object.fromEntries 则相反，是把键值对数组转为对象</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">const arr = [</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27; 闲心&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;age&#x27;</span>, <span class="number">22</span>],</span><br><span class="line">  [<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;男&#x27;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">console.log(<span class="symbol">Object</span>.fromEntries(arr)) // &#123; name: <span class="string">&#x27; 闲心&#x27;</span>, age: <span class="number">22</span>, gender: <span class="string">&#x27;男&#x27;</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>他还有一个用处，就是把 Map 转为对象</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">const <span class="keyword">map</span> = <span class="keyword">new</span> Map()</span><br><span class="line"><span class="keyword">map</span>.<span class="keyword">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27; 闲心&#x27;</span>)</span><br><span class="line"><span class="keyword">map</span>.<span class="keyword">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">22</span>)</span><br><span class="line"><span class="keyword">map</span>.<span class="keyword">set</span>(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">map</span>) // Map(<span class="number">3</span>) &#123; <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27; 闲心&#x27;</span>, <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">22</span>, <span class="string">&#x27;gender&#x27;</span> =&gt; <span class="string">&#x27;男&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">const obj = Object.fromEntries(<span class="keyword">map</span>)</span><br><span class="line">console.<span class="built_in">log</span>(obj) // &#123; name: <span class="string">&#x27; 闲心&#x27;</span>, age: <span class="number">22</span>, gender: <span class="string">&#x27;男&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="String-trimStart-amp-amp-String-trimEnd"><a href="#String-trimStart-amp-amp-String-trimEnd" class="headerlink" title="String.trimStart &amp;&amp; String.trimEnd"></a>String.trimStart &amp;&amp; String.trimEnd</h3><p>咱们都知道 JavaScript 有个 trim 方法，可以清除字符串首尾的空格</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">str</span> = <span class="string">&#x27;     闲心    &#x27;</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.<span class="built_in">trim</span>()) <span class="comment">// &#x27; 闲心&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>trimStart 和 trimEnd 用来单独去除字符串的首和尾的空格</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">const str = <span class="string">&#x27;     闲心    &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 去除首部空格</span><br><span class="line">console.log(str.trimStart()) <span class="regexp">//</span> <span class="string">&#x27; 闲心   &#x27;</span></span><br><span class="line"><span class="regexp">//</span> 去除尾部空格</span><br><span class="line">console.log(str.trimStart()) <span class="regexp">//</span> <span class="string">&#x27;    闲心&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h3><p>ES11 新增的 Promise 的方法</p>
<ul>
<li>接收一个 Promise 数组，数组中如有非 Promise 项，则此项当做成功</li>
<li>把每一个 Promise 的结果，集合成数组，返回</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">time, isResolve</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isResolve ? resolve(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我成功啦！！！`</span>) : reject(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我失败啦！！！`</span>)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.allSettled([fn(<span class="number">2000</span>, <span class="literal">true</span>), fn(<span class="number">3000</span>), fn(<span class="number">1000</span>)]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="comment">// 3秒后输出</span></span><br><span class="line">  [</span><br><span class="line">  &#123; <span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;2000毫秒后我成功啦！！！&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>, <span class="attr">reason</span>: <span class="string">&#x27;3000毫秒后我失败啦！！！&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>, <span class="attr">reason</span>: <span class="string">&#x27;1000毫秒后我失败啦！！！&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="和"><a href="#和" class="headerlink" title="?. 和 ??"></a>?. 和 ??</h3><ul>
<li>先说说?.，中文名为可选链</li>
</ul>
<p>比如我们需要一个变量，是数组且有长度，才做某些操作</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">const list = null</span><br><span class="line"><span class="regexp">//</span> <span class="keyword">do</span> something</span><br><span class="line"><span class="keyword">if</span> (list &amp;&amp; list.length) &#123;</span><br><span class="line">  <span class="regexp">//</span> <span class="keyword">do</span> something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 使用可选链</span><br><span class="line">const list = null</span><br><span class="line"><span class="regexp">//</span> <span class="keyword">do</span> something</span><br><span class="line"><span class="keyword">if</span> (list?.length) &#123;</span><br><span class="line">  <span class="regexp">//</span> <span class="keyword">do</span> something</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>比如有一个对象，我要取一个可能不存在的值，甚至我们都不确定 obj 是否存在</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  cat: &#123;</span><br><span class="line">    name: <span class="string">&#x27;哈哈&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = obj &amp;&amp; obj.dog &amp;&amp; obj.dog.name <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选链</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  cat: &#123;</span><br><span class="line">    name: <span class="string">&#x27;哈哈&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = obj?.dog?.name <span class="comment">// undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>比如有一个数组，我不确定它存不存在，存在的话就取索引为 1 的值</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="literal">null</span></span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line"><span class="keyword">const</span> item = arr &amp;&amp; arr[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选链</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="literal">null</span></span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line"><span class="keyword">const</span> item = arr?.[<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>比如有一个函数，我们不确定它存不存在，存在的话就执行它</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="literal">null</span></span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line"><span class="keyword">const</span> res = fn &amp;&amp; fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选链</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="literal">null</span></span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line"><span class="keyword">const</span> res = fn?.()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>再说说??，中文名为空位合并运算符</li>
</ul>
<p>请看以下代码，咱们使用||运算符，只要左边是假值，就会返回右边的数据</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">0</span> || <span class="string">&#x27; 闲心&#x27;</span> <span class="comment">//  闲心</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;&#x27;</span> || <span class="string">&#x27; 闲心&#x27;</span> <span class="comment">//  闲心</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="literal">false</span> || <span class="string">&#x27; 闲心&#x27;</span> <span class="comment">//  闲心</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="literal">undefined</span> || <span class="string">&#x27; 闲心&#x27;</span> <span class="comment">//  闲心</span></span><br><span class="line"><span class="keyword">const</span> e = <span class="literal">null</span> || <span class="string">&#x27; 闲心&#x27;</span> <span class="comment">//  闲心</span></span><br></pre></td></tr></table></figure>

<p>而??和||最大的区别是，在??这，只有 undefined 和 null 才算假值</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">0</span> ?? <span class="string">&#x27; 闲心&#x27;</span> <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;&#x27;</span> ?? <span class="string">&#x27; 闲心&#x27;</span> <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="literal">false</span> ?? <span class="string">&#x27; 闲心&#x27;</span> <span class="comment">// false</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="literal">undefined</span> ?? <span class="string">&#x27; 闲心&#x27;</span> <span class="comment">//  闲心</span></span><br><span class="line"><span class="keyword">const</span> e = <span class="literal">null</span> ?? <span class="string">&#x27; 闲心&#x27;</span> <span class="comment">//  闲心</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any"></a>Promise.any</h3><p>E12 新增的 Promise 的方法</p>
<ul>
<li>接收一个 Promise 数组，数组中如有非 Promise 项，则此项当做成功</li>
<li>如果有一个 Promise 成功，则返回这个成功结果</li>
<li>如果所有 Promise 都失败，则报错</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当有成功的时候，返回最快那个成功</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">time, isResolve</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isResolve ? resolve(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我成功啦！！！`</span>) : reject(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我失败啦！！！`</span>)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.any([fn(<span class="number">2000</span>, <span class="literal">true</span>), fn(<span class="number">3000</span>), fn(<span class="number">1000</span>, <span class="literal">true</span>)]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res) <span class="comment">// 1秒后 输出  1000毫秒后我成功啦</span></span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当全都失败时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">time, isResolve</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      isResolve ? resolve(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我成功啦！！！`</span>) : reject(<span class="string">`<span class="subst">$&#123;time&#125;</span>毫秒后我失败啦！！！`</span>)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.any([fn(<span class="number">2000</span>), fn(<span class="number">3000</span>), fn(<span class="number">1000</span>)]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err) <span class="comment">// 3秒后 报错 all Error</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="数字分隔符"><a href="#数字分隔符" class="headerlink" title="数字分隔符"></a>数字分隔符</h3><p>数字分隔符可以让你在定义长数字时，更加地一目了然</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">num</span> = <span class="number">1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用数字分隔符</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">num</span> = <span class="number">1</span>_000_000_000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="和-amp-amp"><a href="#和-amp-amp" class="headerlink" title="||= 和 &amp;&amp;="></a>||= 和 &amp;&amp;=</h3><pre><code>  或等于(||=)   a ||= b 等同于 a || (a = b);

  且等于(&amp;&amp;=)   a &amp;&amp;= b 等同于 a &amp;&amp; (a = b);
</code></pre>
<h3 id="对象动态属性"><a href="#对象动态属性" class="headerlink" title="对象动态属性"></a>对象动态属性</h3><p>我们经常碰到这样的问题，无论是在微信小程序还是 React 中，我们需要根据某个条件去修改某个数据</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">type</span> <span class="type">=== </span><span class="symbol">&#x27;boy</span>&#x27;) &#123;</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    boyName: name</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span> <span class="type">=== </span><span class="symbol">&#x27;girl</span>&#x27;) &#123;</span><br><span class="line">  this.setData(&#123;</span><br><span class="line">    girlName: name</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我也不知道这个新特性叫啥，我就自己取名叫属性动态属性哈哈哈</p>
<pre><code>  this.setData(&#123;
    [`$&#123;type&#125;Name`]: name
  &#125;)
</code></pre>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>js基础语法</tag>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>171-js-async函数的用法和说明</title>
    <url>/20220226/171-js-async%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95%E5%92%8C%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="async-函数的含义和用法"><a href="#async-函数的含义和用法" class="headerlink" title="async 函数的含义和用法"></a>async 函数的含义和用法</h1><h2 id="二、async-函数是什么"><a href="#二、async-函数是什么" class="headerlink" title="二、async 函数是什么"></a>二、async 函数是什么</h2><p>一句话，<code>async</code> 函数就是 <code>Generator</code> 函数的语法糖。</p>
<p>前文有一个 Generator 函数，依次读取两个文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">fileName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(fileName, <span class="function"><span class="keyword">function</span> (<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) reject(error)</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> f1 = <span class="keyword">yield</span> readFile(<span class="string">&#x27;/etc/fstab&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> f2 = <span class="keyword">yield</span> readFile(<span class="string">&#x27;/etc/shells&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString())</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写成 async 函数，就是下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> asyncReadFile = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> f1 = <span class="keyword">await</span> readFile(<span class="string">&#x27;/etc/fstab&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> f2 = <span class="keyword">await</span> readFile(<span class="string">&#x27;/etc/shells&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString())</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一比较就会发现，<code>async</code> 函数就是将 <code>Generator</code> 函数的星号<code>（*）</code>替换成 <code>async</code>，将 <code>yield</code> 替换成 <code>await</code>，仅此而已。</p>
<h2 id="三、async-函数的优点"><a href="#三、async-函数的优点" class="headerlink" title="三、async 函数的优点"></a>三、async 函数的优点</h2><p>async 函数对 Generator 函数的改进，体现在以下三点。</p>
<p><strong>（1）内置执行器。</strong> Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = asyncReadFile()</span><br></pre></td></tr></table></figure>

<p><strong>（2）更好的语义。</strong> async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</p>
<p><strong>（3）更广的适用性。</strong> co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p>
<h2 id="四、async-函数的实现"><a href="#四、async-函数的实现" class="headerlink" title="四、async 函数的实现"></a>四、async 函数的实现</h2><p><code>async</code> 函数的实现，就是将 <code>Generator</code> 函数和自动执行器，包装在一个函数里。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> spawn(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有的 <code>async</code> 函数都可以写成上面的第二种形式，其中的 <code>spawn</code> 函数就是自动执行器。</p>
<p>下面给出 <code>spawn</code> 函数的实现，基本就是前文自动执行器的翻版。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spawn</span>(<span class="params">genF</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gen = genF()</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">nextF</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> next = nextF()</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(e)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (next.done) &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve(next.value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(next.value).then(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">          step(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> gen.next(v)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">          step(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> gen.throw(e)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    step(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> gen.next(<span class="literal">undefined</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>async</code> 函数是非常新的语法功能，新到都不属于 <code>ES6</code>，而是属于 <code>ES7</code>。目前，它仍处于提案阶段，但是转码器 <code>Babel</code> 和 <code>regenerator</code> 都已经支持，转码后就能使用。</p>
<h2 id="五、async-函数的用法"><a href="#五、async-函数的用法" class="headerlink" title="五、async 函数的用法"></a>五、async 函数的用法</h2><p>同 <code>Generator</code> 函数一样，<code>async</code> 函数返回一个 <code>Promise</code> 对象，可以使用 <code>then</code> 方法添加回调函数。当函数执行的时候，一旦遇到 <code>await</code> 就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p>
<p>下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getStockPriceByName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> symbol = <span class="keyword">await</span> getStockSymbol(name)</span><br><span class="line">  <span class="keyword">var</span> stockPrice = <span class="keyword">await</span> getStockPrice(symbol)</span><br><span class="line">  <span class="keyword">return</span> stockPrice</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStockPriceByName(<span class="string">&#x27;goog&#x27;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面代码是一个获取股票报价的函数，函数前面的 <code>async</code> 关键字，表明该函数内部有异步操作。调用该函数时，会立即返回一个 <code>Promise</code> 对象。</p>
<p>下面的例子，指定多少毫秒后输出一个值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, ms)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">value, ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> timeout(ms)</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncPrint(<span class="string">&#x27;hello world&#x27;</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<p>上面代码指定 50 毫秒以后，输出”hello world”。</p>
<h2 id="六、注意点"><a href="#六、注意点" class="headerlink" title="六、注意点"></a>六、注意点</h2><p><code>await</code> 命令后面的 <code>Promise</code> 对象，运行结果可能是 <code>rejected</code>，所以最好把 <code>await</code> 命令放在 <code>try...catch</code> 代码块中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> somethingThatReturnsAPromise()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> somethingThatReturnsAPromise().catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>await</code> 命令只能用在 <code>async</code> 函数之中，如果用在普通函数，就会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dbFuc</span>(<span class="params">db</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 报错</span></span><br><span class="line">  docs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">doc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> db.post(doc)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码会报错，因为 <code>await</code> 用在普通函数之中了。但是，如果将 <code>forEach</code> 方法的参数改成 <code>async</code> 函数，也有问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dbFuc</span>(<span class="params">db</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可能得到错误结果</span></span><br><span class="line">  docs.forEach(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">doc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> db.post(doc)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码可能不会正常工作，原因是这时三个 <code>db.post</code> 操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用 <code>for 循环</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dbFuc</span>(<span class="params">db</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> doc <span class="keyword">of</span> docs) &#123;</span><br><span class="line">    <span class="keyword">await</span> db.post(doc)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果确实希望多个请求并发执行，可以使用 <code>Promise.all</code> 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dbFuc</span>(<span class="params">db</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;]</span><br><span class="line">  <span class="keyword">let</span> promises = docs.map(<span class="function">(<span class="params">doc</span>) =&gt;</span> db.post(doc))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> results = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises)</span><br><span class="line">  <span class="built_in">console</span>.log(results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用下面的写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dbFuc</span>(<span class="params">db</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;]</span><br><span class="line">  <span class="keyword">let</span> promises = docs.map(<span class="function">(<span class="params">doc</span>) =&gt;</span> db.post(doc))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> results = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> promise <span class="keyword">of</span> promises) &#123;</span><br><span class="line">    results.push(<span class="keyword">await</span> promise)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(results)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>172-2022推荐阅读的前端文章</title>
    <url>/20220228/172-2022%E6%8E%A8%E8%8D%90%E9%98%85%E8%AF%BB%E7%9A%84%E5%89%8D%E7%AB%AF%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>的确，有些标题党了。起因是微信群里，有哥们问我，你是怎么学习前端的呢？能不能共享一下学习方法。一句话也挺触动我的，我真的不算是什么大佬，对于学习前端知识，我也不能说是掌握了什么捷径。当然，我个人的学习方法这篇文章已经在写了，预计这周末会在我个人公众号发布。而在此之前，我想展(gong)示(xiang)一下，我平时浏览各个技术网站，所记录下来的文章。如果你能做到每日消化一篇，或许，你只要一年，就能拿下各个大厂 offer！</p>
<p>不由感慨，好文太多！吾等岂能浪费，还整日怨天尤人。</p>
<p><a href="https://camo.githubusercontent.com/ab458b59eabe6ad85851b14138b416726fe83939d467c3c9019c80e59e633461/68747470733a2f2f67772e616c6963646e2e636f6d2f7466732f54423136325a5562626a31674b306a535a467558586372487058612d323537382d313632302e706e67"><img src="https://camo.githubusercontent.com/ab458b59eabe6ad85851b14138b416726fe83939d467c3c9019c80e59e633461/68747470733a2f2f67772e616c6963646e2e636f6d2f7466732f54423136325a5562626a31674b306a535a467558586372487058612d323537382d313632302e706e67" alt="img"></a></p>
<h2 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81Nzk1ODMyOA==">TypeScript，初次见面，请多指教<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>可能是你需要的 react + typescript 50 条规范和经验</p>
<ul>
<li>一些使用规范</li>
</ul>
</li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODEzMDQ5OQ==">css 加载会造成阻塞吗<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzM1OTUzY2U1MWQ0NTUyM2YwNGI2ZDI=">不可思议的纯 CSS 滚动进度条效果<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjlhNDQ3N2YyNjVkYTBhZDgyYmY5MjE=">CSS 实现水平垂直居中的 1010 种方式（史上最全）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjkwZTA3Y2U1MWQ0NTBlNmEyZGQxNDA=">rem 布局解析<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yjg1NTg2Y2U1MWQ0NTM4Yzc3YTljYzE=">布局的下一次革新<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yjg5MDU0NTZmYjlhMDFhMTA1OTY2YjQ=">彻底搞懂 word-break、word-wrap、white-space<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yjg3NmY4NjUxODgyNTQzMTA3OWRkZDY=">彻底搞懂 CSS 层叠上下文、层叠等级、层叠顺序、z-index<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yjg4ZGRjYTZmYjlhMDE5Yzc3MTcwOTY/dXRtX3NvdXJjZT1nb2xkX2Jyb3dzZXJfZXh0ZW5zaW9u">css 加载会造成阻塞吗？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjZkMGM1Y2YyNjVkYTBmNTA0YTgzN2Y=">从青铜到王者 10 个 css3 伪类使用技巧和运用，了解一哈<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjYxMzNhMzUxODgyNTE5ZDM0Njg1M2Y/dXRtX3NvdXJjZT1nb2xkX2Jyb3dzZXJfZXh0ZW5zaW9u">CSS 性能优化的 8 个技巧<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTBjMTg0YzUxODgyNTMxOTI2ZTQyOTQ=">个人总结（css3 新特性）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTdhOWE1NDUxODgyNTdhODkyOTk4ZWY=">CSS 设置居中的方案总结-超全<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWFiNGY5ODUxODgyNTU1ODI1MjFjNTc=">Web 开发者需要知道的 CSS Tricks<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjFmNDEyNDZmYjlhMDFlNzI1MTMxZmI=">CSS 常用技巧<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="前端工程（架构、软实力）"><a href="#前端工程（架构、软实力）" class="headerlink" title="前端工程（架构、软实力）"></a>前端工程（架构、软实力）</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzEzNmJkMTZmYjlhMDQ5ZDM3ZWZjNDc=">前端缓存最佳实践<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMTMyNDY5Ng==">写给前端看的架构文章(1)：MVC VS Flux<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yjg3YzhhNWU1MWQ0NTM4ZTQxMDY3YTg=">前端数据校验从建模开始<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yjc1YjQ5N2U1MWQ0NTY2NjI3NjI1MWQ=">前端也需要了解的 JSONP 安全<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjZmYThjODZmYjlhMDA5OTkxMGFjOTE=">网站性能优化实战——从 12.67s 到 1.06s 的故事<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjdhNTBjMGU1MWQ0NTM4YWY2MGQ5OTU=">5 分钟撸一个前端性能监控工具<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTRlZDkxN2YyNjVkYTNlMzE3ZGY1MTU=">浏览器页面资源加载过程与优化<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTc2YmI5NTUxODgyNTdhNzkyNDdjYmQ=">现代化懒加载的方式<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTdmYjA5YmYyNjVkYTRlOGU3ODVjMzg=">用 preload 预加载页面资源<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWEyNTJhYzUxODgyNTU1ODAwMWQ1ZGU=">干货!各种常见布局实现+知名网站实例分析<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mZWQucmVucmVuLmNvbS8yMDE3LzA3LzAyL2FsZ29yaXRobS8=">前端数据结构与算法<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMTA5NjQ2OA==">前端工程师为什么要学习编译原理？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNzY2NTM2MQ==">jsonp 的原理与实现<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjBjM2I1M2YyNjVkYTA5MjUzY2JlZDA=">懒加载和预加载<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjFmYTc3NDUxODgyNTEzZWE1Y2MyY2E=">50 行代码的 MVVM，感受闭包的艺术<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWJkZDZmNmYyNjVkYTIzNzkzYzQ0NTg=">不好意思！耽误你的十分钟，让 MVVM 原理还给你<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTk2NmJkMTZmYjlhMDYzNTE3MmE1MGE=">2018 前端性能优化清单<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMzM3MDIwNw==">网页图片加载优化方案<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMjI2MjcxNg==">把前端监控做到极致<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MTgwMDM0NQ==">如何优雅处理前端异常<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81Nzg5NTU0MQ==">经典面试题：从 URL 输入到页面展现到底发生什么<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzgyMWRjNDUxODgyNTdlMWYyOTE1YjE=">前端同构渲染的思考与实践<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzkwNzUzMDUxODgyNTJkNWM3NDM1MjA=">前端构建秘籍<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2VhMWY3MDUxODgyNTA2NDAwMDU0NzI=">大型项目前端架构浅谈（8000 字原创）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2MxZGE4MmYyNjVkYTAzNjAyM2I2Mjg=">一名【合格】前端工程师的自检清单<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="React-技术栈"><a href="#React-技术栈" class="headerlink" title="React 技术栈"></a>React 技术栈</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODY5NzM2Mg==">React 源码解析<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyaWNrc3BlcnQvYmxvZy9pc3N1ZXMvMQ==">从零搭建 React 全家桶框架教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzhlNWU0OTUxODgyNTQ1YzEwOWFlOWM=">让虚拟 DOM 和 DOM-diff 不再成为你的绊脚石<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTg0NjgyZWYyNjVkYTRlODMyNjZjYzQ/dXRtX21lZGl1bT1mZSZ1dG1fc291cmNlPXdlaXhpbnF1bg==">《React 源码解析》系列完结！<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWQ4MWMyNGYyNjVkYTUwNGMxNjhjODU=">怎样学习 React？当然是自己动手实现一个 React 啦<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODkwNTcwNw==">从 setState promise 化的探讨 体会 React 团队设计思想<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNTgzMzE0Mw==">React 应用设计之道 - curry 化妙用<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI2ODAyODEyMw==">如何评价 React 的新功能 Time Slice 和 Suspense？<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cDovL3d3dy5pbmZvcS5jb20vY24vYXJ0aWNsZXMvd2hhdC10aGUtbmV3LWVuZ2luZS1vZi1yZWFjdA==">React 的新引擎—React Fiber 是什么<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OWNjNGM0YmYyNjVkYTA2NDg0NDZjZTA=">React 源码解析(三):详解事务与更新队列<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9veWNoYW8uZ2l0aHViLmlvLzIwMTcvMDkvMjUvcmVhY3QvMTZfdHJhbnNhY3Rpb24v">React 中的 Transaction<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMDQxOTU5Mg==">React 源码剖析系列 － 玩转 React Transition<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTI0ZmUxNDZmYjlhMDQ1MGU3NWYzYmM=">如何提高你的 React 应用的性能<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNDk1OTc0OA==">将 React 应用优化到 60fps<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWU5NzVkMjZmYjlhMDdhYTkyNTg4Yjc=">如何写出更好的 React 代码？<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjIwN2E4NGYyNjVkYTZlNGM2ZDA4YmE=">React 中型项目的优化实践<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>React 源码剖析系列 － 生命周期的管理艺术</p>
<ul>
<li>生命周期主要通过三种状态进行管理：MOUNTING、RECEIVE_PROPS、UNMOUNTING</li>
</ul>
</li>
<li><p>深入 React 的生命周期(上)：出生阶段(Mount)</p>
<ul>
<li>仅生成 React 组件不会触发生命周期的调用</li>
<li>componentWillMount 和 render 父组件先调用，与 componentDidMount 顺序恰巧相反</li>
</ul>
</li>
<li><p>深入 React 的生命周期(下)：更新(Update)</p>
<ul>
<li>虽然 props 的更改会引起 componentWillReceiveProps 的调用；但 componentWillReceiveProps 的调用并不意味着 props 真的发生了变化。</li>
</ul>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNzgyODc3Mw==">你真的了解 React 吗（上）如何设计组件以及重要的生命周期<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWU2Y2Q5NmYyNjVkYTBiOWMxMDY5MzE=">React v16.3 版本新生命周期函数浅析及升级方案<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MDQ2MjI2NA==">React ref 的前世今生<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTdjMDQ3NDZmYjlhMDYzNDYxZmU3MDA=">谈谈 react 中的 key<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMDM2MTkzNw==">React Mixin 的前世今生<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNzgyODg2Ng==">你真的了解 React 吗（中）组件间的通信以及 React 优化<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjEwZGQzNmU1MWQ0NTA2ZTA0Y2Y4MDI=">深入框架本源系列 —— Virtual Dom<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNTg3NjAzMg==">探索 Virtual DOM 的前世今生<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjEwZGQzNmU1MWQ0NTA2ZTA0Y2Y4MDIjaGVhZGluZy0y">深入框架本源系列 —— Virtual Dom<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>React 源码剖析系列 － 不可思议的 react diff</p>
<ul>
<li>关于两个 list 的比较还是比较深入的，可以重点研究</li>
</ul>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWQ1NTBmMDZmYjlhMDI4YjQxMThkOTk=">浅入浅出图解 domDIff<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>深度剖析：如何实现一个 Virtual DOM 算法</p>
<ul>
<li>代码实现可作为参考</li>
</ul>
</li>
<li><p>React 源码剖析系列 － 解密 setState</p>
<ul>
<li>setState 是同步的，事务需要了解</li>
</ul>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OTliOGYwNjZmYjlhMDI0NzYzN2Q2MWI=">setState 的秘密<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly91bmRlZmluZWRibG9nLmNvbS93aGF0LWhhcHBlbmVkLWFmdGVyLXNldC1zdGF0ZS8=">setState 之后发生了什么 —— 浅谈 React 中的 Transaction<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zOTUxMjk0MQ==">你真的理解 setState 吗？<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzcyYjk3ZGU1MWQ0NTQ1YzY2Zjc1ZDU=">React 中的高阶组件及其应用场景<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODEwNzEzNw==">React 最佳实践<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cDovL3d3dy5heXF5Lm5ldC9ibG9nL2RpdmUtaW50by1yZWFjdC1maWJlci8=">完全理解 React Fiber<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNWIwMjQ1NDg2ZmI5YTA3YWMyM2IwOGFi">React Fiber 架构<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMjgzNDIwNA==">React Fiber 架构介绍资料汇总<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNjEyOTAzNg==">你不知道的 Virtual DOM 系列<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNWI3YTk4OTY1MTg4MjU0MmIwM2U1NDEy">【译】通过 Recompose 库掌握 React 函数组件<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OWNiNWViYTUxODgyNTdlODQ2NzFhY2E=">React-Redux 源码分析<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMTE3MDc0MA==">源码看 React setState 漫谈（一）<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMTE4NDI2OA==">源码看 React setState 漫谈（二）<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjBhNjk3ZjUxODgyNTM4OWM1MDg4NzI=">精读《用 160 行 js 代码实现一个 React》<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWZlN2EyYzUxODgyNTY3M2I2MjQzYTY=">还在用 Redux，要不要试试 GraphQL 和 Apollo<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMDY2OTExMQ==">React 同构实践与思考<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMDg0ODM2OQ==">React 实现 Table 的思考<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMTM4Njg2Mg==">React 实践 - Component Generator<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMTM3OTM1MA==">ReactEurope 2016 小记 - 上<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMTYxNjYxMw==">ReactEurope 2016 小记 - 下<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNTU4NTkxMA==">Mobx 思想的实现原理，及与 Redux 对比<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yOTAzNDAxNQ==">组件库设计实战 - 复杂组件设计<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMDU5NzQ1Mg==">redux middleware 详解<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMDM4MTU5Nw==">深入理解 react-router 路由系统<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMDI5NTk3MQ==">Immutable 详解及 React 中实践<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yOTcyMzQwNQ==">React-Redux 源码分析<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="webpack-babel"><a href="#webpack-babel" class="headerlink" title="webpack/babel"></a>webpack/babel</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwODA2MDQ0MA==">Webpack 源码（一）—— Tapable 和 事件流<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTY5OGEzMTZmYjlhMDFjOWY1YjljYTA=">手把手教你撸一个 Webpack Loader<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTkzMTVlNDZmYjlhMDYzM2E3MTFmMjU=">面试官: 你了解过 Babel 吗？写过 Babel 插件吗? 答: 没有。卒<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9mb3Jlc3RyeS5pby9ibG9nL3dyaXRlLWJldHRlci1qYXZhc2NyaXB0LXdpdGgtd2VicGFjay8=">Write Better JavaScript With Webpack<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjE5MmFmZGU1MWQ0NTA2OWMyZWZlNWE=">手把手教你撸一个简易的 webpack<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>带你走进 webpack 世界，成为 webpack 头号玩家</p>
<ul>
<li>webpack 优化方法讲解较多、prod/dev 配置文件、loader/plugin 的简单编写介绍</li>
</ul>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTlkMTc0NDZmYjlhMDI4ZDM3NGU3MzM=">webpack 打包之后的文件过大的解决方法<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWEzZDIwNTZmYjlhMDI4YzM2ODY4YWE=">webpack 详解<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>webpack4-用之初体验，一起敲它十一遍</p>
<ul>
<li>从零配置，基础配置，c3 前缀，热更新、提取公共代码等</li>
</ul>
</li>
<li><p>基于 Webpack 搭建 React 开发环境</p>
<ul>
<li>简单借鉴 webpack-merge</li>
</ul>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWMxYzViZjUxODgyNTU1ODk0OWY4OTg=">入门 babel–实现一个 es6 的 class 转换器<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2VkZTgyMWYyNjVkYTFiYmQ0YjU2MzA=">webpack 中那些最易混淆的 5 个知识点<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2VhMWUxYWU1MWQ0NTEwNjY0ZDE2NTI=">关于 webpack4 的 14 个知识点,童叟无欺<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWZlZGU5OWYyNjVkYTBiODI2MzBhZjg=">ESLint 里的规则教会我，无规矩 不编程<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjEyNWFkM2U1MWQ0NTA2ODgxMzNmMjI=">发布订阅模式，在工作中它的能量超乎你的想象<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjAxMzM2YWYyNjVkYTBiOGE2N2U1Yzk=">谁说前端不需要懂-Nginx 反向代理与负载均衡<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjQwNmY0MGU1MWQ0NTE5NDgzMmI3NTk=">CSS 世界中那些说起来很冷的知识<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmM3ZjZiOTZmYjlhMDVkMzQ0N2VlZjg=">WebSocket 是时候展现你优秀的一面了<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmNlODg2YWYyNjVkYTBhYzA3YzhlZjg=">socket.io 让每个人都可以开发属于自己的即时通讯<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNWFkNmE5ZjdmMjY1ZGEyMzc4NDBjYTEz">WebSocket 是什么原理？为什么可以实现持久连接<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p>JavaScript 如何工作：对引擎、运行时、调用堆栈的概述</p>
<ul>
<li>了解 JavaScript 调用栈</li>
</ul>
</li>
<li><p>理解 JavaScript 中的执行上下文和执行栈</p>
<ul>
<li>执行上下文、变量环境、词法环境 再看一遍</li>
</ul>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OWU4NWVlYmYyNjVkYTQzMGQ1NzFmODk=">这一次，彻底弄懂 JavaScript 执行机制<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80ODA0OTk1Nw==">JavaScript 开发者应懂的 33 个概念<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODE0MzkwMg==">前端 js 实现字符串/图片/excel 文件下载<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmRmZWY4NmU1MWQ0NTNiZjgwNTFiZjg=">JavaScript 复杂判断的更优雅写法<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWIyMGM1OGYyNjVkYTIzYTIyOGZlMGY=">性感的 Promise，拥抱 ta 然后扒光 ta<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzYyMzRmMTZmYjlhMDQ5YTgxZmNjYTU=">近一万字的 ES6 语法知识点补充<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmMxYWU5YmU1MWQ0NTBlOGIxNDBiMGM=">深拷贝的终极探索（90%的人都不知道）<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODA4MTQ3NQ==">前端路由跳转基本原理<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzIzOTkzZGU1MWQ0NTdiOGMxZjRlZTE=">九种跨域方式实现原理<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzRlNmE5MGU1MWQ0NTUyMjY2NTc2ZDI=">发现 JavaScript 中闭包的强大威力<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODExMzAxMQ==">你可能不熟悉的 JS 总结<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjhjOGE2OTUxODgyNTQyZWU3MTdjODY=">JavaScript 中高阶函数的魅力<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjhhODcyNGYyNjVkYTQzNTQ1MGM1OTE=">小邵教你玩转 JS 面向对象<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNWI4YmE2NDA1MTg4MjU0MzAzNjcxMWRk">AST 抽象语法树——最基础的 javascript 重点知识，99%的人根本不了解<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjljYjMzMzZmYjlhMDVkMjkwZWU0N2U=">ES6、ES7、ES8 特性一锅炖<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjhkMGE3NGYyNjVkYTQzMWQwZTdlYzA=">如何在 JavaScript 中更好地使用数组<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjhkZTgyOWYyNjVkYTQzNjIzYzQyNjE=">7 分钟理解 JS 的节流、防抖及使用场景<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yOTIxNDI0MA==">ECMAScript 6 六级考试<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcmVwby81OWRjYWIzNjUxODgyNTMwZTI4OWY4ZGQ=">javascript: Airbnb JavaScript 代码规范<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjgzY2I1YWU1MWQ0NTM4Y2MzZWMzNTQ=">Promise 实现原理（附源码）<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjVkYjViOGU1MWQ0NTE5MTU1NzIwZDI=">可能是最好的正则表达式的教程笔记了吧…<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNWI3ZDY4YjZlNTFkNDUzOGIzNWMwMTZk">一些 JavaScript 中的代码小技巧<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNWI3Y2M2OTI2ZmI5YTAxOWY0N2QwZWM4">急速 JavaScript 全栈教程<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjdjMDIxYWYyNjVkYTQzNjIzYzI2YzY/dXRtX3NvdXJjZT1nb2xkX2Jyb3dzZXJfZXh0ZW5zaW9u">理解异步之美 — promise 与 async await （三）<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjY4NWVkMWU1MWQ0NTMzZjUyODU5ZTg=">ES9 已经来了 Are you ready?<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yjc2MzUyOGU1MWQ0NTU1OWUzYTViNjQ=">使用原生 JavaScript 构建状态管理系统<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTA0MDY2MzUxODgyNTE3YzQxNjcxNWQ=">Promise 必知必会（十道题）<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OTY1OTQzZmYyNjVkYTZjMzA2NTM4Nzk=">JS 正则表达式完整教程（略长）<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjdiODhkNDZmYjlhMDE5ZTk3Njc0MDU/dXRtX21lZGl1bT1mZSZ1dG1fc291cmNlPXdlaXhpbnF1bg==">防抖和节流原理分析<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTBjMTk5ODUxODgyNTMxOTI2ZTQyOTc=">JavaScript 实用技巧和写法建议<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTJhN2E1MDUxODgyNTM1Y2Q0YWJmY2U=">编写自己的代码库（javascript 常用实例的实现与封装）<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTJlNWYwODUxODgyNTc1ZDQyZjU2MDk=">import、require、export、module.exports 混合使用详解<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTRlNmE0M2YyNjVkYTNlMzAzYzQ3ODc=">WebSocket：5 分钟从入门到精通<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTVkNjRmYmYyNjVkYTNlMjQzYjgzMWY=">JavaScript 运行原理解析<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTZiM2ZjYWYyNjVkYTNlMmMzODUzNzU=">简单了解 JavaScript 垃圾回收机制<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cDovL3Zhcm51bGwuY24veWktY2ktamktemh1LWpzZGUtNmdlLXpoZW5nLXplLWZhbmctZmEv">一次记住 js 的 6 个正则方法<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWE3ZDgyYzZmYjlhMDI4YzUyMmRlNDM=">几道 JS 代码手写题以及一些代码实现<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWJjYTg3N2YyNjVkYTIzODE1NWI2YmM=">JSBridge 的原理<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWM2MWRhNjZmYjlhMDI4YzcxZWFlMWI=">面试官: 你了解前端路由吗?<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9taW5nMTAxNi5naXRodWIuaW8vMjAxOC8wNC8yMS9kZWVwbHktYW5hbHlzZS1qYXZhc2NyaXB0Y29yZS8/aG1zcj10b3V0aWFvLmlvJnV0bV9tZWRpdW09dG91dGlhby5pbyZ1dG1fc291cmNlPXRvdXRpYW8uaW8=">深入剖析 JavaScriptCore<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cDovL2Jsb2cubGVhcG9haGVhZC5jb20vMjAxNS8wOS8xNS9qcy1jbG9zdXJlLw==">JavaScript 闭包的底层运行机制<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9xaXV0Yy5tZS9wb3N0L3RoZS1tdWx0aXRocmVhZC1pbi1qYXZhc2NyaXB0LXdlYi13b3JrZXIuaHRtbA==">JavaScript 中的多线程 – Web Worker<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjAyODRhYzUxODgyNTQyYWQ3NzRjNDU=">解锁多种 JavaScript 数组去重姿势<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWZlNmQzYmYyNjVkYTBiOWU2NTRjNGI=">Promise 不会？？看这里！！！史上最通俗易懂的 Promise！！！<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWU1NjkyN2YyNjVkYTBiN2UwYzA5Njg=">前端将数据转化为弹幕效果的实现方式<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjBiOWI5MDUxODgyNTE1NzczYWU3MTQ=">浅谈 instanceof 和 typeof 的实现原理<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjE2ODAwZmU1MWQ0NTA2YWU3MTliYWU=">一起学习造轮子（一）：从零开始写一个符合 Promises/A+规范的 promise<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNWFkNzRmMDY1MTg4MjUyZWFkMDkxOTM3">前端性能相关：防抖、节流<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWVkNjExMDUxODgyNTY3MWIwMjZiZWQ=">7 种方法实现数组去重<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWVkZDRhMmYyNjVkYTBiOWQ3ODFiODU=">如何实现一个 HTTP 请求库——axios 源码阅读与分析<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWMyZmI4ODZmYjlhMDI4Yjg2ZTMyOGM=">面试官:既然 React/Vue 可以用 Event Bus 进行组件通信,你可以实现下吗?<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWQ2YjM0YTZmYjlhMDI4Y2M2MWJmYjM=">高阶函数，你怎么那么漂亮呢！<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWJiNTVlZTZmYjlhMDI4ZTMzYjdlMGE=">面试官:请你实现一个深克隆<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWFhMzdjOGYyNjVkYTIzOTQ1ZjM2NWM=">前端模块化：CommonJS,AMD,CMD,ES6<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjZlNWNiZjUxODgyNTE5YWQ2MWI2N2U=">小邵教你玩转 promise 源码<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWE3ODY4YjZmYjlhMDI4ZGQ0ZGU2NzI=">Promise 原理讲解 &amp;&amp; 实现一个 Promise 对象<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNjc1NzUxNA==">浅谈 HTTP/2 Server Push<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMTQ5OTMxMA==">开发更好用的 JavaScript 模块<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80ODkxNzkxMg==">JavaScript 复杂判断的更优雅写法<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NjQ5MDQ5OA==">我从来不理解 JavaScript 闭包，直到有人这样向我解释它<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzZhOWMxMGYyNjVkYTJkYjg3Yjk4ZjM=">重新认识构造函数、原型和原型链<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzdlNTQxYjZmYjlhMDQ5ZTA2NDE1YTU=">如何在 Web 关闭页面时发送 Ajax 请求<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yzg1MzNlNmU1MWQ0NTYxYTA3NzhhNGM=">用 Proxy 追踪 JavaScript 类<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzljMzk4OWU1MWQ0NTRlM2EzOTAyYjY=">「中高级前端面试」JavaScript 手写代码无敌秘籍<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mvck94dllTN01kblBBWDdGR2pwT1hudw==">JavaScript 的环境模型<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzAyMTQyZmU1MWQ0NTExYmU3N2FhZDc=">面试官(6): 写过『通用前端组件』吗?<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNTA4MDMyNA==">抱歉，学会 Proxy 真的可以为所欲为<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2VmNDYyMjZmYjlhMDdlYWYyYjc1MTY=">中级前端工程师必须要掌握的 28 个 JavaScript 技巧<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2Q4ZDYwOWU1MWQ0NTZlN2IzNzIxNTU=">前端路由原理解析和实现<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2RjZDQyNTUxODgyNTY4NjUxNTU0ZTY=">正则表达式不要背<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZDAzOGM5MDUxODgyNTQ4YWM0Mzk5MzM=">前端必知必会–操作 URL 的黑科技<i class="fa fa-external-link-alt"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZDA2NDQ5NzZmYjlhMDdlZDA2NGIwY2E=">送你 43 道 JavaScript 面试题<i class="fa fa-external-link-alt"></i></span></p>
</li>
</ul>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzRjMGVlOGYyNjVkYTYxMTE3YWE1Mjc=">一篇文章构建你的 NodeJS 知识体系<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNjQ2NzQwOQ==">200 多行代码实现 Websocket 协议<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NDg4MjMwNg==">浏览器与 Node 的事件循环(Event Loop)有何区别<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdURwMHZfMWhOMFV6Zy1FR3IxeWZnQQ==">NodeJS 与模块系统<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qc3BhbmcuY29tL3Bvc3QvRmx1dHRlclNob3AuaHRtbCN0b2MtNGM3">Flutter 实战视频-移动电商<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMzM4Mjg5">flutter 中 event_bus 实现原理<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2Q5ODc1YWU1MWQ0NTNkMDIyY2I2NjI=">Flutter 面试知识点集锦<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODExMzE5Nw==">设计一个无懈可击的浏览器缓存方案：关于思路，细节，ServiceWorker，以及 HTTP/2<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWUwODFhYWYyNjVkYTBiNzY3ZDI2M2E=">你应该知道的前端——缓存<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yOTc1MDU4Mw==">HTTP 缓存机制一二三<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODEyOTg0Ng==">都 9102 年了，还问 GET 和 POST 的区别<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yjc5MTkzNDUxODgyNTQzMTI0MTRiOWM=">通过 HTTP 的 HEADER 完成各种骚操作<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTJmZjI5YzZmYjlhMDQ1MTMyYWFjNWE=">九个问题从入门到熟悉 HTTPS<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OWU0YzAyMTUxODgyNTc4ZDAyZjRhY2E=">谈谈 HTTPS<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OWZjMDRlY2YyNjVkYTQzMTc2OTdmMjY=">你敢在 post 和 get 上刁难我，就别怪我装逼了<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTc4MzVhNDZmYjlhMDYzNjA2ZWI4MDE=">图解 TCP 三次握手与四次分手<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWQ3ZTZjMzUxODgyNTJlYmQwNmFjZmE=">面试带你飞：这是一份全面的 计算机网络基础 总结攻略<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWQ0MDk0ZTZmYjlhMDI4ZDcwMTEwNjk=">小哥哥,小姐姐,我有一份 tcp、http 面试指南你要吗？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjAyNzRhYzZmYjlhMDdhYWExMThmNDk=">看图学 HTTPS<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWQ2YWQ1NzUxODgyNTVjMjcyMjczYzQ=">分分钟让你理解 HTTPS<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWQ0MDk0ZTZmYjlhMDI4ZDcwMTEwNjk=">小哥哥,小姐姐,我有一份 tcp、http 面试指南你要吗？<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWNjY2Y5NjZmYjlhMDI4ZDA0M2M2ZWM=">HTTP2 基本概念学习笔记<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NzM2MTIxNg==">都 2019 年了，还问 GET 和 POST 的区别<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2QwNDM4YzZmYjlhMDMxZWM2ZDNhYjI=">前端基础篇之 HTTP 协议<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2NkMGRmYzZmYjlhMDMyNGEwOGJiNzM=">关于三次握手与四次挥手面试官想考我们什么<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2Q2YWQ3YTUxODgyNTY4ZDM2NzBhOGU=">寒冬求职之你必须要懂的 Web 安全<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2QwNDM4YzZmYjlhMDMxZWM2ZDNhYjI=">前端基础篇之 HTTP 协议<i class="fa fa-external-link-alt"></i></span>- [ ] <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2Q5MDM3ZWU1MWQ0NTZlNWM1YmFiY2E=">你真的了解 Cookie 和 Session 吗<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2NmOThlYWU1MWQ0NTNhNGEzNTdlNGE=">这几个概念你可能还是没搞清 require、import 和 export<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNWFlMzYzNjVmMjY1ZGEwYjg4NmQyOGMy">前端必须要懂的浏览器缓存机制<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTk5MjNlOTUxODgyNTU1ODI1MWM5NmE=">浏览器的回流与重绘 (Reflow &amp; Repaint)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MzkxMzk4OQ==">深入浅出浏览器渲染原理<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MjA3NzYyMA==">抛弃 console.log()，拥抱浏览器 Debugger<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODI1NzA3NA==">Javascript 面试中经常被问到的三个问题！<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OGY1NThlZmFjNTAyZTAwNmMzZTVjOTc=">破解前端面试（80% 应聘者不及格系列）：从 DOM 说起<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMzMzMTEwNQ==">面试的信心来源于过硬的基础<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjJmMDJjZDUxODgyNTJiOTM3NTQ4YWI=">BAT 前端经典面试问题：史上最最最详细的手写 Promise 教程<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OGYxZmE2YTQ0ZDkwNDAwNmNmMjVkMjIjaGVhZGluZy0w">破解前端面试（80% 应聘者不及格系列）：从闭包说起<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cucG9ldHJpZXMudG9wL0ZFLUludGVydmlldy1RdWVzdGlvbnMv">前端面试题整理<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzY0ZDE1ZDZmYjlhMDQ5ZDM3ZjljMjAjaGVhZGluZy0xMw==">中高级前端大厂面试秘籍，为你保驾护航金三银四，直通大厂(上)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmM5MmU5Y2U1MWQ0NTBlOGU3NzcxMzY=">2018 大厂高级前端面试题汇总<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yjk0ZDg5NjUxODgyNTVjNWEwY2RjMDI=">2018 前端面试总结，看完弄懂，工资少说加 3K<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTk5ODk5MWYyNjVkYTIzN2YxZGJkZjk=">2018 春招前端面试: 闯关记(精排精校)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWFlMDc2ZDZmYjlhMDI4Y2M2MTAwYTk=">前端面试考点多？看这些文章就够了<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OGNmMTgwYjBjZTQ2MzAwNTdkNjcyN2M=">80% 应聘者都不及格的 JS 面试题<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzNkODk1NmU1MWQ0NTExZGM3MmMyMDA=">一次弄懂 Event Loop（彻底解决此类面试问题）<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzY0ZDE1ZDZmYjlhMDQ5ZDM3ZjljMjA=">中高级前端大厂面试秘籍，为你保驾护航金三银四，直通大厂(上)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzY5NzdlNDZmYjlhMDQ5ZmQxMDYzZGM=">【半月刊】前端高频面试题及答案汇总<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzZhMGZhNDUxODgyNTYyODUxYjNjZGQ=">一道被前端忽略的基础题，不信看你会几题<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OWM5MDdkNDZmYjlhMDBhNDc0NmUyZGI=">腾讯校招前端三面,虐完继续撸<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWIwZGE4NWYyNjVkYTIzODY2ZmI5Yjc=">2018 阿里巴巴前端面试总结<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWE4YTA3Y2YyNjVkYTIzOGEzMDIyYTQ=">几道高级前端面试题解析<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80Njk1ODE5MQ==">26 个精选的 JavaScript 面试问题<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzY5NzdlNDZmYjlhMDQ5ZmQxMDYzZGM=">前端高频面试题及答案汇总<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjcyZjBjYWYyNjVkYTI4MjgwOWYzYjU=">前端笔试&amp;面试爬坑系列—算法<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTI3YzY5NDZmYjlhMDQ1MDkwOTYyNDg=">漫画：什么是红黑树<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWU5NWYxN2YyNjVkYTBiOTM0ODFkZWM=">四月前端知识集锦<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODE2NTc1Nw==">web 项目如何进行 git 多人协作开发<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93ZWxlYXJubW9yZS5naXRib29rLmlvL2Nocm9tZS1leHRlbnNpb24tYm9vay8=">Chrome 插件编写<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjdhMjRhNWU1MWQ0NTM4ZGEyMmQwNTU=">用 yeoman 打造自己的项目脚手架<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNTIyNzAzMA==">Weex 入坑指南：手把手编译 Playground<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTllOGFkNWYyNjVkYTIzYTQwNDU2ZDQ=">什么是 PWA<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTI4YWVhZDZmYjlhMDQ1MGM0OTRiYzY=">打造属于自己的 cnpm/npm 安装，生成自定义项目架构<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Yzk0ZmVmN2YyNjVkYTYwZmQwYzE1ZTgjY29tbWVudA==">仿 vue-cli 搭建属于自己的脚手架<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNjE5MDgxNA==">教你从零开始搭建一款前端脚手架工具<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTMxZDIxMGYyNjVkYTQzMWE0MzMzMGUjaGVhZGluZy0xNA==">基于 node.js 的脚手架工具开发经历<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWY2ZjliZDZmYjlhMDdhYzkwZDQ5ZWI=">从零开始搭建脚手架<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8xNTQzNDUuaHRt">react 组件从搭建脚手架到在 npm 发布的步骤实现<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>170-react中常见动画实现方式</title>
    <url>/20220219/170-react%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>现在，用户对于前端页面的要求已经不能满足于实现功能，更要有颜值，有趣味。除了整体 UI 的美观，在合适的地方添加合适的动画效果往往比静态页面更具有表现力，达到更自然的效果。比如，一个简单的 loading 动画或者页面切换效果不仅能缓解用户的等待情绪，甚至通过使用品牌 logo 等形式，默默达到品牌宣传的效果。</p>
<p>React 作为最近几年比较流行的前端开发框架，提出了虚拟 DOM 概念，所有 DOM 的变化都先发生在虚拟 DOM 上，通过 DOM diff 来分析网页的实际变化，然后反映在真实 DOM 上，从而极大地提升网页性能。然而，在动画实现方面，React 作为框架并不会直接给组件提供动画效果，需要开发者自行实现，而传统 web 动画大多数都通过直接操作实际 DOM 元素来实现，这在 React 中显然是不被提倡的。那么，在 React 中动画都是如何实现的呢？</p>
<p>所有动画的本质都是连续修改 DOM 元素的一个或者多个属性，使其产生连贯的变化效果，从而形成动画。在 React 中实现动画本质上与传统 web 动画一样，仍然是两种方式： 通过 css3 动画实现和通过 js 修改元素属性。只不过在具体实现时，要更为符合 React 的框架特性，可以概括为几类：</p>
<ol>
<li>基于定时器或 requestAnimationFrame(RAF) 的间隔动画；</li>
<li>基于 css3 的简单动画；</li>
<li>React 动画插件 <code>CssTransitionGroup</code>；</li>
<li>结合 hook 实现复杂动画；</li>
<li>其他第三方动画库。</li>
</ol>
<h1 id="一、基于定时器或-RAF-的间隔动画"><a href="#一、基于定时器或-RAF-的间隔动画" class="headerlink" title="一、基于定时器或 RAF 的间隔动画"></a>一、基于定时器或 RAF 的间隔动画</h1><p>最早，动画的实现都是依靠定时器 <code>setInterval</code>，<code>setTimeout</code> 或者 <code>requestAnimationFrame</code>(RAF) 直接修改 DOM 元素的属性。不熟悉 React 特性的开发者可能会习惯性地通过 <code>ref</code> 或者 <code>findDOMNode()</code> 获取真实的 DOM 节点，直接修改其样式。然而，通过 <code>ref</code> 直接获取真实 DOM 并对其操作是是不被提倡使用，应当尽量避免这种操作。</p>
<p>因此，我们需要将定时器或者 RAF 等方法与 DOM 节点属性通过 <code>state</code> 联系起来。首先，需要提取出与变化样式相关的属性，替换为 <code>state</code>，然后在合适的生命周期函数中添加定时器或者 <code>requestAnimationFrame</code> 不断修改 <code>state</code>，触发组件更新，从而实现动画效果。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以一个进度条为例，代码如下所示：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用requestAnimationFrame改变state</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Progress</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">percent</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> percent = <span class="built_in">this</span>.state.percent</span><br><span class="line">    <span class="keyword">const</span> targetPercent = percent &gt;= <span class="number">90</span> ? <span class="number">100</span> : percent + <span class="number">10</span></span><br><span class="line">    <span class="keyword">const</span> speed = (targetPercent - percent) / <span class="number">400</span></span><br><span class="line">    <span class="keyword">let</span> start = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">const</span> animate = <span class="function">(<span class="params">timestamp</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!start) start = timestamp</span><br><span class="line">      <span class="keyword">const</span> progress = timestamp - start</span><br><span class="line">      <span class="keyword">const</span> currentProgress = <span class="built_in">Math</span>.min(<span class="built_in">parseInt</span>(speed * progress + percent, <span class="number">10</span>), targetPercent)</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">percent</span>: currentProgress,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (currentProgress &lt; targetPercent) &#123;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame(animate)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(animate)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrease = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> percent = <span class="built_in">this</span>.state.percent</span><br><span class="line">    <span class="keyword">const</span> targetPercent = percent &lt; <span class="number">10</span> ? <span class="number">0</span> : percent - <span class="number">10</span></span><br><span class="line">    <span class="keyword">const</span> speed = (percent - targetPercent) / <span class="number">400</span></span><br><span class="line">    <span class="keyword">let</span> start = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">const</span> animate = <span class="function">(<span class="params">timestamp</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!start) start = timestamp</span><br><span class="line">      <span class="keyword">const</span> progress = timestamp - start</span><br><span class="line">      <span class="keyword">const</span> currentProgress = <span class="built_in">Math</span>.max(<span class="built_in">parseInt</span>(percent - speed * progress, <span class="number">10</span>), targetPercent)</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">percent</span>: currentProgress,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (currentProgress &gt; targetPercent) &#123;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame(animate)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(animate)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; percent &#125; = <span class="built_in">this</span>.state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;progress-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;progress-inner&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> `$&#123;<span class="attr">percent</span>&#125;%` &#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;progress-info&quot;</span>&gt;</span>&#123;percent&#125;%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;btns&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrease&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increase&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在示例中，我们在 <code>increase</code> 和 <code>decrease</code> 函数中构建线性过渡函数 <code>animation</code>，<code>requestAnimationFrame</code> 在浏览器每次重绘前执行会执行过渡函数，计算当前进度条<code>width</code> 属性并更新该 <code>state</code>，使得进度条重新渲染。该示例的效果如下所示：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/10/160e059629f50ab7~tplv-t2oaga2asx-watermark.awebp" alt="RAF实现进度条效果"></p>
<p>这种实现方式在使用 <code>requestAnimationFrame</code> 时性能不错，完全使用纯 js 实现，不依赖于 css，使用定时器时可能出现掉帧卡顿现象。此外，还需要开发者根据速度函数自己计算状态，比较复杂。</p>
<h1 id="二、基于-css3-的简单动画"><a href="#二、基于-css3-的简单动画" class="headerlink" title="二、基于 css3 的简单动画"></a>二、基于 css3 的简单动画</h1><p>当 css3 中的 <code>animation</code> 和 <code>transition</code> 出现和普及后，我们可以轻松地利用 css 实现元素样式的变化，而不用通过人为计算实时样式。</p>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>我们仍以上面的进度条为例，使用 css3 实现进度条动态效果，代码如下所示：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Progress</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            <span class="attr">percent</span>: <span class="number">10</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> percent = <span class="built_in">this</span>.state.percent + <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">percent</span>: percent &gt; <span class="number">100</span> ? <span class="number">100</span> : percent,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    decrease = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> percent = <span class="built_in">this</span>.state.percent - <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">percent</span>: percent &lt; <span class="number">0</span> ? <span class="number">0</span> : percent,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 同上例， 省略</span></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.progress-inner &#123;</span><br><span class="line">  <span class="attr">transition</span>: width 400ms cubic-bezier(<span class="number">0.08</span>, <span class="number">0.82</span>, <span class="number">0.17</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 其他样式同上，省略</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在示例中，<code>increase</code> 和 <code>decrease</code> 函数中不再计算 <code>width</code>，而是直接设置增减后的宽度。需要注意的是，在 css 样式中设置了 <code>transition</code> 属性，当 width 属性发生变化时自动实现样式的动态变化效果，并且可以设置不同的速度效果的速度曲线。该示例的效果如下图所示，可以发现，与上一个例子不同的是，右侧的进度数据是直接变化为目标数字，没有具体的变化过程，而进度条的动态效果因为不再是线性变化，效果更为生动。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/10/160e059629aeda19~tplv-t2oaga2asx-watermark.awebp" alt="进度条效果"></p>
<p>基于 css3 的实现方式具有较高的性能，代码量少，但是只能依赖于 css 效果，对于复杂动画也很难实现。此外，通过修改 <code>state</code> 实现动画效果，只能作用于已经存在于 DOM 树中的节点。如果想用这种方式为组件添加入场和离场动画，需要维持至少两个 <code>state</code> 来实现入场和离场动画，其中一个 <code>state</code> 用于控制元素是否显示，另一个 <code>state</code> 用于控制元素在动画中的变化属性。在这种情况下，开发者需要花费大量精力来维护组件的动画逻辑，十分复杂繁琐。</p>
<h1 id="三、React-动画插件-CssTransitionGroup"><a href="#三、React-动画插件-CssTransitionGroup" class="headerlink" title="三、React 动画插件 CssTransitionGroup"></a>三、React 动画插件 <code>CssTransitionGroup</code></h1><p>React 曾为开发者提供过动画插件 <a href="https://link.juejin.cn/?target=https://reactjs.org/docs/animation.html"><code>react-addons-css-transition-group</code></a>，后交由社区维护，形成现在的 <a href="https://link.juejin.cn/?target=https://github.com/reactjs/react-transition-group/tree/v1-stable"><code>react-transition-group</code></a>，该插件可以方便地实现组件的入场和离场动画，使用时需要开发者额外安装。<code>react-transition-group</code> 包含 <code>CSSTransitionGroup</code> 和 <code>TransitionGroup</code> 两个动画插件，其中，后者是底层 api，前者是后者的进一步封装，可以较为便捷地实现 css 动画。</p>
<h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><p>以一个动态增加 tab 的为例，代码如下：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CSSTransitionGroup &#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Tabs</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            <span class="attr">activeId</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">tabData</span>: [&#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">panel</span>: <span class="string">&#x27;选项1&#x27;</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">panel</span>: <span class="string">&#x27;选项2&#x27;</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addTab = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 添加tab代码</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deleteTab = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 删除tab代码</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; tabData, activeId &#125; = <span class="built_in">this</span>.state;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> renderTabs = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> tabData.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">tab-item</span>$&#123;<span class="attr">item.id</span> === <span class="string">activeId</span> ? &#x27; <span class="attr">tab-item-active</span>&#x27; <span class="attr">:</span> &#x27;&#x27;&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">tab</span>$&#123;<span class="attr">item.id</span>&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">                    &gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;item.panel&#125;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;btns btn-delete&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.deleteTab(item.id)&#125;&gt;✕<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                );</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;tabs&quot;</span> &gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">CSSTransitionGroup</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                      <span class="attr">transitionName</span>=<span class="string">&quot;tabs-wrap&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                      <span class="attr">transitionEnterTimeout</span>=<span class="string">&#123;500&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                      <span class="attr">transitionLeaveTimeout</span>=<span class="string">&#123;500&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    &gt;</span></span></span><br><span class="line"><span class="xml">                      &#123;renderTabs()&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">CSSTransitionGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;btns btn-add&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addTab&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;tab-cont&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    cont</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* tab动态增加动画 */</span></span><br><span class="line">.tabs-wrap-enter &#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0.01</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabs-wrap-enter.tabs-wrap-enter-active &#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  transition: all 500ms ease-<span class="keyword">in</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabs-wrap-leave &#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabs-wrap-leave.tabs-wrap-leave-active &#123;</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0.01</span>;</span><br><span class="line">  transition: all 500ms ease-<span class="keyword">in</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>CSSTransitionGroup</code> 可以为其子节点添加额外的 css 类，然后通过 css 动画达到入场和离场动画效果。为了给每个 tab 节点添加动画效果，需要先将它们包裹在 <code>CSSTransitionGroup</code> 组件中。 当设定 <code>transitionName</code> 属性为 <code>&#39;tabs-wrapper&#39;</code>，<code>transitionEnterTimeout</code> 为 400 毫秒后，一旦 <code>CSSTransitionGroup</code> 中新增节点，该新增节点会在出现时被添加上 css 类 <code>&#39;tabs-wrapper-enter&#39;</code>，然后在下一帧时被添加上 css 类 <code>&#39;tabs-wrapper-enter-active&#39;</code>。由于这两个 css 类中设定了不同的透明度和 css3 transition 属性，所以节点实现了透明度由小到大的入场效果。400 毫秒后 css 类 <code>&#39;tabs-wrapper-enter&#39;</code> 和 <code>&#39;tabs-wrapper-enter-active&#39;</code> 将会同时被移除，节点完成整个入场动画过程。离场动画的实现类似于入场动画，只不过被添加的 css 类名为 <code>&#39;tabs-wrapper-leave&#39;</code> 和 <code>&#39;tabs-wrapper-leave-active&#39;</code>。该示例效果如下图所示：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/10/160e05962a0eb152~tplv-t2oaga2asx-watermark.awebp" alt="动态增加tab效果"></p>
<p><code>CSSTransitionGroup</code> 支持以下 7 个属性：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/10/160e059629ed38a8~tplv-t2oaga2asx-watermark.awebp" alt="img"></p>
<p>其中，入场和离场动画是默认开启的，使用时需要设置 <code>transitionEnterTimeout</code> 和 <code>transitionLeaveTimeout</code>。值得注意的是，<code>CSSTransitionGroup</code> 还提供出现动画（appear），使用时需要设置 <code>transitionAppearTimeout</code>。那么，出现动画和入场动画有什么区别呢？当设定 <code>transitionAppear</code> 为 <code>true</code> 时，<code>CSSTransitionGroup</code> 在<strong>初次渲染</strong>时，会添加一个出现阶段。在该阶段中，<code>CSSTransitionGroup</code> 的已有子节点都会被相继添加 css 类 <code>&#39;tabs-wrapper-appear&#39;</code> 和 <code>&#39;tabs-wrapper-appear-active&#39;</code>，实现出现动画效果。因此，<strong>出现动画仅适用于 <code>CSSTransitionGroup</code> 在初次渲染时就存在的子节点</strong>，一旦 <code>CSSTransitionGroup</code> 完成渲染，其子节点就只可能有入场动画（enter），不可能有出现动画（appear）。</p>
<p>此外，使用 <code>CSSTransitionGroup</code> 需要注意以下几点：</p>
<ul>
<li><code>CSSTransitionGroup</code> 默认在 DOM 树中生成一个 <code>span</code> 标签包裹其子节点，如果想要使用其他 html 标签，可设定 <code>CSSTransitionGroup</code> 的 <code>component</code> 属性；</li>
<li><code>CSSTransitionGroup</code> 的子元素必须添加 <code>key</code> 值才会在节点发生变化时，准确地计算出哪些节点需要添加入场动画，哪些节点需要添加离场动画；</li>
<li><code>CSSTransitionGroup</code> 的动画效果只作用于直接子节点，不作用于其孙子节点；</li>
<li>动画的结束时间不以 css 中 transition-duration 为准，而是以 <code>transitionEnterTimeout</code>，<code>transitionLeaveTimeout</code>，<code>TransitionAppearTimeout</code> 为准，因为某些情况下 transitionend 事件不会被触发，详见<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy90cmFuc2l0aW9uZW5k">MDN transitionend<i class="fa fa-external-link-alt"></i></span>。</li>
</ul>
<p><code>CSSTransitionGroup</code> 实现动画的优点是：</p>
<ul>
<li>简单易用，可以方便快捷地实现元素的入场和离场动画；</li>
<li>与 React 结合，性能比较好。</li>
</ul>
<p><code>CSSTransitionGroup</code> 缺点也十分明显：</p>
<ul>
<li>局限于出现动画，入场动画和离场动画；</li>
<li>由于需要制定 <code>transitionName</code>，灵活性不够；</li>
<li>只能依靠 css 实现简单的动画。</li>
</ul>
<h1 id="四、结合-hook-实现复杂动画"><a href="#四、结合-hook-实现复杂动画" class="headerlink" title="四、结合 hook 实现复杂动画"></a>四、结合 hook 实现复杂动画</h1><p>在实际项目中，可能需要一些更炫酷的动画效果，这些效果仅依赖于 css3 往往较难实现。此时，我们不妨借助一些成熟的第三方库，如 jQuery 或 GASP，结合 React 组件中的生命周期钩子方法 hook 函数，实现复杂动画效果。除了 React 组件正常的生命周期外，<code>CSSTransitionGroup</code> 的底层 api <code>TransitonGroup</code> 还为其子元素额外提供了一系列特殊的生命周期 hook 函数，在这些 hook 函数中结合第三方动画库可以实现丰富的入场、离场动画效果。</p>
<p><code>TransisitonGroup</code> 分别提供一下六个生命周期 hook 函数：</p>
<ul>
<li>componentWillAppear(callback)</li>
<li>componentDidAppear()</li>
<li>componentWillEnter(callback)</li>
<li>componentDidEnter()</li>
<li>componentWillLeave(callback)</li>
<li>componentDidLeave()</li>
</ul>
<p>它们的触发时机如图所示：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/10/160e05962b67d24a~tplv-t2oaga2asx-watermark.awebp" alt="TransitionGroup组件生命周期与自组件生命周期的关系"></p>
<h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h2><p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9nc2Fw">GASP<i class="fa fa-external-link-alt"></i></span> 是一个 flash 时代发展至今的动画库，借鉴视频帧的概念，特别适合做长时间的序列动画效果。本文中，我们用 <code>TransitonGroup</code> 和 <a href="https://link.juejin.cn/?target=https://github.com/azazdeaz/react-gsap-enhancer"><code>react-gsap-enhancer</code></a>（一个可以将 GSAP 应用于 React 的增强库）完成一个图片画廊，代码如下：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; TransitionGroup &#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span></span><br><span class="line"><span class="keyword">import</span> GSAP <span class="keyword">from</span> <span class="string">&#x27;react-gsap-enhancer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; TimelineMax, Back, Sine &#125; <span class="keyword">from</span> <span class="string">&#x27;gsap&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillEnter</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.addAnimation(<span class="built_in">this</span>.enterAnim, &#123; <span class="attr">callback</span>: callback &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentWillLeave</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.addAnimation(<span class="built_in">this</span>.leaveAnim, &#123; <span class="attr">callback</span>: callback &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  enterAnim = <span class="function">(<span class="params">utils</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TimelineMax().from(</span><br><span class="line">      utils.target,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="string">`+=<span class="subst">$&#123;(<span class="number">4</span> - id) * <span class="number">60</span>&#125;</span>px`</span>,</span><br><span class="line">        <span class="attr">autoAlpha</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">onComplete</span>: utils.options.callback,</span><br><span class="line">      &#125;,</span><br><span class="line">      id * <span class="number">0.7</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  leaveAnim = <span class="function">(<span class="params">utils</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TimelineMax().to(</span><br><span class="line">      utils.target,</span><br><span class="line">      <span class="number">0.5</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">scale</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">ease</span>: Sine.easeOut,</span><br><span class="line">        <span class="attr">onComplete</span>: utils.options.callback,</span><br><span class="line">      &#125;,</span><br><span class="line">      (<span class="number">4</span> - id) * <span class="number">0.7</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; url &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;photo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;url&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WrappedPhoto = GSAP()(Photo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Gallery</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">photos</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;http://img4.imgtn.bdimg.com/it/u=1032683424,3204785822&amp;fm=214&amp;gp=0.jpg&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;http://imgtu.5011.net/uploads/content/20170323/7488001490262119.jpg&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;http://tupian.enterdesk.com/2014/lxy/2014/12/03/18/10.jpg&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;http://img4.imgtn.bdimg.com/it/u=360498760,1598118672&amp;fm=27&amp;gp=0.jpg&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toggle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">show</span>: !<span class="built_in">this</span>.state.show,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; show, photos &#125; = <span class="built_in">this</span>.state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> renderPhotos = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> photos.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedPhoto</span> <span class="attr">id</span>=<span class="string">&#123;item.id&#125;</span> <span class="attr">url</span>=<span class="string">&#123;item.url&#125;</span> <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">photo</span>$&#123;<span class="attr">item.id</span>&#125;`&#125; /&gt;</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.toggle&#125;</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">TransitionGroup</span> <span class="attr">component</span>=<span class="string">&quot;div&quot;</span>&gt;</span>&#123;show &amp;&amp; renderPhotos()&#125;<span class="tag">&lt;/<span class="name">TransitionGroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在该示例中，我们在子组件 <code>Photo</code> 的 <code>componentWillEnter</code> 和 <code>componentWillLeave</code> 两个 hook 函数中为每个子组件添加了入场动画 <code>enterAnim</code> 和 离场动画 <code>LeaveAnim</code>。在入场动画中，使用 <code>TimeLineMax.from(target, duration, vars, delay)</code> 方式建立时间轴动画，指定了每个子组件的动画移动距离随 <code>id</code> 增大而减小，延期时间随着 <code>id</code> 增大而增大，离场动画中每个子组件的延期时间随着 <code>id</code> 增大而减小，从而实现根据组件 <code>id</code> 不同具有不同的动画效果。实际使用时，你可以根据需求对任一子组件添加不同的效果。该示例的效果如下图所示：</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/10/160e05962a90cb13~tplv-t2oaga2asx-watermark.awebp" alt="图片画廊效果"></p>
<p>在使用 <code>TransitionGroup</code> 时，在 <code>componentnWillAppear(callback)</code>，<code>componentnWillEntercallback)</code>，<code>componentnWillLeave(callback)</code> 函数中一定要<strong>在函数逻辑结束后调用 <code>callback</code>，以保证 <code>TransitionGroup</code> 能正确维护子节点的状态序列</strong>。关于 GASP 的详细使用方法可参考<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9nc2Fw">GASP 官方文档<i class="fa fa-external-link-alt"></i></span>和博文<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHA6Ly9hY2d0b2ZlLmNvbS9wb3N0cy8yMDE2LzA1L2dzYXAtZm9yLWFuaW1hdGlvbi1wcm8=">GSAP，专业的 Web 动画库<i class="fa fa-external-link-alt"></i></span>，本文不再赘述。</p>
<p>结合 hook 实现动画可以支持各种复杂动画，如时间序列动画等，由于依赖第三方库，往往动画效果比较流畅，用户体验较好。但是第三方库的引入，需要开发者额外学习对应的 api，也提升了代码复杂度。</p>
<h1 id="五、其他第三方动画库"><a href="#五、其他第三方动画库" class="headerlink" title="五、其他第三方动画库"></a>五、其他第三方动画库</h1><p>此外，还有很多优秀的第三方动画库，如 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS9jaGVuZ2xvdS9yZWFjdC1tb3Rpb24=">react-motion<i class="fa fa-external-link-alt"></i></span>，Animated，<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUtZmFicmljL3ZlbG9jaXR5LXJlYWN0">velocity-react<i class="fa fa-external-link-alt"></i></span>等，这些动画库在使用时也各有千秋。</p>
<h2 id="Animated"><a href="#Animated" class="headerlink" title="Animated"></a>Animated</h2><p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS9hbmltYXRlZGpzL2FuaW1hdGVk">Animated<i class="fa fa-external-link-alt"></i></span> 是一个跨平台的动画库，兼容 React 和 React Native。由于在动画过程中，我们只关心动画的初始状态、结束状态和变化函数，并不关心每个时刻元素属性的具体值，所以 Animated 采用声明式的动画，通过它提供的特定方法计算 css 对象，并传入 <code>Animated.div</code> 实现动画效果。</p>
<h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p>我们使用 Animated 实现一个图片翻转的效果，代码如下。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Animated <span class="keyword">from</span> <span class="string">&#x27;animated/lib/targets/react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PhotoPreview</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">anim</span>: <span class="keyword">new</span> Animated.Value(<span class="number">0</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; anim &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    anim.stopAnimation(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      Animated.spring(anim, &#123;</span><br><span class="line">        <span class="attr">toValue</span>: <span class="built_in">Math</span>.round(value) + <span class="number">1</span>,</span><br><span class="line">      &#125;).start()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; anim &#125; = <span class="built_in">this</span>.state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> rotateDegree = anim.interpolate(&#123;</span><br><span class="line">      <span class="attr">inputRange</span>: [<span class="number">0</span>, <span class="number">4</span>],</span><br><span class="line">      <span class="attr">outputRange</span>: [<span class="string">&#x27;0deg&#x27;</span>, <span class="string">&#x27;360deg&#x27;</span>],</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>向右翻转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Animated.div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">transform:</span> [</span></span></span><br><span class="line"><span class="tag"><span class="xml">              &#123;</span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">rotate:</span> <span class="attr">rotateDegree</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">              &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">            ],</span></span></span><br><span class="line"><span class="tag"><span class="xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&quot;preivew-wrapper&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">alt</span>=<span class="string">&quot;img&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">src</span>=<span class="string">&quot;http://img4.imgtn.bdimg.com/it/u=1032683424,3204785822&amp;fm=214&amp;gp=0.jpg&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Animated.div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在该示例中，我们希望实现每点击一次按钮，图片向右旋转 90°。在组件初始化时新建了一个初始值为 0 的 <code>Animated</code> 对象 <code>this.state.anim</code>。<code>Animated</code> 对象中有插值函数 <code>interpolate</code>，当设定输入区间 <code>inputRange</code> 和输出区间 <code>outputRange</code> 后，插值函数可以根据 <code>Animated</code> 对象的当前值进行线性插值，计算得到对应的映射值。</p>
<p>在本例中，我们假设每点击一次按钮，<code>this.state.anim</code> 的值加 1，图像需要转动 90°。在 render 函数中，我们设置插值函数 <code>this.state.anim.interpolate</code> 的输入区间为[0, 4]，输出区间为[‘0deg’, ‘360deg’]。当执行动画时，<code>this.state.anim</code> 的值发生变化，插值函数根据 <code>this.state.anim</code> 当前值，计算得到旋转角度 <code>rotateDegree</code>，触发组件的重新渲染。因此，如果 <code>Animated</code> 对象当前值为 2，对应的旋转角度就是 180deg。在组件渲染结构中，需要使用 <code>Animated.div</code> 包裹动画节点，并将 <code>rotateDegree</code> 封装为 css 对象作为 stlye 传入 <code>Animated.div</code> 中，实现节点 css 属性的变化。</p>
<p>在点击事件中，考虑到按钮可能连续多次点击，我们首先使用 <code>stopAnimation</code> 停止当前正在进行的动画，该函数会在回调函数中返回一个 {value : number} 对象，value 对应最后一刻的动画属性值。根据获取的 <code>value</code> 值，随后使用 <code>Animated.spring</code> 函数开启一次新的弹簧动画过程，从而实现一个流畅的动画效果。由于每次转动停止时，我们希望图片的翻转角度都是 90° 的整数倍，所以需要对 <code>Animated.spring</code> 的终止值进行取整。最终我们实现了如下效果:</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/10/160e05969c876478~tplv-t2oaga2asx-watermark.awebp" alt="image"></p>
<p>使用时需要注意一下几点：</p>
<ul>
<li><code>Animated</code> 对象的值和其插值结果只能作用于 <code>Animated.div</code> 节点；</li>
<li><code>interpolate</code> 默认会根据输入区间和输出区间进行线性插值，如果输入值超出输入区间不受影响，插值结果默认会根据输出区间向外延展插值，可以通过设置 <code>extrapolate</code> 属性限制插值结果区间。</li>
</ul>
<p>Animated 在动画过程中不直接修改组件 <code>state</code>，而是通过其新建对象的组件和方法直接修改元素的属性，不会重复触发 render 函数，是 React Native 中非常稳定的动画库。但是在 React 中存在低版本浏览器兼容问题，且具有一定学习成本。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>当我们在 React 中实现动画时，首先要考量动画的难易程度和使用场景，对于简单动画，优先使用 css3 实现，其次是基于 js 的时间间隔动画。如果是元素入场动画和离场动画，则建议结合 <code>CSSTransitionGroup</code> 或者 <code>TransitionGroup</code> 实现。当要实现的动画效果较为复杂时，不妨尝试一些优秀的第三方库，打开精彩的动效大门。</p>
<p>Ps. 本文所有示例代码可访问 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS9mYWlyeWFpZXJsL3JlYWN0LWFuaW1hdGlvbi1kZW1vcw==">github<i class="fa fa-external-link-alt"></i></span> 查看</p>
<h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdHJlZS92MS1zdGFibGU=">react-transition-group<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHA6Ly9hemF6ZGVhei5naXRodWIuaW8vcmVhY3QtZ3NhcC1lbmhhbmNlci8lMjMvZGVtby91c2luZy10cmFuc2l0aW9uLWdyb3VwP19rPW4wbGNiYg==">react-gsap-enhancer<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vY3NzLXRyaWNrcy5jb20vY29tcGFyaXNvbi1hbmltYXRpb24tdGVjaG5vbG9naWVzLw==">A Comparison of Animation Technologies<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vbWVkaXVtLmNvbS9yZWFjdC1uYXRpdmUtdHJhaW5pbmcvcmVhY3QtYW5pbWF0aW9ucy1pbi1kZXB0aC00MzNlMmIzZjBlOGU=">React Animations in Depth<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>173-react-实现监听页面unload-hooks</title>
    <url>/20220301/173-react-%E5%AE%9E%E7%8E%B0%E7%9B%91%E5%90%AC%E9%A1%B5%E9%9D%A2unload-hooks/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>利用 react hook 实现监听页面即将离开，处理一些事情，比如 vuex(redux,jotai 等) 页面离开的时候把 store 数据保存在 localStorage 中。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> useUnload = <span class="function">(<span class="params">fn: (e: Event) =&gt; <span class="built_in">void</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cb = useRef(fn)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> onUnload = cb.current</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;beforeunload&#x27;</span>, onUnload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;beforeunload&#x27;</span>, onUnload)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [cb])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test22 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  useUnload(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;tuichu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> exit = <span class="built_in">window</span>.confirm(<span class="string">&#x27;are you sure exit?&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (exit) <span class="built_in">window</span>.close()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test22<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test22</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>175-react-hooks-封装异步请求hook</title>
    <url>/20220301/175-react-hooks-%E5%B0%81%E8%A3%85%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82hook/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> reducerActionType = <span class="string">&#x27;start&#x27;</span> | <span class="string">&#x27;finish&#x27;</span> | <span class="string">&#x27;error&#x27;</span></span><br><span class="line"><span class="keyword">interface</span> reducerAction &#123;</span><br><span class="line">  <span class="attr">type</span>: reducerActionType</span><br><span class="line">  value?: <span class="built_in">any</span></span><br><span class="line">  error?: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> useAsync = <span class="function">(<span class="params">fn: (args: <span class="built_in">string</span>) =&gt; <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> initalState = &#123; <span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">error</span>: <span class="literal">null</span>, <span class="attr">value</span>: <span class="literal">null</span> &#125;</span><br><span class="line">  <span class="keyword">const</span> stateReducer = <span class="function">(<span class="params">_, action: reducerAction</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;start&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">loading</span>: <span class="literal">true</span>, <span class="attr">error</span>: <span class="literal">null</span>, <span class="attr">value</span>: <span class="literal">null</span> &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;finish&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">error</span>: <span class="literal">null</span>, <span class="attr">value</span>: action.value &#125;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;error&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">loading</span>: <span class="literal">false</span>, <span class="attr">error</span>: action.error, <span class="attr">value</span>: <span class="literal">null</span> &#125;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;type 不存在:&#x27;</span> + action.type)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(stateReducer, initalState)</span><br><span class="line">  <span class="keyword">const</span> run = <span class="keyword">async</span> (args: <span class="built_in">string</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      dispatch(&#123; <span class="attr">type</span>: <span class="string">&#x27;start&#x27;</span> &#125;)</span><br><span class="line">      <span class="keyword">const</span> value = <span class="keyword">await</span> fn(args)</span><br><span class="line">      dispatch(&#123; <span class="attr">type</span>: <span class="string">&#x27;finish&#x27;</span>, <span class="attr">value</span>: value &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      dispatch(&#123; <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>, <span class="attr">error</span>: error &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; ...state, run &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test23 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> imgFetch = useAsync(<span class="function">(<span class="params">url: <span class="built_in">string</span></span>) =&gt;</span> fetch(url).then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json()))</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      test23</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> imgFetch.run(&#x27;https://dog.ceo/api/breeds/image/random&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="xml">        fetch Image</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;imgFetch.loading &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>loading.....<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">      &#123;imgFetch.error &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span> fetch error:&#123;imgFetch.error&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">      &#123;imgFetch.value &amp;&amp; (</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;imgFetch.value.message&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;fetch dog img ....&quot;</span> <span class="attr">width</span>=<span class="string">&#123;300&#125;</span> <span class="attr">height</span>=<span class="string">&#123;200&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      )&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test23</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>174-react-hooks-实现get,set</title>
    <url>/20220301/174-react-hooks-%E5%AE%9E%E7%8E%B0get-set/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>创建一个有状态的值，返回一个 getter 和一个 setter 函数。</p>
<p>注意：useReducer 和 useState 作用一样，这里我猜测是为了 重新 render，不然 useMemo 可能会因为闭包的机制，不更新 useRef</p>
<p>如果注释掉 update(),setCount() 值会更新，但是页面不会更新.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef, useMemo, useReducer, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> useGetSet = <span class="function">(<span class="params">initalState: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> state = useRef(initalState)</span><br><span class="line">  <span class="keyword">const</span> [, update] = useReducer(<span class="function">() =&gt;</span> (&#123;&#125;))</span><br><span class="line">  <span class="comment">// const [,setCount] = useState(0)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> useMemo(</span><br><span class="line">    <span class="function">() =&gt;</span> [</span><br><span class="line">      <span class="function">() =&gt;</span> state.current,</span><br><span class="line">      <span class="function">(<span class="params">newState: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">        state.current = newState</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;state.current&#x27;</span>, state.current, newState)</span><br><span class="line">        update()</span><br><span class="line">        <span class="comment">// setCount(newState)</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    []</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Test21 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [getCount, setCount] = useGetSet(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(getCount() + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      test21</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>btn &#123;getCount()&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Test21</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>176-history模式部署后刷新404问题-nginx配置</title>
    <url>/20220310/176-history%E6%A8%A1%E5%BC%8F%E9%83%A8%E7%BD%B2%E5%90%8E%E5%88%B7%E6%96%B0404%E9%97%AE%E9%A2%98-nginx%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /www/wwwroot/test.wangyin.com;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    <span class="attribute">try_files</span> $uri $uri/ @rewrites;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="attribute">location</span> @rewrites &#123;</span><br><span class="line">     <span class="attribute">rewrite</span><span class="regexp"> ^(.+)$</span> /index.html <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>177-react转发组件ref</title>
    <url>/20220314/177-react%E8%BD%AC%E5%8F%91%E7%BB%84%E4%BB%B6ref/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="相关-api"><a href="#相关-api" class="headerlink" title="相关 api"></a>相关 api</h2><ul>
<li>useImperativeHandle(ref, createHandle, [deps])</li>
<li>forwardRef</li>
</ul>
<p>两个是相辅相成的,通过 useImperativeHandle 暴露方法或者属性，让父组件通过 ref 访问,forwardRef,给组件 props 后添加一个 ref 属性</p>
<p>官网实例:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">props, ref</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef();</span><br><span class="line">  useImperativeHandle(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">focus</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      inputRef.current.focus();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> <span class="attr">...</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">FancyInput = forwardRef(FancyInput);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>自己实践 ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IFormSelectProps &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IFormSelectRef &#123;</span><br><span class="line">  <span class="attr">getFormData</span>: <span class="function">() =&gt;</span> <span class="built_in">any</span></span><br><span class="line">  <span class="attr">resetFormData</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="attr">setFormData</span>: <span class="function">(<span class="params">args: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FormSelect = forwardRef&lt;IFormSelectRef, IFormSelectProps&gt;(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [form] = Form.useForm()</span><br><span class="line"></span><br><span class="line">  useImperativeHandle(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">getFormData</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> form.getFieldsValue()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resetFormData</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      form.resetFields()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">setFormData</span>: <span class="function">(<span class="params">formData: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      form.setFieldsValue(formData)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.tsx</span></span><br><span class="line"><span class="keyword">const</span> testRef = useRef&lt;IFormSelectRef&gt;(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> onClickTest = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> val = testRef.current?.getFormData()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;val&#x27;</span>, val)</span><br><span class="line">  <span class="comment">// testRef.current?.resetFormData()</span></span><br><span class="line">  testRef.current?.setFormData(&#123; <span class="attr">a0</span>: <span class="number">888</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件通讯，如果不想用 props callback，ref 也是个不错的选择,比如 modal 中，确定按钮和 form 表单不再一起，可以这样做</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>178-react-media-recorder录音，实现html5录音思路</title>
    <url>/20220315/178-react-media-recorder%E5%BD%95%E9%9F%B3%EF%BC%8C%E5%AE%9E%E7%8E%B0html5%E5%BD%95%E9%9F%B3%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近项目遇到一个要在网页上录音的需求，在一波搜索后，发现了 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS8weDAwNkYvcmVhY3QtbWVkaWEtcmVjb3JkZXI=">react-media-recorder<i class="fa fa-external-link-alt"></i></span> 这个库。今天就跟大家一起研究一下这个库的源码吧，从 0 到 1 来实现一个 React 的录音、录像和录屏的功能。</p>
<blockquote>
<p><strong>完整项目代码放在 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS9oYWl4aWFuZ3lhbi9yZWFjdC1tZWRpYS1yZWNvcmRlcg==">Github<i class="fa fa-external-link-alt"></i></span></strong></p>
</blockquote>
<h2 id="需求与思路"><a href="#需求与思路" class="headerlink" title="需求与思路"></a>需求与思路</h2><p>首先要明确我们要完成的事：<strong>录音</strong>，<strong>录像</strong>，<strong>录屏</strong>。</p>
<p>这种录制媒体流的原理其实很简单。</p>
<p><img src="https://files.mdnice.com/user/24913/5ff8e420-7f5a-4380-9bfc-087bb21a0c91.png" alt="img"></p>
<p><strong>只需要记住：把输入 <code>stream</code> 存放在 <code>blobList</code>，最后转预览 <code>blobUrl</code>。</strong></p>
<p><img src="https://files.mdnice.com/user/24913/47a6a787-0a41-4bc8-9e2d-b4e6e9a9afc4.png" alt="img"></p>
<h2 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h2><p>有了上面的简单思路后，我们可以先做一个简单的录音与录像功能。</p>
<p>这里先把基础的 HTML 结构实现了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [audioUrl, setAudioUrl] = useState &lt; string &gt; <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> startRecord = <span class="keyword">async</span> () =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stopRecord = <span class="keyword">async</span> () =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>react 录音<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&#123;audioUrl&#125;</span> <span class="attr">controls</span> /&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;startRecord&#125;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>恢复<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;stopRecord&#125;</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面有 <code>开始</code>，<code>暂停</code>，<code>恢复</code> 以及 <code>停止</code> 四个功能，还加加了一个 <code>&lt;audio&gt;</code> 来查看录音结果。</p>
<p><img src="https://files.mdnice.com/user/24913/ac23fb40-5191-4d7c-ba43-2ab48a38980d.png" alt="img"></p>
<p>之后来实现 <code>开始</code> 与 <code>停止</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> medisStream = useRef&lt;MediaStream&gt;();</span><br><span class="line"><span class="keyword">const</span> recorder = useRef&lt;MediaRecorder&gt;();</span><br><span class="line"><span class="keyword">const</span> mediaBlobs = useRef&lt;Blob[]&gt;([]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始</span></span><br><span class="line"><span class="keyword">const</span> startRecord = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 读取输入流</span></span><br><span class="line">  medisStream.current = <span class="keyword">await</span> navigator.mediaDevices.getUserMedia(&#123; <span class="attr">audio</span>: <span class="literal">true</span>, <span class="attr">video</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">  <span class="comment">// 生成 MediaRecorder 对象</span></span><br><span class="line">  recorder.current = <span class="keyword">new</span> MediaRecorder(medisStream.current);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 stream 转成 blob 来存放</span></span><br><span class="line">  recorder.current.ondataavailable = <span class="function">(<span class="params">blobEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    mediaBlobs.current.push(blobEvent.data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 停止时生成预览的 blob url</span></span><br><span class="line">  recorder.current.onstop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob(mediaBlobs.current, &#123; <span class="attr">type</span>: <span class="string">&#x27;audio/wav&#x27;</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> mediaUrl = URL.createObjectURL(blob);</span><br><span class="line">    setAudioUrl(mediaUrl);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  recorder.current?.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束，不仅让 MediaRecorder 停止，还要让所有音轨停止</span></span><br><span class="line"><span class="keyword">const</span> stopRecord = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  recorder.current?.stop()</span><br><span class="line">  medisStream.current?.getTracks().forEach(<span class="function">(<span class="params">track</span>) =&gt;</span> track.stop());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从上面可以看到，首先从 <code>getUserMedia</code> 获取输入流 <code>mediaStream</code>，以后还可以打开 <code>video: true</code> 来同步获取视频流。</p>
<p>然后将 <code>mediaStream</code> 传给 <code>mediaRecorder</code>，通过 <code>ondataavailable</code> 来存放当前流中的 <code>blob</code> 数据。</p>
<p>最后一步，调用 <code>URL.createObjectURL</code> 来生成预览链接，这个 API 在前端非常有用，比如上传图片时也可以调用它来实现图片预览，而不需要真的传到后端才展示预览图片。</p>
<p>在点击 <code>开始</code> 后，就可以看到当前网页正在录音啦：</p>
<p><img src="https://files.mdnice.com/user/24913/7a824665-f382-4017-b4e0-f73c233c6b7e.png" alt="img"></p>
<p>现在把剩下的 <code>暂停</code> 以及 <code>恢复</code> 也实现了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pauseRecord = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  mediaRecorder.current?.pause()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resumeRecord = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  mediaRecorder.current?.resume()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><p>在实现简单功能之后，我们来尝试一下把上面的功能都封装成 React Hook，首先把这些逻辑都扔在一个函数中，然后返回 API：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useMediaRecorder = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [mediaUrl, setMediaUrl] = useState&lt;string&gt;(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mediaStream = useRef&lt;MediaStream&gt;();</span><br><span class="line">  <span class="keyword">const</span> mediaRecorder = useRef&lt;MediaRecorder&gt;();</span><br><span class="line">  <span class="keyword">const</span> mediaBlobs = useRef&lt;Blob[]&gt;([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> startRecord = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    mediaStream.current = <span class="keyword">await</span> navigator.mediaDevices.getUserMedia(&#123; <span class="attr">audio</span>: <span class="literal">true</span>, <span class="attr">video</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    mediaRecorder.current = <span class="keyword">new</span> MediaRecorder(mediaStream.current);</span><br><span class="line"></span><br><span class="line">    mediaRecorder.current.ondataavailable = <span class="function">(<span class="params">blobEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      mediaBlobs.current.push(blobEvent.data);</span><br><span class="line">    &#125;</span><br><span class="line">    mediaRecorder.current.onstop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob(mediaBlobs.current, &#123; <span class="attr">type</span>: <span class="string">&#x27;audio/wav&#x27;</span> &#125;)</span><br><span class="line">      <span class="keyword">const</span> url = URL.createObjectURL(blob);</span><br><span class="line">      setMediaUrl(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mediaRecorder.current?.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pauseRecord = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    mediaRecorder.current?.pause();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resumeRecord = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    mediaRecorder.current?.resume()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> stopRecord = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    mediaRecorder.current?.stop()</span><br><span class="line">    mediaStream.current?.getTracks().forEach(<span class="function">(<span class="params">track</span>) =&gt;</span> track.stop());</span><br><span class="line">    mediaBlobs.current = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    mediaUrl,</span><br><span class="line">    startRecord,</span><br><span class="line">    pauseRecord,</span><br><span class="line">    resumeRecord,</span><br><span class="line">    stopRecord,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 <code>App.tsx</code> 里拿到返回值就可以了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; mediaUrl, startRecord, resumeRecord, pauseRecord, stopRecord &#125; = useMediaRecorder()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>react 录音<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&#123;mediaUrl&#125;</span> <span class="attr">controls</span> /&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;startRecord&#125;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;pauseRecord&#125;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;resumeRecord&#125;</span>&gt;</span>恢复<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;stopRecord&#125;</span>&gt;</span>停止<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装好之后，现在就可以在这个 Hook 里添加更多的功能了。</p>
<h2 id="清除数据"><a href="#清除数据" class="headerlink" title="清除数据"></a>清除数据</h2><p>在生成 blob url 的时候我们调用了 <code>URL.createObjectURL</code> API 来实现，生成后的 url 长这样：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">blob</span>:http://localhost:<span class="number">3000</span>/e<span class="number">571</span>f<span class="number">5</span>b<span class="number">7</span>-<span class="number">13</span>bd-<span class="number">4</span>c<span class="number">93</span>-bc<span class="number">53</span>-<span class="number">0</span>c<span class="number">84049</span>deb<span class="number">0</span>a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>每次 <code>URL.createObjectURL</code> 后都会生成一个 <code>url -&gt; blob</code> 的引用，这样的引用也是会占用资源内存的，所以我们可以提供一个方法来销毁这个引用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useMediaRecorder = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [mediaUrl, setMediaUrl] = useState&lt;string&gt;(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">clearBlobUrl</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (mediaUrl) &#123;</span><br><span class="line">        URL.revokeObjectURL(mediaUrl);</span><br><span class="line">      &#125;</span><br><span class="line">      setMediaUrl(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="录屏"><a href="#录屏" class="headerlink" title="录屏"></a>录屏</h2><p>上面录音和录像使用 <code>getUserMedia</code> 来实现，而 <strong>录屏则需要调用 <code>getDisplayMedia</code> 这个接口来实现。</strong></p>
<p>为了能更好地区分这两种情况，可以给开发者提供 <code>audio</code>, <code>video</code> 以及 <code>screen</code> 三个参数，告诉我们应该调哪个接口去获取对应的输入流数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useMediaRecorder = <span class="function">(<span class="params">params: Params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    audio = <span class="literal">true</span>,</span><br><span class="line">    video = <span class="literal">false</span>,</span><br><span class="line">    screen = <span class="literal">false</span>,</span><br><span class="line">    askPermissionOnMount = <span class="literal">false</span>,</span><br><span class="line">  &#125; = params;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [mediaUrl, setMediaUrl] = useState&lt;string&gt;(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mediaStream = useRef&lt;MediaStream&gt;();</span><br><span class="line">  <span class="keyword">const</span> audioStream = useRef&lt;MediaStream&gt;();</span><br><span class="line">  <span class="keyword">const</span> mediaRecorder = useRef&lt;MediaRecorder&gt;();</span><br><span class="line">  <span class="keyword">const</span> mediaBlobs = useRef&lt;Blob[]&gt;([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getMediaStream = useCallback(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (screen) &#123;</span><br><span class="line">      <span class="comment">// 录屏接口</span></span><br><span class="line">      mediaStream.current = <span class="keyword">await</span> navigator.mediaDevices.getDisplayMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">      mediaStream.current?.getTracks()[<span class="number">0</span>].addEventListener(<span class="string">&#x27;ended&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        stopRecord()</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (audio) &#123;</span><br><span class="line">        <span class="comment">// 添加音频输入流</span></span><br><span class="line">        audioStream.current = <span class="keyword">await</span> navigator.mediaDevices.getUserMedia(&#123; <span class="attr">audio</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">        audioStream.current?.getAudioTracks().forEach(<span class="function"><span class="params">audioTrack</span> =&gt;</span> mediaStream.current?.addTrack(audioTrack));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 普通的录像、录音流</span></span><br><span class="line">      mediaStream.current = <span class="keyword">await</span> navigator.mediaDevices.getUserMedia((&#123; video, audio &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [screen, video, audio])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始录</span></span><br><span class="line">  <span class="keyword">const</span> startRecord = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取流</span></span><br><span class="line">    <span class="keyword">await</span> getMediaStream();</span><br><span class="line"></span><br><span class="line">    mediaRecorder.current = <span class="keyword">new</span> MediaRecorder(mediaStream.current!);</span><br><span class="line">    mediaRecorder.current.ondataavailable = <span class="function">(<span class="params">blobEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      mediaBlobs.current.push(blobEvent.data);</span><br><span class="line">    &#125;</span><br><span class="line">    mediaRecorder.current.onstop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [chunk] = mediaBlobs.current;</span><br><span class="line">      <span class="keyword">const</span> blobProperty: BlobPropertyBag = <span class="built_in">Object</span>.assign(</span><br><span class="line">        &#123; <span class="attr">type</span>: chunk.type &#125;,</span><br><span class="line">        video ? &#123; <span class="attr">type</span>: <span class="string">&#x27;video/mp4&#x27;</span> &#125; : &#123; <span class="attr">type</span>: <span class="string">&#x27;audio/wav&#x27;</span> &#125;</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob(mediaBlobs.current, blobProperty)</span><br><span class="line">      <span class="keyword">const</span> url = URL.createObjectURL(blob);</span><br><span class="line">      setMediaUrl(url);</span><br><span class="line">      onStop(url, mediaBlobs.current);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mediaRecorder.current?.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于我们已经允许用户来录视频以及声音，所以在生成 URL 时，也要设置对应的 <code>blobProperty</code> 来生成对应媒体类型的 <code>blobUrl</code>。</p>
<p>最后在调用 hook 时传入 <code>screen: true</code>，可以开启录屏功能：</p>
<p><img src="https://files.mdnice.com/user/24913/149817dd-7988-4cbe-a825-0f138d9193c5.png" alt="img"></p>
<p><strong>注意：无论是录像、录音、录屏都是要调用系统的能力，而网页只是问浏览器要这个能力，但这样的前提是浏览器已经拥有了系统权限了，所以必须在系统设置里允许浏览器有这些权限才能录屏。</strong></p>
<p><img src="https://files.mdnice.com/user/24913/af39444b-b95e-454a-a52b-88d36b628780.png" alt="img"></p>
<p>上面把获取媒体流的逻辑都扔在 <code>getMediaStream</code> 函数里的做法，能很方便地用它来获取用户权限，<strong>假如我们想在刚加载这个组件时就获取用户摄像头、麦克风、录屏权限，就可以在 <code>useEffect</code> 里调用它</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (askPermissionOnMount) &#123;</span><br><span class="line">    getMediaStream().then()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [audio, screen, video, getMediaStream, askPermissionOnMount])</span><br></pre></td></tr></table></figure>

<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>录像只需要在 <code>getUserMedia</code> 的时候设置 <code>&#123; video: true &#125;</code> 就可以实现录像了。为了能更方便用户在使用时能边录边看效果，我们可以把视频流也返回给用户：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">getMediaStream</span>: <span class="function">() =&gt;</span> mediaStream.current,</span><br><span class="line">  <span class="attr">getAudioStream</span>: <span class="function">() =&gt;</span> audioStream.current</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用户在拿到这些 <code>mediaStream</code> 之后就可以直接赋值到 <code>srcObject</code> 上来进行预览了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> previewVideo.current!.srcObject = getMediaStream() || null&#125;&gt;</span><br><span class="line">    预览</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/24913/466d80e6-fea0-4f91-8021-56da00dcdd33.png" alt="img"></p>
<h2 id="禁音"><a href="#禁音" class="headerlink" title="禁音"></a>禁音</h2><p>最后，我们来实现禁音功能，原理也同样简单。拿到 <code>audioStream</code> 里面的 <code>audioTrack</code>，再将它们设置 <code>enabled = false</code> 就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toggleMute = <span class="function">(<span class="params">isMute: boolean</span>) =&gt;</span> &#123;</span><br><span class="line">  mediaStream.current?.getAudioTracks().forEach(<span class="function">(<span class="params">track</span>) =&gt;</span> (track.enabled = !isMute))</span><br><span class="line">  audioStream.current?.getAudioTracks().forEach(<span class="function">(<span class="params">track</span>) =&gt;</span> (track.enabled = !isMute))</span><br><span class="line">  setIsMuted(isMute)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用时可以用它来禁用和开启声道：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> toggleMute(!isMuted)&#125;&gt;&#123;isMuted ? &#x27;打开声音&#x27; : &#x27;禁音&#x27;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面用 WebRTC 的 API 简单地实现了一个录音、录像、录屏工具 Hook，这里稍微做下总结吧：</p>
<ul>
<li><code>getUserMedia</code> 可用于获取麦克风以及摄像头的流</li>
<li><code>getDisplayMedia</code> 则用于获取屏幕的视频、音频流</li>
<li>录东西的本质是 <code>stream -&gt; blobList -&gt; blob url</code>，其中 <code>MediaRecorder</code> 可监听 <code>stream</code> 从而获取 <code>blob</code> 数据</li>
<li><code>MediaRecorder</code> 还提供了开始、结束、暂停、恢复等多个与 Record 相关的接口</li>
<li><code>createObjectURL</code> 与 <code>revokeObjectURL</code> 是反义词，一个是创建引用，另一个是销毁</li>
<li>禁音可通过 <code>track.enabled = false</code> 关闭音轨来实现</li>
</ul>
<p>这个小工具库的实现就给大家带到这里了，详情可以查看 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ2l0aHViLmNvbS8weDAwNkYvcmVhY3QtbWVkaWEtcmVjb3JkZXI=">react-media-recorder<i class="fa fa-external-link-alt"></i></span> 这个库的源码，非常简洁易懂，很适合入门看源码的同学！</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>recorder</tag>
      </tags>
  </entry>
  <entry>
    <title>179-从零开始搭建axios+mock</title>
    <url>/20220315/179-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAaxios-mock/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mock"><a href="#mock" class="headerlink" title="mock"></a>mock</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装依赖。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add mockjs vite<span class="literal">-plugin</span><span class="literal">-mock</span> -<span class="literal">-dev</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置 <code>vitePlugins.ts</code>（上一章已经把<code>vite.config.ts</code>中的<code>plugins</code>抽取到<code>vitePlugins.ts</code>中）。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vitePlugins.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; viteMockServe &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock&#x27;</span> <span class="comment">// ++</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (env: ConfigEnv) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> isBuild = env.command === <span class="string">&#x27;build&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> vitePlugins: (Plugin | Plugin[])[] = [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ]</span><br><span class="line">  <span class="comment">// ++</span></span><br><span class="line">  <span class="keyword">if</span> (!isBuild) &#123;</span><br><span class="line">    vitePlugins.push(</span><br><span class="line">      viteMockServe(&#123;</span><br><span class="line">        <span class="attr">ignore</span>: <span class="regexp">/^\_/</span>,</span><br><span class="line">        mockPath: <span class="string">&#x27;mock&#x27;</span>,</span><br><span class="line">        <span class="attr">localEnabled</span>: !isBuild,</span><br><span class="line">        <span class="comment">// 实际开发关闭</span></span><br><span class="line">        <span class="attr">prodEnabled</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">injectCode</span>: <span class="string">`</span></span><br><span class="line"><span class="string">            import &#123; setupProdMockServer &#125; from &#x27;../mock/_createProductionServer&#x27;;</span></span><br><span class="line"><span class="string">            setupProdMockServer();</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vitePlugins</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目根目录下创建 mock 文件夹，在 mock 文件夹下创建<code>_createProdMockServer.ts</code>文件，批量加载 mock 文件夹下的所有接口。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _createProdMockServer.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createProdMockServer &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock/es/createProdMockServer&#x27;</span></span><br><span class="line"><span class="comment">// 批量加载</span></span><br><span class="line"><span class="keyword">const</span> modules = <span class="keyword">import</span>.meta.globEager(<span class="string">&#x27;./mock/*.ts&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mockModules: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = []</span><br><span class="line"><span class="built_in">Object</span>.keys(modules).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (key.includes(<span class="string">&#x27;/_&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  mockModules.push(...modules[key].default)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">setupProdMockServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  createProdMockServer(mockModules)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在 mock 文件夹下创建<code>user.ts</code>，加入模拟登录接口。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MockMethod &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/textMock&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">response</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">token</span>: <span class="string">&#x27;eca4bb1529bb5b4dcd3c9aa68e9e185d&#x27;</span>,</span><br><span class="line">          <span class="attr">expire</span>: <span class="number">1200</span>,</span><br><span class="line">          <span class="attr">onLine</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">] <span class="keyword">as</span> MockMethod[]</span><br></pre></td></tr></table></figure>

<p>运行，访问该 api。 <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a8070d6df7d74ddeb1df8963c21b154b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="ts16.png"> <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6f3f13d4af148dab3e49dae635c0778~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="ts17.png"></p>
<h2 id="axios-封装"><a href="#axios-封装" class="headerlink" title="axios 封装"></a>axios 封装</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add axios</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>在<code>src</code>文件夹下创建 utils-&gt;http 文件夹，在 http 文件夹下创建<code>baseAxios.ts</code>文件。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123; AxiosInstance, AxiosRequestConfig, AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> isPlainObject <span class="keyword">from</span> <span class="string">&#x27;lodash/isPlainObject&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@router/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; IResponse, RequestOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;@models/axios/axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">axios.defaults.timeout = <span class="number">1000</span> * <span class="number">30</span></span><br><span class="line"><span class="comment">// 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 允许跨域</span></span><br><span class="line">axios.defaults.headers.post[<span class="string">&#x27;Access-Control-Allow-Origin-Type&#x27;</span>] = <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="comment">// 返回支持的状态码</span></span><br><span class="line">axios.defaults.validateStatus = <span class="function"><span class="keyword">function</span> (<span class="params">status: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt;= <span class="number">500</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axiosInstance: AxiosInstance = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">`<span class="subst">$&#123;<span class="keyword">import</span>.meta.env.BASE_URL&#125;</span>`</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios实例拦截响应</span></span><br><span class="line">axiosInstance.interceptors.response.use(</span><br><span class="line">  <span class="function">(<span class="params">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios实例拦截请求</span></span><br><span class="line">axiosInstance.interceptors.request.use(</span><br><span class="line">  <span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">    config.headers[<span class="string">&#x27;Accept-Language&#x27;</span>] = <span class="string">&#x27;zh-CN&#x27;</span></span><br><span class="line">    <span class="comment">// 防止get请求缓存</span></span><br><span class="line">    <span class="keyword">if</span> (config.method === <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">      config.params = &#123;</span><br><span class="line">        ...config.params,</span><br><span class="line">        ...&#123; <span class="attr">_t</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isPlainObject(config.data)) &#123;</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-param-reassign</span></span><br><span class="line">      config.data = &#123;</span><br><span class="line">        ...config.data,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (config.headers?.[<span class="string">&#x27;content-type&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">const</span> contentType: <span class="built_in">string</span> = config.headers[<span class="string">&#x27;content-type&#x27;</span>] + <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/^application\/x-www-form-urlencoded/</span>.test(contentType)) &#123;</span><br><span class="line">          <span class="comment">// form形式编码</span></span><br><span class="line">          config.data = qs.stringify(config.data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = &lt;T = any&gt;(config: AxiosRequestConfig, options?: RequestOptions): Promise&lt;T&gt; =&gt; &#123;</span><br><span class="line">  const conf = config</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    axiosInstance</span><br><span class="line">      .request&lt;any, AxiosResponse&lt;IResponse&gt;&gt;(conf)</span><br><span class="line">      .then((res: AxiosResponse&lt;IResponse&gt;) =&gt; &#123;</span><br><span class="line">        const data: any = res</span><br><span class="line">        resolve(data as T)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch((error) =&gt; reject(error))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 封装get</span><br><span class="line">export function get&lt;T = any&gt;(config: AxiosRequestConfig, options?: RequestOptions): Promise&lt;T&gt; &#123;</span><br><span class="line">  return request(&#123; ...config, method: &#x27;GET&#x27; &#125;, options)</span><br><span class="line">&#125;</span><br><span class="line">// 封装post</span><br><span class="line">export function post&lt;T = any&gt;(config: AxiosRequestConfig, options?: RequestOptions): Promise&lt;T&gt; &#123;</span><br><span class="line">  return request(&#123; ...config, method: &#x27;POST&#x27; &#125;, options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default request</span><br><span class="line">export type &#123; AxiosInstance, AxiosResponse &#125;</span><br></pre></td></tr></table></figure>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>在<code>src</code>文件下创建<code>api</code>文件夹，在<code>api</code>文件夹下创建各个接口定义，如创建<code>userLogin.ts</code>文件。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; post &#125; <span class="keyword">from</span> <span class="string">&#x27;@utils/http/baseAxios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; IResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;@models/axios/axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; LoginData &#125; <span class="keyword">from</span> <span class="string">&#x27;@models/user/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 用户登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params <span class="type">&#123;LoginData&#125;</span> <span class="variable">params</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Promise&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = (params: LoginData): <span class="built_in">Promise</span>&lt;IResponse&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> post(&#123; <span class="attr">url</span>: <span class="string">&#x27;user/login&#x27;</span>, params &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="网络请求使用实例"><a href="#网络请求使用实例" class="headerlink" title="网络请求使用实例"></a>网络请求使用实例</h2><p>在使用 async…await 方法时，经常采用 try…catch 捕获异常，如果有多个异步操作，需要每一次书写 try…catch。这样代码的简洁性较差，为了使代码更加的优雅，我们通过使用 <code>await-to-js</code> js 库来处理异常。</p>
<h3 id="安装-await-to-js"><a href="#安装-await-to-js" class="headerlink" title="安装 await-to-js"></a>安装 await-to-js</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yarn add a<span class="built_in">wait-to</span><span class="literal">-js</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;sendLogin&quot;</span>&gt;</span>sendLogin<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Login&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> to <span class="keyword">from</span> <span class="string">&#x27;await-to-js&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; login <span class="keyword">as</span> userLogin&#125; <span class="keyword">from</span> <span class="string">&#x27;@api/userLogin&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; IResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;@models/axios/axios&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; LoginData &#125; <span class="keyword">from</span> <span class="string">&#x27;@models/user/user&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> $router = useRouter();</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> sendLogin = <span class="keyword">async</span> () =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> params = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125; <span class="keyword">as</span> LoginData;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> [err, res] = <span class="keyword">await</span> to&lt;IResponse&gt;(userLogin(params));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (err) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 错误处理</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(err);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">const</span> &#123; code, data, msg &#125; = res;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="built_in">console</span>.log(code, data, msg);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本篇介绍了在开发过程中如何使用 mock 模拟网络请求，封装 axios，使用 await-to-js 更优雅地处理网络请求。</p>
]]></content>
      <categories>
        <category>mock</category>
      </categories>
      <tags>
        <tag>mock</tag>
      </tags>
  </entry>
  <entry>
    <title>js 深入理解 ES6 模块机制</title>
    <url>/20210714/18-js-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-ES6-%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 ES6 中，我们知道 import、export 取代了 require、module.exports 用来引入和导出模块，但是如果不了解 ES6 模块特性的话，代码可能就会运行出一些匪夷所思的结果，下面我将通过这篇文章为你揭开 ES6 模块机制特点。</p>
<h3 id="ES6-模块特性"><a href="#ES6-模块特性" class="headerlink" title="ES6 模块特性"></a>ES6 模块特性</h3><p>基础的 ES6 模块用法我就不介绍了，如果你还没使用过 ES6 模块的话，推荐看：ECMAScript 6 入门 - Module 的语法</p>
<p>说起 ES6 模块特性，那么就先说说 ES6 模块跟 CommonJS 模块的不同之处。</p>
<p>ES6 模块跟 CommonJS 模块的不同，主要有以下两个方面：</p>
<p>ES6 模块输出的是值的引用，输出接口动态绑定，而 CommonJS 输出的是值的拷贝<br>ES6 模块编译时执行，而 CommonJS 模块总是在运行时加载<br>这个怎么理解呢？我们一步步来看：</p>
<h3 id="CommonJS-输出值的拷贝"><a href="#CommonJS-输出值的拷贝" class="headerlink" title="CommonJS 输出值的拷贝"></a>CommonJS 输出值的拷贝</h3><p>CommonJS 模块输出的是值的拷贝(原始值的拷贝)，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</p>
<pre><code>  // a.js
  var b = require(&#39;./b&#39;);
  console.log(b.foo);
  setTimeout(() =&gt; &#123;
    console.log(b.foo);
    console.log(require(&#39;./b&#39;).foo);
  &#125;, 1000);

  // b.js
  let foo = 1;
  setTimeout(() =&gt; &#123;
    foo = 2;
  &#125;, 500);
  module.exports = &#123;
    foo: foo,
  &#125;;
  // 执行：node a.js
  // 执行结果：
  // 1
  // 1
  // 1
</code></pre>
<p>上面代码说明，b 模块加载以后，它的内部 foo 变化就影响不到输出的 exports.foo 了。这是因为 foo 是一个原始类型的值，会被缓存。所以如果你想要在 CommonJS 中动态获取模块中的值，那么就需要借助于函数延时执行的特性。</p>
<pre><code>  // a.js
  var b = require(&#39;./b&#39;);
  console.log(b.foo());
  setTimeout(() =&gt; &#123;
    console.log(b.foo());
    console.log(require(&#39;./b&#39;).foo());
  &#125;, 1000);

  // b.js
  let foo = 1;
  setTimeout(() =&gt; &#123;
    foo = 2;
  &#125;, 500);
  module.exports = &#123;
    foo: () =&gt; &#123;
      return foo;
    &#125;,
  &#125;;
  // 执行：node a.js
  // 执行结果：
  // 1
  // 2
  // 2
</code></pre>
<p>所以我们可以总结一下：</p>
<ol>
<li>CommonJS 模块重复引入的模块并不会重复执行，再次获取模块直接获得暴露的 module.exports 对象</li>
<li>如果你要处处获取到模块内的最新值的话，也可以你每次更新数据的时候每次都要去更新 module.exports 上的值</li>
<li>如果你暴露的 module.exports 的属性是个对象，那就不存在这个问题了</li>
</ol>
<p>所以如果你要处处获取到模块内的最新值的话，也可以你每次更新数据的时候每次都要去更新 module.exports 上的值，比如：</p>
<pre><code>  // a.js
  var b = require(&#39;./b&#39;);
  console.log(b.foo);
  setTimeout(() =&gt; &#123;
    console.log(b.foo);
    console.log(require(&#39;./b&#39;).foo);
  &#125;, 1000);

  // b.js
  module.exports.foo = 1;   // 同 exports.foo = 1 
  setTimeout(() =&gt; &#123;
    module.exports.foo = 2;
  &#125;, 500);

  // 执行：node a.js
  // 执行结果：
  // 1
  // 2
  // 2
</code></pre>
<h3 id="ES6-输出值的引用"><a href="#ES6-输出值的引用" class="headerlink" title="ES6 输出值的引用"></a>ES6 输出值的引用</h3><p>然而在 ES6 模块中就不再是生成输出对象的拷贝，而是动态关联模块中的值。</p>
<pre><code>  // a.js
  import &#123; foo &#125; from &#39;./b&#39;;
  console.log(foo);
  setTimeout(() =&gt; &#123;
    console.log(foo);
    import(&#39;./b&#39;).then((&#123; foo &#125;) =&gt; &#123;
      console.log(foo);
    &#125;);
  &#125;, 1000);

  // b.js
  export let foo = 1;
  setTimeout(() =&gt; &#123;
    foo = 2;
  &#125;, 500);
  // 执行：babel-node a.js
  // 执行结果：
  // 1
  // 2
  // 2
</code></pre>
<h3 id="ES6-静态编译，CommonJS-运行时加载"><a href="#ES6-静态编译，CommonJS-运行时加载" class="headerlink" title="ES6 静态编译，CommonJS 运行时加载"></a>ES6 静态编译，CommonJS 运行时加载</h3><p>关于第二点，ES6 模块编译时执行会导致有以下两个特点：</p>
<ol>
<li>import 命令会被 JavaScript 引擎静态分析，优先于模块内的其他内容执行。</li>
<li>export 命令会有变量声明提前的效果。</li>
</ol>
<p>import 优先执行:</p>
<p>从第一条来看，在文件中的任何位置引入 import 模块都会被提前到文件顶部。</p>
<pre><code>  // a.js
  console.log(&#39;a.js&#39;)
  import &#123; foo &#125; from &#39;./b&#39;;

  // b.js
  export let foo = 1;
  console.log(&#39;b.js 先执行&#39;);

  // 执行结果:
  // b.js 先执行
  // a.js
</code></pre>
<p>从执行结果我们可以很直观地看出，虽然 a 模块中 import 引入晚于 console.log(‘a’)，但是它被 JS 引擎通过静态分析，提到模块执行的最前面，优于模块中的其他部分的执行。</p>
<p>由于 import 是静态执行，所以 import 具有提升效果即 import 命令在模块中的位置并不影响程序的输出。</p>
<p>export 变量声明提升:</p>
<p>正常的引入模块是没办法看出变量声明提升的特性，需要通过循环依赖加载才能看出。</p>
<pre><code>  // a.js
  import &#123; foo &#125; from &#39;./b&#39;;
  console.log(&#39;a.js&#39;);
  export const bar = 1;
  export const bar2 = () =&gt; &#123;
    console.log(&#39;bar2&#39;);
  &#125;
  export function bar3() &#123;
    console.log(&#39;bar3&#39;);
  &#125;

  // b.js
  export let foo = 1;
  import * as a from &#39;./a&#39;;
  console.log(a);

  // 执行结果:
  // &#123; bar: undefined, bar2: undefined, bar3: [Function: bar3] &#125;
  // a.js
</code></pre>
<p>从上面的例子可以很直观地看出，a 模块引用了 b 模块，b 模块也引用了 a 模块，export 声明的变量也是优于模块其它内容的执行的，但是具体对变量赋值需要等到执行到相应代码的时候。(当然函数声明和表达式声明不一样，这一点跟 JS 函数性质一样，这里就不过多解释)</p>
<p>好了，讲完了 ES6 模块和 CommonJS 模块的不同点之后，接下来就讲讲相同点：</p>
<h3 id="模块不会重复执行"><a href="#模块不会重复执行" class="headerlink" title="模块不会重复执行"></a>模块不会重复执行</h3><p>这个很好理解，无论是 ES6 模块还是 CommonJS 模块，当你重复引入某个相同的模块时，模块只会执行一次。</p>
<pre><code>  // a.js
  import &#39;./b&#39;;
  import &#39;./b&#39;;

  // b.js
  console.log(&#39;只会执行一次&#39;);

  // 执行结果：
  // 只会执行一次
</code></pre>
<p>结合上面说的特性，我们来看一个比较经典的例子，循环依赖，当你理解了上面所讲的特性之后，下次遇到模块循环依赖代码的执行结果就很容易理解了。</p>
<h3 id="CommonJS-模块循环依赖"><a href="#CommonJS-模块循环依赖" class="headerlink" title="CommonJS 模块循环依赖"></a>CommonJS 模块循环依赖</h3><p>先来看看下面的例子：</p>
<pre><code>  // a.js
  console.log(&#39;a starting&#39;);
  exports.done = false;
  const b = require(&#39;./b&#39;);
  console.log(&#39;in a, b.done =&#39;, b.done);
  exports.done = true;
  console.log(&#39;a done&#39;);

  // b.js
  console.log(&#39;b starting&#39;);
  exports.done = false;
  const a = require(&#39;./a&#39;);
  console.log(&#39;in b, a.done =&#39;, a.done);
  exports.done = true;
  console.log(&#39;b done&#39;);

  // node a.js
  // 执行结果：
  // a starting
  // b starting
  // in b, a.done = false
  // b done
  // in a, b.done = true
  // a done
</code></pre>
<p>结合之前讲的特性很好理解，当你从 b 中想引入 a 模块的时候，因为 node 之前已经加载过 a 模块了，所以它不会再去重复执行 a 模块，而是直接去生成当前 a 模块吐出的 module.exports 对象，因为 a 模块引入 b 模块先于给 done 重新赋值，所以当前 a 模块中输出的 module.exports 中 done 的值仍为 false。而当 a 模块中输出 b 模块的 done 值的时候 b 模块已经执行完毕，所以 b 模块中的 done 值为 true。</p>
<p>从上面的执行过程中，我们可以看到，在 CommonJS 规范中，当遇到 require() 语句时，会执行 require 模块中的代码，并缓存执行的结果，当下次再次加载时不会重复执行，而是直接取缓存的结果。正因为此，出现循环依赖时才不会出现无限循环调用的情况。虽然这种模块加载机制可以避免出现循环依赖时报错的情况，但稍不注意就很可能使得代码并不是像我们想象的那样去执行。因此在写代码时还是需要仔细的规划，以保证循环模块的依赖能正确工作。</p>
<p>所以有什么办法可以出现循环依赖的时候避免自己出现混乱呢？一种解决方式便是将每个模块先写 exports 语法，再写 requre 语句，利用 CommonJS 的缓存机制，在 require() 其他模块之前先把自身要导出的内容导出，这样就能保证其他模块在使用时可以取到正确的值。比如：</p>
<pre><code>  // a.js
  exports.done = true;
  let b = require(&#39;./b&#39;);
  console.log(b.done)

  // b.js
  exports.done = true;
  let a = require(&#39;./a&#39;);
  console.log(a.done)
</code></pre>
<p>这种写法简单明了，缺点是要改变每个模块的写法，而且大部分同学都习惯了在文件开头先写 require 语句。</p>
<h3 id="ES6-模块循环依赖"><a href="#ES6-模块循环依赖" class="headerlink" title="ES6 模块循环依赖"></a>ES6 模块循环依赖</h3><p>跟 CommonJS 模块一样，ES6 不会再去执行重复加载的模块，又由于 ES6 动态输出绑定的特性，能保证 ES6 在任何时候都能获取其它模块当前的最新值。</p>
<pre><code>  // a.js
  console.log(&#39;a starting&#39;)
  import &#123;foo&#125; from &#39;./b&#39;;
  console.log(&#39;in b, foo:&#39;, foo);
  export const bar = 2;
  console.log(&#39;a done&#39;);

  // b.js
  console.log(&#39;b starting&#39;);
  import &#123;bar&#125; from &#39;./a&#39;;
  export const foo = &#39;foo&#39;;
  console.log(&#39;in a, bar:&#39;, bar);
  setTimeout(() =&gt; &#123;
    console.log(&#39;in a, setTimeout bar:&#39;, bar);
  &#125;)
  console.log(&#39;b done&#39;);

  // babel-node a.js
  // 执行结果：
  // b starting
  // in a, bar: undefined
  // b done
  // a starting
  // in b, foo: foo
  // a done
  // in a, setTimeout bar: 2
</code></pre>
<p>如果没看懂执行结果的话，那说明没理解前面说的 ES6 模块特性，麻烦重新再看一遍吧！</p>
<h3 id="动态-import"><a href="#动态-import" class="headerlink" title="动态 import()"></a>动态 import()</h3><p>ES6 模块在编译时就会静态分析，优先于模块内的其他内容执行，所以导致了我们无法写出像下面这样的代码：</p>
<pre><code>  if(some condition) &#123;
    import a from &#39;./a&#39;;
  &#125;else &#123;
    import b from &#39;./b&#39;;
  &#125;

  // or 
  import a from (str + &#39;b&#39;);
</code></pre>
<p>因为编译时静态分析，导致了我们无法在条件语句或者拼接字符串模块，因为这些都是需要在运行时才能确定的结果在 ES6 模块是不被允许的，所以 动态引入 import() 应运而生。</p>
<p>import() 允许你在运行时动态地引入 ES6 模块，想到这，你可能也想起了 require.ensure 这个语法，但是它们的用途却截然不同的。</p>
<ol>
<li>require.ensure 的出现是 webpack 的产物，它是因为浏览器需要一种异步的机制可以用来异步加载模块，从而减少初始的加载文件的体积，所以如果在服务端的话 require.ensure 就无用武之地了，因为服务端不存在异步加载模块的情况，模块同步进行加载就可以满足使用场景了。 CommonJS 模块可以在运行时确认模块加载。</li>
<li>而 import() 则不同，它主要是为了解决 ES6 模块无法在运行时确定模块的引用关系，所以需要引入 import()</li>
</ol>
<p>我们先来看下它的用法：</p>
<ol>
<li>动态的 import() 提供一个基于 Promise 的 API</li>
<li>动态的import() 可以在脚本的任何地方使用</li>
<li>import() 接受字符串文字，你可以根据你的需要构造说明符</li>
</ol>
<p>举个简单的使用例子：</p>
<pre><code>  // a.js
  const str = &#39;./b&#39;;
  const flag = true;
  if(flag) &#123;
    import(&#39;./b&#39;).then((&#123;foo&#125;) =&gt; &#123;
      console.log(foo);
    &#125;)
  &#125;
  import(str).then((&#123;foo&#125;) =&gt; &#123;
    console.log(foo);
  &#125;)

  // b.js
  export const foo = &#39;foo&#39;;

  // babel-node a.js
  // 执行结果
  // foo
  // foo
</code></pre>
<p>当然，如果在浏览器端的 import() 的用途就会变得更广泛，比如 按需异步加载模块，那么就和 require.ensure 功能类似了。</p>
<p>因为是基于 Promise 的，所以如果你想要同时加载多个模块的话，可以是 Promise.all 进行并行异步加载。</p>
<pre><code>  Promise.all([
    import(&#39;./a.js&#39;),
    import(&#39;./b.js&#39;),
    import(&#39;./c.js&#39;),
  ]).then(([a, &#123;default: b&#125;, &#123;c&#125;]) =&gt; &#123;
      console.log(&#39;a.js is loaded dynamically&#39;);
      console.log(&#39;b.js is loaded dynamically&#39;);
      console.log(&#39;c.js is loaded dynamically&#39;);
  &#125;);
</code></pre>
<p>还有 Promise.race 方法，它检查哪个 Promise 被首先 resolved 或 reject。我们可以使用import()来检查哪个CDN速度更快：</p>
<pre><code>  const CDNs = [
    &#123;
      name: &#39;jQuery.com&#39;,
      url: &#39;https://code.jquery.com/jquery-3.1.1.min.js&#39;
    &#125;,
    &#123;
      name: &#39;googleapis.com&#39;,
      url: &#39;https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js&#39;
    &#125;
  ];

  console.log(`------`);
  console.log(`jQuery is: $&#123;window.jQuery&#125;`);

  Promise.race([
    import(CDNs[0].url).then(()=&gt;console.log(CDNs[0].name, &#39;loaded&#39;)),
    import(CDNs[1].url).then(()=&gt;console.log(CDNs[1].name, &#39;loaded&#39;))
  ]).then(()=&gt; &#123;
    console.log(`jQuery version: $&#123;window.jQuery.fn.jquery&#125;`);
  &#125;);
</code></pre>
<p>当然，如果你觉得这样写还不够优雅，也可以结合 async/await 语法糖来使用。</p>
<pre><code>  async function main() &#123;
    const myModule = await import(&#39;./myModule.js&#39;);
    const &#123;export1, export2&#125; = await import(&#39;./myModule.js&#39;);
    const [module1, module2, module3] =
      await Promise.all([
        import(&#39;./module1.js&#39;),
        import(&#39;./module2.js&#39;),
        import(&#39;./module3.js&#39;),
      ]);
  &#125;
</code></pre>
<p>动态 import() 为我们提供了以异步方式使用 ES 模块的额外功能。 根据我们的需求动态或有条件地加载它们，这使我们能够更快，更好地创建更多优势应用程序。</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>讲到这，我们从 ES6、CommonJS 模块加载机制到动态模块 import() 导入，读完本文相信你能够更加理解 ES6 模块加载机制，对一些奇怪的输出也会有自己的判断，希望本文对你有所帮助！</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title>181-分享30个高效开发的方法</title>
    <url>/20220315/181-%E5%88%86%E4%BA%AB30%E4%B8%AA%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="学会表达"><a href="#学会表达" class="headerlink" title="学会表达"></a>学会表达</h4><ul>
<li>当你在写一个复杂的表达式甚至需要用到这些表达式来做判断的时候，这时候要养成一个习惯把表达式换成一个变量来表示 👀，别人才能语义化的理解你这个表达式。</li>
<li>自己写的代码不管你写的再复杂你自己都可以看懂，但是对于别人不同，如果你把你的这些表达式赋值给一个变量,<strong>这样别人只需要知道这个变量是什么意思就行了</strong>。</li>
</ul>
<h4 id="学会复盘"><a href="#学会复盘" class="headerlink" title="学会复盘"></a>学会复盘</h4><ul>
<li>中级与高级的程序员有一个差别是，优秀程序员肯定至少会花一些时间来<strong>清理 🧹 自己的代码</strong>。</li>
<li>这么做是因为，他们知道整洁好看的代码比杂乱无章的代码更容易修改，<strong>甚至他们知道自己几乎无法一开始就写出整洁的代码 🤷🏻</strong>。</li>
<li>虽然我自己也没有完全严苛遵守，但是还是希望大家多去复盘，因为当你去看了你之前写的代码后你会发现很多乐趣（觉得自己写的代码可笑 🤭）。</li>
</ul>
<h4 id="拥抱变化"><a href="#拥抱变化" class="headerlink" title="拥抱变化"></a>拥抱变化</h4><ul>
<li>永远都不要说我写的功能 <strong>“总是满足我们的需求”</strong> ，在做项目开发特别是公共模块，你要学会<strong>拥抱变化</strong>😥， 永远要考虑变化的情况。</li>
<li>养成一个习惯，在做一个公共模块的时候要考虑后面有没有实现变化的可能或者能不能封装成一个<code>js</code>模块 ⭕️，而不是直接用第三方库 ❌。</li>
<li>特别是我们是做客户端而不是简简单单的单页网页，而这里的公共模块指的是 <strong>“使用者只用用到你的提供出来的<code>API</code>就知道怎么用了，并不需要使用者去考虑里面的实现”</strong></li>
</ul>
<h4 id="学会修-BUG"><a href="#学会修-BUG" class="headerlink" title="学会修 BUG"></a>学会修 BUG</h4><ul>
<li>很多人在接到一个<code>BUG</code>需求的时候经常只关注 **”眼前”**，即只关注遇到的问题而没有考虑其原本的意义。</li>
<li>你要做的其实不止是修改好这一个<strong>缺陷</strong>而是要去思考 🤔 为什么他会出现这个<strong>缺陷</strong>，一定要关注上下文。</li>
<li>在修改一个旧的模块引发的<code>BUG</code>的时候,我们要保证不影响原来的功能逻辑，考虑清楚再<code>commit</code>，否则就会出现经常遇到的 **”改了<code>BUG</code>生成另一个<code>BUG</code>😤”**。</li>
</ul>
<h4 id="多用结构化数据"><a href="#多用结构化数据" class="headerlink" title="多用结构化数据"></a>多用结构化数据</h4><ul>
<li>在你所做的一个组件逻辑<strong>很复杂</strong>的时候，更要考虑清楚它的结构，<strong>多用结构化数据</strong>，定义一个数据结构来存储中间状态，而不应该永远用简单的状态 ❌。</li>
<li><strong>所有复杂的组件你的状态复杂是可以接受的，但是有多个状态是不可接受的</strong>。</li>
<li>因为如果明明可以用结构化状态来存储，反而用多个状态组合实现的话，你这个组合关系就很复杂了。</li>
<li>确定一个你所需要的数据结构，<strong>所有的操作都以这个数据结构为目标</strong>，这个数据结构可以是一个对象可以是一个数组任何你期望的值，这样最后只需要拿到这个结构化数据来进行简单处理，所有的问题都迎刃而解了。</li>
</ul>
<h4 id="不要怕错"><a href="#不要怕错" class="headerlink" title="不要怕错"></a>不要怕错</h4><ul>
<li>很多人包括我自己在进入一个新的公司或者面对一个别人正在开发的项目难免都会有一个问题：**”不够自信”**。</li>
<li>在看到别人的代码时候难免会看见别人明显的错误，而在当下你看来可能对自己编码不自信而不愿意帮忙改正，又怕改了之后被同事责怪，但这是不对的 ❌。</li>
<li>不要怕改错代码，<strong>如果在当时看到一个错误或者命名不规范而你觉得有更好的名字或者重构方法可以及时改正</strong>，就算是改错了那就在<code>CodeReview</code>的时候提出来让大家提建议。</li>
<li>这样在下次见到这段代码时就不要重复努力搞懂逻辑，因为很可能下次还会是你继续改动这个模块。</li>
</ul>
<h4 id="每次只关心一个上下文"><a href="#每次只关心一个上下文" class="headerlink" title="每次只关心一个上下文"></a>每次只关心一个上下文</h4><ul>
<li>如果某个模块经常因为不同的原因在不可预知的方向上发生变化，那么这个模块就变的很散乱了。</li>
<li>当你需要在原有基础上根据一种条件新增功能的时候，我可能需要更改三个函数，两个变量，这样的话就会很烦躁了，在如今这么内卷的时代再烦躁起来得有多难受 😥。</li>
<li>我们要养成一种习惯每个函数只干一件事情，<strong>将一个功能按照不同模块划分开来</strong>，分成数个上下文而每次我们修改功能的时候只需要找到对应的模块来修改就很清晰了，我们只需要关注那一个上下文就可以了。</li>
</ul>
<h4 id="消灭注释"><a href="#消灭注释" class="headerlink" title="消灭注释"></a>消灭注释</h4><ul>
<li>尽可能少的添加注释，特别是团队开发，有很多人不理解为什么？🤔 我举个最简单的例子:<strong>如果这个函数以后功能变了,除了我们需要改里面的代码还需要帮忙改变函数命名还要一起把之前的注释也改了</strong>，假如一个函数有<strong>5-6 行</strong>注释这么多，那你是不是每个都要改？</li>
<li>当然在不添加注释的前提下我们要保证我们函数命名变量命名<strong>尽可能语义化</strong>👌🏻。</li>
<li>任何你觉得需要注释的地方，<code>99%</code>是因为这段代码不合理。</li>
<li>每当你需要用注释来说明什么的时候，我们要做的不是用文字去解释这段代码，<strong>而是把我们需要说明注释的东西写进一个独立函数，并以它的用途取个语义化的名字 ✅</strong>。</li>
<li>甚至我们可以用短短几行的小函数来代替这件事情，哪怕之后调用函数的步骤变多，但是只要每个函数命名足够语义化，就能用代码合理的解释你想要做的一切。</li>
<li>函数的长度关键不在于有多长而是在于可读性，**在于”🤨 如何做”和”🥴 做些什么”**。</li>
</ul>
<h4 id="不畏注释"><a href="#不畏注释" class="headerlink" title="不畏注释"></a>不畏注释</h4><ul>
<li>我们通过上面的方法可以有效的减少在代码内的注释但是对于别人已经遗留的注释我们应该置之不理吗？</li>
<li>如果在修改的功能模块发现原来存在注释，不要去抱怨，这对你没有一点好处，<strong>相反的这可能是个很好的信号去告知我们应该去对这段代码进行修改</strong>，而通过这些注释可以精准的帮我们定位到他的问题所在。</li>
</ul>
<h4 id="学会命名"><a href="#学会命名" class="headerlink" title="学会命名"></a>学会命名</h4><ul>
<li>如果在编写一个函数的时候你无法对其进行命名，<strong>那么这个函数多数是设计不合理的</strong>，就像我们上面提到的，函数里面表达的是 <strong>“如何做”和”做些什么”</strong> ，而我们对函数的命名也切记按照这个原则。</li>
<li>当你真正对一个函数准确命名，那么这里面的结构往往是<strong>可读性高</strong>的。</li>
<li>做任何业务都<strong>不要把实现写在函数名</strong>上，以后如果别人需要改动函数逻辑，还要帮你把函数名字给改动了。</li>
</ul>
<h4 id="合理入参"><a href="#合理入参" class="headerlink" title="合理入参"></a>合理入参</h4><ul>
<li>对于携带参数的函数的命名也是有讲究的，我们通常<strong>可以使用通用的名字来代表参数命名</strong>而不是使用在当下具体的名称，比如：**<code>apiSelectedKey</code>=&gt;<code>selectedKey</code>**</li>
<li>修改的好不仅能增加函数的应用范围，还能改变连接一个模块所需的条件，从而去除不必要的耦合。</li>
</ul>
<h4 id="学会提炼函数"><a href="#学会提炼函数" class="headerlink" title="学会提炼函数"></a>学会提炼函数</h4><ul>
<li>在简化代码块的时候，我们最喜欢的就是提炼函数，<strong>提炼函数可以让我们将意图与实现分开</strong>。</li>
<li>并以意图命名函数，但是如果发现自己并不能合理命名，说明你不应该提炼这个函数 😵‍💫，你应该考虑更多。</li>
</ul>
<h4 id="学会返回"><a href="#学会返回" class="headerlink" title="学会返回"></a>学会返回</h4><ul>
<li>上面讲了两个关于函数命名的方法，而往往在小函数内我们对于内部的变量会 **”词穷”**。</li>
<li>大部分的函数都可以使用<code>result</code>作为返回值，在函数开头定义，在函数结尾<code>return</code>，这样下次看这段代码的人一下就知道要返回的是什么 🧐。</li>
</ul>
<h4 id="考虑时机"><a href="#考虑时机" class="headerlink" title="考虑时机"></a>考虑时机</h4><ul>
<li>往往我们刚拿到一个新需求的时候很容易去实现它的功能，甚至不会去调研，修改<code>BUG</code>也是如此。</li>
<li>这是很容易的，任何一个程序员都可以做到，但是在什么时机做这个 <strong>“动作”</strong> 是应该考虑清楚的，点击的时候？依赖变化的时候？函数返回的时候？</li>
<li>我就吃过这个亏，<strong>在不恰当的代码恰好完成了需求但是引发了一些不可控的缺陷</strong>，导致我要重复读这整个模块的代码，不仅拖慢了项目进度还让自己多掉了几扎头发 🧑🏻‍🦲。</li>
</ul>
<h4 id="保持可拓展性"><a href="#保持可拓展性" class="headerlink" title="保持可拓展性"></a>保持可拓展性</h4><ul>
<li>在拿到一个新需求的时候永远永远不要想着做完就<code>ok</code>，因为你无法保证以后会不会让你在这个基础上增加新的功能甚至在你<code>commit</code>后的一个小时，产品的需求如果你没有优秀的产品思维是捉摸不透的 😭，所以要给自己留 **”一条后路”**。</li>
<li>而这* 而最常见的无非就是各种判断，根据不同的判断来让程序走不同的代码，这时候我们不能写死判断而是多去使用<code>map</code>结构来保持功能可拓展性 😎。</li>
</ul>
<h4 id="巧用模块"><a href="#巧用模块" class="headerlink" title="巧用模块"></a>巧用模块</h4><ul>
<li>如果你发现两个模块之间<strong>需要交流</strong>，或许你可以新建一个模块 📦 来存放。</li>
<li>在做一个需求的时候，如果很多函数跟变量都是<strong>从不同的第三方库引入</strong>，这时候不妨把它归为一个模块，<strong>就算是函数变量名字一摸一样都可以</strong>。</li>
<li>只要保证是在这个模块里面导出就可以，这样后面的人更加方便维护这个模块，屏蔽这个实现。</li>
<li><strong>使用的人不关心用，只关心结果</strong>，就类似中间层 🆗。</li>
</ul>
<h3 id="🧑🏻‍💻-程序员方面"><a href="#🧑🏻‍💻-程序员方面" class="headerlink" title="🧑🏻‍💻 程序员方面"></a>🧑🏻‍💻 程序员方面</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c39760f72ef40e787b21241b6d9a81b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h4 id="巧用方法"><a href="#巧用方法" class="headerlink" title="巧用方法"></a>巧用方法</h4><ul>
<li>有很多人想入行这个行业，<strong>他要学的就是方法</strong>，就比如说 <strong>《重构》</strong>，<strong>《代码整洁之道》</strong> 这些书讲的都是方法，教的就是方法 💡。</li>
<li>你一个架构师写的代码好，去到一个新的项目怎么提现他的作用，还是<strong>因为他的方法好，而不是他写过的代码有多好</strong>。</li>
<li><strong>只有你的方法好，你后面新产出的代码才会好</strong>。</li>
</ul>
<h4 id="择善而从"><a href="#择善而从" class="headerlink" title="择善而从"></a>择善而从</h4><ul>
<li>当你觉得你在做重复的工作的时候，<strong>一定是你做的方式不对，而不是这个任务不对</strong>。</li>
<li>你任何一个任务都有可学习的地方，<strong>我们做的是脑力活动，不存在像搬砖那样的情况</strong>，一定会有更好的方案，只是你没有发现 🤨。</li>
<li>你可以通过研究别人的<code>app</code>看很多的源码，看别人的相同效果是怎么做的，<strong>择善而从自己去实现一个新的方案</strong>。</li>
<li><strong>当你实现完了之后，你就是这种功能的大神</strong>，以后再去面试别人公司的时候，你就说你在之前的公司，做了<code>xxx</code>功能的方案，吸收了业界很多类似<code>xxx</code>功能方案的长处，别人就会觉得你很牛逼，但是如果你只是说你之前重复的做<code>xxx</code>功能的某些事情那别人直接就把你刷掉了 😞。</li>
</ul>
<h4 id="学会参考"><a href="#学会参考" class="headerlink" title="学会参考"></a>学会参考</h4><ul>
<li><strong>作为程序员就是要不断看别人的代码 🧐</strong>，哪种代码写得好，哪种写得不好，哪些是值得去参考的，<strong>自己心里要有一个底</strong>，如果你不确定这个好不好，你就百度、谷歌、看源码。</li>
<li><code>API</code>设计的过程中除非你是经验丰富的人，否则就得学会参考，任何一个程序员入门的方式都是抄袭，看别人怎么实现看别人代码怎么写。</li>
<li><strong>一个入门程序员、一个中级程序员一上来就给你设计一套很舒服的<code>API</code>这是不可能的 🥇</strong>,参考开源大佬的项目,参考别人设计的时候为什么这么做,不能自己纯想。</li>
</ul>
<h4 id="产品思维"><a href="#产品思维" class="headerlink" title="产品思维"></a>产品思维</h4><ul>
<li><strong>有产品思维是好的，能理解产品需求，能与产品进行有效沟通这是优势</strong>。</li>
<li>这时候你就需要学会<strong>跳出程序员的维度，拥有多学科交叉的能力 💦</strong>，要去<strong>了解</strong>产品<strong>提这个需求的目的</strong>，因为在没了解的情况下，你按照自己的产品思维去认为这个需求的不同会导致想法过度或不及。</li>
<li>在不了解的情况下要多与产品交流，一定不要自己想当然，当你觉得应该怎么去做，<strong>可以带方案去找产品讨论</strong>。</li>
</ul>
<h4 id="适当做减法"><a href="#适当做减法" class="headerlink" title="适当做减法"></a>适当做减法</h4><ul>
<li>你要想把一个需求做到<code>100</code>分可能是很难的，但是对于用户来说这个需求可能做到<code>60</code>分已经不错了,<strong>剩下的<code>40</code>分就需要跟产品沟通什么时候把它做到<code>100</code>分 💯</strong>。</li>
<li>这也是所谓的什么时候该干什么样的事情，现阶段你做起来可能会很吃力花费很多时间，但或许<code>2</code>个月后的你来改这段代码轻而易举。</li>
</ul>
<h4 id="学会做需求"><a href="#学会做需求" class="headerlink" title="学会做需求"></a>学会做需求</h4><ul>
<li><strong>接到一个新需求要列方案、调研 👍🏻</strong>，方案有很多种，看起来都很可行，但是实际上合不合适还是需要调研 💥，否则做到一半后就要重新更换方案，不然就只能在产品上做妥协。</li>
<li>在明确了自己的方案并有一种想法的时候，<strong>多去尝试，尝试使用它</strong>。如果后来发现不太合适，完全可以再重来 完全没有问题，<strong>只要在里面学到了东西，时间就不会白费</strong>。就算你觉得不稳妥，在<code>CodeReview</code>提出来，自然会被指出错误。</li>
<li>当然我们在做一个需求的时候<strong>不能局限于这个需求</strong>，也就是我上面有提到的保持可拓展性，眼光要放长远，以后可能还会有人会用到你写的<code>API</code>。</li>
</ul>
<h4 id="学会问问题"><a href="#学会问问题" class="headerlink" title="学会问问题"></a>学会问问题</h4><ul>
<li>养成一个习惯，当你要问人问题的时候，要知道每个人沟通能力不一样的，当你达到一种水平，觉得你能几句话能把一个问题说的很清晰，你可以不写，<strong>如果你觉得你没有那个水平，你要写一下你的文字然后发给别人</strong>，沟通协调能力也是在职场中需要锻炼的 ⚡️。</li>
<li>很多时候你不能靠问，你必须要带方案，<strong>如果你靠问别人给了你方案，那永远都是别人教你写代码</strong>。</li>
<li>如果你自己带了方案，别人觉得方案不错，或者别人有更好的会提出来，当然别人花<code>30s</code>提出来的方案肯定不是最佳的，这是你负责的模块，你熟悉的逻辑，你想出来的方案肯定会更好，要在此抉择。</li>
</ul>
<h4 id="多用快捷键"><a href="#多用快捷键" class="headerlink" title="多用快捷键"></a>多用快捷键</h4><ul>
<li>花时间去看快捷键，千万不要在<code>CodeReview</code>或者技术分享会的时候找文件点来点去，在平时就要<strong>养成追求”快”</strong> 的习惯</li>
</ul>
<h4 id="一段时间干好一件事"><a href="#一段时间干好一件事" class="headerlink" title="一段时间干好一件事"></a>一段时间干好一件事</h4><ul>
<li>这个点我以前一直都在提到，任何事情你都无法做到完美兼顾，<strong>你要知道一段时间内能把一件事情干好就已经很不错了</strong>。</li>
<li>如果你现在想要换工作，那就安心复习准备面试，如果你要学某个技术，那就围绕着它一直学，你可以给自己定个时间，<strong>一个月？两个月？半年？🕐</strong> 没有关系，只要你在这段时间内用心去做了，时间会给你答案。</li>
</ul>
<h4 id="动手前提"><a href="#动手前提" class="headerlink" title="动手前提"></a>动手前提</h4><ul>
<li>在做公共业务和普通页面当你需要用到一个第三方库的时候，中级和高级的有一个差别是 高级要<strong>先大概把文档过一遍</strong>，这样当你<strong>遇到问题了可以快速定位</strong>，<strong>而不是遇到问题了再去找，再去看源码</strong>。</li>
<li>这样不会花费很多很多时间，如果当你看文档的时候卡住了，你可以选择尝试看别人总结好解析好的的文章 📖，说不定就帮你解决了问题，要记住看文章永远是比看源码快的。</li>
</ul>
<h4 id="快速定位问题"><a href="#快速定位问题" class="headerlink" title="快速定位问题"></a>快速定位问题</h4><ul>
<li>当你遇到一个<code>BUG</code>的时候一定要思考，不能莽做，缕清前因后果，思考为什么会引发这样的现象。</li>
<li>最合适的解决问题的路径是：<strong>看上下文-&gt;看 issue-&gt;看文档-&gt;看文章-&gt;看源码</strong>。</li>
</ul>
<h2 id="⏳-时间不知不觉-我们后知后觉"><a href="#⏳-时间不知不觉-我们后知后觉" class="headerlink" title="⏳ 时间不知不觉 我们后知后觉"></a>⏳ 时间不知不觉 我们后知后觉</h2><blockquote>
<p>一生或许只是几页，不断在修改和誊抄着的诗稿，从青丝到白发，有人还在灯下。 ——席慕蓉</p>
</blockquote>
<ul>
<li>谁说不是呢？<strong>时间如流水，一去不复返</strong>，认真过好每一天也是我们力所能及的事情了。</li>
<li><strong>在漫漫程序员历史长河中，几个月不过是浪花一朵</strong>，学会时间管理对我们也极其重要。</li>
</ul>
<p>作者：快跑啊小卢_<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDcyMTQyODkxMDczNjY3MTA4">https://juejin.cn/post/7072142891073667108<i class="fa fa-external-link-alt"></i></span><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>180-熟悉事件循环？那谈谈为什么会分为宏任务和微任务</title>
    <url>/20220315/180-%E7%86%9F%E6%82%89%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%EF%BC%9F%E9%82%A3%E8%B0%88%E8%B0%88%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%88%86%E4%B8%BA%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是事件循环"><a href="#什么是事件循环" class="headerlink" title="什么是事件循环"></a>什么是事件循环</h1><p>在了解事件循环前，需要一些有关 JS 特性的前置知识。</p>
<p>JS 引擎是单线程的，直白来说就是一个时间点下 JS 引擎只能去做一件事情，而 Java 这种多线程语言，可以同时做几件事情。</p>
<p>JS 做的任务分为同步和异步两种，所谓 “异步”，简单说就是一个任务不是连续完成的，先执行第一段，等做好了准备，再回过头执行第二段，第二段也被叫做回调；同步则是连贯完成的。</p>
<p>像读取文件、网络请求这种任务属于异步任务：花费时间很长，但中间的操作不需要 JS 引擎自己完成，它只用等别人准备好了，把数据给他，他再继续执行回调部分。</p>
<p>如果没有特殊处理，JS 引擎在执行异步任务时，应该是存在等待的，不去做任何其他事情。用一个图来展示这个过程，可以看出，在执行异步任务时有大量的空闲时间被浪费。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5fa00af07f24540874617cb36ff7a6a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>实际上这是大多数多线程语言的处理办法。但对于 JS 这种单线程语言来说，这种长时间的空闲等待是不可接受的：遇到其他紧急任务，Java 可以再开一个线程去处理，JS 却只能忙等。</p>
<p>所以采取了以下的“异步任务回调通知”模式：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68108488bd8341d7bda294be0380bd9d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>在等待异步任务准备的同时，JS 引擎去执行其他同步任务，等到异步任务准备好了，再去执行回调。这种模式的优势显而易见，完成相同的任务，花费的时间大大减少，这种方式也被叫做非阻塞式。</p>
<p>而实现这个“通知”的，正是事件循环，把异步任务的回调部分交给事件循环，等时机合适交还给 JS 线程执行。事件循环并不是 JavaScript 首创的，它是计算机的一种运行机制。</p>
<p>事件循环是由一个队列组成的，异步任务的回调遵循先进先出，在 JS 引擎空闲时会一轮一轮地被取出，所以被叫做循环。</p>
<p>根据队列中任务的不同，分为宏任务和微任务。</p>
<h1 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h1><p>事件循环由宏任务和在执行宏任务期间产生的所有微任务组成。完成当下的宏任务后，会立刻执行所有在此期间入队的微任务。</p>
<p>这种设计是为了给紧急任务一个插队的机会，否则新入队的任务永远被放在队尾。区分了微任务和宏任务后，本轮循环中的微任务实际上就是在插队，这样微任务中所做的状态修改，在下一轮事件循环中也能得到同步。</p>
<p>常见的宏任务有：script（整体代码）/setTimout/setInterval/setImmediate(node 独有)/requestAnimationFrame(浏览器独有)/IO/UI render（浏览器独有）</p>
<p>常见的微任务有：process.nextTick(node 独有)/Promise.then()/Object.observe/MutationObserver</p>
<h2 id="宏任务-setTimeout-的误区"><a href="#宏任务-setTimeout-的误区" class="headerlink" title="宏任务 setTimeout 的误区"></a>宏任务 setTimeout 的误区</h2><p>setTimeout 的回调不一定在指定时间后能执行。而是在指定时间后，将回调函数放入事件循环的队列中。</p>
<p>如果时间到了，JS 引擎还在执行同步任务，这个回调函数需要等待；如果当前事件循环的队列里还有其他回调，需要等其他回调执行完。</p>
<p>另外，setTimeout 0ms 也不是立刻执行，它有一个默认最小时间，为 4ms。</p>
<p>所以下面这段代码的输出结果不一定：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// node</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>因为取出第一个宏任务之前在执行全局 Script，如果这个时间大于 4ms，这时 setTimeout 的回调函数已经放入队列，就先执行 setTimeout；如果准备时间小于 4ms，就会先执行 setImmediate。</p>
<h1 id="浏览器的事件循环"><a href="#浏览器的事件循环" class="headerlink" title="浏览器的事件循环"></a>浏览器的事件循环</h1><p>浏览器的事件循环由一个宏任务队列+多个微任务队列组成。</p>
<p>首先，执行第一个宏任务：全局 Script 脚本。产生的的宏任务和微任务进入各自的队列中。执行完 Script 后，把当前的微任务队列清空。完成一次事件循环。</p>
<p>接着再取出一个宏任务，同样把在此期间产生的回调入队。再把当前的微任务队列清空。以此往复。</p>
<p>宏任务队列只有一个，而每一个宏任务都有一个自己的微任务队列，每轮循环都是由一个宏任务+多个微任务组成。</p>
<p>下面的 Demo 展示了微任务的插队过程：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第一个回调函数：微任务1&#x27;</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;第三个回调函数：宏任务2&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第二个回调函数：宏任务1&#x27;</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;第四个回调函数：微任务2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 第一个回调函数：微任务1</span></span><br><span class="line"><span class="comment">// 第二个回调函数：宏任务1</span></span><br><span class="line"><span class="comment">// 第四个回调函数：微任务2</span></span><br><span class="line"><span class="comment">// 第三个回调函数：宏任务2</span></span><br></pre></td></tr></table></figure>

<p>打印的结果不是从 1 到 4，而是先执行第四个回调函数，再执行第三个，因为它是一个微任务，比第三个回调函数有更高优先级。</p>
<h1 id="Node-的事件循环"><a href="#Node-的事件循环" class="headerlink" title="Node 的事件循环"></a>Node 的事件循环</h1><p>node 的事件循环比浏览器复杂很多。由 6 个宏任务队列+6 个微任务队列组成。</p>
<p>宏任务按照优先级从高到低依次是：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f62a46a5a83e4cdba686754f43e85195~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>其执行规律是：在一个宏任务队列全部执行完毕后，去清空一次微任务队列，然后到下一个等级的宏任务队列，以此往复。一个宏任务队列搭配一个微任务队列。</p>
<p>六个等级的宏任务全部执行完成，才是一轮循环。</p>
<p>其中需要关注的是：Timers、Poll、Check 阶段，因为我们所写的代码大多属于这三个阶段。</p>
<ol>
<li>Timers：定时器 setTimeout/setInterval；</li>
<li>Poll ：获取新的 I/O 事件, 例如操作读取文件等；</li>
<li>Check：setImmediate 回调函数在这里执行；</li>
</ol>
<p>除此之外，node 端微任务也有优先级先后：</p>
<ol>
<li>process.nextTick;</li>
<li>promise.then 等;</li>
</ol>
<p>清空微任务队列时，会先执行 process.nextTick，然后才是微任务队列中的其他。</p>
<p>下面这段代码可以佐证浏览器和 node 的差异：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Script开始&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第一个回调函数，宏任务1&#x27;</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;第四个回调函数，微任务2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第二个回调函数，宏任务2&#x27;</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;第五个回调函数，微任务3&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第三个回调函数，微任务1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Script结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line">node端：</span><br><span class="line">Script开始</span><br><span class="line">Script结束</span><br><span class="line">第三个回调函数，微任务<span class="number">1</span></span><br><span class="line">第一个回调函数，宏任务<span class="number">1</span></span><br><span class="line">第二个回调函数，宏任务<span class="number">2</span></span><br><span class="line">第四个回调函数，微任务<span class="number">2</span></span><br><span class="line">第五个回调函数，微任务<span class="number">3</span></span><br><span class="line"></span><br><span class="line">浏览器</span><br><span class="line">Script开始</span><br><span class="line">Script结束</span><br><span class="line">第三个回调函数，微任务<span class="number">1</span></span><br><span class="line">第一个回调函数，宏任务<span class="number">1</span></span><br><span class="line">第四个回调函数，微任务<span class="number">2</span></span><br><span class="line">第二个回调函数，宏任务<span class="number">2</span></span><br><span class="line">第五个回调函数，微任务<span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看出，在 node 端要等当前等级的所有宏任务完成，才能轮到微任务：<code>第四个回调函数，微任务2</code>在两个 setTimeout 完成后才打印。</p>
<p>因为浏览器执行时是一个宏任务+一个微任务队列，而 node 是一整个宏任务队列+一个微任务队列。</p>
<h2 id="node11-x-前后版本差异"><a href="#node11-x-前后版本差异" class="headerlink" title="node11.x 前后版本差异"></a>node11.x 前后版本差异</h2><p>node11.x 之前，其事件循环的规则就如上文所述：先取出完一整个宏任务队列中全部任务，然后执行一个微任务队列。</p>
<p>但在 11.x 之后，node 端的事件循环变得和浏览器类似：先执行一个宏任务，然后是一个微任务队列。但依然保留了宏任务队列和微任务队列的优先级。</p>
<p>可以用下面的 Demo 佐证：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Script开始&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;宏任务1（setTimeout)&#x27;</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;微任务promise2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;宏任务2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;宏任务3（setTimeout)&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Script结束&#x27;</span>)</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;微任务promise1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;微任务nextTick&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 node11.x 之前运行：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">Script开始</span><br><span class="line">Script结束</span><br><span class="line">微任务nextTick</span><br><span class="line">微任务promise1</span><br><span class="line">宏任务1（<span class="keyword">set</span>Timeout)</span><br><span class="line">宏任务3（<span class="keyword">set</span>Timeout)</span><br><span class="line">微任务promise2</span><br><span class="line">宏任务2（<span class="keyword">set</span>Immediate)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 node11.x 之后运行：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">Script开始</span><br><span class="line">Script结束</span><br><span class="line">微任务nextTick</span><br><span class="line">微任务promise1</span><br><span class="line">宏任务1（<span class="keyword">set</span>Timeout)</span><br><span class="line">微任务promise2</span><br><span class="line">宏任务3（<span class="keyword">set</span>Timeout)</span><br><span class="line">宏任务2（<span class="keyword">set</span>Immediate)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以发现，在不同的 node 环境下：</p>
<ol>
<li>微任务队列中 process.nextTick 都有更高优先级，即使它后进入微任务队列，也会先打印<code>微任务nextTick</code>再<code>微任务promise1</code>;</li>
<li>宏任务 setTimeout 比 setImmediate 优先级更高，<code>宏任务2(setImmediate)</code>是三个宏任务中最后打印的；</li>
<li>在 node11.x 之前，微任务队列要等当前优先级的所有宏任务先执行完，在两个 setTimeout 之后才打印<code>微任务promise2</code>；在 node11.x 之后，微任务队列只用等当前这一个宏任务先执行完。</li>
</ol>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>事件循环中的任务被分为宏任务和微任务，是为了给高优先级任务一个插队的机会：微任务比宏任务有更高优先级。</p>
<p>node 端的事件循环比浏览器更复杂，它的宏任务分为六个优先级，微任务分为两个优先级。node 端的执行规律是一个宏任务队列搭配一个微任务队列，而浏览器是一个单独的宏任务搭配一个微任务队列。但是在 node11 之后，node 和浏览器的规律趋同。</p>
<p>作者：前端私教年年<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDczMDk5MzA3NTEwOTIzMjk1">https://juejin.cn/post/7073099307510923295<i class="fa fa-external-link-alt"></i></span><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>182-javascript调试技巧</title>
    <url>/20220315/182-javascript%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>作为前端开发，我们会经常使用 console.log() 来调试程序中的问题。虽然这种方式也能解决一部分问题，但是它的效率不如能执行逐步调试的工具。本文就来学习一下如何使用 Google Chrome developer tools 轻松调试 JavaScript 代码。</p>
<p>多数浏览器都提供了 DevTools 供我们调试 JavaScript 应用程序，并且它们的使用方式类似，只要我们学会了如何在一个浏览器上使用调试工具，就很容易在其他浏览器上使用它。</p>
<p>以下就以 Greet Me 程序为例，这个程序非常简单，只需输入名字和愿望，最后会输出一句话：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc501471792c4104a614da7096ce6e6f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>当输入两个表单值之后，“愿望”部分没有正确打印，而是打印出了 NaN。代码在线调试：<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZ3JlZXQtbWUtZGVidWdnaW5nLnZlcmNlbC5hcHAv">greet-me-debugging.vercel.app/<i class="fa fa-external-link-alt"></i></span>。接下来，就看看 Chrome DevTools 有什么功能可以调试定位代码的问题。</p>
<h2 id="一、了解-Sources-面板"><a href="#一、了解-Sources-面板" class="headerlink" title="一、了解 Sources 面板"></a>一、了解 Sources 面板</h2><p>DevTools 提供了许多不同的工具供我们进行调试，包括 DOM 检查、分析和网络调用检查等。这里要说的是 Sources 面板，它可以帮助我们调试 JavaScript。可以使用快捷键 F12 打开控制面板，并单击 Sources 选项卡以导航到 Sources 面板，也可以直接使用快捷键 Command+Option+I（Mac）或 Control+Shift+I（Windows、Linux）来打开。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94438b29ad0b4d0f8fe722c48e4e020e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>Sources 面板主要由三个部分组成：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/45f9698c17d04713a2dc8798ceb86e23~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<ol>
<li>文件导航区：页面请求的所有文件都会在此列出；</li>
<li>代码编辑区：当我们从文件导航栏中选取一个文件时，该文件的内容就会在此列出，我们可以在这里编辑代码；</li>
<li>Debugger 区：这里会有很多工具可以用来设置断点，检查变量值、观察执行步骤等。</li>
</ol>
<p>如果 DevTools 窗口较宽或未在单独的窗口中打开，则调试器部分将显示在代码编辑器的右侧：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85f399a1ea944dfe8bc8b086dd3f76ab~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h2 id="二、设置断点"><a href="#二、设置断点" class="headerlink" title="二、设置断点"></a>二、设置断点</h2><p>要开始调试代码，首先要做的就是设置断点，断点就是代码执行暂停以便调试它的逻辑点。</p>
<p>DevTools 允许我们以不同的方式来设置断点：</p>
<ul>
<li>在代码行；</li>
<li>在条件语句中；</li>
<li>在 DOM 节点处；</li>
<li>在事件侦听器上。</li>
</ul>
<h3 id="1-在代码行设置断点"><a href="#1-在代码行设置断点" class="headerlink" title="1. 在代码行设置断点"></a>1. 在代码行设置断点</h3><p>设置代码行断点的步骤：</p>
<ul>
<li>单击切换到 Sources 选项卡；</li>
<li>从文件导航部分选中需要调试的源文件；</li>
<li>在右侧代码编辑器区域找到需要调试的代码行；</li>
<li>单击行号以在行上设置断点。</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/449381638c1f45a08af96f30f97d0a77~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>这里就在代码的第 6 行设置了一个断点，代码在执行到这里时就会暂停。</p>
<h3 id="2-设置条件断点"><a href="#2-设置条件断点" class="headerlink" title="2. 设置条件断点"></a>2. 设置条件断点</h3><p>设置条件断点的步骤：</p>
<ul>
<li>单击切换到 Sources 选项卡；</li>
<li>从文件导航部分选中需要调试的源文件；</li>
<li>在右侧代码编辑器区域找到需要调试的代码行；</li>
<li>右键单击行号并选择”Add conditional breakpoint”来添加条件断点：</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/793ba36d44044448b2974784ec00d599~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>点击之后代码行下方就会出现一个对话框，输入断点的条件即可：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2441fe2333d4852a0ba3eca498c10f7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>按回车键（Enter）即可激活断点，这时就会在打断点行的顶部出现一个橙色的图标：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8cfe5a586194ea9b7488b849c73482a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>当 print()方法中的 name 变量值为 Joe 时，代码的执行就会暂停。需要注意，只有我们确定调试的代码的大致范围时，才会使用条件断点。</p>
<h3 id="3-在事件监听器上设置断点"><a href="#3-在事件监听器上设置断点" class="headerlink" title="3. 在事件监听器上设置断点"></a>3. 在事件监听器上设置断点</h3><p>在事件监听器上设置断点的步骤：</p>
<ul>
<li>单击切换到 Sources 选项卡；</li>
<li>在 debugger 区域展开 Event Listener Breakpoints 选项；</li>
<li>从事件列表中选择事件监听器来设置断点。我们的程序中有一个按钮单击事件，这里就选择 Mouse 事件选项中的 click。</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5923059b66a410cb7a3840482f253fe~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>提示：当我们想暂停在事件触发后运行的事件侦听器代码时可以使用此选项。</p>
<h3 id="4-在-DOM-节点中设置断点"><a href="#4-在-DOM-节点中设置断点" class="headerlink" title="4. 在 DOM 节点中设置断点"></a>4. 在 DOM 节点中设置断点</h3><p>DevTools 在 DOM 检查和调试方面同样很强大。当在 DOM 中添加、删除或者修改某些内容时，可以设置断点来暂停代码的执行。</p>
<p>在 DOM 上设置断点的步骤：</p>
<ul>
<li>单击切换到 Elements 选项卡；</li>
<li>找到要设置断点的元素；</li>
<li>右键单击元素以获得上下文菜单，选择 Break on 选项，然后选择 Subtree modifications、Attribute modifications、Node removal 中的一个即可：</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50c0961bc2114e788cd6cd6ff48a8c71~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>这三个选项的含义如下：</p>
<ul>
<li>Subtree modifications：当节点内部子节点变化时断点；</li>
<li>Attribute modifications：当节点属性发生变化时断点；</li>
<li>Node removal：当节点被移除时断点。</li>
</ul>
<p>如上图，我们在输出消息的 div 的 DOM 发生变化时设置了一个断点。当点击按钮后，问候消息输出到 div 中，子节点的内容发生了变化，就会发生中断。</p>
<p><strong>注意：</strong> 当我们怀疑是 DOM 更改导致了错误时，就可以使用该选项，当 DOM 更改中断时，相关的 JavaScript 代码执行将自动暂停。</p>
<h2 id="三、逐步调试"><a href="#三、逐步调试" class="headerlink" title="三、逐步调试"></a>三、逐步调试</h2><p>现在我们知道了设置断点的方式。在复杂的调试情况下，我们可能需要使用这些调试的组合。调试器提供了五个控件来逐步执行代码：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d21e0ceca9504f948aaa714624fd7695~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>下面就分别来看看这些控制都是如何使用的。</p>
<h3 id="1-下一步（快捷键：F9）"><a href="#1-下一步（快捷键：F9）" class="headerlink" title="1. 下一步（快捷键：F9）"></a>1. 下一步（快捷键：F9）</h3><p>此选项使我们能够在 JavaScript 代码执行时逐行执行，如果中途有函数调用，单步执行也会进入函数内部，逐行执行，然后退出。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64d0725af2784021b634b5bd70def555~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="2-跳过（快捷键：F10）"><a href="#2-跳过（快捷键：F10）" class="headerlink" title="2. 跳过（快捷键：F10）"></a>2. 跳过（快捷键：F10）</h3><p>此选项允许我们在执行代码时跳过一些代码。有时我们可能已经确定某些功能是正常的，不想花时间去检查它们，就可以使用跳过选项。</p>
<p>下面就是单步执行 logger()函数时，会跳过函数的执行：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6539932694a41a2993a26120c37b696~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="3-进入（快捷键：F11）"><a href="#3-进入（快捷键：F11）" class="headerlink" title="3. 进入（快捷键：F11）"></a>3. 进入（快捷键：F11）</h3><p>使用该选项可以更深入的了解函数。单步执行函数时，当感觉某个函数的行为异常并想检查它时，就可以使用这个选项来进入函数内部并进行调试。</p>
<p>下面就是单步执行 logger() 函数:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdf3140630cb4f87b8d3fee9c91a6831~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="4-跳出（快捷键：Shift-F11）"><a href="#4-跳出（快捷键：Shift-F11）" class="headerlink" title="4. 跳出（快捷键：Shift+F11）"></a>4. 跳出（快捷键：Shift+F11）</h3><p>在单步执行一个函数时，我们可能不想再继续执行并退出它，就可以使用这些选项退出函数。</p>
<p>下面就是进入了 logger() 函数内部，然后立即退出：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dcce710d5274bd3b2be62c08bdfccc4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="5-跳转（快捷键：F8）"><a href="#5-跳转（快捷键：F8）" class="headerlink" title="5. 跳转（快捷键：F8）"></a>5. 跳转（快捷键：F8）</h3><p>有时，我们希望从一个断点跳转到另一个断点，而无需在它们之间进行任何调试，就可以使用这个选项来跳转到下一个断点：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce9ad334c308495d87f91d54ebc55068~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h2 id="四、检查范围、调用堆栈和值"><a href="#四、检查范围、调用堆栈和值" class="headerlink" title="四、检查范围、调用堆栈和值"></a>四、检查范围、调用堆栈和值</h2><p>当进行逐行调试时，检查变量的范围和值以及函数调用的调用堆栈。在 Debugger 区可以这三个选项：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22f3c64f9b63409da14e28e494da3b2e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="1-范围（Scope）"><a href="#1-范围（Scope）" class="headerlink" title="1. 范围（Scope）"></a>1. 范围（Scope）</h3><p>可以在 Scope 选项中查看局部范围和全局范围内的内容以及变量，还可以看到 this 的实时指向：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c308f47977d471b8a194264f390d743~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="2-调用堆栈"><a href="#2-调用堆栈" class="headerlink" title="2. 调用堆栈"></a>2. 调用堆栈</h3><p>调用堆栈面板有助于识别函数执行堆栈：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/296b86331e5040a38c9a79fa0264cc22~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="3-值"><a href="#3-值" class="headerlink" title="3. 值"></a>3. 值</h3><p>检查代码中的值是识别代码中错误的主要方法。在单步执行时，我们只需要将鼠标悬停在变量上即可检查值。</p>
<p>下面可以看到变量 name 在代码执行时的检查值：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bcc43e85244470d914e83772a199ba2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>此外，我们可以选择打码的一部分作为表达式来检查值。在下面的例子中，选择了表达式 document.getElementById(‘m_wish’) 来检查值：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7df294790394c608bf55d4e04816196~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h3 id="4-Watch"><a href="#4-Watch" class="headerlink" title="4. Watch"></a>4. Watch</h3><p>Watch 部分允许添加一个或多个表达式，并在执行时监视它们的值。当我们想在代码逻辑之外进行一些计算时，这个功能非常有用。我们可以组合来自代码区域的任何变量，以形成有效的 JavaScript 表达式。在逐步执行时，就能看到表达式的值。</p>
<p>以下是添加 Watch 的步骤：</p>
<ol>
<li>单击 Watch 上的 + 按钮：</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3dd9f0b045b4284981016e6a0b1d01c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<ol>
<li>添加要监控的表达式。在这个例子中，添加了一个希望观察其值的变量：</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eab730cd10614364ab090b1966eafac4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>另一种观察表达式值的方法是从控制台的 console 中添加：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12d7157e307e4ed9bbca50ad581328df~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h2 id="五、禁用和删除断点"><a href="#五、禁用和删除断点" class="headerlink" title="五、禁用和删除断点"></a>五、禁用和删除断点</h2><p>可以点击以下按钮来禁用所有的断点：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0bf43396c0514f0ab5a8181e03a62f5c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"> 注意，上述方法不会删除断点，只会在暂时停用它们。要再次激活这些断点，只需再点一次这个断点即可。</p>
<p>通过取消选中的复选框，可以从“Breakpoints”面板中删除一个或多个断点。通过右键单击并选择“删除所有断点”选项，可以删除所有断点：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da6c6d40013c4cca8c54f134fcd8de20~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h2 id="六、使用-VS-Code-调试-JavaScript"><a href="#六、使用-VS-Code-调试-JavaScript" class="headerlink" title="六、使用 VS Code 调试 JavaScript"></a>六、使用 VS Code 调试 JavaScript</h2><p>Visual Studio code 中一些实用的插件可以用于 JavaScript 代码的调试。可以安装一个名为“Debugger for Chrome”的插件来调试代码：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c68fee4fd17f4110a1513811092d63ff~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>安装之后，单击左侧的 run 选项并创建配置以运行/调试 JavaScript 应用程序。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57e1661aade641f3a415812be2536c7b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>这样就会创建一个名为 launch.json 的文件，其中包含一些设置信息：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">          <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Debug the Greet Me app&quot;</span>,</span><br><span class="line">          <span class="string">&quot;url&quot;</span>: <span class="string">&quot;&lt;http://localhost:5500&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;webRoot&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以修改以下参数：</p>
<ul>
<li>name : 任意名称；</li>
<li>url：本地运行的 URL；</li>
<li>webRoot：默认值为 ${workspaceFolder}，即当前文件夹。可能将其更改为 项目入口文件即可。</li>
</ul>
<p>最后一步是通过单击左上角的播放图标开始调试：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35e3d9594e3549108ccde6c976c7b73b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>这个调试器类似于 DevTools，主要有以下部分：</p>
<ol>
<li>启用调试。按播放按钮启用调试选项。</li>
<li>用于单步执行断点以及暂停或停止调试的控件。</li>
<li>在源代码上设置断点。</li>
<li>范围面板查看变量范围和值。</li>
<li>用于创建和监视表达式的监视面板。</li>
<li>执行函数的调用栈。</li>
<li>要启用、禁用和删除的断点列表。</li>
<li>调试控制台读取控制台日志消息。</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5107d42844743df8b8325900f2dfd42~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<p>最后，回到最开始的问题，这里不再一步步调试，通过上述的调试方法判定，只需要在 wish 变量前面加一个 + 即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;Hello &#x27;</span> + name + <span class="string">&#x27;, Your wish `&#x27;</span> + +wish + <span class="string">&#x27;` may come true!&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>调试</category>
      </categories>
      <tags>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>183-22个高频JavaScript手写代码</title>
    <url>/20220315/183-22%E4%B8%AA%E9%AB%98%E9%A2%91JavaScript%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="解析-url-参数"><a href="#解析-url-参数" class="headerlink" title="解析 url 参数"></a>解析 url 参数</h2><p>就是提出 url 里的参数并转成对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParams</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/([^?&amp;=]+)=([^?&amp;=]+)/g</span></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  url.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    obj[<span class="built_in">arguments</span>[<span class="number">1</span>]] = <span class="built_in">arguments</span>[<span class="number">2</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 或者</span></span><br><span class="line">  <span class="keyword">const</span> search = <span class="built_in">window</span>.location.search</span><br><span class="line">  search.replace(<span class="regexp">/([^&amp;=?]+)=([^&amp;]+)/g</span>, <span class="function">(<span class="params">m, $<span class="number">1</span>, $<span class="number">2</span></span>) =&gt;</span> &#123;</span><br><span class="line">    obj[$<span class="number">1</span>] = <span class="built_in">decodeURIComponent</span>($<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;https://www.junjin.cn?a=1&amp;b=2&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(getUrlParams(url)) <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p>改变 this 指向用的，可以接收多个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  ctx = ctx || <span class="built_in">window</span> <span class="comment">// ctx 就是 obj</span></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>()</span><br><span class="line">  ctx[fn] = <span class="built_in">this</span> <span class="comment">// this 就是 foo</span></span><br><span class="line">  <span class="keyword">let</span> result = ctx[fn](...arguments)</span><br><span class="line">  <span class="keyword">delete</span> ctx[fn]</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: 沐华 &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 就是把 foo 函数里的 this 指向，指向 obj</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.myCall(obj)) <span class="comment">// 沐华</span></span><br></pre></td></tr></table></figure>

<p>用 <code>Symbol</code> 是因为他是独一无二的，避免和 obj 里的属性重名</p>
<p>原理就是把 foo 添加到 obj 里，执行 foo 拿到返回值，再从 obj 里把 foo 删掉</p>
<h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p>原理同上，只不过 apply 接收第二个参数是数组，不支持第三个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">  ctx = ctx || <span class="built_in">window</span></span><br><span class="line">  <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>()</span><br><span class="line">  ctx[fn] = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    result = ctx[fn](...arguments[<span class="number">1</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = ctx[fn]()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> ctx[fn]</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">ctx, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> bind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="built_in">this</span> <span class="keyword">instanceof</span> fn ? <span class="built_in">this</span> : ctx</span><br><span class="line">    <span class="keyword">return</span> self.apply(_this, [...args, ...arguments])</span><br><span class="line">  &#125;</span><br><span class="line">  fn.prototype = <span class="built_in">this</span>.prototype</span><br><span class="line">  bind.prototype = <span class="keyword">new</span> fn()</span><br><span class="line">  <span class="keyword">return</span> bind</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bind 不会立即执行，会返回一个函数</p>
<ul>
<li>函数可以直接执行并且传参，如 <code>foo.myBind(obj, 1)(2, 3)</code>，所以需要 <code>[ ...args, ...arguments ]</code>合并参数</li>
<li>函数也可以 <code>new</code>，所以要判断原型 <code>this instanceof fn</code></li>
</ul>
<p>然后实现原型继承，如果对原型不太了解的话，请移步我上一篇文章 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk1NTkxNjE4MzcxNzgwNjIy">助力进击大厂，JavaScript 前端考点总结<i class="fa fa-external-link-alt"></i></span></p>
<p><strong>call、apply、bind 的区别</strong></p>
<ul>
<li>都可以改变 <code>this</code> 指向</li>
<li>call 和 apply 会<code>立即执行</code>，bind 不会，而是返回一个函数</li>
<li>call 和 bind 可以接收<code>多个参数</code>，<code>apply</code> 只能接受两个，第二个是<code>数组</code></li>
<li>bind 参数可以分多次传入</li>
</ul>
<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>说明在注释里，接受两个参数，判断第二个参数是不是在第一个参数的原型链上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInstanceof</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获得实例对象的原型 也就是 left.__proto__</span></span><br><span class="line">  <span class="keyword">let</span> left = <span class="built_in">Object</span>.getPrototypeOf(left)</span><br><span class="line">  <span class="comment">// 获得构造函数的原型</span></span><br><span class="line">  <span class="keyword">let</span> prototype = right.prototype</span><br><span class="line">  <span class="comment">// 判断构造函数的原型 是不是 在实例的原型链上</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 原型链一层层向上找，都没找到 最终会为 null</span></span><br><span class="line">    <span class="keyword">if</span> (left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (prototype === left) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 没找到就把上一层拿过来，继续循环，再向上一层找</span></span><br><span class="line">    left = <span class="built_in">Object</span>.getPrototypeOf(left)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><p>个人感觉这个还蛮喜欢考的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 来个示例数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="string">&#x27;true&#x27;</span>, &#123;&#125;, &#123;&#125;, <span class="string">&#x27;&#123;&#125;&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">let</span> unique1 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line"><span class="built_in">console</span>.log(unique1) <span class="comment">// [1, &quot;1&quot;, true, &quot;true&quot;, &#123;&#125;, &#123;&#125;, &quot;&#123;&#125;&quot;, null, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">let</span> unique2 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>() <span class="comment">// 或者用空对象 let obj =｛｝利用对象属性不能重复的特性</span></span><br><span class="line">  <span class="keyword">let</span> brr = []</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!map.has(item)) &#123;</span><br><span class="line">      <span class="comment">// 如果是对象的话就判断 !obj[item]</span></span><br><span class="line">      map.set(item, <span class="literal">true</span>) <span class="comment">// 如果是对象的话就 obj[item] = true  其他一样</span></span><br><span class="line">      brr.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> brr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique2(arr)) <span class="comment">// [1, &quot;1&quot;, true, &quot;true&quot;, &#123;&#125;, &#123;&#125;, &quot;&#123;&#125;&quot;, null, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line"><span class="keyword">let</span> unique3 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> brr = []</span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 indexOf  返回数组是否包含某个值 没有就返回 -1 有就返回下标</span></span><br><span class="line">    <span class="keyword">if</span> (brr.indexOf(item) === -<span class="number">1</span>) brr.push(item)</span><br><span class="line">    <span class="comment">// 或者使用 includes 返回数组是否包含某个值  没有就返回false  有就返回true</span></span><br><span class="line">    <span class="keyword">if</span> (!brr.includes(item)) brr.push(item)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> brr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique3(arr)) <span class="comment">// [1, &quot;1&quot;, true, &quot;true&quot;, &#123;&#125;, &#123;&#125;, &quot;&#123;&#125;&quot;, null, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法四</span></span><br><span class="line"><span class="keyword">let</span> unique4 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 使用 filter 返回符合条件的集合</span></span><br><span class="line">  <span class="keyword">let</span> brr = arr.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> brr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique4(arr)) <span class="comment">// [1, &quot;1&quot;, true, &quot;true&quot;, &#123;&#125;, &#123;&#125;, &quot;&#123;&#125;&quot;, null, undefined]</span></span><br></pre></td></tr></table></figure>

<p>上面的方法不能对引用类型去重，除非指针一样，指针是可以去重的，比如下面这样是可以去重的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> crr = []</span><br><span class="line"><span class="keyword">let</span> arr = [crr, crr]</span><br></pre></td></tr></table></figure>

<h2 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h2><p>就是把多维数组变成一维数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 来个示例数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>]]]]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="comment">// flat() 默认拉平一层嵌套数组，传入数字几就拉平几层</span></span><br><span class="line"><span class="comment">// Infinity 是无穷大，不管嵌套多少层都给你拉平</span></span><br><span class="line"><span class="keyword">let</span> brr1 = arr.flat(<span class="literal">Infinity</span>)</span><br><span class="line"><span class="built_in">console</span>.log(brr1) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="comment">// 转成字符串，再去掉字符串里的 “[” 和 “]”，再把字符串转回数组</span></span><br><span class="line"><span class="keyword">let</span> brr2 = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;[&#x27;</span> + <span class="built_in">JSON</span>.stringify(arr).replace(<span class="regexp">/\[|\]/g</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(brr2) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line"><span class="keyword">let</span> brr3 = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 用递归，用 for 循环加递归也可以，这里用 reduce</span></span><br><span class="line">  <span class="comment">// reduce 累计器，本质上也是循环，</span></span><br><span class="line">  <span class="comment">// cur 是循环的当前一个值，相当于 for循环里的arr[i]， pre 是前一个值，相当于for循环里的arr[i-1]</span></span><br><span class="line">  <span class="keyword">let</span> crr = arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pre.concat(<span class="built_in">Array</span>.isArray(cur) ? brr3(cur) : cur)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> crr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(brr3(arr)) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>连续点击的情况下不会执行，只在最后一下点击过指定的秒数后才会执行</p>
<p>应用场景：点击按钮，输入框模糊查询，词语联想等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 每一次点击判断有延迟执行的任务就停止</span></span><br><span class="line">    <span class="keyword">if</span> (timeout !== <span class="literal">null</span>) <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">    <span class="comment">// 否则就开启延迟任务</span></span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(fn, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayDebounce</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;防抖成功！&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, debounce(sayDebounce, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>

<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>频繁触发的时候，比如滚动或连续点击，在指定的间隔时间内，只会执行一次</p>
<p>应用场景：resize、scroll 等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方案1  连续点击的话，每过 wait 秒执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bool = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!bool) <span class="keyword">return</span></span><br><span class="line">    bool = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// fn() // fn中this指向window</span></span><br><span class="line">      fn.call(<span class="built_in">this</span>, <span class="built_in">arguments</span>) <span class="comment">// fn中this指向btn  下面同理</span></span><br><span class="line">      btn = <span class="literal">true</span></span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方案2 连续点击的话，第一下点击会立即执行一次 然后每过 wait 秒执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="comment">// 用当前时间 减去 上一次点击的时间 和 传进来的时间作对比</span></span><br><span class="line">    <span class="keyword">if</span> (now - date &gt; wait) &#123;</span><br><span class="line">      fn.call(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      date = now</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方案三 结合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bool = <span class="literal">true</span>,</span><br><span class="line">    date = <span class="built_in">Date</span>.now(),</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    <span class="keyword">let</span> now = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">let</span> lave = wait - (now - date)</span><br><span class="line">    <span class="keyword">if</span> (lave &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      fn.call(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      date = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(fn, lave)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayThrottle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;节流成功！&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, throttle(sayThrottle, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure>

<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">fn, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不是函数不能 new</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;TypeError&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建一个继承 fn 原型的对象</span></span><br><span class="line">  <span class="keyword">const</span> newObj = <span class="built_in">Object</span>.create(fn.prototype)</span><br><span class="line">  <span class="comment">// 将 fn 的 this 绑定给新对象，并继承其属性，然后获取返回结果</span></span><br><span class="line">  <span class="keyword">const</span> result = fn.apply(newObj, args)</span><br><span class="line">  <span class="comment">// 根据 result 对象的类型决定返回结果</span></span><br><span class="line">  <span class="keyword">return</span> result &amp;&amp; (<span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> result == <span class="string">&#x27;function&#x27;</span>) ? result : newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Fn.prototype = obj</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Fn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建一个空对象并修改原型，这没啥说的，一般传个 null 进去，这样创建出来没有原型的对象不会被原型污染，或者传要继承的对象原型</p>
<h2 id="Es5-继承"><a href="#Es5-继承" class="headerlink" title="Es5 继承"></a>Es5 继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="string">&#x27;沐华&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype)</span><br><span class="line">Child.prototype.constructor = Child <span class="comment">// 重新指定 constructor</span></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype，&#123;</span><br><span class="line">  <span class="attr">constructor</span>:&#123;</span><br><span class="line">    <span class="attr">value</span>: Child,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">// 属性能不能修改</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 属性能不能枚举(可遍历性)，比如在 for in/Object.keys/JSON.stringify</span></span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 属性能不能修改属性描述对象和能否删除</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child().getName) <span class="comment">// 沐华</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ES5 的继承方式有很多种，什么原型链继承、组合继承、寄生式继承…等等，了解一种面试就够用了</p>
<h2 id="Es6-继承"><a href="#Es6-继承" class="headerlink" title="Es6 继承"></a>Es6 继承</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>()</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;沐华&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个继承自父类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">  <span class="comment">// props是继承过来的属性， myAttr是自己的属性</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props, myAttr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 调用父类的构造函数，相当于获得父类的this指向</span></span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Child().name) <span class="comment">// 沐华</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用 while 写一个通用的遍历</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myEach</span>(<span class="params">array, iteratee</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> length = array.length</span><br><span class="line">  <span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">    iteratee(array[index], index)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myClone</span>(<span class="params">target, map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 引用类型才继续深拷贝</span></span><br><span class="line">  <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isArray = <span class="built_in">Array</span>.isArray(target)</span><br><span class="line">    <span class="comment">// 克隆对象和数组类型</span></span><br><span class="line">    <span class="keyword">let</span> cloneTarget = isArray ? [] : &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止循环引用</span></span><br><span class="line">    <span class="keyword">if</span> (map.get(target)) &#123;</span><br><span class="line">      <span class="comment">// 有拷贝记录就直接返回</span></span><br><span class="line">      <span class="keyword">return</span> map.get(target)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有就存储拷贝记录</span></span><br><span class="line">    map.set(target, cloneTarget)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是对象就拿出同级的键集合  返回是数组格式</span></span><br><span class="line">    <span class="keyword">const</span> keys = isArray ? <span class="literal">undefined</span> : <span class="built_in">Object</span>.keys(target)</span><br><span class="line">    <span class="comment">// value是对象的key或者数组的值 key是下标</span></span><br><span class="line">    myEach(keys || target, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (keys) &#123;</span><br><span class="line">        <span class="comment">// 是对象就把下标换成value</span></span><br><span class="line">        key = value</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 递归</span></span><br><span class="line">      cloneTarget[key] = myClone(target[key], map)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> cloneTarget</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取数据类型"><a href="#获取数据类型" class="headerlink" title="获取数据类型"></a>获取数据类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 数组、对象、null 用 typeof 都是 object，所以需要处理下 以 &#123;&#125; 为例</span></span><br><span class="line">    <span class="keyword">let</span> valueClass = <span class="built_in">Object</span>.prototype.toString.call(value) <span class="comment">// 转成这样 [object, Object]</span></span><br><span class="line">    <span class="keyword">let</span> type = valueClass.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&#x27;</span>) <span class="comment">// 变成这样 [&quot;O&quot;, &quot;b&quot;, &quot;j&quot;, &quot;e&quot;, &quot;c&quot;, &quot;t&quot;, &quot;]&quot;]</span></span><br><span class="line">    type.pop() <span class="comment">// 再变成这样 [&quot;O&quot;, &quot;b&quot;, &quot;j&quot;, &quot;e&quot;, &quot;c&quot;, &quot;t&quot;]</span></span><br><span class="line">    <span class="keyword">return</span> type.join(<span class="string">&#x27;&#x27;</span>).toLowerCase() <span class="comment">// object</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getType(<span class="number">1</span>)) <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(getType(<span class="string">&#x27;1&#x27;</span>)) <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(getType(<span class="literal">null</span>)) <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(getType(<span class="literal">undefined</span>)) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(getType(&#123;&#125;)) <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(getType(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)) <span class="comment">// function</span></span><br></pre></td></tr></table></figure>

<h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><p>柯里化函数就是高阶函数的一种，好处主要是实现参数的复用和延迟执行，不过性能上就会没那么好，要创建数组存参数，要创建闭包，而且存取 argements 比存取命名参数要慢一点</p>
<p>实现 <code>add(1)(2)(3)</code> 要求参数不固定，类似 <code>add(1)(2, 3, 4)(5)()</code> 这样也行，我这实现的是中间的不能不传参数，最后一个不传参数，以此来区分是最后一次调用然后累计结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每次调用的传进来的参数做累计处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 存放每次调用的参数</span></span><br><span class="line">  <span class="keyword">let</span> args = []</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">temp</span>(<span class="params">...newArgs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newArgs.length) &#123;</span><br><span class="line">      <span class="comment">// 有参数就合并进去，然后返回自身</span></span><br><span class="line">      args = [...args, ...newArgs]</span><br><span class="line">      <span class="keyword">return</span> temp</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有参数了，也就是最后一个了，执行累计结果操作并返回结果</span></span><br><span class="line">      <span class="keyword">let</span> val = fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">      args = [] <span class="comment">//保证再次调用时清空</span></span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> add = currying(reduce)</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)(<span class="number">5</span>)()) <span class="comment">//15</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>, <span class="number">5</span>)()) <span class="comment">//15</span></span><br></pre></td></tr></table></figure>

<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是调用下面函数的结构，这个结果大家应该很熟悉，就不解释了，应该都用过</span></span><br><span class="line">myAjax(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://xxx&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;沐华&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">  <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;报错&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 定义一个将 &#123; name: &quot;沐华&quot;, age:18 &#125; 转成 name=沐华&amp;age=18 这种格式的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> data) &#123;</span><br><span class="line">    arr.push(i + <span class="string">&#x27;=&#x27;</span> + data[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.join(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下面就是实现上面调用和传参的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> str = fn(options.data)</span><br><span class="line">  <span class="comment">// 创建 xhr</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&#x27;Microsoft,XMLHTTP&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这里只配置了 get 和 post</span></span><br><span class="line">  <span class="keyword">if</span> (options.type === <span class="string">&#x27;get&#x27;</span> &amp;&amp; options.data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建 http 请求</span></span><br><span class="line">    xhr.open(options.type, options.url + <span class="string">&#x27;?&#x27;</span> + str, options.async || <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    xhr.send(<span class="literal">null</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.type === <span class="string">&#x27;post&#x27;</span> &amp;&amp; options.data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    xhr.open(options.type, options.url, options.async || <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 设置请求头</span></span><br><span class="line">    xhr.setRequestHeaders(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoede&#x27;</span>)</span><br><span class="line">    xhr.send(str)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    xhr.open(options.type, options.url, options.async || <span class="literal">true</span>)</span><br><span class="line">    xhr.send(<span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监听状态</span></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> res = xhr.responseText</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (options.success === <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> xhr.responseText</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          options.success(res)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.dataType === <span class="string">&#x27;json&#x27;</span>) &#123;</span><br><span class="line">          options.success(<span class="built_in">JSON</span>.parse(res))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (options.error !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">          options.error()</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 存储 reslove 回调函数列表</span></span><br><span class="line">    <span class="built_in">this</span>.callbacks = []</span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = value <span class="comment">// 返回值给后面的 .then</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="built_in">this</span>.callbacks.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> cb = <span class="built_in">this</span>.callbacks.shift()</span><br><span class="line">        cb(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fn(resolve)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onResolvedCallback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.callbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = onResolvedCallback(<span class="built_in">this</span>.data)</span><br><span class="line">        <span class="keyword">if</span> (res <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">          res.then(resolve)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这是测试案例</span></span><br><span class="line"><span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">2</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>完整的 Promise 实在太长了，比 AJAX 还要长很多很多，所以就实现个极简版的，只有 <code>resolve</code> 和 <code>then</code> 方法，可以无限 <code>.then</code></p>
<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>Promise.all 可以把多个 Promise 实例打包成一个新的 Promise 实例。传进去一个值为多个 Promise 对象的数组，成功的时候返回一个结果的数组，返回值的顺序和传进去的顺序是一致对应得上的，如果失败的话就返回最先 reject 状态的值</p>
<p>如果遇到需要同时发送多个请求并且按顺序返回结果的话，Promise.all 就可以完美解决这个问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">MyPromise.all = <span class="function"><span class="keyword">function</span> (<span class="params">promisesList</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(promiselList) <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;必须是数组&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> (!promisesList.length) <span class="keyword">return</span> resolve([])</span><br><span class="line">    <span class="keyword">let</span> arr = [], count = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 直接循环同时执行传进来的promise</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = promisesList.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="comment">// 因为有可能是 promise 有可能不是，所以用resolve()不管是不是都会自动转成promise</span></span><br><span class="line">      <span class="built_in">Promise</span>.resolve(promise).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 由到promise在初始化的时候就执行了，.then只是拿结果而已，所以执行完成的顺序有可能和传进来的数组不一样</span></span><br><span class="line">          <span class="comment">// 也就是说直接push到arr的话，顺序有可能会出错</span></span><br><span class="line">          count++</span><br><span class="line">          arr[i] = result</span><br><span class="line">          <span class="comment">// 不能用arr.length===len，是因为数组的特性</span></span><br><span class="line">          <span class="comment">// arr=[]; arr[3]=&#x27;xx&#x27;; console.log(arr.length) 这打印出来会是4 而不是1</span></span><br><span class="line">          <span class="keyword">if</span>(count === len) resolve(arr)</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> reject(err))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><p>传参和上面的 all 一模一样，传入一个 Promise 实例集合的数组，然后全部同时执行，谁先快先执行完就返回谁，只返回一个结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">MyPromise.race = <span class="function"><span class="keyword">function</span> (<span class="params">promisesList</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 直接循环同时执行传进来的promise</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> promise <span class="keyword">of</span> promisesList) &#123;</span><br><span class="line">      <span class="comment">// 直接返回出去了，所以只有一个，就看哪个快</span></span><br><span class="line">      promise.then(resolve, reject)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line"><span class="comment">// 数据劫持</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;text&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取数据就直接拿</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取数据了&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 修改数据就重新赋值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据更新了&#x27;</span>)</span><br><span class="line">    input.value = newVal</span><br><span class="line">    box.innerHTML = newVal</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输入监听</span></span><br><span class="line">input.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  obj.text = e.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简易版的 hash 路由</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myRoute</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 路由存储对象</span></span><br><span class="line">    <span class="built_in">this</span>.routes = &#123;&#125;</span><br><span class="line">    <span class="comment">// 当前hash</span></span><br><span class="line">    <span class="built_in">this</span>.currentHash = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// 绑定this，避免监听时this指向改变</span></span><br><span class="line">    <span class="built_in">this</span>.freshRoute = <span class="built_in">this</span>.freshRoute.bind(<span class="built_in">this</span>)</span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="built_in">this</span>.freshRoute, <span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="built_in">this</span>.freshRoute, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 存储</span></span><br><span class="line">  <span class="function"><span class="title">storeRoute</span>(<span class="params">path, cb</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.routes[path] = cb || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新</span></span><br><span class="line">  <span class="function"><span class="title">freshRoute</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.currentHash = location.hash.slice(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.routes[<span class="built_in">this</span>.currentHash]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>185-重学react</title>
    <url>/20220315/185-%E9%87%8D%E5%AD%A6react/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdC5kb2NzY2hpbmEub3JnL2RvY3MvaGVsbG8td29ybGQuaHRtbA==">https://react.docschina.org/docs/hello-world.html<i class="fa fa-external-link-alt"></i></span></p>
<p>构建用户界面的 javascript 库，主要用于构建 UI 界面</p>
<p>特点：</p>
<ol>
<li>声明式的设计</li>
<li>高效，采用虚拟 DOM 来实现 DOM 的渲染，最大限度减少 DOM 的操作</li>
<li>灵活，跟其它库搭配</li>
<li>JSX，俗称 js 里面写 HTML，JavaScript 语法的扩展</li>
<li>组件化，模块化。代码容易复用，</li>
<li>单向数据流，没有实现数据的双向绑定。数据-&gt;视图-&gt;事件-&gt;数据</li>
</ol>
<p>创建项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>public:入口文件</p>
<p>src:源码文件</p>
<p>React 开发依赖三个库：</p>
<ul>
<li>react:包含 react 所必须的核心代码</li>
<li>react-dom:react 渲染在不同平台所需要的核心代码</li>
<li>babel:将 jsx 转换成 react 代码的工具</li>
</ul>
<p>第一个 React 程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.production.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在script标签中使用jsx，必须添加一个属性 --&gt;</span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor (props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this.state = &#123;</span><br><span class="line">      message: &#x27;Hello World&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;this.state.message&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;/*ReactDom.render(渲染的内容, 挂载的对象)*/&#125;</span><br><span class="line">ReactDOM.render(&lt;App/&gt;, document.getElementById(&#x27;app&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>jsx 特点：多个标签最外层(根)只能有一个标签</p>
<h3 id="认识-JSX"><a href="#认识-JSX" class="headerlink" title="认识 JSX"></a>认识 JSX</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> <span class="comment">//jsx语法</span></span><br></pre></td></tr></table></figure>

<p>jsx 语法如果是单标签，必须以/&gt;结尾</p>
<h4 id="jsx-中的注释"><a href="#jsx-中的注释" class="headerlink" title="jsx 中的注释"></a><strong>jsx 中的注释</strong></h4><p>​ {/ _ 注释_ /}</p>
<h4 id="jsx-中嵌入变量"><a href="#jsx-中嵌入变量" class="headerlink" title="jsx 中嵌入变量"></a><strong>jsx 中嵌入变量</strong></h4><ul>
<li>在{}中可以正常显示的内容<ul>
<li>String Number Array</li>
</ul>
</li>
<li>在{}中不能正常显示的内容<ul>
<li>null undefined Boolean</li>
</ul>
</li>
<li>对象不能作为 jsx 的子类</li>
</ul>
<h4 id="jsx-中嵌入表达式"><a href="#jsx-中嵌入表达式" class="headerlink" title="jsx 中嵌入表达式"></a><strong>jsx 中嵌入表达式</strong></h4><ol>
<li>放运算符表达式</li>
<li>三目运算符</li>
<li>函数调用</li>
</ol>
<h4 id="jsx-绑定属性"><a href="#jsx-绑定属性" class="headerlink" title="jsx 绑定属性"></a><strong>jsx 绑定属性</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">    constructor (props) &#123;</span><br><span class="line">      super(props);</span><br><span class="line"></span><br><span class="line">      this.state = &#123;</span><br><span class="line">        message: &#x27;Hello World&#x27;,</span><br><span class="line">        title: &#x27;标题&#x27;,</span><br><span class="line">        imgUrl: &#x27;http://p3.music.126.net/SKTZnAx1sw72kwcq1iQg9A==/109951165243739237.jpg?param=200y200&#x27;,</span><br><span class="line">        active: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render () &#123;</span><br><span class="line">      const &#123; title, imgUrl &#125; = this.state;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;img src=&#123;imgUrl&#125; title=&#123;title&#125; /&gt;</span><br><span class="line">          &#123;/*绑定类名写法*/&#125;</span><br><span class="line">          &lt;div className = &quot;box title&quot;&gt;我是div元素&lt;/div&gt;</span><br><span class="line">          &#123;/*for写法*/&#125;</span><br><span class="line">          &lt;label htmlFor=&quot;&quot;&gt;&lt;/label&gt;</span><br><span class="line">          &#123;/*动态绑定类*/&#125;</span><br><span class="line">          &lt;div className=&#123;&quot;box title &quot; + (active ? &quot;active&quot;: &quot;&quot;)&#125;&gt;我也是div元素&lt;/div&gt;</span><br><span class="line">          &#123;/* 绑定style */&#125;</span><br><span class="line">          &#123;/*第一个大括号表示jsx语法，第二个大括号表示一个对象*/&#125;</span><br><span class="line">          &#123;/*style属性由多个单词组成时，不能使用连接符，要使用驼峰标识*/&#125;</span><br><span class="line">           &lt;div style=&#123;&#123;color: &quot;red&quot;, fontSize: &quot;50px&quot;&#125;&#125;&gt;我是div,绑定style属性&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ReactDOM.render(&lt;App/&gt;, document.getElementById(&#x27;app&#x27;))</span><br><span class="line">  &#123;/*单括号里面可跟变量或函数*/&#125;</span><br></pre></td></tr></table></figure>

<p>jsx 中不允许随便使用 js 关键字,如 class，for</p>
<h4 id="jsx-事件绑定和-this-处理"><a href="#jsx-事件绑定和-this-处理" class="headerlink" title="jsx 事件绑定和 this 处理"></a><strong>jsx 事件绑定和 this 处理</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">  class App extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">      super(props);</span><br><span class="line">      this.state = &#123;</span><br><span class="line">        message: &quot;你好啊&quot;,</span><br><span class="line">        counter: 100</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      this.btnClick = this.btnClick.bind(this); //在构造器中绑定this</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;/*点击事件依然使用小驼峰标识*/&#125;</span><br><span class="line">          &#123;/* 1.方案一: bind绑定this(显式绑定) */&#125;</span><br><span class="line">          &lt;button onClick=&#123;this.btnClick&#125;&gt;按钮1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">          &#123;/* 2.方案二: 定义函数时, 使用箭头函数 */&#125;</span><br><span class="line">          &lt;button onClick=&#123;this.increment&#125;&gt;+1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">          &#123;/* 3.方案三(推荐): 直接传入一个箭头函数, 在箭头函数中调用需要执行的函数*/&#125;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; &#123; this.decrement(&quot;why&quot;) &#125;&#125;&gt;-1&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    btnClick() &#123; //方案1</span><br><span class="line">      console.log(this.state.message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 箭头函数中永远不绑定this</span><br><span class="line">    // ES6中给对象增加属性: class fields</span><br><span class="line">    increment = () =&gt; &#123;	//方案2</span><br><span class="line">      console.log(this.state.counter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    decrement(name) &#123;	//方案3,传递参数时特别方便</span><br><span class="line">      console.log(this.state.counter, name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ReactDOM.render(&lt;App/&gt;, document.getElementById(&quot;app&quot;));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="jsx-事件绑定-传递参数"><a href="#jsx-事件绑定-传递参数" class="headerlink" title="jsx 事件绑定-传递参数"></a><strong>jsx 事件绑定-传递参数</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">  class App extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">      super(props);</span><br><span class="line"></span><br><span class="line">      this.state = &#123;</span><br><span class="line">        movies: [&quot;大话西游&quot;, &quot;海王&quot;, &quot;流浪地球&quot;, &quot;盗梦空间&quot;]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      this.btnClick = this.btnClick.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;button onClick=&#123;this.btnClick&#125;&gt;按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &#123;</span><br><span class="line">              this.state.movies.map((item, index, arr) =&gt; &#123;</span><br><span class="line">                return (  //返回的内容包上小括号之后就可以换行</span><br><span class="line">                  &lt;li className=&quot;item&quot;</span><br><span class="line">                    onClick=&#123; event =&gt; &#123; this.liClick(item, index, event) &#125;&#125;</span><br><span class="line">                    title=&quot;li&quot;&gt;</span><br><span class="line">                    &#123;item&#125;</span><br><span class="line">                  &lt;/li&gt;</span><br><span class="line">                )</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    btnClick(event) &#123; //默认会传event对象</span><br><span class="line">      //执行函数时：onClick.call(undefined, event);</span><br><span class="line">      console.log(&quot;按钮发生了点击&quot;, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    liClick(item, index, event) &#123; //元素 下标 event对象</span><br><span class="line">      console.log(&quot;li发生了点击&quot;, item, index, event);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ReactDOM.render(&lt;App/&gt;, document.getElementById(&quot;app&quot;));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p>在 react 中，所有的条件判断都和普通的 JavaScript 代码一致</p>
<p>方案一:通过 if 判断: 逻辑代码非常多的情况</p>
<p>方案二: 三元运算符</p>
<blockquote>
<p>&lt;button onClick**=<strong>{e **=&gt;</strong> this.loginClick()}&gt;{isLogin <strong>?</strong> “退出” <strong>:</strong> “登录”}</button></p>
</blockquote>
<p>方案三: 逻辑与&amp;&amp;</p>
<blockquote>
<p>{ isLogin <strong>&amp;&amp;</strong> “你好啊, coderwhy” } //逻辑与: 前面条件不成立, 后面的条件都不会进行判断了</p>
</blockquote>
<p>v-show 效果渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  const &#123; isLogin&#125; = this.state;	//解构</span><br><span class="line">  const titleDisplayValue = isLogin ? &quot;block&quot;: &quot;none&quot;;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; this.loginClick()&#125;&gt;&#123;isLogin ? &quot;退出&quot;: &quot;登录&quot;&#125;&lt;/button&gt;</span><br><span class="line">      &lt;h2 style=&#123;&#123;display: titleDisplayValue&#125;&#125;&gt;你好啊, coderwhy&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;数字列表(过滤2)&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;</span><br><span class="line">	this.state.numbers.filter(item =&gt; item &gt;= 50).map(item =&gt; &lt;li&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;数字列表(截取)&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;</span><br><span class="line">  &#123;/*截取数组前4个元素(0123),0&lt;=el&lt;4*/&#125;</span><br><span class="line">	this.state.numbers.slice(0, 4).map(item =&gt; &lt;li&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>react 设计原则：state 中数据的不可变性，新建中间变量，修改完成之后整体赋值给原来的数据</p>
<h3 id="React-脚手架"><a href="#React-脚手架" class="headerlink" title="React 脚手架"></a>React 脚手架</h3><p>cnpm 安装:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>yarn 安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g yarn #react脚手架默认使用yarn</span><br><span class="line">yarn --version #查看yarn版本</span><br><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure>

<p>创建项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 项目名称不能包含大写字母</span></span><br><span class="line">create-react-app 项目名称 #创建js项目</span><br><span class="line">create-react-app ts-app --template typescript  #使用脚手架创建ts项目</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行项目</span></span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<p>使用 export default 导出方式，导入时不需要写大括号</p>
<p>直接导出时：export function sum(num1, num2){}</p>
<p>导入需要写大括号：import {sum, mul} from ‘./utils’</p>
<h3 id="React-组件化开发"><a href="#React-组件化开发" class="headerlink" title="React 组件化开发"></a>React 组件化开发</h3><h4 id="类组件定义要求"><a href="#类组件定义要求" class="headerlink" title="类组件定义要求"></a>类组件定义要求</h4><ul>
<li>组件的名称必须是大写字母开头(无论是类组件还是函数组件)</li>
<li>类组件需要继承自：React.Component</li>
<li>类组件必须实现 render 函数</li>
</ul>
<p>jsx 语法中，普通 html 标签必须使用小写，否则会被当成组件</p>
<p>使用 class 定义一个组件：</p>
<p>constructor 是可选的，通常在 constructor 中初始化一些数据</p>
<p>this.state 中维护的就是组件内部的数据</p>
<p>render()方法是 class 组件中唯一必须实现的方法</p>
<h4 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default class App extends Component &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    super();</span><br><span class="line"></span><br><span class="line">    this.state = &#123;</span><br><span class="line">      counter: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default function App () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//没有this对象</span><br><span class="line">//没有内部状态(hoooks)</span><br><span class="line">//会被更新并挂载，但是没有生命周期函数，可通过hooks模拟生命周期的回调</span><br></pre></td></tr></table></figure>

<h4 id="render-函数的返回值"><a href="#render-函数的返回值" class="headerlink" title="render 函数的返回值"></a>render 函数的返回值</h4><p>当 render 被调用时，他会检查 this.props 和 this.state 的变化并返回下列类型之一</p>
<p><strong>React 元素：</strong></p>
<ul>
<li>通常通过 jsx 创建</li>
<li>div 会被 React 渲染为 DOM 节点,<MyComponent/>会被 React 渲染为自定义组件</li>
</ul>
<p>**数组或 fragments:**使得 render 方法可以返回多个元素</p>
<p><strong>Portals：</strong>可以渲染子节点到不同的 DOM 子树中</p>
<p><strong>字符串或数值类型：</strong>它们在 DOM 中会被渲染为文本节点</p>
<p><strong>Boolean 或 null：</strong>什么都不渲染</p>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul>
<li>挂载阶段：constructor -&gt; render -&gt; componentDidMount</li>
</ul>
<p>componentDidMount () {} //组件挂载后调用，在此处发送网络请求最好的地方</p>
<ul>
<li>修改阶段：render -&gt; componentDidUpdate</li>
</ul>
<p>componentDidUpdate () {} //组件更新后被调用，首次渲染不会执行此方法</p>
<ul>
<li>删除阶段： componentWillUnmount</li>
</ul>
<p>componentWillUnmount () {} //组件卸载及销毁之前直接调用，可在此执行必要的清理操作</p>
<p><strong>constructor</strong></p>
<ul>
<li>如果不初始化或不进行方法绑定，则不需要为 React 组件实现构造函数</li>
<li>constructor 通常只做两件事<ul>
<li>通过 this.state 赋值对象来初始化内部的 state</li>
<li>为事件绑定实例（this）</li>
</ul>
</li>
</ul>
<h4 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;Header/&gt;</span><br><span class="line">  &lt;Main/&gt;</span><br><span class="line">  &lt;Footer/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="组件间的通信-props"><a href="#组件间的通信-props" class="headerlink" title="组件间的通信(props)"></a>组件间的通信(props)</h4><h5 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h5><ul>
<li>类组件(通过属性传递 )</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">class ChildCpn extends Component &#123;</span><br><span class="line">  // constructor (props) &#123;   //可以省略&#123;/*2.可省略*/&#125;</span><br><span class="line">  //   super(props); //传给父类保存参数，本质上是保存到了自己的this里面，默认方式，所以可以省略</span><br><span class="line">  // &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    const &#123;name, age, height&#125; = this.props; //3.对象解构</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;子组件展示数据：&#123;`$&#123;name&#125;的年龄是$&#123;age&#125;岁，身高是$&#123;height&#125;`&#125;&lt;/h2&gt;</span><br><span class="line">        &#123;/*4.使用*/&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ChildCpn name=&quot;why&quot; age=&quot;18&quot; height=&quot;1.88&quot;/&gt; &#123;/*1.*/&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数组件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">function ChildCpn (props) &#123;	//2.</span><br><span class="line">  const &#123;name, age, height&#125; = props; //3.</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      	&#123;/*4.*/&#125;</span><br><span class="line">        &lt;h2&gt;子组件展示数据：&#123;`$&#123;name&#125;的年龄是$&#123;age&#125;岁，身高是$&#123;height&#125;`&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ChildCpn name=&quot;Kobe&quot; age=&quot;40&quot; height=&quot;2.12&quot;/&gt;	&#123;/*1.*/&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>传参属性验证</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line">import PropTypes from &#x27;prop-types&#x27;  //1.导入验证包</span><br><span class="line"></span><br><span class="line">function ChildCpn (props) &#123;</span><br><span class="line">  const &#123;name, age, height&#125; = props;</span><br><span class="line">  const &#123; names &#125; = props;</span><br><span class="line">  //static propTypes = &#123;&#125; //类组件可以使用</span><br><span class="line"> // static defaultProps = &#123;&#125; //类组件可以使用</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">ChildCpn.propTypes = &#123;	//2.使用验证 类组件和函数组件都可以使用</span><br><span class="line">  name: PropTypes.string.isRequired, //传过来的name必须是string类型,且必须传</span><br><span class="line">  age: PropTypes.number,</span><br><span class="line">  names: PropTypes.array</span><br><span class="line">&#125;</span><br><span class="line">ChildCpn.defaultProps = &#123;	//未传参数时设置默认值 类组件和函数组件都可以使用</span><br><span class="line">  name: &#x27;ysj&#x27;,</span><br><span class="line">  age: 30,</span><br><span class="line">  height: 1.98</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ChildCpn height=&#123;1.88&#125; name=&quot;Kobe&quot; age=&#123;18&#125; names=&#123;[&#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;, &#x27;ddd&#x27;]&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h5><p>通过 props 传递函数给子组件，让子组件调用，使父组件的函数被回调，从而在父组件完成相关操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">class CounterBtn extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123;btnClick&#125; = this.props; //2.从props中取出父组件传过来的参数</span><br><span class="line"></span><br><span class="line">    //3.在onClick中调用btnClick方法</span><br><span class="line">    return &lt;button onClick=&#123;btnClick&#125;&gt;+1&lt;/button&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;当前计数：&#123;this.state.counter&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;CounterBtn btnClick=&#123;e =&gt; this.increment()&#125;/&gt;</span><br><span class="line">        &#123;/* 1.将方法赋值给btnClick(自己取的名字)，并将btnClick传给子组件 */&#125;</span><br><span class="line">        &#123;/*时间监听传箭头函数，直接传函数this会有问题*/&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment() &#123; //父组件函数</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      counter: this.state.counter + 1</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>会发生改变的数据放在 this.state 里面，不变的数据放在 this 里面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.titles = [&#x27;新款&#x27;, &#x27;精选&#x27;, &#x27;流行&#x27;];	//不变的数据，放在this里面</span><br><span class="line">  this.state = &#123;</span><br><span class="line">    currentIndex:0	//会发生改变的数据，放在this.state里面</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="React-实现-slot"><a href="#React-实现-slot" class="headerlink" title="React 实现 slot"></a>React 实现 slot</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//App.js</span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;NavBar</span><br><span class="line">          leftSlot=&#123;&lt;span&gt;aaa&lt;/span&gt;&#125;</span><br><span class="line">          centerSlot=&#123;&lt;strong&gt;bbb&lt;/strong&gt;&#125;</span><br><span class="line">          rightSlot=&#123;&lt;a href=&quot;/#&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &#123;/*1.传标签给子组件*/&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//NavBar.js</span><br><span class="line">export default class NavBar extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123;leftSlot, centerSlot, rightSlot&#125; = this.props;  //2.解构父组件传过来的数据</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;nav-bar&quot;&gt;</span><br><span class="line">        &lt;div className=&quot;nav-left nav-item&quot;&gt;</span><br><span class="line">          &#123;leftSlot&#125; &#123;/*3.使用*/&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div className=&quot;nav-center nav-item&quot;&gt;</span><br><span class="line">          &#123;centerSlot&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div className=&quot;nav-right nav-item&quot;&gt;</span><br><span class="line">          &#123;rightSlot&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="跨组件通信"><a href="#跨组件通信" class="headerlink" title="跨组件通信"></a>跨组件通信</h5><p>如果你已经有了一个 props 对象，你可以使用展开运算符 <code>...</code> 来在 JSX 中传递整个 props 对象。以下两个组件是等价的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function App1() &#123;</span><br><span class="line">  return &lt;Greeting firstName=&quot;Ben&quot; lastName=&quot;Hector&quot; /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App2() &#123;</span><br><span class="line">  const props = &#123;firstName: &#x27;Ben&#x27;, lastName: &#x27;Hector&#x27;&#125;;</span><br><span class="line">  return &lt;Greeting &#123;...props&#125; /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Context 相关 API:</strong></p>
<p>React.createContext</p>
<ul>
<li>创建一个需要共享的对象</li>
<li>如果一个组件订阅了 Context，那么这个组件会从离自身最近的那个匹配的 Provider 中读取到当前的 context 值</li>
<li>defaultValue 时组件在顶层查找过程中没有找到对应的 Provider，那么就使用默认值</li>
</ul>
<p>Context.Provider</p>
<ul>
<li>每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化</li>
<li>Provider 接受一个 value 属性，传递给消费组件</li>
<li>一个 Provider 可以和多个消费组件有对应关系</li>
<li>多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据</li>
<li>当 Provider 的 value 值发生变化时，它内部所有的消费组件都会重新渲染</li>
</ul>
<p>Class.contextType</p>
<ul>
<li>挂载在 class 上的 contextType 属性会被重新赋值为一个由 React.createContext()创建的 Context 对象</li>
<li>这能让你是哟个 this.context 来消费最近 Context 上的那个值</li>
<li>你可以在任何生命周期中访问到它，包括 render 函数中</li>
</ul>
<p>Context.Consumer</p>
<ul>
<li>函数作为子元素，接收当前 context 值，返回一个 React 节点</li>
</ul>
<p>类组件的 context 跨组件通信：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//通过Context传递数据</span><br><span class="line">//1.创建Context对象</span><br><span class="line">const UserContext = React.createContext(&#123;</span><br><span class="line">  //传入默认值</span><br><span class="line">  nickname: &quot;aaa&quot;,</span><br><span class="line">  level: -1,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">class ProfileSon extends Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;/* 6.通过类组件的this.context使用数据 */&#125;</span><br><span class="line">        &lt;h2&gt;用户昵称：&#123;this.context.nickname&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;用户等级：&#123;this.context.level&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ProfileSon.contextType = UserContext; //5.取出共享的数据</span><br><span class="line"></span><br><span class="line">function Profile(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ProfileSon /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      nickname: &quot;Kobe&quot;,</span><br><span class="line">      level: 99,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;/*2.拿到创建的UserContext对象，使用对象里面的Provider组件 */&#125;</span><br><span class="line">        &lt;UserContext.Provider value=&#123;this.state&#125;&gt;</span><br><span class="line">          &#123;/*3.使用value，共享数据给所有子组件*/&#125;</span><br><span class="line">          &lt;Profile /&gt;</span><br><span class="line">          &#123;/*4.传数据给Profile组件的子组件，需将Profile组件放在Provider组件里面*/&#125;</span><br><span class="line">        &lt;/UserContext.Provider&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数组件的 context 跨组件通信：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//通过Context传递数据</span><br><span class="line">//1.创建Context对象</span><br><span class="line">const UserContext = React.createContext(&#123;</span><br><span class="line">  //传入默认值</span><br><span class="line">  nickname: &quot;aaa&quot;,</span><br><span class="line">  level: -1,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function ProfileSon() &#123;</span><br><span class="line">  return (</span><br><span class="line">    // 5.使用Consumer组件</span><br><span class="line">    &lt;UserContext.Consumer&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        value =&gt; &#123; //6.使用函数接收共享数据</span><br><span class="line">          //value为提供的value值</span><br><span class="line">          return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &#123;/* 7.使用数据 */&#125;</span><br><span class="line">              &lt;h2&gt;用户昵称：&#123;value.nickname&#125;&lt;/h2&gt;</span><br><span class="line">              &lt;h2&gt;用户等级：&#123;value.level&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/UserContext.Consumer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Profile(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ProfileSon /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this.state = &#123;</span><br><span class="line">      nickname: &quot;Kobe&quot;,</span><br><span class="line">      level: 99,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;/*2.拿到创建的UserContext对象，使用对象里面的Provider组件 */&#125;</span><br><span class="line">        &lt;UserContext.Provider value=&#123;this.state&#125;&gt;</span><br><span class="line">          &#123;/*3.使用value，共享数据给所有子组件*/&#125;</span><br><span class="line">          &lt;Profile /&gt;&#123;&quot; &quot;&#125;</span><br><span class="line">          &#123;/*4.传数据给Profile组件的子组件，需将Profile组件放在Provider组件里面*/&#125;</span><br><span class="line">        &lt;/UserContext.Provider&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h4><p>通过 setState 修改数据，告知 React 数据发生了改变，使其重新渲染页面</p>
<p>setState 是异步更新的(不能在执行完 setState 之后立马拿到最新的 state 结果)：</p>
<ul>
<li>可以显著地提高性能(获取多个更新，再批量进行更新)</li>
<li>如果同步更新了 state，但还没有执行 render 函数，那么 state 和 props 不能保持一致性，会引发很多问题</li>
</ul>
<p>拿到异步更新的结果：</p>
<ol>
<li>componentDidUpdate(){}</li>
<li>this.setState({//更新的数据}, //回调函数,拿到更新后的数据)</li>
</ol>
<p>在组件生命周期或 React 合成事件中，setState 是异步</p>
<p>在 setTimeout 或者原生 DOM 事件中，setState 是同步</p>
<p>使 setState 合并时进行累加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.setState((preState, props) =&gt; &#123;</span><br><span class="line">	return &#123;</span><br><span class="line">		counter: preState.counter + 1  //合并时将前一次的值加1</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="key-的优化"><a href="#key-的优化" class="headerlink" title="key 的优化"></a>key 的优化</h4><ul>
<li>key 应该是唯一的</li>
<li>key 不要使用随机数</li>
<li>使用 index 作为 key，对性能是没有优化的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  this.state.movies.map((item, index) =&gt; &#123;</span><br><span class="line">    return &lt;li key=&#123;item&#125;&gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组件嵌套的-render-调用"><a href="#组件嵌套的-render-调用" class="headerlink" title="组件嵌套的 render 调用"></a>组件嵌套的 render 调用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shuoldComponentUpdate(nextProps, nextState)&#123;</span><br><span class="line">  //nextProps:props修改之后，最新的props属性</span><br><span class="line">  //nextState:state修改之后，最新的state属性</span><br><span class="line">	if(this.state.counter !== nextState.counter)&#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line">	return false;</span><br><span class="line">&#125;</span><br><span class="line">//返回true，调用render方法</span><br><span class="line">//返回false，不调用render方法</span><br><span class="line">//默认返回true，即state发生改变，就会调用render方法</span><br></pre></td></tr></table></figure>

<p>另一种优化方法：</p>
<ul>
<li>类组件继承 PureComponent:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;PureComponent&#125; from &#x27;react&#x27; //将Component改为PureComponent</span><br><span class="line">class Banner extends PureComponent &#123;&#125;</span><br><span class="line">//这样的话React会自动判断数据更新后要不要调用render方法</span><br></pre></td></tr></table></figure>

<ul>
<li>函数组件需要包裹一个 memo:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;PureComponent, memo&#125; from &#x27;react&#x27;</span><br><span class="line">const MemoHeader = memo(&#123; //作用同PureComponent</span><br><span class="line">  console.log(&#x27;Header被调用&#x27;);</span><br><span class="line">	return &lt;h2&gt;我是Header组件&lt;/h2&gt;</span><br><span class="line">&#125;);//参数为一个组件,返回一个新的组件</span><br><span class="line"></span><br><span class="line">//使用：</span><br><span class="line">&lt;MemoHeader/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const newFriends = this.state.friends;	//赋值后两个数组内存地址一样</span><br><span class="line">const newFriends = [...this.state.friends]; //会创建一个新内存空间，两个数组地址不一样</span><br></pre></td></tr></table></figure>

<p>数据不可变性原因：</p>
<p>直接修改数据内存地址不会变，会导致 ShouldComponentUpdate 的性能优化不起作用</p>
<p>采用整体赋值改变内存地址，使性能优化起作用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 推荐做法</span><br><span class="line">const newFriends = [...this.state.friends];</span><br><span class="line">const newFriends.push(&#123;name: &quot;tom&quot;&#125;);</span><br><span class="line">this.setState(&#123;</span><br><span class="line">  friends: newFriends</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="全局事件传递"><a href="#全局事件传递" class="headerlink" title="全局事件传递"></a>全局事件传递</h4><p>事件总线 event bus</p>
<p>安装使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add events</span><br><span class="line"></span><br><span class="line">import &#123;EventEmitter&#125; from &#x27;events&#x27;	//导入</span><br><span class="line">//事件总线</span><br><span class="line">const eventBus = new EventEmitter(); //实例化</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">import &#123;EventEmitter&#125; from &#x27;events&#x27;	//1.导入</span><br><span class="line">//事件总线</span><br><span class="line">const eventBus = new EventEmitter(); //2.实例化</span><br><span class="line"></span><br><span class="line">class Home extends PureComponent &#123;</span><br><span class="line">  componentDidMount() &#123; //5.在此进行事件监听</span><br><span class="line">    //(监听的事件名,自定义函数)</span><br><span class="line">    eventBus.addListener(&quot;sayHello&quot;, this.handleSayHelloListener);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123; //6.在此取消事件监听</span><br><span class="line">    eventBus.removeListener(&quot;sayHello&quot;, this.handleSayHelloListener);</span><br><span class="line">  &#125;</span><br><span class="line">  handleSayHelloListener(...args) &#123; //7.自定义函数，处理事件,接收多个参数</span><br><span class="line">    console.log(args);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Home</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Profile extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Profile</span><br><span class="line">        &#123;/*4.传递事件*/&#125;</span><br><span class="line">        &lt;button onClick=&#123;e =&gt; &#123;this.emitEvent()&#125;&#125;&gt;点击了Profile&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  emitEvent() &#123;</span><br><span class="line">    //3.发射事件 (事件名字,参数1,参数2,...)</span><br><span class="line">    eventBus.emit(&quot;sayHello&quot;, &#x27;Hello Home&#x27;, 123);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Home/&gt;</span><br><span class="line">        &lt;Profile/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h4><p>不推荐直接操作 DOM 元素</p>
<p>创建 refs 获取对应 DOM</p>
<ol>
<li><p>传入字符串(不推荐，后续更新可能会被删除)</p>
<p>使用时通过 this.refs.传入的字符串格式获取对应的元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;/* &lt;h2 ref=字符串/对象/函数&lt;/div&gt;  &lt;/h2&gt; */&#125;</span><br><span class="line">        &#123;/* 字符串 */&#125;</span><br><span class="line">        &lt;h2 ref=&quot;titleRef&quot;&gt;Hello React&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;e =&gt; this.changeText() &#125;&gt;改变文本&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  changeText() &#123;	//通过字符串操作DOM元素,不推荐，后续更新可能会删除</span><br><span class="line">    this.refs.titleRef.innerHTML = &#x27;Hello CoderWhy&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>传入一个对象(react 推荐的方式)</p>
<ul>
<li><p>对象通过 React.createRef()方式创建出来</p>
</li>
<li><p>使用时获取到创建的对象其中有一个 current 属性就是对应元素</p>
</li>
<li><p><strong>当 ref 在类组件里面的时候，最终获取到的 current 是一个组件对象</strong></p>
</li>
<li><p><strong>不能在函数组件上使用 ref 属性，因为他们没有实例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent, createRef &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.titleRef = createRef();  //1.在构造器创建好ref并放到当前对象里面(this里面)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;/* 通过createRef创建ref对象 目前React推荐的方式 */&#125;</span><br><span class="line">        &#123;/* 2.使用 */&#125;</span><br><span class="line">        &lt;h2 ref=&#123; this.titleRef &#125;&gt;Hello React&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;e =&gt; this.changeText() &#125;&gt;改变文本&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  changeText() &#123;</span><br><span class="line">    this.titleRef.current.innerHTML = &#x27;Hello World&#x27;;&#123;/*3.操作DOM*/&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>传入一个函数</p>
<ul>
<li>该函数会在 DOM 被挂载时进行回调，这个函数会传入一个元素对象，我们可以自己保存</li>
<li>使用时拿到之前保存的元素对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.titEl = null;  //1.定义一个空对象</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;/* 函数 */&#125;</span><br><span class="line">        &#123;/* 2.使用,传入一个函数，函数自带一个参数 */&#125;</span><br><span class="line">        &lt;h2 ref=&#123; arg =&gt; this.titEl = arg &#125;&gt;Hello World&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;e =&gt; this.changeText() &#125;&gt;改变文本&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  changeText() &#123;</span><br><span class="line">    this.titEl.innerHTML = &#x27;Hello React&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h4><p>渲染表单的 React 组件控制着用户输入过程中表单发生的操作，被 React 以这种方式控制取值的表单输入元素就叫做<strong>受控组件</strong></p>
<p>受控非受控组件一般和表单元素有关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;form onSubmit=&#123; e =&gt; this.handleSubmit(e) &#125;&gt;</span><br><span class="line">        &lt;label htmlFor=&quot;username&quot;&gt;</span><br><span class="line">          用户名：</span><br><span class="line">          &#123;/* 受控组件 */&#125;</span><br><span class="line">          &lt;input type=&quot;text&quot;</span><br><span class="line">            id=&quot;username&quot;</span><br><span class="line">            onChange=&#123;e =&gt; this.handleChange(e) &#125;</span><br><span class="line">            value=&#123;this.state.username&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          &#123;/* 受控组件 */&#125;</span><br><span class="line">          &lt;select</span><br><span class="line">            name=&quot;fruits&quot;</span><br><span class="line">            onChange=&#123;e =&gt; this.handleSelectChange(e)&#125; &#123;/*监听select*/&#125;</span><br><span class="line">            value=&#123;this.state.fruits&#125; &#123;/*设置默认值*/&#125;</span><br><span class="line">            &gt;</span><br><span class="line">            &lt;option value=&quot;apple&quot;&gt;苹果&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;banana&quot;&gt;香蕉&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;orange&quot;&gt;橘子&lt;/option&gt;</span><br><span class="line">          &lt;/select&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">handleSubmit(event) &#123;</span><br><span class="line">  e.preventDefault; //阻止表单默认事件</span><br><span class="line">  console.log(this.state.username);</span><br><span class="line">&#125;</span><br><span class="line">handleChange(event) &#123;</span><br><span class="line">  this.setState(&#123;</span><br><span class="line">    username: event.target.value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default class APp extends PureComponent &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this.state = &#123;  //表单输入的任何东西都会被保存到这里</span><br><span class="line">      username: &quot;&quot;,</span><br><span class="line">      password: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;form onSubmit=&#123; e =&gt; this.handleSubmit(e) &#125;&gt;</span><br><span class="line">          &lt;label htmlFor=&quot;username&quot;&gt;</span><br><span class="line">            用户名：</span><br><span class="line">            &lt;input type=&quot;text&quot;</span><br><span class="line">                   id=&quot;username&quot;</span><br><span class="line">                   name=&quot;username&quot;</span><br><span class="line">                   onChange=&#123;e =&gt; this.handleChange(e) &#125;</span><br><span class="line">                   value=&#123;this.state.username&#125;</span><br><span class="line">                   /&gt;</span><br><span class="line">          &lt;/label&gt;</span><br><span class="line">          &lt;label htmlFor=&quot;password&quot;&gt;</span><br><span class="line">            密码：</span><br><span class="line">            &lt;input type=&quot;text&quot;</span><br><span class="line">                   id=&quot;password&quot;</span><br><span class="line">                   name=&quot;password&quot;</span><br><span class="line">                   onChange=&#123;e =&gt; this.handleChange(e) &#125;</span><br><span class="line">                   value=&#123;this.state.password&#125;</span><br><span class="line">                   /&gt;</span><br><span class="line">          &lt;/label&gt;</span><br><span class="line">          &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(e) &#123;</span><br><span class="line">    e.preventDefault(); //阻止默认行为</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event) &#123;//event.target.name的值就是表单中name的值</span><br><span class="line">    this.setState(&#123; //通过es6语法合并修改值时的操作</span><br><span class="line">      [event.target.name]: event.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h4><p>表单数据交由 DOM 节点处理(不建议使用)</p>
<h4 id="高阶组件-HOC"><a href="#高阶组件-HOC" class="headerlink" title="高阶组件 HOC"></a>高阶组件 HOC</h4><p>参数和返回值都为组件的<strong>函数</strong>(高阶组件本身不是一个组件，是一个函数)</p>
<p>ES6 中，类表达式的类名都是可以省略的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function enhanceComponent(WrappedComponent) &#123;	//定义高阶组件</span><br><span class="line">  return class NewComponent extends PureComponent &#123;  //返回类组件,NewComponent可以省略</span><br><span class="line">    render() &#123;</span><br><span class="line">      return &lt;WrappedComponent/&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const enhanceComponent = enhanceComponent(App);	//使用</span><br><span class="line"></span><br><span class="line">function enhanceComponent2(WrappedComponent) &#123; //定义高阶组件</span><br><span class="line">  return function NewComponent(props) &#123;  //返回函数组件</span><br><span class="line">    return &lt;WrappedComponent/&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件的名称都可以通过 displayName 来修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">App.displayName = &#x27;CoderWhy&#x27;;</span><br></pre></td></tr></table></figure>

<p>可以用来增强 props、登录鉴权操作、生命周期劫持等操作(详见 10.高阶组件)</p>
<p>组件名.name; //拿到组件名字</p>
<p>不要继承自己定义的组件</p>
<h4 id="ref-的转发"><a href="#ref-的转发" class="headerlink" title="ref 的转发"></a>ref 的转发</h4><p>作用：在函数组件中使用 ref</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent, createRef, forwardRef &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">const Profile = forwardRef(function(props, ref) &#123; //3.接收的ref</span><br><span class="line">  return &lt;p ref=&#123;ref&#125;&gt;Profile&lt;/p&gt;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this.profileRef = createRef();//1.创建</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Profile ref=&#123;this.profileRef&#125;/&gt;</span><br><span class="line">        &#123;/* 2.传入的ref */&#125;</span><br><span class="line">        &lt;button onClick=&#123; e =&gt; this.printRef() &#125;&gt;打印ref&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printRef() &#123;</span><br><span class="line">    console.log(this.profileRef.current);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Portals-的使用"><a href="#Portals-的使用" class="headerlink" title="Portals 的使用"></a>Portals 的使用</h4><p>使渲染的内容独立于父组件甚至独立于当前挂载到的 DOM 元素中</p>
<p>ReactDOM.createPortal(child, container);</p>
<ul>
<li>child:任何可渲染的 React 子元素</li>
<li>container:一个 DOM 元素</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//index.html</span><br><span class="line">&lt;div id=&quot;modal&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//index.css</span><br><span class="line">#modal &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//index.js</span><br><span class="line">import App from &#x27;./组件内容补充/02_portals的使用&#x27;</span><br><span class="line">import &quot;./css/index.css&quot;;</span><br><span class="line"></span><br><span class="line">//02_portals的使用</span><br><span class="line">import React, &#123; PureComponent &#125; from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line">class Modal extends PureComponent &#123; //modal组件</span><br><span class="line">  render() &#123;</span><br><span class="line">    return ReactDOM.createPortal(</span><br><span class="line">      this.props.children, //Modal里面的所有子组件</span><br><span class="line">      document.getElementById(&quot;modal&quot;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;渲染到屏幕中间&lt;/p&gt;</span><br><span class="line">        &lt;Modal&gt;</span><br><span class="line">          &lt;h2&gt;Title&lt;/h2&gt;</span><br><span class="line">        &lt;/Modal&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="fragment"><a href="#fragment" class="headerlink" title="fragment"></a>fragment</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent, Fragment &#125; from &#x27;react&#x27;;</span><br><span class="line">&lt;Fragment key=&#123;item.name&#125;&gt;</span><br><span class="line">  &lt;h2&gt;Hello World&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;xixixii&lt;/p&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">&lt;/Fragment&gt;</span><br><span class="line">//渲染时,h2和p标签会被直接渲染，外面用来包裹的fragment不会被渲染</span><br><span class="line"></span><br><span class="line">//短语法，省略fragment名字,但是里面不能添加任何属性，要添加属性必须加上Fragment才不会报错</span><br><span class="line">&lt;&gt;</span><br><span class="line">  &lt;h2&gt;Hello World&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;xixixii&lt;/p&gt;</span><br><span class="line">  &lt;hr/&gt;</span><br><span class="line">&lt;/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="StrictMode-严格模式"><a href="#StrictMode-严格模式" class="headerlink" title="StrictMode 严格模式"></a>StrictMode 严格模式</h4><p>用来突出显示应用程序中潜在问题的工具</p>
<ul>
<li>与 fragment 一样，StrrictMode 不会渲染任何可见的 UI</li>
<li>它为其后代元素触发额外的检查和警告(只会对自己的后代元素进行检查)</li>
<li>严格模式检查仅在开发模式下运行，不会影响生产构建</li>
<li>严格模式下组件会渲染(render)两次</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;React.StrictMode&gt;</span><br><span class="line">  &lt;App /&gt;</span><br><span class="line">&lt;/React.StrictMode&gt;</span><br><span class="line"></span><br><span class="line">import &#123;StrictMode&#125; from &#x27;React&#x27; //导入后可以直接写</span><br><span class="line">&lt;StrictMode&gt;</span><br><span class="line">&lt;/StrictMode&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li>识别不安全的生命周期</li>
<li>使用过时的 ref API</li>
<li>检查意外的副作用<ol>
<li>这个组件的 constructor 会被故意调用两次，让你查看在此的一些逻辑代码被调用多次时，是否会产生一些副作用</li>
<li>在生产环境中不会被调用两次</li>
</ol>
</li>
<li>使用废弃的 findDOMNode 方法</li>
<li>检测过时的 context API</li>
</ol>
<h3 id="React-中的样式"><a href="#React-中的样式" class="headerlink" title="React 中的样式"></a>React 中的样式</h3><h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const pStyle = &#123;</span><br><span class="line">      color: &quot;orange&quot;,</span><br><span class="line">      textDecoration: &quot;line-through&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2 style=&#123;&#123;fontSize: &quot;50px&quot;, color: &quot;red&quot;&#125;&#125;&gt;我是标题&lt;/h2&gt;</span><br><span class="line">        &#123;/*只能写驼峰*/&#125;</span><br><span class="line">        &#123;/*尽量用双引号，有些语法不支持单引号*/&#125;</span><br><span class="line">        &lt;p style=&#123;pStyle&#125;&gt;我是一段文字描述&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>样式之间不会有冲突，可以动态获取当前 state 中的状态</p>
<h4 id="普通-css"><a href="#普通-css" class="headerlink" title="普通 css"></a>普通 css</h4><p>会和其它组件的样式产生冲突</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//app -&gt; index.js style.css</span><br><span class="line">//index.js</span><br><span class="line">import &#x27;./style.css&#x27; //引入css样式</span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2 className=&quot;title&quot;&gt;app的标题&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//style.css正常写css就行</span><br></pre></td></tr></table></figure>

<h4 id="css-modules"><a href="#css-modules" class="headerlink" title="css modules"></a>css modules</h4><p>非 React 独有方案，所有使用了类似于 webpack 配置的环境下都可以使用的</p>
<ul>
<li>引用的类名不能使用连接符(.home-title),在 JS 中是不识别的</li>
<li>所有的 className 必须使用{style.className}的形式来编写</li>
<li>不方便动态修改某些样式，依然需要使用内联样式的方式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//app -&gt; index.js style.module.css</span><br><span class="line">//index.js</span><br><span class="line">import appStyle from &#x27;./style.module.css&#x27;</span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2 className=&#123;appStyle.title&#125;&gt;app的标题&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="css-in-js"><a href="#css-in-js" class="headerlink" title="css in js"></a>css in js</h4><ul>
<li><p>styled-components 库</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add styled-components</span><br></pre></td></tr></table></figure>

<p><strong>标签模板字符串</strong>:可以通过模板字符串的方式对函数进行调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line">test<span class="string">`aaa`</span></span><br><span class="line">test<span class="string">`my name is <span class="subst">$&#123;name&#125;</span>, age is <span class="subst">$&#123;age&#125;</span>`</span></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//style.js</span><br><span class="line">import styled from &#x27;styled-components&#x27;</span><br><span class="line">export const HomeWrapper = styled.div`		//调用div函数，返回一个组件,组件生成的是一个div元素</span><br><span class="line">  font-size: 50px;</span><br><span class="line">  color: red;</span><br><span class="line">  .banner &#123;</span><br><span class="line">    color:orange;</span><br><span class="line">  &#125;</span><br><span class="line">  background-image:url($&#123;require(&quot;@/assets/img/a.png&quot;)&#125;); //引入背景图片</span><br><span class="line">`</span><br><span class="line">//建议嵌套写(写法同less)</span><br><span class="line">//如果出现冲突就单独再弄一个组件</span><br><span class="line">//样式单独弄一个文件，将创建的组件导出</span><br><span class="line">export const TitleWrapper = styled.h2`	//组件生成的是一个h2元素</span><br><span class="line">  background-color:orange;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line">//index.js</span><br><span class="line">import React, &#123; PureComponent &#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; HomeWrapper, TitleWrapper &#125; from &#x27;./style&#x27;</span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;HomeWrapper&gt;</span><br><span class="line">        &lt;TitleWrapper&gt;App&lt;/TitleWrapper&gt;</span><br><span class="line">        &lt;span className=&quot;banner&quot;&gt;样式嵌套&lt;/span&gt;</span><br><span class="line">      &lt;/HomeWrapper&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>动态样式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//index.js</span><br><span class="line">import &#123; HYInput &#125; from &#x27;./style&#x27;</span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this.state = &#123;</span><br><span class="line">      color: &quot;red&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;HYInput type=&quot;text&quot; color=&#123;this.state.color&#125;/&gt;</span><br><span class="line">        &#123;/* 动态获取state里面的color，传入样式中的attrs中去 */&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//style.js</span><br><span class="line">import styled from &#x27;styled-components&#x27;</span><br><span class="line">export const HYInput = styled.input.attrs(&#123; //可在此编写属性</span><br><span class="line">  placeholder: &quot;coderWhy&quot;,</span><br><span class="line">  bColor:&quot;red&quot;</span><br><span class="line">&#125;)`</span><br><span class="line">  background-color:lightblue;</span><br><span class="line">  border-color: $&#123;props =&gt; props.bColor&#125;;	//props为箭头函数的参数,attrs中所有属性会传入到props中</span><br><span class="line">  color:$&#123;props =&gt; props.color&#125; // 写在HYInput中的属性也会传过来</span><br><span class="line">  /* 调用传入到attrs中的state中的color属性 */</span><br><span class="line">`;</span><br><span class="line">//箭头函数会将attrs的所有属性传入</span><br></pre></td></tr></table></figure>

<p><strong>继承</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const HYButton = styled.button`</span><br><span class="line">  padding: 10px 20px;</span><br><span class="line">  color: red;</span><br><span class="line">`</span><br><span class="line">//继承HYButton已有的样式</span><br><span class="line">const HYPrimaryButton = styled(HYButton)`</span><br><span class="line">  color: #fff;</span><br><span class="line">  background-color: green;</span><br><span class="line">`</span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;HYButton&gt;我是普通按钮&lt;/HYButton&gt;</span><br><span class="line">        &lt;HYPrimaryButton&gt;我是主要按钮&lt;/HYPrimaryButton&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>自定义主题</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//用于存放共享样式</span><br><span class="line">import styled, &#123; ThemeProvider &#125; from &#x27;styled-components&#x27;</span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;ThemeProvider theme=&#123;&#123;themeColor:&quot;yellow&quot;, fontSize: &quot;30px&quot;&#125;&#125;&gt;</span><br><span class="line">        &#123;/*在其他组件使用： color:$&#123;props =&gt; props.theme.themeColor&#125; */&#125;</span><br><span class="line">      &lt;/ThemeProvider&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>emotion 库</p>
</li>
<li><p>glamorous 库</p>
</li>
</ul>
<h3 id="AntDesign-UI-组件库"><a href="#AntDesign-UI-组件库" class="headerlink" title="AntDesign UI 组件库"></a>AntDesign UI 组件库</h3><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvaW50cm9kdWNlLWNu">https://ant.design/docs/react/introduce-cn<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="classnames"><a href="#classnames" class="headerlink" title="classnames"></a>classnames</h4><p>动态添加 classnames 的库</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add classnames</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import classNames from &#x27;classnames&#x27;	//导入包</span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this.state = &#123;</span><br><span class="line">      isActive: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; isActive &#125; = this.state;</span><br><span class="line">    const isBar = false;</span><br><span class="line">    const errClass = &quot;error&quot;;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;/* 原生React中添加类的方法 */&#125;</span><br><span class="line">        &lt;h2 className=&quot;foo bar active title&quot;&gt;我是标题1&lt;/h2&gt;</span><br><span class="line">        &lt;h2 className=&#123;&quot;foo bar active title&quot;&#125;&gt;我是标题2&lt;/h2&gt;</span><br><span class="line">        &lt;h2 className=&#123;&quot;title&quot; + (isActive ? &quot; active&quot;: &quot;&quot;)&#125;&gt;我是标题3&lt;/h2&gt;</span><br><span class="line">        &lt;h2 className=&#123;[&quot;title&quot;,(isActive ? &quot;active&quot;: &quot;&quot;)].join(&quot; &quot;)&#125;&gt;我是标题4&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">        &#123;/* classnames库添加class */&#125;</span><br><span class="line">        &lt;h2 className=&#123;classNames(&quot;foo&quot;, &quot;bar&quot;, &quot;active &quot;)&#125;&gt;我是标题5&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">         &#123;/* 前面两个类根据布尔值判断加不加，后面的title类直接加到元素里面 */&#125;</span><br><span class="line">        &lt;h2 className=&#123;classNames(&#123;&quot;active&quot;: isActive, &quot;bar&quot;: isBar&#125;, &quot;title&quot;)&#125;&gt;我是标题6&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">        &#123;/* errClass为变量，变量为true，就把变量的值转为字符串加进来,若变量的值判断为false,则不会添加此类名 */&#125;</span><br><span class="line">        &lt;h2 className=&#123;classNames(&quot;foo&quot;, errClass, &#123;&quot;active&quot;: isActive&#125;)&#125;&gt;我是标题7&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">        &#123;/* 跟上数组 */&#125;</span><br><span class="line">        &lt;h2 className=&#123;classNames([&quot;active&quot;, &quot;title&quot;])&#125;&gt;我是标题8&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">        &#123;/* 数组里面跟对象 */&#125;</span><br><span class="line">        &lt;h2 className=&#123;classNames([&quot;active&quot;, &quot;title&quot;, &#123;&quot;bar&quot;: isBar&#125;])&#125;&gt;我是标题9&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="AntDesign-兼容性"><a href="#AntDesign-兼容性" class="headerlink" title="AntDesign 兼容性"></a>AntDesign 兼容性</h4><ul>
<li>现代浏览器和 ie11(需要 polyfills)</li>
<li>支持服务端渲染</li>
<li>Electron</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install antd --save</span><br><span class="line">yarn add antd</span><br></pre></td></tr></table></figure>

<p>导入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Button &#125; from &#x27;antd&#x27; //导入按钮组件</span><br></pre></td></tr></table></figure>

<p>组件：<span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2NvbXBvbmVudHMvb3ZlcnZpZXctY24v">https://ant.design/components/overview-cn/<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="组件显示中文"><a href="#组件显示中文" class="headerlink" title="组件显示中文"></a>组件显示中文</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ConfigProvider &#125; from &#x27;antd&#x27;;</span><br><span class="line">import zh_CN from &#x27;antd/lib/locale-provider/zh_CN&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;ConfigProvider locale=&#123;zh_CN&#125;&gt;</span><br><span class="line">	// 包含App.js</span><br><span class="line">&lt;/ConfigProvider&gt;</span><br></pre></td></tr></table></figure>

<h4 id="AntDesign-图标"><a href="#AntDesign-图标" class="headerlink" title="AntDesign 图标"></a>AntDesign 图标</h4><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save @ant-design/icons</span><br><span class="line">yarn add @ant-design/icons</span><br></pre></td></tr></table></figure>

<p>导入要使用的组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; DownloadOutlined &#125; from &#x27;@ant-design/icons&#x27;;</span><br><span class="line"></span><br><span class="line">import &#x27;antd/dist/antd.css&#x27; //在index.js里面引入antd的全局样式文件，使样式生效</span><br></pre></td></tr></table></figure>

<h4 id="moment-库"><a href="#moment-库" class="headerlink" title="moment 库"></a>moment 库</h4><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add moment #对日期进行处理</span><br></pre></td></tr></table></figure>

<p>导入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> import moment from &#x27;moment&#x27;</span><br><span class="line">//使用</span><br><span class="line">moment(createTime).format(&quot;YYYY-MM-DD HH:mm:ss&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="craco"><a href="#craco" class="headerlink" title="craco"></a>craco</h4><p>对 create-react-app 进行自定义配置的社区解决方案</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9hbnQuZGVzaWduL2RvY3MvcmVhY3QvdXNlLXdpdGgtY3JlYXRlLXJlYWN0LWFwcC1jbg==">https://ant.design/docs/react/use-with-create-react-app-cn<i class="fa fa-external-link-alt"></i></span></p>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add @craco/craco</span><br></pre></td></tr></table></figure>

<p>在 package.json 里面修改启动过程</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;craco start&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;craco build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;craco test&quot;</span>,</span><br><span class="line">  <span class="string">&quot;eject&quot;</span>: <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"> <span class="comment">//修改之后，再使用yarn start 启动项目时会自动检查根目录是否有craco.config.js文件，并读取里面的配置</span></span><br></pre></td></tr></table></figure>

<p>在项目根目录下新建文件 craco.config.js</p>
<p><strong>配置主题</strong></p>
<p>修改主题需要先安装 craco-less</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add craco-less</span><br></pre></td></tr></table></figure>

<p>craco.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CracoLessPlugin = <span class="built_in">require</span>(<span class="string">&#x27;craco-less&#x27;</span>) <span class="comment">//导入插件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">plugin</span>: CracoLessPlugin,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">lessLoaderOptions</span>: &#123;</span><br><span class="line">          <span class="attr">lessOptions</span>: &#123;</span><br><span class="line">            <span class="attr">modifyVars</span>: &#123; <span class="string">&#x27;@primary-color&#x27;</span>: <span class="string">&#x27;#1DA57A&#x27;</span> &#125;,</span><br><span class="line">            <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改在 index.js 引入的 css 为 less</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//import &#x27;antd/dist/antd.css&#x27;</span><br><span class="line">变成</span><br><span class="line">import &#x27;antd/dist/antd.less‘</span><br></pre></td></tr></table></figure>

<p><strong>配置别名</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">//导入自带的当前路径模块</span></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function">(<span class="params">dir</span>) =&gt;</span> path.resolve(__dirname, dir) <span class="comment">//当前路径(当前文件所在路径)拼接上传过来的dir路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">webpack</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="attr">components</span>: resolve(<span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="axios-库的使用"><a href="#axios-库的使用" class="headerlink" title="axios 库的使用"></a>axios 库的使用</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add axios</span><br></pre></td></tr></table></figure>

<h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure>

<p>常在 componentDidMount 里面发送网络请求</p>
<h4 id="测试网络请求的网站："><a href="#测试网络请求的网站：" class="headerlink" title="测试网络请求的网站："></a>测试网络请求的网站：</h4><blockquote>
<p><span class="exturl" data-url="aHR0cDovL2h0dHBiaW4ub3JnLw==">http://httpbin.org/<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<h4 id="axios-发送网络请求"><a href="#axios-发送网络请求" class="headerlink" title="axios 发送网络请求"></a>axios 发送网络请求</h4><p>不管怎么调用，最终都是使用 axios.request(config);来发送网络请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.axios发送基本的网络请求</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://httpbin.org/get&#x27;</span>, <span class="comment">//测试get请求,默认请求方式即为get</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="comment">//参数</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//post</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://httpbin.org/post&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="comment">//参数</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">40</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>, <span class="comment">//post请求时，此处必写，不可省略</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="comment">//参数</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lucy&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="使用用-await-和-async-发送网络请求"><a href="#使用用-await-和-async-发送网络请求" class="headerlink" title="使用用 await 和 async 发送网络请求"></a>使用用 await 和 async 发送网络请求</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">//await async 同步方式写异步代码</span></span><br><span class="line">  <span class="comment">//使用es7的await,所在函数前面必须写async</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> axios.post(<span class="string">&quot;http://httpbin.org/post&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;lucy&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//打印网络请求结果</span></span><br><span class="line">      <span class="built_in">console</span>.log(result);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//打印网络请求结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="axios-all：合并多个网络请求"><a href="#axios-all：合并多个网络请求" class="headerlink" title="axios.all：合并多个网络请求"></a>axios.all：合并多个网络请求</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios.all[request1, request2]</span></span><br><span class="line"><span class="keyword">const</span> request1 = axios(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://httpbin.org/get&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> request2 = axios(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://httpbin.org/post&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>, <span class="attr">age</span>: <span class="number">40</span> &#125;,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">axios.all([request1, request2]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//两个请求都有结果时会进行回调，本质就是promise.all</span></span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">axios.all([request1, request2]).then(<span class="function">(<span class="params">[res1, res2]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//数组解构接收结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(res1, res2)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;https://httpbin.org&#x27;</span> <span class="comment">//默认url</span></span><br><span class="line">axios.defaults.timeout = <span class="number">5000</span> <span class="comment">//请求过期时间</span></span><br><span class="line">axios.defaults.headers.common[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">&#x27;fdasfd&#x27;</span> <span class="comment">//给每一个请求配置一个token</span></span><br><span class="line">axios.defaults.headers.post[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/text&#x27;</span> <span class="comment">//给post请求配置Content-Type类型</span></span><br></pre></td></tr></table></figure>

<h4 id="创建新的实例"><a href="#创建新的实例" class="headerlink" title="创建新的实例"></a>创建新的实例</h4><p>请求的服务器地址，headers 等不一致时使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance1 = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&#x27;http://httpbin.org&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> instance2 = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//添加请求拦截</span></span><br><span class="line">    <span class="comment">//发送网络请求时，在界面中间显示loading组件</span></span><br><span class="line">    <span class="comment">//某些请求要求用户必须携带token，如果没有携带则跳转到登录界面</span></span><br><span class="line">    <span class="comment">//params/data序列化操作</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//响应拦截</span></span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; err.response) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (err.response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;请求错误&#x27;</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;未授权访问&#x27;</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;其它错误信息&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="二次封装"><a href="#二次封装" class="headerlink" title="二次封装"></a>二次封装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src -&gt; service -&gt; request.js, config.js</span></span><br><span class="line"><span class="comment">//config.js</span></span><br><span class="line"><span class="comment">//定义相关配置信息</span></span><br><span class="line"><span class="keyword">const</span> devBaseURL = <span class="string">&#x27;https://httpbin.org&#x27;</span> <span class="comment">//测试url</span></span><br><span class="line"><span class="keyword">const</span> proBaseURL = <span class="string">&#x27;https://production.org&#x27;</span> <span class="comment">//生产时的url</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> BASE_URL = process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? devBaseURL : proBaseURL</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TIMEOUT = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//request.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; BASE_URL, TIMEOUT &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span> <span class="comment">//导入配置相关信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: BASE_URL,</span><br><span class="line">  <span class="attr">timeout</span>: TIMEOUT,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance.interceptors.request.use(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//请求拦截</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求被拦截&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">instance.interceptors.response.use(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//响应拦截</span></span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance <span class="comment">//导出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在其他地方使用</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;service/request&#x27;</span></span><br><span class="line">request(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/get&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).then(<span class="built_in">console</span>.log)</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">return</span> request.post(<span class="string">&#x27;/login/admin&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">//管理员登录</span></span><br><span class="line">  <span class="attr">name</span>: uname,</span><br><span class="line">  <span class="attr">password</span>: pwd, <span class="comment">//发送数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="React-过渡动画"><a href="#React-过渡动画" class="headerlink" title="React 过渡动画"></a>React 过渡动画</h3><p>react-transition-group:</p>
<p>给一个组件的显示和消失添加过渡动画</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC8=">https://reactcommunity.org/react-transition-group/<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install react-transition-group --save</span><br><span class="line">yarn add react-transition-group</span><br></pre></td></tr></table></figure>

<h4 id="包含四个组件"><a href="#包含四个组件" class="headerlink" title="包含四个组件"></a>包含四个组件</h4><ul>
<li><p>Transition</p>
<p>和平台无关的组件(不一定要结合 css)</p>
</li>
<li><p>CSSTrasition</p>
<p>完成过渡动画效果，执行过程中有三个状态：appear、enter、exit</p>
<p>appear：第一次加载组件时执行的动画，与 enter 一样即可</p>
<p>enter：组件进入时执行的动画</p>
<p>exit：组件退出时执行的动画</p>
<p>他们有三种状态，需要定义对应的 css 样式</p>
<ol>
<li><p>开始状态，对应的类：-appear、-enter、-exit</p>
</li>
<li><p>执行动画，对应的类：-appear-active、-enter-active、-exit-active</p>
</li>
<li><p>执行结束，对应的类：-appear-done、-enter-done、-exit-done</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;./transition/CSSTransition.css&#x27;</span><br><span class="line">import &#123; CSSTransition &#125; from &quot;react-transition-group&quot;; //导入</span><br><span class="line">//1.将要做动画的组件包裹到CSSTransition里面</span><br><span class="line">&lt;CSSTransition</span><br><span class="line">  in=&#123;isShow&#125;   &#123;/* in:根据后面的boolean决定被CSSTransition包裹的组件显示和隐藏*/&#125;</span><br><span class="line">  classNames=&quot;card&quot;  &#123;/*classNames:对应的class*/&#125;</span><br><span class="line">  timeout=&#123;300&#125;    &#123;/*timeout: 控制class、unmountOnExit等出现消失的时间,最好与css动画里面的时间一致*/&#125;</span><br><span class="line">  unmountOnExit=&#123;true&#125;  &#123;/*unmountOnExit:动画退出时卸载掉该元素，删除组件*/&#125;</span><br><span class="line">  appear  &#123;/*appear:第一次进入网页或刷新页面时也显示动画(需要在css里面写动画)*/&#125;</span><br><span class="line">  onEnter=&#123;el =&gt; console.log(&quot;开始进入&quot;)&#125;</span><br><span class="line">  onEntering=&#123;el =&gt; console.log(&quot;正在进入&quot;)&#125;</span><br><span class="line">  onEntered=&#123;el =&gt; console.log(&quot;进入完成&quot;)&#125;</span><br><span class="line">  onExit=&#123;el =&gt; console.log(&quot;开始退出&quot;)&#125;</span><br><span class="line">  onExiting=&#123;el =&gt; console.log(&quot;退出状态&quot;)&#125;</span><br><span class="line">  onExited=&#123;el =&gt; console.log(&quot;退出完成&quot;)&#125;</span><br><span class="line">  &gt;</span><br><span class="line">	&lt;h2&gt;哈哈哈哈&lt;/h2&gt;</span><br><span class="line">&lt;/CSSTransition&gt;</span><br><span class="line">//2.添加对应属性</span><br><span class="line"></span><br><span class="line">//3.新建css文件，给对应的类加动画,如:</span><br><span class="line">.card-enter &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">  transform: scale(.6);</span><br><span class="line">&#125;</span><br><span class="line">.card-enter-active &#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">  transition:all .3s;</span><br><span class="line">  transform: scale(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>SwitchTransition</p>
<p>两个组件显示和隐藏切换时使用,主要有一个属性：mode，有两个值</p>
<ul>
<li><p>in-out:新组件先进入，旧组件再移除</p>
</li>
<li><p>out-in:旧组件先移除，新组件再进入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; SwitchTransition, CSSTransition &#125; from &#x27;react-transition-group&#x27;</span><br><span class="line">import &#x27;./SwitchTransition.css&#x27;</span><br><span class="line">&lt;SwitchTransition mode=&quot;out-in&quot;&gt;</span><br><span class="line">  &lt;CSSTransition key=&#123;isOn ? &quot;on&quot; : &quot;off&quot;&#125; classNames=&quot;btn&quot; timeout=&#123;1000&#125;&gt;</span><br><span class="line">	&lt;button onClick=&#123;e =&gt; this.setState(&#123;isOn: !isOn&#125;)&#125;&gt;&#123;isOn ? &quot;on&quot; : &quot;off&quot;&#125;&lt;/button&gt;</span><br><span class="line">	&#123;/*SwitchTransition里面包裹CSSTransition,再新建css文件写对应的动画*/&#125;</span><br><span class="line">	&lt;/CSSTransition&gt;</span><br><span class="line">&lt; /SwitchTransition&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>TransitionGroup</p>
<p>将多个动画组件包裹在其中，一般用于列表中元素的动画</p>
<p>TransitionGroup 里面的组件都要用 CSSTransition 包裹起来，否则会报警告</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;CSSTransition, TransitionGroup&#125; from &#x27;react-transition-group&#x27;</span><br><span class="line">import &#x27;./TransitionGroup.css&#x27;; //导入样式</span><br><span class="line">render() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    	&lt;TransitionGroup&gt;</span><br><span class="line">      &#123;/*整个组件使用TransitionGroup包括*/&#125;</span><br><span class="line">      &#123;</span><br><span class="line">        this.state.names.map((item, index) =&gt; &#123;</span><br><span class="line">          return (</span><br><span class="line">            &lt;CSSTransition key=&#123;index&#125; timeout=&#123;500&#125; classNames=&quot;item&quot;&gt;</span><br><span class="line">              &lt;div&gt; &#123;item&#125; &lt;/div&gt;</span><br><span class="line">              &#123;/*具体出现动画的部分使用CSSTransition包裹，列表key属性必须加*/&#125;</span><br><span class="line">            &lt;/CSSTransition&gt;</span><br><span class="line">          )</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    	&lt;/TransitionGroup&gt;</span><br><span class="line">    	&lt;button onClick=&#123;e =&gt; this.addName()&#125;&gt;+name&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">&#123;/*放到TransitionGroup里面的所有元素最外层都需要包裹一个CSSTransition*/&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>阮一峰：<span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMDkvcmVkdXhfdHV0b3JpYWxfcGFydF9vbmVfYmFzaWNfdXNhZ2VzLmh0bWw=">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html<i class="fa fa-external-link-alt"></i></span></p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9yZWR1eC5qcy5vcmcvdW5kZXJzdGFuZGluZy90aGlua2luZy1pbi1yZWR1eC9tb3RpdmF0aW9u">https://redux.js.org/understanding/thinking-in-redux/motivation<i class="fa fa-external-link-alt"></i></span></p>
<p>中文官网：<span class="exturl" data-url="aHR0cHM6Ly93d3cucmVkdXgub3JnLmNuLw==">https://www.redux.org.cn/<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="JS-纯函数"><a href="#JS-纯函数" class="headerlink" title="JS 纯函数"></a>JS 纯函数</h4><p>纯函数：相同的输入产生相同的输出，函数在执行过程中，不能产生副作用(不能对传入的参数进行修改)</p>
<p>react 中要求无论是函数还是 class 声明一个组件，这个组件必须像纯函数一样，保护他们的 props 不被修改</p>
<p><strong>所有 React 组件必须像纯函数一样保护他们的 props 不被修改</strong></p>
<p><strong>Redux</strong>：js 的状态容器，提供了可预测的状态管理</p>
<h4 id="核心理念"><a href="#核心理念" class="headerlink" title="核心理念"></a>核心理念</h4><p>固定地方存储数据</p>
<p>Redux 要求通过派发 action 来更新数据</p>
<ul>
<li>所有数据的变化，必须通过派发(dispach)action 更新</li>
<li>action 是一个普通的 js<strong>对象</strong>，用来描述这次更新的 type 和 content</li>
</ul>
<p>reducer：将 state 和 action 联系在一起</p>
<ul>
<li>reducer 是一个<strong>纯函数</strong></li>
<li>reducer 做的事情就是将传入的 state 和 action 结合起来生成一个新的 state</li>
</ul>
<h4 id="三大原则"><a href="#三大原则" class="headerlink" title="三大原则"></a>三大原则</h4><ol>
<li><strong>单一数据源</strong><ol>
<li>整个应用程序的 state 被存储在一颗 object tree 中，并且这个对象树只存储在一个 store 中</li>
<li>Redux 并没有强制让我们不能创建多个 Store，但是那样做并不利于数据的维护</li>
<li>单一的数据源可以让整个应用程序的 state 变得方便维护、追踪、修改</li>
</ol>
</li>
<li><strong>State 是只读的</strong><ol>
<li>唯一修改 state 是触发 action，不要在其它地方通过任何方式修改 state</li>
<li>这样确保了 View 或网络请求都不能直接修改 state，它们只能通过 action 来描述自己想要如何修改 state</li>
<li>这样可以保证所有的修改都被集中化处理，并且按照严格的顺序来执行，所以不需要担心 race condition(竟态:多个地方同时操作数据源)的问题</li>
</ol>
</li>
<li><strong>使用纯函数来执行修改</strong><ol>
<li>通过 reducer 将旧 state 和 action 联系在一起，并且返回一个新的 State</li>
<li>随着应用程序的复杂度增加，可以将 reducer 拆分成多个小的 reducers，分别操作不同的 state tree 的一部分</li>
<li>但是所有的 reducer 都应该是纯函数，不能产生任何的副作用</li>
</ol>
</li>
</ol>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p><strong>独立使用</strong></p>
<p>新建文件 package.json</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn init -y</span><br></pre></td></tr></table></figure>

<p>安装 redux</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add redux</span><br></pre></td></tr></table></figure>

<p>使用过程</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.导入redux(此处不能通过es6方式)</span></span><br><span class="line"><span class="comment">//commonjs的一种实现 --&gt; nodejs</span></span><br><span class="line"><span class="keyword">const</span> redux = <span class="built_in">require</span>(<span class="string">&#x27;redux&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="comment">//初始化数据</span></span><br><span class="line">  <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer	纯函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//第一次的时候没有值，使用初始化数据当作默认值</span></span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">counter</span>: state.counter + action.num &#125; <span class="comment">//解构原来的数据，再把原来的数据进行覆盖</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state <span class="comment">//如果没有匹配到，则默认返回原来的state</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//store(创建仓库的时候需要传入一个reducer) store.getState()获取store里面的状态</span></span><br><span class="line"><span class="keyword">const</span> store = redux.createStore(reducer)</span><br><span class="line"></span><br><span class="line"><span class="comment">//订阅store的修改(需要放在action前面)</span></span><br><span class="line">store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//只要数据发生改变就会回调此函数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;counter:&#x27;</span> + store.getState().counter)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//actions</span></span><br><span class="line"><span class="keyword">const</span> action1 = &#123; <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>, <span class="attr">num</span>: <span class="number">5</span> &#125;</span><br><span class="line"><span class="comment">//派发action会执行reducer函数，执行时传入前一个state</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//派发action，内部执行reducer函数</span></span><br><span class="line">store.dispatch(action1)</span><br></pre></td></tr></table></figure>

<p>node 对 es6 模块化的支持</p>
<p>node v13.2.0 之前：</p>
<ul>
<li><p>在 package.json 中添加属性：”type”:”module”;</p>
</li>
<li><p>在执行名字中添加如下选项:node –experimental-modules src/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;start&quot;</span>: <span class="string">&quot;node --experimental-modules index.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>node v13.2.0 之后：</p>
<ul>
<li>在 package.json 中添加属性：”type”:”module”;</li>
</ul>
<p><strong>拆分使用</strong></p>
<ul>
<li>index.js //使用 store</li>
<li>store<ul>
<li>actionCreators.js //放 action</li>
<li>constants.js //放各种常量</li>
<li>index.js //导出 store</li>
<li>reducer.js //放 reducer 函数</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//constants.js</span></span><br><span class="line"><span class="comment">//定义各种常量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_NUMBER = <span class="string">&quot;ADD_NUMBER&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//actionCreators.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ADD_NUMBER</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./constants.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addAction = <span class="function"><span class="params">num</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">type</span>: ADD_NUMBER,</span><br><span class="line">  num</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//reducer.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ADD_NUMBER</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./constants.js&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">  <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = defaultState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_NUMBER:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">counter</span>: state.counter + action.num&#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js 独立使用</span></span><br><span class="line"><span class="comment">//import redux from &#x27;redux&#x27;;</span></span><br><span class="line"><span class="comment">//import reducer from &#x27;./reducer.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const store = redux.createStore(reducer);</span></span><br><span class="line"><span class="comment">//export default store;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//与React结合使用</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外部index.js</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  addAction,</span><br><span class="line">  subAction</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./store/actionCreators.js&#x27;</span></span><br><span class="line"></span><br><span class="line">store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(store.getState());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">store.dispatch(addAction(<span class="number">10</span>));</span><br><span class="line">store.dispatch(addAction(<span class="number">15</span>));</span><br></pre></td></tr></table></figure>

<h4 id="与-React-项目结合使用"><a href="#与-React-项目结合使用" class="headerlink" title="与 React 项目结合使用"></a>与 React 项目结合使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; addAction &#125; <span class="keyword">from</span> <span class="string">&#x27;../store/actionCreators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">counter</span>: store.getState().counter,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//订阅</span></span><br><span class="line">    <span class="built_in">this</span>.unsubscribe = store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        <span class="attr">counter</span>: store.getState().counter,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//取消订阅</span></span><br><span class="line">    <span class="built_in">this</span>.unsubscribe()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数:&#123;this.state.counter&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.increment(1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.increment(5)&#125;&gt;+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">increment</span>(<span class="params">num</span>)</span> &#123;</span><br><span class="line">    store.dispatch(addAction(num))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="初步封装：connect🔖"><a href="#初步封装：connect🔖" class="headerlink" title="初步封装：connect🔖"></a>初步封装：connect🔖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &#x27;react&#x27;</span><br><span class="line">import store from &#x27;../store&#x27;    //导入依赖的store</span><br><span class="line"></span><br><span class="line">//将redux与组件所需要的东西连接在一起</span><br><span class="line">export function connect(mapStateToProps, mapDispatchToProps) &#123;  //导出一个高阶函数</span><br><span class="line">  return function enhanceHOC(WrappedComponent) &#123;  //返回一个函数为高阶组件</span><br><span class="line">    return class extends PureComponent &#123;  //返回另外一个组件</span><br><span class="line">      constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line"></span><br><span class="line">        this.state = &#123;  //返回的类组件依赖的状态刚好是map函数调用之后返回的对象里面所依赖的状态</span><br><span class="line">          storeState: mapStateToProps(store.getState())</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      componentDidMount() &#123;</span><br><span class="line">        this.unsubscribe  = store.subscribe(() =&gt; &#123; //订阅，数据发生改变时重新render,并将返回值赋值给this.unsubscribe</span><br><span class="line">          this.setState(&#123;</span><br><span class="line">            storeState: mapStateToProps(store.getState())</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      componentWillUnmount() &#123;</span><br><span class="line">        this.unsubscribe();  //取消订阅</span><br><span class="line">      &#125;</span><br><span class="line">      render() &#123;</span><br><span class="line">        return &lt;WrappedComponent &#123;...this.props&#125;</span><br><span class="line">               //把自己的props传给调用connect的组件(WrappedComponent)</span><br><span class="line">          &#123;...mapStateToProps(store.getState())&#125;</span><br><span class="line">                 //把当前对象的所有属性传到WrappedComponent组件</span><br><span class="line">          &#123;...mapDispatchToProps(store.dispatch)&#125;</span><br><span class="line">                 //传回dispatch函数</span><br><span class="line">        /&gt;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import &#123;connect&#125; from &#x27;../utils/connect&#x27;  //导入connect函数</span><br><span class="line">import &#123;addAction&#125; from &#x27;../store/actionCreators&#x27;   //导入依赖的action</span><br><span class="line"></span><br><span class="line">function Home2(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Home2&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;当前计数:&#123;props.counter&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; props.increment(1)&#125;&gt;+1&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; props.increment(5)&#125;&gt;+5&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">//connect(参数1, 参数2)(Home)</span><br><span class="line"></span><br><span class="line">const mapStateToProps = state =&gt; &#123;  //赋值为一个函数，把想要使用的state映射到props里面</span><br><span class="line">  return &#123;  //返回一个对象</span><br><span class="line">    counter: state.counter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">//只返回一个对象。可以简写：</span><br><span class="line">const mapDispatchToProps = (dispatch) =&gt; (&#123;   //把要映射的dispatch映射到props里面</span><br><span class="line">  addNumber(num) &#123;   //在组件按钮里面调用了这个方法</span><br><span class="line">    dispatch(addAction(num));</span><br><span class="line">  &#125;,</span><br><span class="line">  addNumber2: function(num) &#123;   //在组件按钮里面调用了这个方法</span><br><span class="line">    dispatch(addAction(num));</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(Home2);</span><br><span class="line">//调用connect，传进两个参数，本身是一个函数，可传一个组件进去，处理后返回一个高阶组件</span><br><span class="line"></span><br><span class="line">//类组件</span><br><span class="line">class Home extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Home3&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;当前计数: &#123;this.props.counter&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;(e) =&gt; this.props.addNumber(5)&#125;&gt;+5&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;(e) =&gt; this.props.addNumber(10)&#125;&gt;+10&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-context-二次封装"><a href="#使用-context-二次封装" class="headerlink" title="使用 context 二次封装"></a>使用 context 二次封装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &#x27;react&#x27;</span><br><span class="line">// import store from &#x27;../store&#x27;    //导入依赖的store</span><br><span class="line">import &#123;storeContext&#125; from &#x27;./context&#x27;  //导入context</span><br><span class="line"></span><br><span class="line">//将redux与组件所需要的东西连接在一起</span><br><span class="line">export function connect(mapStateToProps, mapDispatchToProps) &#123;  //返回一个高阶函数</span><br><span class="line">  return function enhanceHOC(WrappedComponent) &#123;  //返回一个函数为高阶组件</span><br><span class="line">    class EnhanceComponent extends PureComponent &#123;  //给返回的组件取名为EnhanceComponent</span><br><span class="line">      constructor(props, context) &#123; //传过来一个context</span><br><span class="line">        super(props, context);</span><br><span class="line"></span><br><span class="line">        this.state = &#123;  //返回的类组件依赖的状态刚好是map函数调用之后返回的对象里面所依赖的状态</span><br><span class="line">          storeState: mapStateToProps(context.getState())</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      componentDidMount() &#123;</span><br><span class="line">        this.unsubscribe  = this.context.subscribe(() =&gt; &#123; //订阅，数据发生改变时重新render,并将返回值赋值给this.unsubscribe</span><br><span class="line">          this.setState(&#123;</span><br><span class="line">            storeState: mapStateToProps(this.context.getState())</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      componentWillUnmount() &#123;</span><br><span class="line">        this.unsubscribe();  //取消订阅</span><br><span class="line">      &#125;</span><br><span class="line">      render() &#123;</span><br><span class="line">        return &lt;WrappedComponent &#123;...this.props&#125;</span><br><span class="line">                 //把自己的props传给调用connect的组件(WrappedComponent)</span><br><span class="line">          &#123;...mapStateToProps(this.context.getState())&#125;</span><br><span class="line">                 //把当前对象的所有属性传到WrappedComponent组件</span><br><span class="line">          &#123;...mapDispatchToProps(this.context.dispatch)&#125;</span><br><span class="line">                 //传回dispatch函数</span><br><span class="line">        /&gt;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    EnhanceComponent.contextType = storeContext;</span><br><span class="line">    //通过此方式可以在其它地方使用this.context拿到共享的value</span><br><span class="line">    return EnhanceComponent;  //返回组件</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//contxt.js</span><br><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">const storeContext = React.createContext();</span><br><span class="line">export &#123; storeContext &#125;</span><br><span class="line"></span><br><span class="line">//index.js</span><br><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactDOM from &#x27;react-dom&#x27;;</span><br><span class="line">import App from &#x27;./App&#x27;;</span><br><span class="line"></span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line">import &#123; StoreContext &#125; from &#x27;./utils/context&#x27;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;StoreContext.provider value=&#123;store&#125;&gt; &#123;/*通过context把store进行共享 */&#125;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/StoreContext.provider&gt;,</span><br><span class="line">  document.getElementById(&#x27;root&#x27;)</span><br><span class="line">);</span><br><span class="line">//其它地方使用方式不变</span><br></pre></td></tr></table></figure>

<h4 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h4><p><span class="exturl" data-url="aHR0cHM6Ly9yZWR1eC5qcy5vcmcvYmFzaWNzL3VzYWdlLXdpdGgtcmVhY3Q=">https://redux.js.org/basics/usage-with-react<i class="fa fa-external-link-alt"></i></span></p>
<p>把组件和 redux 结合起来(connect、provider 共享 store)</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install react-redux</span><br><span class="line">yarn add react-redux</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import ReactDOM from &#x27;react-dom&#x27;;</span><br><span class="line">import App from &#x27;./App&#x27;;</span><br><span class="line"></span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line">import &#123;Provider&#125; from &#x27;react-redux&#x27;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;  &#123;/*使用Provider，共享(传入)一个store */&#125;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  document.getElementById(&#x27;root&#x27;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">//在组件中使用</span><br><span class="line">import React, &#123; PureComponent &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; addAction &#125; from &quot;../store/actionCreators&quot;;</span><br><span class="line">import &#123;connect&#125; from &#x27;react-redux&#x27; //导入react-redux的connect函数</span><br><span class="line"></span><br><span class="line">class Home2 extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;HomeProvider&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;当前计数:&#123;this.props.counter&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;e =&gt; this.props.increment(1)&#125;&gt;+1&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;e =&gt; this.props.increment(5)&#125;&gt;+5&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//connect(参数1, 参数2)(Home)</span><br><span class="line"></span><br><span class="line">const mapStateToProps = state =&gt; &#123;  //赋值为一个函数，把想要使用的state映射到props里面</span><br><span class="line">  return &#123;  //返回一个对象</span><br><span class="line">    counter: state.counter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">const mapDispatchToProps = dispatch =&gt; &#123;  //把要映射的dispatch映射到props里面</span><br><span class="line">  return &#123; //返回一个对象</span><br><span class="line">    increment: function(num) &#123;  //在组件按钮里面调用了这个方法</span><br><span class="line">      dispatch(addAction(num));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(Home2);</span><br><span class="line">//调用connect，传进两个参数，本身是一个函数，可传一个组件进去，处理后返回一个高阶组件</span><br></pre></td></tr></table></figure>

<h4 id="组件中异步操作-redux-thunk"><a href="#组件中异步操作-redux-thunk" class="headerlink" title="组件中异步操作 redux-thunk"></a>组件中异步操作 redux-thunk</h4><p>网络测试接口</p>
<p><span class="exturl" data-url="aHR0cDovLzEyMy4yMDcuMzIuMzI6ODAwMC9ob21lL211bHRpZGF0YQ==">http://123.207.32.32:8000/home/multidata<i class="fa fa-external-link-alt"></i></span></p>
<p>网络请求流程(以前)：</p>
<p>组件 Component-&gt;componentDidMount-&gt;dispatch actions-&gt;reducer 处理-&gt;改变 store 的 state</p>
<p><strong>redux 中间件:redux-thunk</strong></p>
<p>在 redux 中进行异步操作，在 dispatch 的 action 和最终到达的 reducer 之间，扩展一些自己的代码</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add redux-thunk</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//store -&gt; index.js</span><br><span class="line">import &#123;createStore, applyMiddleware&#125; from &#x27;redux&#x27;; //导入应用中间件</span><br><span class="line">import thunkMiddleware from &#x27;redux-thunk&#x27;;  //引入中间件</span><br><span class="line"></span><br><span class="line">import reducer from &#x27;./reducer.js&#x27;</span><br><span class="line"></span><br><span class="line">//应用中间件</span><br><span class="line">// applyMiddleware(中间件1, 中间件2, …………) 可传入多个中间件</span><br><span class="line">//引入thunkMiddleware中间件</span><br><span class="line">const storeEnhancer =  applyMiddleware(thunkMiddleware);  //把返回值赋值</span><br><span class="line"></span><br><span class="line">const store = createStore(reducer, storeEnhancer);</span><br><span class="line"></span><br><span class="line">export default store;</span><br><span class="line"></span><br><span class="line">//actionCreators.js</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  CHANGE_BANNERS</span><br><span class="line">&#125; from &#x27;./constants.js&#x27;</span><br><span class="line"></span><br><span class="line">export const changeBannerAction = (banners) =&gt; (&#123;</span><br><span class="line">  type:CHANGE_BANNERS,</span><br><span class="line">  banners</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//redux-thunk中定义的action函数</span><br><span class="line">export const getHomeMultidata = (dispatch, getState) =&gt; &#123; //被主动调用时会传过来一个参数</span><br><span class="line">  //在此进行网络请求</span><br><span class="line">  axios(&#123;</span><br><span class="line">      url: &#x27;http://123.207.32.32:8000/home/multidata&#x27;</span><br><span class="line">    &#125;).then(res =&gt; &#123;</span><br><span class="line">      const data = res.data.data;</span><br><span class="line">      dispatch(changeBannerAction(data.banner.list)); //派发上面的action</span><br><span class="line">    &#125;);</span><br><span class="line">    //如果此次网络请求需要依赖原来redux里面的某个数据，可在此通过getState拿到store里面的state，获取里面相关数据</span><br><span class="line">  console.log(&quot;action函数中&quot;, dispatch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//reducer.js</span><br><span class="line">//不变</span><br><span class="line"></span><br><span class="line">//组件中：</span><br><span class="line">import React, &#123; PureComponent &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; getHomeMultidata &#125; from &quot;../store/actionCreators&quot;;</span><br><span class="line">import &#123; connect &#125; from &quot;react-redux&quot;; //导入react-redux的connect函数</span><br><span class="line">class Home2 extends PureComponent &#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.props.getHomeMultidata();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Banners&lt;/h1&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;this.props.banners.map((item, index) =&gt; &#123;</span><br><span class="line">            return &lt;li key=&#123;item.acm&#125;&gt;&#123;item.title&#125;&lt;/li&gt;;</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state) =&gt; &#123;</span><br><span class="line">  //赋值为一个函数，把想要使用的state映射到props里面</span><br><span class="line">  return &#123;</span><br><span class="line">    //返回一个对象</span><br><span class="line">    banners: state.banners</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">const mapDispatchToProps = (dispatch) =&gt; &#123;</span><br><span class="line">  //把要映射的dispatch映射到props里面</span><br><span class="line">  return &#123;</span><br><span class="line">    getHomeMultidata() &#123;</span><br><span class="line">      dispatch(getHomeMultidata); //传入一个函数,传入的函数之后会被主动调用</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(Home2);</span><br></pre></td></tr></table></figure>

<h4 id="redux-devtools"><a href="#redux-devtools" class="headerlink" title="redux-devtools"></a>redux-devtools</h4><p>浏览器插件</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3phbG1veGlzdXMvcmVkdXgtZGV2dG9vbHMtZXh0ZW5zaW9uI3VzYWdl">https://github.com/zalmoxisus/redux-devtools-extension#usage<i class="fa fa-external-link-alt"></i></span></p>
<p>在 redux 中集成 devtools 的中间件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//store -&gt; index.js</span><br><span class="line">import &#123;createStore, applyMiddleware, compose&#125; from &#x27;redux&#x27;; //导入应用中间件</span><br><span class="line">import thunkMiddleware from &#x27;redux-thunk&#x27;;  //引入中间件</span><br><span class="line"></span><br><span class="line">import reducer from &#x27;./reducer.js&#x27;</span><br><span class="line"></span><br><span class="line">//获取composeEnhancers函数</span><br><span class="line">const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;trace: true&#125;)  || compose; //trace: true 跟踪，显示代码在哪里变化的</span><br><span class="line"></span><br><span class="line">//应用中间件</span><br><span class="line">// applyMiddleware(中间件1, 中间件2, …………) 可传入多个中间件</span><br><span class="line">const storeEnhancer =  applyMiddleware(thunkMiddleware);  //把返回值赋值</span><br><span class="line"></span><br><span class="line">const store = createStore(reducer, composeEnhancers(storeEnhancer));//合并</span><br><span class="line"></span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure>

<p>trace:跟踪代码在哪里变化</p>
<h4 id="补充：ES6-中-generator-的使用"><a href="#补充：ES6-中-generator-的使用" class="headerlink" title="补充：ES6 中 generator 的使用"></a>补充：ES6 中 generator 的使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//generator:生成器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义生成器函数：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;Hello&#x27;</span> <span class="comment">//通过yield返回一个东西</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;World&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成器函数会返回一个iterator(迭代器)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> it = foo() <span class="comment">//拿到迭代器</span></span><br><span class="line"><span class="comment">//调用一次next，就会消耗一次迭代器</span></span><br><span class="line"><span class="keyword">const</span> res1 = it.next() <span class="comment">//使用迭代器，拿到生成里面返回的第一个东西</span></span><br><span class="line"><span class="comment">//res1 = &#123;value: &quot;Hello&quot;, done: false&#125;	done：迭代器里面返回的数据已经用完？</span></span><br><span class="line"><span class="comment">//第一次调用next，迭代器代码执行到第一个yield就会停止，后面代码不执行，后面以此类推</span></span><br><span class="line"><span class="comment">//调用一次迭代器，返回一个yield</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//generator和promise一起使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;1111&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//模拟网络请求</span></span><br><span class="line">      resolve(<span class="string">&#x27;Hello Generator&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(result) <span class="comment">//此处无法拿到网络请求的结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> it = bar()</span><br><span class="line">it.next().value.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//第一次调用yield拿到的是promise</span></span><br><span class="line">  it.next(res) <span class="comment">//把第一次yield的结果传进去，赋值给result</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a>redux-saga</h4><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add redux-saga</span><br></pre></td></tr></table></figure>

<p>使用(大型项目复杂的异步 action 常用)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//store -&gt; index.js</span><br><span class="line">import &#123;createStore, applyMiddleware, compose&#125; from &#x27;redux&#x27;; //导入应用中间件</span><br><span class="line">import thunkMiddleware from &#x27;redux-thunk&#x27;;  //引入thunk中间件</span><br><span class="line">import createSagaMiddleware from &#x27;redux-saga&#x27; //1.导入函数</span><br><span class="line">import reducer from &#x27;./reducer.js&#x27;</span><br><span class="line">import saga from &#x27;./saga&#x27;;  //2.导入生成器函数</span><br><span class="line"></span><br><span class="line">const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;trace: true&#125;) || compose;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const sagaMiddleware = createSagaMiddleware(); //3.创建sagaMiddleware中间件</span><br><span class="line">const storeEnhancer =  applyMiddleware(thunkMiddleware, sagaMiddleware);	//4.应用中间件</span><br><span class="line">const store = createStore(reducer, composeEnhancers(storeEnhancer));</span><br><span class="line"></span><br><span class="line">sagaMiddleware.run(saga); //5.传入导入的saga生成器函数，使sagaMiddleware生效</span><br><span class="line"></span><br><span class="line">export default store;</span><br><span class="line"></span><br><span class="line">//actionCreators.js</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import &#123;</span><br><span class="line">  FETCH_HOME</span><br><span class="line">&#125; from &#x27;./constants.js&#x27;</span><br><span class="line"></span><br><span class="line">//redux-saga拦截的action</span><br><span class="line">export const fetchHomeMultidataAction = &#123;	//组件中也是派发的此action</span><br><span class="line">  type:FETCH_HOME</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//store -&gt; saga.js</span><br><span class="line">import &#123;takeEvery, put, all&#125; from &#x27;redux-saga/effects&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import &#123; FETCH_HOME &#125; from &#x27;./constants&#x27;;  //导入要拦截的action</span><br><span class="line"></span><br><span class="line">import &#123; changeBannerAction &#125; from &#x27;./actionCreators&#x27;; //导入网络请求获取到数据后要派发的action</span><br><span class="line"></span><br><span class="line">function* fetchHomeMultidata(action) &#123;</span><br><span class="line">  //生成器函数,会将默认下的action传进来，action参数可省略</span><br><span class="line">  const res = yield axios.get(&quot;http://123.207.32.32:8000/home/multidata&quot;);  //网络请求,saga会将请求的结果返回</span><br><span class="line">  const banners = res.data.data.banner.list;</span><br><span class="line">  //有多个数据需要返回时，写多个yield</span><br><span class="line">  yield put(changeBannerAction(banners));	//把数据放进需要的action</span><br><span class="line">  yield put(changeBannerAction(banners));</span><br><span class="line">  //或者使用all方法</span><br><span class="line">  // yield all([</span><br><span class="line">  //   yield put(changeBannerAction(banners)),</span><br><span class="line">  //   yield put(changeBannerAction(banners))</span><br><span class="line">  // ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function* mySaga() &#123; //生成器函数</span><br><span class="line">  //takeLatest:一次只能监听一个对应的action，总是执行最后一个(如一个action发送多次，只会执行最后一次)</span><br><span class="line">  //takeEvery：每个都会被执行</span><br><span class="line">  //参数1：要拦截的action对应的type， 参数2：生成器函数，拦截type后执行</span><br><span class="line">  yield takeEvery(FETCH_HOME, fetchHomeMultidata);</span><br><span class="line">  //监听多个action</span><br><span class="line">  // yield all([</span><br><span class="line">  //   yield takeEvery(FETCH_HOME, fetchHomeMultidata),</span><br><span class="line">  //   yield takeEvery(FETCH_HOME, fetchHomeMultidata)</span><br><span class="line">  // ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default mySaga;	//导出生成器函数</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="reducer-拆分"><a href="#reducer-拆分" class="headerlink" title="reducer 拆分"></a>reducer 拆分</h4><p>目录结构：</p>
<ul>
<li>store<ul>
<li>counter //每个文件夹放自己的 store，文件夹不一定放在 store 下面<ul>
<li>actionCreators.js</li>
<li>constants.js</li>
<li>index.js</li>
<li>reducer.js</li>
</ul>
</li>
<li>……</li>
</ul>
</li>
<li>index.js //应用中间件</li>
<li>reducer.js //将多个 reducer 进行合并</li>
<li>saga.js</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//home -&gt; reducer.js</span><br><span class="line">import &#123; CHANGE_BANNERS &#125; from &#x27;./constants.js&#x27;;</span><br><span class="line">// 拆分homeReducer</span><br><span class="line">const initialHomeState = &#123;</span><br><span class="line">  banners: []</span><br><span class="line">&#125;</span><br><span class="line">function homeReducer(state = initialHomeState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case CHANGE_BANNERS:</span><br><span class="line">      return &#123; ...state, banners: action.banners &#125;;</span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default homeReducer;</span><br><span class="line"></span><br><span class="line">//home -&gt; index.js</span><br><span class="line">import reducer from &#x27;./reducer&#x27;;</span><br><span class="line">export &#123;</span><br><span class="line">  reducer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//store -&gt; reducer.js</span><br><span class="line">import &#123; reducer as counterReducer &#125; from &#x27;./counter&#x27;;</span><br><span class="line">import &#123; reducer as homeReducer &#125; from &#x27;./home&#x27;;</span><br><span class="line"></span><br><span class="line">import &#123; combineReducers &#125; from &#x27;redux&#x27;;  //合并多个reducer</span><br><span class="line"></span><br><span class="line">// function reducer(state = &#123;&#125;, action) &#123;</span><br><span class="line">//   return &#123;</span><br><span class="line">//     counterInfo: counterReducer(state.counterInfo, action),</span><br><span class="line">//     homeInfo: homeReducer(state.homeInfo, action)</span><br><span class="line">//   &#125;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">//reducer应该是一个什么类型? function</span><br><span class="line">const reducer = combineReducers(&#123;</span><br><span class="line">  counterInfo: counterReducer,</span><br><span class="line">  homeInfo: homeReducer</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default reducer;</span><br></pre></td></tr></table></figure>

<h4 id="React-中-state-管理"><a href="#React-中-state-管理" class="headerlink" title="React 中 state 管理"></a>React 中 state 管理</h4><ol>
<li>UI 相关的组件内部可以维护的状态，在组件内部自己来维护</li>
<li>大部分需要共享的状态(父子组件传递不需要 redux 管理)，都交给 redux 来管理和维护</li>
<li>从服务器请求的数据(包括请求的操作)，交给 redux 来维护</li>
</ol>
<h4 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h4><ul>
<li>通过 props 进行数据流的传递</li>
<li>Vue 和 React 中组件内部都有单项数据流的概念</li>
<li>Redux 中</li>
</ul>
<h4 id="ImmutableJS"><a href="#ImmutableJS" class="headerlink" title="ImmutableJS"></a>ImmutableJS</h4><p>解决数据可变性引起的问题</p>
<p>特点：只要修改了对象，就会返回一个新的对象(新的对象会进行结构共享以节约性能)，旧的对象不会发生改变</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add immutable</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map使用</span></span><br><span class="line"><span class="keyword">const</span> im = Immutable <span class="comment">//immutable赋值给im</span></span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>, <span class="attr">friend</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;James&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> infoIM = im.Map(info) <span class="comment">//对象转成Immutable对象，只会进行浅层转化</span></span><br><span class="line"><span class="comment">//Map,映射，对对象做转化时使用</span></span><br><span class="line"><span class="keyword">const</span> obj = infoIM</span><br><span class="line"><span class="keyword">const</span> infoIM2 = infoIM.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;why&#x27;</span>)</span><br><span class="line"><span class="comment">//修改name为why(实质是生成新的对象，并且会尽可能复用原来info里面的一些东西)</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.get(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">//kobe</span></span><br><span class="line"><span class="built_in">console</span>.log(infoIM2.get(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">//why</span></span><br><span class="line"><span class="comment">//List使用，把数组转化成Immutable对象</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> namesIM = im.List(names)</span><br><span class="line"><span class="keyword">const</span> arrIM = namesIM.set(<span class="number">0</span>, <span class="string">&#x27;why&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(namesIM.get(<span class="number">0</span>)) <span class="comment">//aaa</span></span><br><span class="line"><span class="built_in">console</span>.log(arrIM.get(<span class="number">0</span>)) <span class="comment">//why</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> infoIM = im.fromJS(info) <span class="comment">//只会进行深层转化，对象里面的对象也会被转化成Immutable对象</span></span><br></pre></td></tr></table></figure>

<h4 id="与-hooks-结合"><a href="#与-hooks-结合" class="headerlink" title="与 hooks 结合"></a>与 hooks 结合</h4><p>网络模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//network -&gt; remove.js 此处集中存放remove模块的所有网络请求</span><br><span class="line">import request from &#x27;./request&#x27;;</span><br><span class="line">export function getTopBanners() &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url:&#x27;/banner&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模块自己的 store:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//store -&gt; constants.js</span><br><span class="line">export const CHANGE_TOP_BANNERS = &quot;remove/CHANGE_TOP_BANNERS&quot;;</span><br><span class="line"></span><br><span class="line">//store -&gt; actions.js</span><br><span class="line">import * as actionTypes from &#x27;./constants&#x27;;</span><br><span class="line">import &#123; getTopBanners &#125; from &#x27;@/network/remove&#x27;; //导入网络模块请求数据的函数</span><br><span class="line">const changeTopBannerAction = (res) =&gt; (&#123;</span><br><span class="line">  type: actionTypes.CHANGE_TOP_BANNERS,</span><br><span class="line">  topBanners: res.banners</span><br><span class="line">&#125;);</span><br><span class="line">export const getTopBannerAction = () =&gt; &#123;</span><br><span class="line">  return dispatch =&gt; &#123;</span><br><span class="line">    getTopBanners().then(res =&gt; &#123;</span><br><span class="line">      console.log(res);</span><br><span class="line">      dispatch(changeTopBannerAction(res));</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//store -&gt; index.js</span><br><span class="line">import reducer from &#x27;./reducer&#x27;;</span><br><span class="line">export &#123; reducer &#125;</span><br><span class="line"></span><br><span class="line">//store -&gt; reducer.js</span><br><span class="line">import * as actionTypes from &#x27;./constants&#x27;;</span><br><span class="line"></span><br><span class="line">const defaultState = &#123;</span><br><span class="line">  topBanners: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function reducer(state = defaultState, action) &#123;</span><br><span class="line">  switch(action.type) &#123;</span><br><span class="line">    case actionTypes.CHANGE_TOP_BANNERS:</span><br><span class="line">      return &#123;...state, topBanners: action.topBanners &#125;;</span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default reducer;</span><br></pre></td></tr></table></figure>

<p>合并的 store：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//src -&gt; store -&gt; reducer.js</span><br><span class="line">import &#123; combineReducers &#125; from &#x27;redux&#x27;;</span><br><span class="line">import &#123;reducer as removeReducer&#125; from &#x27;../pages/admin/c-pages/remove/store&#x27;;//导入单独模块的reducer</span><br><span class="line">const reducers = combineReducers(&#123; //合并每一个模块的reducers</span><br><span class="line">  remove: removeReducer</span><br><span class="line">&#125;);</span><br><span class="line">export default reducers;</span><br><span class="line"></span><br><span class="line">//src -&gt; store -&gt; index.js</span><br><span class="line">import &#123; applyMiddleware, createStore, compose &#125; from &#x27;redux&#x27;;</span><br><span class="line">import thunk from &#x27;redux-thunk&#x27;;</span><br><span class="line"></span><br><span class="line">import reducer from &#x27;./reducer&#x27;; //导入合并的reducer</span><br><span class="line"></span><br><span class="line">const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  || compose;</span><br><span class="line"></span><br><span class="line">const store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));</span><br><span class="line"></span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//App.js共享</span><br><span class="line">import &#123; Provider &#125; from &quot;react-redux&quot;;</span><br><span class="line">import store from &quot;./store&quot;;</span><br><span class="line">return (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;  &#123;/*使用Provider共享store */&#125;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line">//在组件里使用(remove -&gt; index.js)</span><br><span class="line">import React, &#123; memo, useEffect &#125; from &#x27;react&#x27;</span><br><span class="line">import &#123; shallowEqual, useDispatch, useSelector &#125; from &#x27;react-redux&#x27;</span><br><span class="line">import &#123; getTopBannerAction &#125; from &#x27;./store/actions&#x27;; //导入要派发的action</span><br><span class="line"></span><br><span class="line">export default memo(function Remove() &#123;</span><br><span class="line">  //组件和redux关联，获取数据和进行操作</span><br><span class="line">  const &#123; topBanners &#125; = useSelector(state =&gt; (&#123;</span><br><span class="line">    topBanners: state.remove.topBanners</span><br><span class="line">  &#125;), shallowEqual); // 浅层比较</span><br><span class="line">  const dispatch = useDispatch(); //通过hooks拿到dispatch对象</span><br><span class="line"></span><br><span class="line">  //发送网络请求</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    dispatch(getTopBannerAction()); //派发action</span><br><span class="line">  &#125;, [dispatch]);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      删除</span><br><span class="line">      &#123;topBanners.length&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="ImmutableJS-优化性能"><a href="#ImmutableJS-优化性能" class="headerlink" title="ImmutableJS 优化性能"></a>ImmutableJS 优化性能</h4><p>在模块自己的 reducer 中使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Map &#125; from &#x27;immutable&#x27;;	//浅层转化,深层转化用fromJS</span><br><span class="line">const defaultState = Map(&#123;	//使用Immutable包裹数据,使其转化为immutable对象</span><br><span class="line">  currentSong: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">function reducer(state = defaultState, action) &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case actionTypes.CHANGE_CURRENT_SONG:</span><br><span class="line">      return state.set(&quot;currentSong&quot;, action.currentSong); //修改数据</span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default reducer;</span><br><span class="line"></span><br><span class="line">//在其他地方取数据</span><br><span class="line">const &#123; curSong &#125; = useSelector(state =&gt; (&#123;</span><br><span class="line">  curSong: state.getIn([&quot;recommend&quot;, &quot;currentSong&quot;]);//先取第一层recommend,再取第二层currentSong</span><br><span class="line">  curSong: state.get(&quot;recommend&quot;).get(&quot;currentSong&quot;); //另一种取数据方式</span><br><span class="line">&#125;), shallowEqual);</span><br></pre></td></tr></table></figure>

<p>安装 redux-immutable：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add immutable 		#先安装immutable</span><br><span class="line">yarn add redux-immutable</span><br></pre></td></tr></table></figure>

<p>合并 reducer 写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在合并reducer的reducer.js中</span><br><span class="line">//需要安装redux-immutable</span><br><span class="line">import &#123; combineReducers &#125; from &#x27;redux-immutable&#x27;;</span><br><span class="line"></span><br><span class="line">import &#123; reducer as recommendReducer &#125; from &#x27;pages/discover/c-pages/recommend/store&#x27;;</span><br><span class="line"></span><br><span class="line">const cReducer = combineReducers(&#123;</span><br><span class="line">  recommend: recommendReducer</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default cReducer;</span><br></pre></td></tr></table></figure>

<h4 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h4><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add redux-persist</span><br><span class="line">yarn add redux-persist-transform-immutable</span><br></pre></td></tr></table></figure>

<p>src -&gt; store -&gt; reducer.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// import &#123; combineReducers &#125; from &#x27;redux-immutable&#x27;;</span><br><span class="line">import &#123; combineReducers &#125; from &#x27;redux&#x27;; //此处不能再使用immutable对象，否则会报错</span><br><span class="line"></span><br><span class="line">import &#123;reducer as removeReducer&#125; from &#x27;../pages/admin/c-pages/remove/store&#x27;;</span><br><span class="line">import &#123;reducer as adminReducer&#125; from &#x27;../pages/admin-login/store&#x27;;</span><br><span class="line"></span><br><span class="line">const reducers = combineReducers(&#123; //合并每一个模块的reducers</span><br><span class="line">  remove: removeReducer,</span><br><span class="line">  admin: adminReducer</span><br><span class="line">&#125;);</span><br><span class="line">export default reducers;</span><br></pre></td></tr></table></figure>

<p>src -&gt; store -&gt; index.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; applyMiddleware, createStore, compose &#125; from &#x27;redux&#x27;;</span><br><span class="line">import thunk from &#x27;redux-thunk&#x27;;</span><br><span class="line">import &#123;persistStore, persistReducer&#125; from &#x27;redux-persist&#x27;;</span><br><span class="line">import storageSession from &#x27;redux-persist/lib/storage/session&#x27;;</span><br><span class="line">import immutableTransform from &quot;redux-persist-transform-immutable&quot;;</span><br><span class="line"></span><br><span class="line">import reducer from &#x27;./reducer&#x27;; //导入合并的reducer</span><br><span class="line"></span><br><span class="line">const storageConfig = &#123;</span><br><span class="line">  transforms: [immutableTransform()], //告知有immutable对象，</span><br><span class="line">  key: &#x27;root&#x27;,</span><br><span class="line">  storage: storageSession, //缓存机制</span><br><span class="line">  blacklist: [] //reducer里不持久化的数据(可以省略)，除此以外均为持久化数据</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const myPersistReducer = persistReducer(storageConfig, reducer);</span><br><span class="line"></span><br><span class="line">const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  || compose;</span><br><span class="line"></span><br><span class="line">const store = createStore(myPersistReducer, composeEnhancers(applyMiddleware(thunk)));</span><br><span class="line"></span><br><span class="line">export const persistor = persistStore(store);</span><br><span class="line">export default store;</span><br></pre></td></tr></table></figure>

<p>src -&gt; App.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; PersistGate &#125; from &#x27;redux-persist/integration/react&#x27;</span><br><span class="line">import store, &#123;persistor&#125; from &quot;./store&quot;;</span><br><span class="line"></span><br><span class="line">&lt;Provider store=&#123;store&#125;&gt;  &#123;/*使用Provider共享store */&#125;</span><br><span class="line">	&lt;PersistGate loading=&#123;null&#125; persistor=&#123;persistor&#125;&gt;</span><br><span class="line">		&lt;BrowserRouter&gt;</span><br><span class="line">			&lt;Suspense&gt;</span><br><span class="line">				&#123;renderRoutes(routes)&#125;</span><br><span class="line">			&lt;/Suspense&gt;</span><br><span class="line">		&lt;/BrowserRouter&gt;</span><br><span class="line">	&lt;/PersistGate&gt;</span><br><span class="line">&lt;/Provider&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><p>SSR(server side render):服务端完成页面的渲染，服务器渲染</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9yZWFjdHJvdXRlci5jb20v">https://reactrouter.com/<i class="fa fa-external-link-alt"></i></span></p>
<p>前端路由核心：</p>
<ol>
<li><p>改变 URL，但是页面不要进行强制刷新(a 元素不行)</p>
<ol>
<li><p>通过 URL 的 hash 改变 URL</p>
<ul>
<li><p>锚点，本质上是改变 window.location 的 href 属性</p>
<p>监听 hash 改变：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//监听hash地址发生改变</span></span><br><span class="line">  <span class="built_in">console</span>.log(location.hash) <span class="comment">//打印根目录后面的hash地址</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>通过 HTML5 中的 history 模式修改 URL</p>
<ul>
<li><p>replaceState:替换原来的路径</p>
</li>
<li><p>pushState:使用新的路径</p>
</li>
<li><p>popState:路径的回退</p>
</li>
<li><p>go:向前或向后改变路径</p>
</li>
<li><p>forward:向前改变路径</p>
</li>
<li><p>back:向后改变路径</p>
<p>监听 history 的改变</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">aEls.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  el.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault() <span class="comment">//阻止a标签的默认事件：点击跳转新页面，x</span></span><br><span class="line">    <span class="keyword">const</span> href = el.getAttribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    history.pushState(&#123;&#125;, <span class="string">&#x27;&#x27;</span>, href) <span class="comment">//携带的data    传过去的title     url</span></span><br><span class="line">    urlChange()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(location.pathname) <span class="comment">//获取根后面的路径，如/home、/about</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventLinstener(<span class="string">&#x27;popstate&#x27;</span>, urlChange) <span class="comment">//监听返回操作</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>自己来监听 URL 的改变，并且改变之后自己改变页面的内容</p>
</li>
</ol>
<p>React Router 的版本 4 开始，路由不再集中在一个包中进行管理了：</p>
<p>react-router 是 router 的核心部分代码</p>
<p>react-router-dom 是用于核心浏览器的</p>
<p>react-router-native 是用于原生应用的</p>
<h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add react-router-dom</span><br><span class="line"><span class="meta">#</span><span class="bash">安装react-router-dom会自动安装react-router的依赖</span></span><br></pre></td></tr></table></figure>

<h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><ul>
<li>BrowserRouter 或 HashRouter(用于包裹 link、NavLink 和 Route)<ul>
<li>Router 中包含了对路径改变的监听，并且会将相应的路径传递给子组件</li>
<li>BrowserRouter 使用 history 模式</li>
<li>HashRouter 使用 hash 模式</li>
</ul>
</li>
<li>Link 和 NavLink<ul>
<li>通常路径的跳转是使用 Link 组件，最终会被渲染成 a 元素</li>
<li>NavLink 是在 Link 基础之上增加了一些样式属性</li>
<li>to 属性：Link 中最重要的属性，用于设置跳转到的路径</li>
<li>用户点击 Link 跳转到对应的 Route 里面</li>
<li>Link 都会在页面中显示(渲染成 a 标签)</li>
</ul>
</li>
<li>Route<ul>
<li>Route 用于路径的匹配，匹配上就渲染 Route 里面的组件</li>
<li>path 属性：用于设置匹配到的路径</li>
<li>component 属性：设置匹配到路径后，渲染的组件(内写组件名)</li>
<li>exact：精准匹配，只有精准匹配到完全一致的路径，才会渲染对应的组件</li>
<li>一堆 Route，只有匹配上的才会被渲染</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; PureComponent &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123; BrowserRouter, Link, Route &#125; from &#x27;react-router-dom&#x27;;</span><br><span class="line">import About from &#x27;./pages/about&#x27;;</span><br><span class="line">import Home from &#x27;./pages/home&#x27;;</span><br><span class="line">import Profile from &#x27;./pages/profile&#x27;;</span><br><span class="line">export default class App extends PureComponent &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;BrowserRouter&gt;</span><br><span class="line">          &lt;Link to=&quot;/&quot;&gt;首页&lt;/Link&gt;</span><br><span class="line">          &lt;Link to=&quot;/about&quot;&gt;关于&lt;/Link&gt;</span><br><span class="line">          &lt;Link to=&quot;/profile&quot;&gt;我的&lt;/Link&gt;</span><br><span class="line">          &#123;/*Link可新建js文件产生数组，然后循环产生Link*/&#125;</span><br><span class="line"></span><br><span class="line">          &lt;Route exact path=&quot;/&quot; component=&#123;Home&#125;/&gt; &#123;/*精准匹配时,路径只有/,才会渲染此组件(防止其它路径包含/也渲染)*/&#125;</span><br><span class="line">          &#123;/*精准匹配/*/&#125;</span><br><span class="line">          &lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</span><br><span class="line">          &lt;Route path=&quot;/profile&quot; component=&#123;Profile&#125;/&gt;</span><br><span class="line">        &lt;/BrowserRouter&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="NavLink、Route-补充"><a href="#NavLink、Route-补充" class="headerlink" title="NavLink、Route 补充"></a>NavLink、Route 补充</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; NavLink &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">&lt;NavLink exact to=&quot;/profile&quot; activeStyle=&#123;&#123;color: &#x27;red&#x27;&#125;&#125;&gt;我的&lt;/NavLink&gt; &#123;/*内联样式*/&#125;</span><br><span class="line">&#123;/*路由被选中时颜色变为红色(活跃时匹配的样式)*/&#125; &#123;/*exact:只有精确匹配的时候才会把它当成活跃的*/&#125;</span><br><span class="line"></span><br><span class="line">&#123;/*NavLink处于活跃时自带class：active*/&#125;</span><br><span class="line">&lt;NavLink to=&quot;/profile&quot; activeClassName=&quot;link-active&quot;&gt;我的&lt;/NavLink&gt;</span><br><span class="line">&#123;/*自定义处于活跃的路由的class名字为link-active*/&#125;</span><br><span class="line"></span><br><span class="line">&lt;Switch&gt;</span><br><span class="line">	&lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</span><br><span class="line">  &lt;Route path=&quot;/profile&quot; component=&#123;Profile&#125;/&gt;</span><br><span class="line">  &lt;Route component=&#123;NoMatch&#125;/&gt; &#123;/*没有匹配到路由时，渲染组件NoMatch*/&#125;</span><br><span class="line">&lt;/Switch&gt;</span><br><span class="line">&#123;/*Switch：需导入，排它，从上往下只匹配一个路由,主要用于定义路径和组件之间的映射关系*/&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h4><p>用于路由重定向，当这个组件出现时，就会跳转到对应的 to 路径中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Redirect &#125; from &#x27;react-router-dom&#x27;; // 路由重定向组件</span><br><span class="line">render() &#123;</span><br><span class="line">  return this.state.isLogin ? (	//如果没有登录，跳转到/login路由</span><br><span class="line">  	&lt;div&gt;</span><br><span class="line">    	&lt;h2&gt;User&lt;/h2&gt;</span><br><span class="line">      &lt;h2&gt;用户名：coderwhy&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  ) : &lt;Redirect to=&quot;/login&quot; /&gt; &#123;/*不满足会跳转到这个路径，匹配Route里path对应的组件*/&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//about.js about组件内</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;NavLink exact to=&quot;/about&quot; activeClassName=&quot;about-active&quot;&gt;企业历史&lt;/NavLink&gt;</span><br><span class="line">  &lt;NavLink exact to=&quot;/about/culture&quot; activeClassName=&quot;about-active&quot;&gt;企业文化&lt;/NavLink&gt;</span><br><span class="line">  &lt;NavLink exact to=&quot;/about/contact&quot; activeClassName=&quot;about-active&quot;&gt;联系我们&lt;/NavLink&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Switch&gt; &#123;/*定义路径和组件之间的映射关系*/&#125;</span><br><span class="line">    &lt;Route exact path=&quot;/about&quot; component=&#123;AboutHisotry&#125;/&gt;</span><br><span class="line">    &#123;/*在about路由下，默认显示的子路由，精确匹配*/&#125;</span><br><span class="line">    &#123;/*以下路由为about的子路由，则需要在path里面加上/about*/&#125;</span><br><span class="line">    &lt;Route path=&quot;/about/culture&quot; component=&#123;AboutCulture&#125;/&gt;</span><br><span class="line">    &lt;Route path=&quot;/about/contact&quot; component=&#123;AboutContact&#125;/&gt;</span><br><span class="line">    &lt;Route path=&quot;/about/join&quot; component=&#123;AboutJoin&#125;/&gt;</span><br><span class="line">  &lt;/Switch&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="手动路由跳转"><a href="#手动路由跳转" class="headerlink" title="手动路由跳转"></a>手动路由跳转</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;e =&gt; this.aaa()&#125;&gt;加入我们&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">aaa() &#123;</span><br><span class="line">	this.props.history.push(&quot;/about/join&quot;);	//跳转</span><br><span class="line">  //通过路由渲染出来的组件才能使用以上方法进行路由跳转</span><br><span class="line">&#125;</span><br><span class="line">ul&gt;li&#123;商品列表$&#125;*5</span><br><span class="line"></span><br><span class="line">//非路由渲染组件如果要使用this.props.history方法：要使其有history属性</span><br><span class="line">//1.在用这个组件的地方使用BrowserRouter包裹</span><br><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">	&lt;User /&gt;</span><br><span class="line">&lt;/BrowserRouter&gt;</span><br><span class="line">//2.在组件里面导出组件时使用withRouter包裹···············</span><br><span class="line">import &#123;withRouter&#125; from &#x27;react-router-dom&#x27;</span><br><span class="line">export default withRouter(User)</span><br></pre></td></tr></table></figure>

<h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><ul>
<li><p>动态路由(传简单数据)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const id = &#x27;abc&#x27;;	//定义id</span><br><span class="line"></span><br><span class="line">&lt;NavLink to=&#123;`/detail/$&#123;id&#125;`&#125;&gt;&lt;/NavLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;Route path=&quot;/detail/:id&quot; component=&#123;Detail&#125;/&gt;</span><br><span class="line"></span><br><span class="line">//detail.js组件里面拿到传过来的参数</span><br><span class="line">w</span><br></pre></td></tr></table></figure></li>
<li><p>search 传递参数(React 不推荐)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;NavLink to=&#123;`/detail?name=why&amp;age=18`&#125;&gt;&lt;/NavLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;Route path=&quot;/detail&quot; component=&#123;Detail&#125;/&gt;</span><br><span class="line"></span><br><span class="line">//detail.js里面拿到传过来的参数</span><br><span class="line">this.props.location.search // ?name=why&amp;age=18 需要自己解析参数</span><br><span class="line">//JSON.stringify   JSON.parse</span><br></pre></td></tr></table></figure></li>
<li><p>Link 中 to 传入对象(传复杂数据)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const info = &#123;name: &quot;why&quot;, age: 18, height: 1.88&#125;;</span><br><span class="line"></span><br><span class="line">&lt;NavLink to=&#123;&#123;	//to属性跟上一个对象</span><br><span class="line">    pathname: &quot;/detail&quot;, //必传，告诉跳转到哪个路径</span><br><span class="line">    search: &quot;?name=abc&quot;,	//会拼接到路径后面</span><br><span class="line">    hash:&quot;#the-hash&quot;, //当路径使用hash模式时传</span><br><span class="line">    state:info //传复杂的数据</span><br><span class="line">  &#125;&#125;&gt;&lt;/NavLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;Route path=&quot;/detail&quot; component=&#123;Detail&#125;/&gt;</span><br><span class="line"></span><br><span class="line">//手动跳转路由时传递复杂参数</span><br><span class="line">props.history.push(&#123;</span><br><span class="line">	pathname: &quot;/settle&quot;,</span><br><span class="line">	state: mulSettleInfo</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//detail.js里面拿到传过来的参数</span><br><span class="line">this.props.location.state // 接收传过来的对象</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="统一管理路由映射关系"><a href="#统一管理路由映射关系" class="headerlink" title="统一管理路由映射关系"></a>统一管理路由映射关系</h4><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add react-router-config</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<ol>
<li><p>在 src 下新建文件夹 router</p>
</li>
<li><p>在 router 下新建文件 index.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;； //路由重定向使用了jsx语法，所以需要导入</span><br><span class="line">import &#123; Redirect &#125; from &#x27;react-router-dom&#x27;; // 路由重定向组件</span><br><span class="line"></span><br><span class="line">import Home from &#x27;../pages/home&#x27;;</span><br><span class="line">import Profile from &#x27;../pages/profile&#x27;;</span><br><span class="line">import About from &#x27;../pages/about&#x27;;</span><br><span class="line">import &#123; AboutHisotry, AboutContact &#125; from &#x27;../pages/about&#x27;;</span><br><span class="line"></span><br><span class="line">const routes = [  //存放映射关系</span><br><span class="line">//  &#123;</span><br><span class="line"> //   path: &quot;/&quot;,  //路径</span><br><span class="line"> //   exact: true,</span><br><span class="line">  //  component: Home  //对应的组件</span><br><span class="line"> // &#125;,</span><br><span class="line">  &#123; // 从根路径进入时使其渲染指定的组件</span><br><span class="line">    path: &quot;/&quot;,</span><br><span class="line">    exact: true, //精确匹配</span><br><span class="line">    render: () =&gt; ( // 路由重定向,小括号</span><br><span class="line">      &lt;Redirect to=&quot;/home&quot; /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &quot;/about&quot;,</span><br><span class="line">    component: About,</span><br><span class="line">    routes: [ //配置子路由</span><br><span class="line">      &#123;</span><br><span class="line">        path: &quot;/about&quot;,  //默认子路由</span><br><span class="line">        exact: true,</span><br><span class="line">        render: () =&gt; (</span><br><span class="line">      		&lt;Redirect to=&quot;/about/contact&quot; /&gt;</span><br><span class="line">    		)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &quot;/about/contact&quot;,</span><br><span class="line">        component: AboutContact</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &quot;/profile&quot;,</span><br><span class="line">    component: Profile</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &quot;/detail&quot;,</span><br><span class="line">    component: Detail</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">export default routes;</span><br></pre></td></tr></table></figure></li>
<li><p>在其他文件使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; renderRoutes &#125; from &#x27;react-router-config&#x27;;</span><br><span class="line">import routes from &#x27;./router&#x27;;	//导入路由</span><br><span class="line">&#123;renderRoutes(routes)&#125; //渲染路由</span><br><span class="line"></span><br><span class="line">//有子路由时，即在about里面使用时</span><br><span class="line">&#123;renderRoutes(this.props.route.routes)&#125;  &#123;/*只有父组件通过renderRoutes渲染时才有this.props.route这个属性，switch渲染时没有*/&#125;</span><br><span class="line">//有子路由时，函数组件：</span><br><span class="line">&#123;renderRoutes(props.route.routes)&#125;	&#123;/* 代替一大堆的&lt;Route /&gt;,上面的Link还是要写 */&#125;</span><br><span class="line"></span><br><span class="line">//返回匹配到的所有分支</span><br><span class="line">matchRoutes(this.props.route.routes, &quot;/about&quot;);</span><br><span class="line">//参数1：数组， 参数2：要匹配的路由  从数组路面查找匹配/about的路由</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;lazy&#125; from &quot;react&quot;</span><br><span class="line"></span><br><span class="line">//const Profile = React.lazy(() =&gt; import(&quot;pages/profile&quot;));	不解构lazy</span><br><span class="line">const Profile = lazy(_ =&gt; import(&quot;pages/profile&quot;));</span><br><span class="line">const Profile = lazy(() =&gt; import(&quot;pages/profile&quot;));</span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &quot;/profile&quot;,</span><br><span class="line">    component: Profile</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">export default routes;</span><br><span class="line"></span><br><span class="line">//在其他地方使用</span><br><span class="line">import React, &#123; Suspense &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123; renderRoutes &#125; from &#x27;react-router-config&#x27;;</span><br><span class="line">&lt;Suspense fallback=&#123;&lt;div&gt;page loading&lt;/div&gt;&#125;&gt; &#123;/*懒加载外面必须用Suspense组件包裹*/&#125;</span><br><span class="line">  &#123;renderRoutes(routes)&#125; &#123;/*需要使用BrowserRouter包裹*/&#125;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">//组件加载较慢时就展示fallback里面的page loading</span><br></pre></td></tr></table></figure>

<h3 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h3><p><strong>Hook</strong>(钩子):React16.8 新特性，可以让我们在不编写 class 的情况下使用 state 以及其他的 React 特性(如生命周期**)**；</p>
<p>可以代替之前所有使用 class 组件的地方；只能在函数组件中使用</p>
<p>使用 useState 改变后无法立即获取最新的值，可使用 useRef 代替 useState(暂时解决办法)</p>
<p><strong>class 组件存在的缺点</strong></p>
<ul>
<li>复杂组件变得难以理解</li>
<li>难以理解的 class(this 指向)</li>
<li>组件复用状态很难</li>
</ul>
<h4 id="体验-useState"><a href="#体验-useState" class="headerlink" title="体验 useState"></a>体验 useState</h4><p>usestate：用于函数式组件保存状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">export default function CounterHook() &#123;</span><br><span class="line">  //Hook: rfc快捷键生成函数组件</span><br><span class="line">  // useState:本身是一个函数，来自react包,需以解构方式导入</span><br><span class="line">  //有参数和返回值</span><br><span class="line">  //参数：给创建出来的状态一个默认值,不设置为undefined</span><br><span class="line">  //返回一个有两个值的数组</span><br><span class="line">  // 返回值1，当前状态的值(第一次调用时为初始化值)</span><br><span class="line">  //返回值2，给状态设置新的值时使用的一个函数,改变count的值时调用此函数即可</span><br><span class="line">  const [count, setCount] = useState(0); //解构返回值数组,返回值的名字为自定义</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;CounterHook&lt;/h2&gt;</span><br><span class="line">        当前计数：&lt;h2&gt;&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;e =&gt; setCount(count + 1)&#125;&gt;+1&lt;/button&gt; &#123;/*点击时将原来的count变量的值加1*/&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-hook-两个额外的原则"><a href="#使用-hook-两个额外的原则" class="headerlink" title="使用 hook 两个额外的原则"></a>使用 hook 两个额外的原则</h4><ul>
<li><p>只能在函数最外层调用 Hook。不要在循环、条件判断、子函数中使用</p>
</li>
<li><p>只能在 React 的函数组件中调用 Hook，不要在其它 JavaScript 函数中调用</p>
<p>在普通函数里面不能使用 Hooks，只能在自定义 Hook 的函数里面使用</p>
</li>
</ul>
<h4 id="使用多个状态"><a href="#使用多个状态" class="headerlink" title="使用多个状态"></a>使用多个状态</h4><p>多个状态使用多个 useState 即可</p>
<p>可输入 useState,然后选择 vscode 安装的插件的代码块快速创建 state</p>
<p>先输入 state 名字，再按 tab 输入初始化值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">export default function MultiHookState() &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  const [age, setAge] = useState(18);</span><br><span class="line">  const [friends, setFriends] = useState([&quot;kobe&quot;, &quot;lilei&quot;]); //复杂状态</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;当前计数：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;h2&gt;我的年龄：&#123;age&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          friends.map((el, index) =&gt; &#123;</span><br><span class="line">            return &lt;li key=&#123;index&#125;&gt;&#123;el&#125;&lt;/li&gt;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改复杂状态"><a href="#修改复杂状态" class="headerlink" title="修改复杂状态"></a>修改复杂状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function ComplexHookState() &#123;</span><br><span class="line">  const [friends, setFriends] = useState([&quot;kobe&quot;, &quot;lilei&quot;]);</span><br><span class="line">  const [students, setStudents] = useState([</span><br><span class="line">    &#123;id: 110, name: &quot;why&quot;, age: 18&#125;,</span><br><span class="line">    &#123;id: 111, name: &quot;ysj&quot;, age: 22&#125;,</span><br><span class="line">    &#123;id: 112, name: &quot;kobe&quot;, age: 40&#125;,</span><br><span class="line">    &#123;id: 113, name: &quot;lilei&quot;, age: 20&#125;,</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">  function incrementAgeWithIndex(index) &#123;</span><br><span class="line">    const newStudents = [...students]; //创建新的对象，将原来的数据拷贝，赋值给新的对象</span><br><span class="line">    newStudents[index].age += 1; //修改新对象</span><br><span class="line">    setStudents(newStudents); //将新对象传入setStudents</span><br><span class="line"></span><br><span class="line">    &#123;/*setState可以传入一个函数*/&#125;</span><br><span class="line">    setCount((preCount) =&gt; preCount + 10);</span><br><span class="line">    //传入一个函数，拿到前一次的值，加10,返回加后的值</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;好友列表&lt;/h2&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          friends.map((el, index) =&gt; &#123;</span><br><span class="line">            return &lt;li key=&#123;index&#125;&gt;&#123;el&#125;&lt;/li&gt;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;button onClick=&#123;el =&gt; setFriends([...friends, &quot;tom&quot;])&#125;&gt;增加好友&lt;/button&gt;</span><br><span class="line">      &#123;/* 传入数组，setState做的是替换操作，所以需先拷贝原来的数组 */&#125;</span><br><span class="line"></span><br><span class="line">      &lt;h2&gt;学生列表&lt;/h2&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          students.map((item, index)=&gt; &#123;</span><br><span class="line">            return (</span><br><span class="line">              &lt;li key=&#123;item.id&#125;&gt;</span><br><span class="line">                &lt;span&gt;学生姓名：&#123;item.name&#125;&lt;/span&gt;</span><br><span class="line">                &lt;span&gt;学生年龄：&#123;item.age&#125;&lt;/span&gt;</span><br><span class="line">                &lt;button onClick=&#123;e =&gt; incrementAgeWithIndex(index)&#125;&gt;age + 1&lt;/button&gt;</span><br><span class="line">              &lt;/li&gt;</span><br><span class="line">            )</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><p>作用：来完成一些类似于 class 中生命周期的功能,模拟 componentDidMount，组件发送网络请求的地方</p>
<p>useEffect 基本使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useEffect, useState &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function HookChangeTitle() &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  useEffect(() =&gt; &#123; //组件内数据渲染到真实DOM后回调此函数</span><br><span class="line">    document.title = count;</span><br><span class="line">  &#125;);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;当前计数：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; setCount(count + 1)&#125;&gt;+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>useEffect 模拟订阅和取消</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useEffect &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function EffectHookCancel() &#123;</span><br><span class="line">  useEffect(() =&gt; &#123; //useEffect接收一个函数</span><br><span class="line">    console.log(&quot;订阅一些事件&quot;);</span><br><span class="line"></span><br><span class="line">    return () =&gt; &#123; //接收函数的返回值又是另外一个函数,当组件卸载或更新时都会来到此回调函数</span><br><span class="line">      console.log(&quot;取消订阅&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;, []);  //第二个参数，数组</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;EffectHookCancel&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>useEffect 可以多个一起使用，每个 useEffect 处理不同的逻辑(网络请求，事件订阅等)</p>
<p>只要当前组件重新渲染，所有的 useEffect 都会重新执行一遍</p>
<p><strong>useEffect 第二个参数为数组类型，传入所依赖的一些变量，当这些变量发生改变的时候才会重新执行 useEffect</strong></p>
<p>要想某些功能只在组件第一次渲染时执行一次，就可以传入空数组( [] )，表示谁都不依赖</p>
<h4 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h4><p>作用：给 Context 后面的所有子孙组件共享一些数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export const UserContext = createContext();</span><br><span class="line">export const ThemeContext = createContext();</span><br><span class="line"></span><br><span class="line">&lt;UserContext.Provider value=&#123;&#123;name: &quot;why&quot;, age: 18&#125;&#125;&gt;</span><br><span class="line">  &lt;ThemeContext.Provider value=&#123;&#123;fontSize: &quot;30px&quot;, color: &quot;red&quot;&#125;&#125;&gt;</span><br><span class="line">    &lt;ContextHookDemo/&gt;</span><br><span class="line">  &lt;/ThemeContext.Provider&gt;</span><br><span class="line">&lt;/UserContext.Provider&gt;</span><br><span class="line">&#123;/*通过context共享数据给ContextHookDemo的子孙组件*/&#125;</span><br><span class="line"></span><br><span class="line">import React, &#123; useContext &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123; UserContext, ThemeContext &#125; from &quot;../App&quot;;</span><br><span class="line">export default function ContextHookDemo(props) &#123;</span><br><span class="line">  const user = useContext(UserContext);	//拿到context共享的数据</span><br><span class="line">  const theme = useContext(ThemeContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h4><p>是 useState 的一种替代方案</p>
<ul>
<li>在某些场景下，如果 state 的处理逻辑比较复杂，我们可以通过 useReducer 来对其进行拆分</li>
<li>或者这次修改的 state 需要依赖之前的 state 时，也可以使用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useReducer &#125; from &#x27;react&#x27;;</span><br><span class="line">import reducer from &#x27;./reducer&#x27;;</span><br><span class="line">export default function Home() &#123;</span><br><span class="line">  // const [count, setCount] = useState(0);</span><br><span class="line">  const [state, dispatch] = useReducer(reducer, &#123;counter: 0&#125;);</span><br><span class="line">  //state:当前状态的值</span><br><span class="line">  //要改变某一个值的时候可以dispatch一个action对象</span><br><span class="line">  //reducer为纯函数</span><br><span class="line">  // &#123;counter: 0&#125; 初始化值</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;Home当前计数: &#123;state.counter&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; dispatch(&#123;type: &quot;increment&quot;, payload: &quot;aaa&quot;&#125;)&#125;&gt;+1&lt;/button&gt;</span><br><span class="line">      &#123;/*payload:携带的额外的值*/&#125;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; dispatch(&#123;type: &quot;decrement&quot;&#125;)&#125;&gt;-1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//reducer.js 也可不用拆分，就在组件里面定义reducer函数</span><br><span class="line">//多个文件同时使用这个函数，里面的数据也不能共享</span><br><span class="line">export default function reducer(state, action) &#123; //纯函数，后续作为useReducer的第一个参数</span><br><span class="line">  switch(action.type) &#123;</span><br><span class="line">    case &quot;increment&quot;:</span><br><span class="line">      return &#123;...state, counter: state.counter + 1&#125;;</span><br><span class="line">    case &quot;decrement&quot;:</span><br><span class="line">      return &#123;...state, counter: state.counter - 1&#125;;</span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h4><p>目的：进行性能的优化</p>
<ul>
<li>useCallback 会返回一个<strong>函数</strong>的 memoized（记忆的） 值</li>
<li>在依赖不变的情况下，多次定义的时候，返回的值是相同的</li>
<li><strong>针对函数</strong></li>
<li>如果把函数作为参数传递到下一个组件，需要使用 useCallback(),可以对当前函数缓存、记忆</li>
</ul>
<p>通常使用 useCallback 的目的是不希望子组件进行多次渲染，并不是为了函数进行缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const increment2 = useCallback(() =&gt; &#123; //仅仅只使用这种方式并不能进行任何的性能优化</span><br><span class="line">  console.log(&quot;执行increment2函数&quot;);</span><br><span class="line">  setCount(count + 1);</span><br><span class="line">&#125;, [count]);</span><br><span class="line">//如果没有任何依赖，useCallback返回的永远是同一个函数</span><br></pre></td></tr></table></figure>

<p>用 memo 包裹性能优化，函数式组件定义时直接包裹 memo</p>
<p>父组件重新渲染，所有子组件也会重新渲染，memo 可让子组件根据 props 有无更新从而决定要不要重新渲染</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;useState, useCallback, memo&#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * useCallback在什么时候使用?</span><br><span class="line"> * 场景: 在将一个组件中的函数 , 传递给子元素进行回调使用时, 使用useCallback对函数进行处理.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">const HYButton = memo((props) =&gt; &#123; //函数式组件</span><br><span class="line">  console.log(&quot;HYButton重新渲染: &quot; + props.title);</span><br><span class="line">  return &lt;button onClick=&#123;props.increment&#125;&gt;HYButton +1&lt;/button&gt;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default function CallbackHookDemo02() &#123;</span><br><span class="line">  console.log(&quot;CallbackHookDemo02重新渲染&quot;);</span><br><span class="line"></span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  const increment2 = useCallback(() =&gt; &#123; //对传入的回调函数做优化，返回值是一个函数</span><br><span class="line">    console.log(&quot;执行increment2函数&quot;);</span><br><span class="line">    setCount(count + 1);</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;CallbackHookDemo01: &#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;HYButton title=&quot;btn2&quot; increment=&#123;increment2&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通常使用 useCallback 的目的是不希望子组件进行多次渲染，并不是为了函数进行缓存</p>
<h4 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h4><p>useMemo 实际的目的也是为了进行性能的优化。</p>
<ul>
<li>useMemo 返回的也是一个 memoized（记忆的） 值</li>
<li>在依赖不变的情况下，多次定义的时候，返回的值是相同的</li>
<li><strong>针对返回值</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const total = useMemo(() =&gt; &#123;</span><br><span class="line">	return calcNumber(count);</span><br><span class="line">&#125;, [count]);	//count发生改变时count才会重新执行</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父组件重新渲染的时候，传给子组件的值不改变，子组件就不重新渲染</span><br><span class="line">import React, &#123; useState, memo, useMemo &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">const HYInfo = memo((props) =&gt; &#123;</span><br><span class="line">  console.log(&quot;HYInfo重新渲染&quot;);</span><br><span class="line">  return &lt;h2&gt;名字: &#123;props.info.name&#125; 年龄: &#123;props.info.age&#125;&lt;/h2&gt;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default function MemoHookDemo02() &#123;</span><br><span class="line">  console.log(&quot;MemoHookDemo02重新渲染&quot;);</span><br><span class="line">  const [show, setShow] = useState(true);</span><br><span class="line"></span><br><span class="line">  const info = useMemo(() =&gt; &#123;	//对返回值做优化，使返回值不改变时子组件就不重新渲染</span><br><span class="line">    return &#123; name: &quot;why&quot;, age: 18 &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;HYInfo info=&#123;info&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; setShow(!show)&#125;&gt;show切换&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h4><p>返回一个 ref 对象，返回的 ref 对象在组件的整个生命周期保持不变</p>
<p>两种用法：</p>
<ul>
<li>引入 DOM 元素(或 class 组件)</li>
<li>保存一个数据，这个对象在整个生命周期中可以保持不变</li>
</ul>
<p>基本使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useRef &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function RefHook() &#123;</span><br><span class="line">  const titleRef = useRef();	//1.创建</span><br><span class="line"></span><br><span class="line">  function changeDOM() &#123;</span><br><span class="line">    titleRef.current.innerHTML = &quot;Hello World&quot;; //3.使用</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2 ref=&#123;titleRef&#125;&gt;RefHook&lt;/h2&gt;  &#123;/*2.绑定*/&#125;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; changeDOM()&#125;&gt;修改DOM&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>useRef 引用其它数据</p>
<p>可用来保存某一个 value 本次和前一次的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useEffect, useRef, useState &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function RefHook() &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line">  const numRef = useRef(count);//直接传入数据，在整个组件的生命周期返回的值都是相同的,可通过numRef.current取出</span><br><span class="line">  useEffect(() =&gt; &#123; //count一旦发生变化，重新渲染完之后会执行此处代码</span><br><span class="line">    numRef.current = count;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;count上一次的值: &#123;numRef.current&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;h2&gt;count这一次的值: &#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; setCount(count + 10)&#125;&gt;+10&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h4><p>forwardRef 用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;forwardRef, useRef&#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">const HYInput = forwardRef((props, ref) =&gt; &#123; //3.使用forwardRef包裹子组件,接收ref</span><br><span class="line">  return &lt;input ref=&#123;ref&#125; /&gt; //4.绑定</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default function ForwardRef() &#123;</span><br><span class="line">  const inputRef = useRef(); //1.创建</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;HYInput ref=&#123;inputRef&#125;/&gt; &#123;/*2.传入*/&#125;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; inputRef.current.focus()&#125;&gt;聚焦&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">//此种做法让父组件可以任意操作子组件，自由度太高，不推荐</span><br></pre></td></tr></table></figure>

<p>改进：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123;forwardRef, useImperativeHandle, useRef&#125; from &#x27;react&#x27;</span><br><span class="line">const HYInput = forwardRef((props, ref) =&gt; &#123; //2.使用forwardRef包裹子组件，接受父组件传递的ref</span><br><span class="line">  const childRef = useRef();  //3.子组件自己创建的ref</span><br><span class="line"></span><br><span class="line">  useImperativeHandle(ref, () =&gt; (&#123; //5.将父组件的ref传入，返回的对象会被绑定到父组件的ref的current里面</span><br><span class="line">    //所以后面父组件拿到的current就是此处子组件返回的一个对象</span><br><span class="line">    focus: () =&gt; &#123;  //6.将这个给父元素调用，使父组件只能调用此功能</span><br><span class="line">      childRef.current.focus();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;), [childRef]);</span><br><span class="line">  // 参数1：ref</span><br><span class="line">  // 参数2：有返回值的回调函数</span><br><span class="line">  return &lt;input ref=&#123;childRef&#125; /&gt; &#123;/*4.绑定子组件自己的ref*/&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default function useImperativeHandleHook() &#123;</span><br><span class="line">  const parentsRef = useRef(); //1.创建ref，传给子组件</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;HYInput ref=&#123;parentsRef&#125;/&gt;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; parentsRef.current.focus()&#125;&gt;聚焦&lt;/button&gt;</span><br><span class="line">      &#123;/* 此处本质上执行的子组件返回的focus */&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以后只要用到 forwardRef 都要通过这种方式去用</p>
<p>useImperativeHandle 里面调用子组件的函数报警告时，可将被调用的函数使用 useCallback 包裹</p>
<h4 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h4><p>useLayoutEffect 看起来和 useEffect 非常的相似，事实上他们也只有一点区别而已</p>
<ul>
<li>useEffect 会在渲染的内容更新到 DOM 上之后执行，不会阻塞 DOM 的更新</li>
<li>useLayoutEffect 会在渲染的内容更新到 DOM 上之前执行，会阻塞 DOM 的更新</li>
</ul>
<p>如果我们希望在某些操作发生之后再更新 DOM，那么应该将这个操作放到 useLayoutEffect</p>
<p>用得很少，一般都用 useEffect,出问题再尝试用用 useLayoutEffect</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; useLayoutEffect, useState &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">export default function EffectCounter() &#123;</span><br><span class="line">  const [count, setCount] = useState(10);</span><br><span class="line"></span><br><span class="line">  useLayoutEffect(() =&gt; &#123;</span><br><span class="line">    if(count === 0)</span><br><span class="line">      setCount(Math.random());</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;数字：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;e =&gt; setCount(0)&#125;&gt;修改数字&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h4><p>普通函数变成自定 Hook：函数名字前面加 use</p>
<p>作用：将相同逻辑代码抽到一个函数里面(函数里面可以使用 hooks)，可用来代替高阶组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function useLogginLife(name) &#123;	//函数名字前面加use</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    console.log(`$&#123;name&#125;组件被创建出来了`);</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">      console.log(`$&#123;name&#125;组件被销毁掉了`);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [name]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实际应用：Context 共享</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//App.js</span><br><span class="line">export const UserContext = createContext();</span><br><span class="line">export const TokenContext = createContext();</span><br><span class="line">&lt;UserContext.Provider value=&#123;&#123;name: &quot;why&quot;, age: 18&#125;&#125;&gt;</span><br><span class="line">  &lt;TokenContext.Provider value=&quot;dasdsa&quot;&gt;</span><br><span class="line">  	&lt;CustomHook /&gt;</span><br><span class="line">  &lt;/TokenContext.Provider&gt;</span><br><span class="line">&lt;/UserContext.Provider&gt;</span><br><span class="line"></span><br><span class="line">//src -&gt; hooks -&gt; user-hook.js</span><br><span class="line">import &#123; useContext &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; TokenContext, UserContext &#125; from &quot;../App&quot;;</span><br><span class="line">function useUserContext() &#123;</span><br><span class="line">  const user = useContext(UserContext);</span><br><span class="line">  const token = useContext(TokenContext);</span><br><span class="line">  return [user ,token];</span><br><span class="line">&#125;</span><br><span class="line">export default useUserContext;</span><br><span class="line"></span><br><span class="line">//自定义hook_context共享.js</span><br><span class="line">import useUserContext from &#x27;../hooks/user-hook&#x27;;</span><br><span class="line">export default function CustomContextShareHook() &#123;</span><br><span class="line">  const [user, token] = useUserContext(); //使用自定义的hook拿到context</span><br><span class="line">  console.log(&#123;user, token&#125;);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      CustomContextShareHook</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;实际应用：获取滚动位置**</span><br></pre></td></tr></table></figure>

<p>其它情况用法类似，将想实现的功能封装在 hooks 里面，再在要使用该功能的组件里面引入封装的 hooks 文件</p>
<p><strong>localStorage 存储</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.localStorage.setItem(<span class="string">&#x27;name&#x27;</span>, <span class="built_in">JSON</span>.stringify(name)) <span class="comment">//存储数据</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">//取出数据</span></span><br></pre></td></tr></table></figure>

<h4 id="useSelector"><a href="#useSelector" class="headerlink" title="useSelector"></a>useSelector</h4><p>作用:让组件和 redux 结合起来,将 state 映射到组件中(不需要编写 connect 以及对应的映射函数了)</p>
<ul>
<li><p>参数一：将 state 映射到需要的数据中</p>
</li>
<li><p>参数二：可以进行比较来决定是否组件重新渲染</p>
</li>
</ul>
<p>useSelector 默认会比较我们返回的两个对象是否相等(===，会比较值和类型)</p>
<p>useDispatch 非常简单，就是直接获取 dispatch 函数，之后在组件中直接使用即可(来自 react-redux)</p>
<p>我们还可以通过 useStore 来获取当前的 store 对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; getTopBannerAction &#125; from &#x27;./store/actionCreators.js&#x27;</span><br><span class="line">import &#123;useSelector, shallowEqual&#125; from &#x27;react-redux&#x27;</span><br><span class="line">//组件</span><br><span class="line">function HYRecommed(props) &#123;</span><br><span class="line">  //组件和redux关联：获取数据和进行操作</span><br><span class="line">  const &#123; topBanners &#125; = useSelector(state =&gt; (&#123; //直接对返回的数据进行结构</span><br><span class="line">    //参数1:传入一个回调函数，会将这个返回值赋值给useSelector，作为返回值</span><br><span class="line">    topBanners: state.recommend.topBanners</span><br><span class="line">  &#125;), shallowEqual); //参数2:将默认的===比较变成浅层比较</span><br><span class="line">  const dispatch = useDispatch();	//通过hooks直接获取dispatch</span><br><span class="line">  //发送网络请求</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    dispatch(getTopBannerAction());		//直接派发action</span><br><span class="line">  &#125;, [dispatch]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><h4 id="项目规范"><a href="#项目规范" class="headerlink" title="项目规范"></a>项目规范</h4><ol>
<li>文件夹、文件名统一小写，多个个单词以连接符（-）连接</li>
<li>JavaScript 变量名称采用小驼峰标识，常量全部使用大写字母，组件采用大驼峰(大写开头)</li>
<li>CSS 采用普通 CSS 和 styled-component 结合来编写（全局采用普通 CSS、局部采用 styled-component）</li>
<li>整个项目不再使用 class 组件，统一使用函数式组件，全面拥抱 Hooks</li>
<li>所有的函数式组件，为了避免不必要的渲染，全部使用 memo 进行包裹(rmc 快捷键)</li>
<li>组件内部的状态，使用 useState、useReducer；业务数据全部放在 redux 中管理</li>
<li>函数组件内部基本按照如下顺序编写代码<ul>
<li>组件内部 state 管理</li>
<li>redux 的 hooks 代码</li>
<li>其他组件 hooks 代码</li>
<li>其他逻辑代码</li>
<li>返回 JSX 代码</li>
</ul>
</li>
<li>redux 代码规范如下<ul>
<li>每个模块有自己独立的 reducer，通过 combineReducer 进行合并</li>
<li>异步请求代码使用 redux-thunk，并且写在 actionCreators 中</li>
<li>redux 直接采用 redux hooks 方式编写，不再使用 connect</li>
</ul>
</li>
<li>网络请求采用 axios<ul>
<li>对 axios 进行二次封装</li>
<li>所有的模块请求会放到一个请求文件中单独管理</li>
</ul>
</li>
<li>项目使用 AntDesign<ul>
<li>项目中某些 AntDesign 中的组件会被拿过来使用；</li>
<li>但是多部分组件还是自己进行编写</li>
</ul>
</li>
<li>其他规范在项目中根据实际情况决定和编写</li>
</ol>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ul>
<li>src<ul>
<li>assets -&gt; img、css、fonts 等文件夹</li>
<li>pages 一个个页面</li>
<li>components 可能在多个页面之间共享的组件</li>
<li>router 路由配置</li>
<li>store redux 相关代码，每个模块独立的 reducer 放在对应模块里面,在此处进行合并</li>
<li>services 网络相关服务，网络请求</li>
<li>utils 封装的工具相关的东西</li>
<li>common 放一些公共的东西，常量、数据之类（常量数据多可以分别放在两个文件夹 constants、data）</li>
<li>plugins 放一些插件之类的东西</li>
</ul>
</li>
</ul>
<h4 id="css-重置"><a href="#css-重置" class="headerlink" title="css 重置"></a>css 重置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add normalize.css</span><br></pre></td></tr></table></figure>

<p>assets -&gt; css -&gt; reset.css(新建此 css 文件)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;~normalize.css&#x27;</span>; <span class="comment">/*导入安装的css样式重置模块(导入模块的css使用~)*/</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;~antd/dist/antd.css&#x27;</span>; <span class="comment">/*导入antd样式库*/</span></span><br><span class="line"><span class="comment">/*下面再加上自己的样式重置的css代码，对上面的模块的有些样式进行覆盖*/</span></span><br><span class="line"><span class="comment">/*再加上一些全局样式(使用频率比较高的样式，文字只显示一行之类的)*/</span></span><br></pre></td></tr></table></figure>

<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/css/reset.css&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="项目配置别名"><a href="#项目配置别名" class="headerlink" title="项目配置别名"></a>项目配置别名</h4><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add @craco/craco</span><br></pre></td></tr></table></figure>

<p>修改 package.json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;craco start&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;craco build&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;craco test&quot;</span>,</span><br><span class="line">  <span class="string">&quot;eject&quot;</span>: <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>根目录下新建文件 craco.config.js(与 package.json 同级)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function">(<span class="params">dir</span>) =&gt;</span> path.resolve(__dirname, dir)</span><br><span class="line"><span class="comment">//将项目的路径与传进的参数拼接到一起</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">webpack</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="attr">assets</span>: resolve(<span class="string">&#x27;src/assets&#x27;</span>),</span><br><span class="line">      <span class="attr">common</span>: resolve(<span class="string">&#x27;src/common&#x27;</span>),</span><br><span class="line">      <span class="attr">components</span>: resolve(<span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">      <span class="attr">pages</span>: resolve(<span class="string">&#x27;src/pages&#x27;</span>),</span><br><span class="line">      <span class="attr">plugins</span>: resolve(<span class="string">&#x27;src/plugins&#x27;</span>),</span><br><span class="line">      <span class="attr">router</span>: resolve(<span class="string">&#x27;src/router&#x27;</span>),</span><br><span class="line">      <span class="attr">services</span>: resolve(<span class="string">&#x27;src/services&#x27;</span>),</span><br><span class="line">      <span class="attr">store</span>: resolve(<span class="string">&#x27;src/store&#x27;</span>),</span><br><span class="line">      <span class="attr">utils</span>: resolve(<span class="string">&#x27;src/utils&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新运行项目</p>
<h4 id="导入文件顺序"><a href="#导入文件顺序" class="headerlink" title="导入文件顺序"></a>导入文件顺序</h4><ol>
<li>导入第三方库</li>
<li>导入工具类功能性东西</li>
<li>导入组件</li>
</ol>
<h4 id="APP-js"><a href="#APP-js" class="headerlink" title="APP.js"></a>APP.js</h4><p>安装路由和路由管理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add react-router-dom</span><br><span class="line">yarn add react-router-config</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;BrowserRouter&gt;</span><br><span class="line">	&lt;AppHeader /&gt;</span><br><span class="line">  &#123;renderRoutes(routes)&#125;	&#123;/*路由，其它地方写跳转页面的NavLink*/&#125;</span><br><span class="line">  &lt;AppFooter /&gt;</span><br><span class="line">&lt;/BrowserRouter&gt;</span><br></pre></td></tr></table></figure>

<h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><p>app-footer -&gt; index.js 、 style.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//style.js</span></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AppFooterWrapper = styled.div<span class="string">``</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FooterLeft = styled.div<span class="string">``</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FooterRight = styled.ul<span class="string">``</span></span><br><span class="line"><span class="comment">//可通less一样嵌套写</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//index.js</span><br><span class="line">import React, &#123; memo, Fragment &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">import &#123; footerLinks, footerImages &#125; from &quot;@/common/local-data&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; AppFooterWrapper, FooterLeft, FooterRight&#125; from &#x27;./style&#x27;;</span><br><span class="line"></span><br><span class="line">export default memo(function HYAppFooter() &#123;</span><br><span class="line">  return (</span><br><span class="line">  &lt;AppFooterWrapper&gt;</span><br><span class="line">    &lt;div className=&quot;wrap-v2 content&quot;&gt;</span><br><span class="line">      &lt;FooterLeft className=&quot;left&quot;&gt;</span><br><span class="line">      &lt;/FooterLeft&gt;</span><br><span class="line">      &lt;FooterRight className=&quot;right&quot;&gt;</span><br><span class="line">      &lt;/FooterRight&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/AppFooterWrapper&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="CSS-图片"><a href="#CSS-图片" class="headerlink" title="CSS 图片"></a>CSS 图片</h4><p>精灵图一般写在背景图片上</p>
<p>css 中使用图片</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">backgrounf-image: <span class="built_in">url</span>(<span class="string">$&#123;require(&quot;@/assets/img/aa.png&quot;</span>)&#125;);</span><br><span class="line"><span class="comment">/*引入图片必须使用require*/</span></span><br><span class="line"></span><br><span class="line">import bg <span class="selector-tag">from</span> &#x27;@/assets/img/admin_bg.jpg&#x27;;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">$&#123;bg&#125;</span>);</span><br></pre></td></tr></table></figure>

<p>react 中 a 标签里面如果没有内容会报警告</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;#/&quot;&gt;aaa&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">text-indent: -9999px;</span><br><span class="line">&#123;/*给a标签加个文字内容，再把text-indent调到很大*/&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Redux-依赖"><a href="#Redux-依赖" class="headerlink" title="Redux 依赖"></a>Redux 依赖</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yarn <span class="builtin-name">add</span> redux react-redux redux-thunk</span><br></pre></td></tr></table></figure>

<p>网络请求的数据全用 redux 管理(看情况)</p>
<p>每个模块的网络请求单独封装成一个 js 文件，放在 services(或 network)文件夹下</p>
<p>如果把函数作为参数传递到下一个组件，需要使用 useCallback(),可以对当前函数缓存、记忆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const bannerChange = useCallback((from, to) =&gt; &#123;</span><br><span class="line">&#125;, []);	//如果没有依赖写[]</span><br></pre></td></tr></table></figure>

<h4 id="v-html-展示-html"><a href="#v-html-展示-html" class="headerlink" title="v-html 展示 html"></a>v-html 展示 html</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span dangerouslySetInnerHTML=&#123;&#123;__html: captchaSvg &#125;&#125;&gt;&lt;/span&gt;</span><br><span class="line">&#123;/*captchaSvg为html代码的字符串*/&#125;</span><br></pre></td></tr></table></figure>

<h4 id="项目打包发布"><a href="#项目打包发布" class="headerlink" title="项目打包发布"></a>项目打包发布</h4><p>打包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure>

<h4 id="项目部署到云"><a href="#项目部署到云" class="headerlink" title="项目部署到云"></a>项目部署到云</h4><ol>
<li><p>服务器操作系统：centos</p>
</li>
<li><p>服务器中安装 Nginx 服务(可以借助 yum 工具来安装 Nginx)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装nginx</span></span><br><span class="line">yum install nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">在vscode中远程连接服务器，选择/etc/nginx文件夹</span></span><br><span class="line"><span class="meta">#</span><span class="bash">打开nginx.conf,对server进行配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">新建再conf.d文件下新建文件react.conf 后缀是.conf的文件会被nginx.conf自动包含进去</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen 3000; #访问监听的端口</span><br><span class="line">  server_name  _;</span><br><span class="line"></span><br><span class="line">  location / &#123; #3000端口对应的访问路径</span><br><span class="line">    root /root/react/build;  #根目录下 root下的react文件夹下的build文件夹</span><br><span class="line">    index index.html; #访问build文件夹下的index.html</span><br><span class="line">    try_files $uri $uri/ /index.html;  #解决nginx代理刷新之后显示404的问题</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">但是nginx默认是没有访问权限的，需要打开nginx.conf，将第五行的user nginx修改为：</span></span><br><span class="line">user root;</span><br><span class="line"><span class="meta">#</span><span class="bash">修改完配置文件后需要对nginx进行重启</span></span><br><span class="line">nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash">若重启报错，运行一下命令后再重启</span></span><br><span class="line">nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></li>
<li><p>配置 Nginx 代理(连接服务器的工具 FileZilla:<span class="exturl" data-url="aHR0cHM6Ly9maWxlemlsbGEtcHJvamVjdC5vcmcv">https://filezilla-project.org/<i class="fa fa-external-link-alt"></i></span>)</p>
<ul>
<li>设置 Nginx 权限为 root</li>
<li>可以将配置文件进行分离</li>
<li>单独配置 conf.d 文件夹下的配置文件</li>
</ul>
</li>
<li><p>在服务器端安全组配置中增加 3000 端口，使其他地方能够访问</p>
</li>
</ol>
<h4 id="需要安装的依赖"><a href="#需要安装的依赖" class="headerlink" title="需要安装的依赖"></a>需要安装的依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add normalize.css	#样式重置</span><br><span class="line">yarn add @craco/craco		#配置文件路径别名</span><br><span class="line">yarn add react-router-dom #路由</span><br><span class="line">yarn add react-router-config #统一管理路由,renderRoutes依赖</span><br><span class="line">yarn add styled-components	#使用css in js，编写组件外部使用css Wrapper包裹，避免样式冲突</span><br><span class="line">yarn add antd #安装antd-design库</span><br><span class="line">yarn add @ant-design/icons #ant图标库</span><br><span class="line">yarn add axios #网络请求</span><br><span class="line">yarn add redux	#redux</span><br><span class="line">yarn add react-redux #把react组件和redux结合起来(connect,Provider)</span><br><span class="line">yarn add redux-thunk #redux异步请求</span><br><span class="line">yarn add redux react-redux redux-thunk	#合并安装</span><br><span class="line">yarn add immutable	#immutable依赖，结合redux使用，优化性能</span><br><span class="line">yarn add redux-immutable #合并reducer时使用immutable进行性能优化</span><br><span class="line">yarn add @tinymce/tinymce-react; #安装富文本框tiny-mce</span><br></pre></td></tr></table></figure>

<h4 id="富文本框-tiny-mce"><a href="#富文本框-tiny-mce" class="headerlink" title="富文本框 tiny-mce"></a>富文本框 tiny-mce</h4><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add @tinymce/tinymce-react;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; memo &#125; from &#x27;react&#x27;</span><br><span class="line"></span><br><span class="line">import &#123;Editor&#125; from &#x27;@tinymce/tinymce-react&#x27;;</span><br><span class="line"></span><br><span class="line">import &#123;uploadTemp&#125; from &#x27;./network/upload&#x27;;</span><br><span class="line">export default memo(function RichText() &#123;</span><br><span class="line">  const  editorObj = &#123;</span><br><span class="line">    height: &#x27;300px&#x27;,</span><br><span class="line">    language: &#x27;zh_CN&#x27;,</span><br><span class="line">    statusbar: false, //隐藏底部状态栏</span><br><span class="line">    plugins: &#x27;table lists link image preview&#x27;,</span><br><span class="line">    toolbar: `formatselect | code | preview | bold italic strikethrough forecolor backcolor |</span><br><span class="line">    link image | alignleft | aligncenter alignright alignjustify |</span><br><span class="line">    numlist bullist outdent indent`,</span><br><span class="line">    relative_urls: false,</span><br><span class="line">    file_picker_types: &#x27;image&#x27;, //上传文件的类型</span><br><span class="line">    image_advtab: true,</span><br><span class="line">    image_uploadtable: true,</span><br><span class="line">    images_upload_handler: (blobInfo, success, failure) =&gt; &#123; //自定义上传处理逻辑。使用该配置，则无需使用其他上传配置选项</span><br><span class="line">      let formData = new FormData();</span><br><span class="line">      const file = blobInfo.blob(); //转为为易于理解的file对象</span><br><span class="line">      formData.append(&#x27;temp&#x27;, file, file.name);</span><br><span class="line">      uploadTemp(formData).then(res =&gt; &#123; //上传图片</span><br><span class="line">        if(res.response)</span><br><span class="line">          return console.log(res.response.data);</span><br><span class="line">        console.log(res);</span><br><span class="line">        success(res.url); //里面放服务器展示的图片地址</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function handleEditorChange(values) &#123; //获取富文本内容</span><br><span class="line">    console.log(values);</span><br><span class="line">  &#125;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Editor</span><br><span class="line">      apiKey=&quot;diu0gi0p919zw5c2c0bqlx888evf52vnjcnkxyhcty0b90l3&quot; //注册账户以申请</span><br><span class="line">        init=&#123;&#123;...editorObj&#125;&#125; //初始化配置</span><br><span class="line">        onEditorChange=&#123;handleEditorChange&#125; //富文本框内容改变时调用</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="React-SSR-开发"><a href="#React-SSR-开发" class="headerlink" title="React SSR 开发"></a>React SSR 开发</h3><p><strong>SSR</strong>(Server Side Rendering，服务端渲染):指的是页面在服务器端已经生成了完成的 HTML 页面结构，不需要浏览器解析</p>
<p>同构应用：一套代码既可以在服务端运行又可以在客户端运行</p>
<p>同构是一种 SSR 的形态，是现代 SSR 的一种表现形式。当用户发出请求时，先在服务器通过 SSR 渲染出首页的内容。但是对应的代码同样可以在客户端被执行。执行的目的包括事件绑定等以及其他页面切换时也可以在客户端被渲染</p>
<p>使用成熟的 SSR 框架：Next.js(vue 里面是 Nuxt.js)</p>
<h4 id="安装-Next-js-框架的脚手架："><a href="#安装-Next-js-框架的脚手架：" class="headerlink" title="安装 Next.js 框架的脚手架："></a>安装 Next.js 框架的脚手架：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g create-next-app</span><br><span class="line">create-next-app --version	#查看版本号</span><br></pre></td></tr></table></figure>

<h4 id="创建-Next-js-项目"><a href="#创建-Next-js-项目" class="headerlink" title="创建 Next.js 项目"></a>创建 Next.js 项目</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create-next-app next-demo</span><br></pre></td></tr></table></figure>

<p>pages 文件夹下一个 js 文件对应一个页面，next 会自动配置路由(路径为文件名)</p>
<h4 id="跳转页面渲染模式"><a href="#跳转页面渲染模式" class="headerlink" title="跳转页面渲染模式"></a>跳转页面渲染模式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Link from &#x27;next/link&#x27;</span><br><span class="line">&lt;h2&gt;&lt;a href=&quot;/about&quot;&gt;关于页面&lt;/a&gt;&lt;/h2&gt;&#123;/* 服务端渲染 */&#125;</span><br><span class="line">&lt;h2&gt;&lt;Link href=&quot;/about&quot;&gt;关于页面&lt;/Link&gt;&lt;/h2&gt;&#123;/* 前端渲染 */&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Layout-组件"><a href="#Layout-组件" class="headerlink" title="Layout 组件"></a>Layout 组件</h4><p>设置页面标题</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Head from <span class="string">&#x27;next/head&#x27;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Head</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网易云音乐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Head</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>设置公共布局方法 1：</p>
<p>新建 components -&gt; app-layout -&gt; index.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import React, &#123; memo &#125; from &quot;react&quot;;</span><br><span class="line">import Head from &quot;next/head&quot;;</span><br><span class="line">import Link from &#x27;next/link&#x27;</span><br><span class="line">export default memo(function AppLayout(props) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Head&gt;</span><br><span class="line">        &lt;title&gt;网易云音乐&lt;/title&gt;</span><br><span class="line">      &lt;/Head&gt;</span><br><span class="line"></span><br><span class="line">      &lt;header&gt;</span><br><span class="line">        网页公共头部</span><br><span class="line">        &lt;hr /&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line"></span><br><span class="line">      &lt;footer&gt;</span><br><span class="line">        网页公共尾部</span><br><span class="line">      &lt;/footer&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//其它页面使用</span><br><span class="line">import AppLayout from &#x27;../components/app-layout&#x27;</span><br><span class="line">export default function Home() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;AppLayout&gt;</span><br><span class="line">      &lt;h1&gt;Home页面自己的数据&lt;/h1&gt;</span><br><span class="line">    &lt;/AppLayout&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置公共布局方法 2：</p>
<p>pages -&gt; 重写_app.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &quot;../styles/globals.css&quot;;</span><br><span class="line">import Head from &quot;next/head&quot;;</span><br><span class="line">function MyApp(&#123; Component, pageProps &#125;) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Head&gt;</span><br><span class="line">        &lt;title&gt;网易云音乐&lt;/title&gt;</span><br><span class="line">      &lt;/Head&gt;</span><br><span class="line"></span><br><span class="line">      &lt;header&gt;</span><br><span class="line">        网页公共头部</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Component &#123;...pageProps&#125; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;footer&gt;</span><br><span class="line">        网页公共尾部</span><br><span class="line">      &lt;/footer&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">export default MyApp;</span><br></pre></td></tr></table></figure>

<p>改变整个文档相关内容： pages -&gt; 重写_document.js</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubmV4dGpzLmNuL2RvY3MvYWR2YW5jZWQtZmVhdHVyZXMvY3VzdG9tLWRvY3VtZW50">https://www.nextjs.cn/docs/advanced-features/custom-document<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="样式-1"><a href="#样式-1" class="headerlink" title="样式"></a>样式</h4><p>建议使用 styled-components</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add styled-components</span><br></pre></td></tr></table></figure>

<p>使用 styled-components 需要配置一下：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">yarn <span class="keyword">add </span>-D <span class="keyword">babel-plugin-styled-components </span><span class="comment">#开发时依赖</span></span><br></pre></td></tr></table></figure>

<p>项目根目录下新建文件.babelrc</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;next/babel&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>: [[<span class="string">&quot;styled-components&quot;</span>]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="路由嵌套-1"><a href="#路由嵌套-1" class="headerlink" title="路由嵌套"></a>路由嵌套</h4><p>路由嵌套靠文件路径</p>
<p>pages:</p>
<ul>
<li>profile<ul>
<li>index.js</li>
<li>info<ul>
<li>index.js</li>
</ul>
</li>
<li>settings<ul>
<li>indes.js</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Link href=&#123;`/about?id=$&#123;id&#125;`&#125;&gt;	&#123;/*目前只能使用此种方式传参*/&#125;</span><br><span class="line">	关于</span><br><span class="line">&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">//其它页面取参数</span><br><span class="line">import &#123; useRouter &#125; from &#x27;next/router&#x27;</span><br><span class="line"></span><br><span class="line">const router = useRouter();</span><br><span class="line">console.log(router.query.id);</span><br></pre></td></tr></table></figure>

<p>代码跳转路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Router from &#x27;next/router&#x27;</span><br><span class="line">Router.push(&#123;</span><br><span class="line">  pathname: &quot;/about&quot;,</span><br><span class="line">  query: &#123;</span><br><span class="line">    id: id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Home(props)&#123;</span><br><span class="line">  const &#123;name, banners&#125; = props;</span><br><span class="line">&#125;</span><br><span class="line">Home.getInitialProps = async (props) =&gt; &#123;	//组件第一次渲染的时候先执行此函数</span><br><span class="line">  //async返回的实质上是一个Promise</span><br><span class="line">  const res = await axios(&#123;url: &quot;...&quot;&#125;);</span><br><span class="line">  return &#123;	//返回的这个对象最终回到组件的props里面</span><br><span class="line">    name: &quot;why&quot;,</span><br><span class="line">    banners: res.data.data.banner.list</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Home;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>184-重学ts</title>
    <url>/20220315/184-%E9%87%8D%E5%AD%A6ts/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="初识-TypeScript"><a href="#初识-TypeScript" class="headerlink" title="初识 TypeScript"></a>初识 TypeScript</h3><p>官网：<span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnLw==">https://www.typescriptlang.org/<i class="fa fa-external-link-alt"></i></span></p>
<p>任何新技术的出现都是为了解决原有技术的某个痛点</p>
<p>TypeScript 是拥有类型的 JavaScript 超集，它可以编译成普通、干净、完整的 Javasc 代码</p>
<p>整个项目的所有 ts 文件会被视为同一个作用域，所以变量名重复会报错</p>
<p>可以在 ts 文件末尾加导出，使文件变为独立的模块</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>TypeScript 运行需要编译成 JavaScript:</p>
<ul>
<li>tsc TypeScript Compiler</li>
<li>babel</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install typescript -g #若已安装会更新版本</span><br><span class="line">tsc --version #查看安装的版本号</span><br><span class="line">tsc xxx.ts  #将ts编译成js</span><br></pre></td></tr></table></figure>

<p>TypeScript 运行环境搭建：</p>
<ul>
<li><p>通过 webpack 搭建一个 ts 的环境</p>
<ul>
<li>新建文件，在根目录运行命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install webpack webpack-cli -D #本地安装</span><br></pre></td></tr></table></figure>

<ul>
<li>修改 package.json，增加 build 命令</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">  <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;webpack serve&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>安装支持 ts 运行的 loader</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install ts-loader -D</span><br></pre></td></tr></table></figure>

<ul>
<li>运行命令，生成 tsconfig.json</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 webpack-dev-server,以搭建本地服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure>

<ul>
<li>安装 html-webpack-plugin,将根目录的 index.html 作为模板</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<ul>
<li>在根目录下新建文件 webpack.config.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.ts&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.cjs&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./index.html&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动本地服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></li>
<li><p>安装 ts-node 库直接运行 ts 后缀文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install ts-node -g</span><br><span class="line">npm install tslib @types/node -g #ts-node依赖这两个包</span><br><span class="line">ts-node xxx.ts #然后可以直接运行ts后缀文件</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h4><p>TypeScript 中定义变量需要指定标识符的类型</p>
<p>声明了类型后 typescript 就会进行类型检测，声明的类型可以称之为类型注解</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>/<span class="keyword">let</span>/<span class="keyword">const</span> 标识符: 数据类型 = 复制;</span><br><span class="line"><span class="comment">//string(小写)：表示typescript中的字符串类型</span></span><br><span class="line"><span class="comment">//String(大写)：表示JavaScript中的字符串包装类的类型 其它类型中相同，ts中用小写</span></span><br></pre></td></tr></table></figure>

<p>类型推断/类型推导</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="comment">//定义变量时没有写类型注解，</span></span><br><span class="line"><span class="comment">//默认情况下进行赋值时，会将赋值的值的类型，作为前面标识符的类型</span></span><br><span class="line"><span class="comment">//默认情况下，如果可以推导出标识符的类型，一般不加类型注解</span></span><br></pre></td></tr></table></figure>

<h4 id="number-类型"><a href="#number-类型" class="headerlink" title="number 类型"></a>number 类型</h4><p>ts 与 js 一样，不区分整数类型(int)和浮点型(double)，统一称为 number 类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">0b111</span> <span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">0o456</span> <span class="comment">//八进制</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">0xacf</span> <span class="comment">//十六进制</span></span><br></pre></td></tr></table></figure>

<h4 id="boolean-类型"><a href="#boolean-类型" class="headerlink" title="boolean 类型"></a>boolean 类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flag: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line">flag = <span class="literal">false</span></span><br><span class="line">flag = <span class="number">20</span> &gt; <span class="number">30</span></span><br></pre></td></tr></table></figure>

<h4 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message: <span class="built_in">string</span> = <span class="string">&#x27;ysj&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="Array-类型"><a href="#Array-类型" class="headerlink" title="Array 类型"></a>Array 类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个数组里面，最好存放的数据类型是相同的  定义数组时，指定里面放什么数据类型</span></span><br><span class="line"><span class="keyword">const</span> names: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [] <span class="comment">//不推荐，react中jsx有冲突</span></span><br><span class="line"><span class="keyword">const</span> names2: <span class="built_in">string</span>[] = [] <span class="comment">//推荐写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Obj = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">const</span> names: Obj[] = [</span><br><span class="line">  <span class="comment">//数组包对象</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="object-类型的使用"><a href="#object-类型的使用" class="headerlink" title="object 类型的使用"></a>object 类型的使用</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="null-和-undefined-类型"><a href="#null-和-undefined-类型" class="headerlink" title="null 和 undefined 类型"></a>null 和 undefined 类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> n1: <span class="literal">null</span> = <span class="literal">null</span> <span class="comment">//null需要指定类型，不指定时会推导为any</span></span><br><span class="line"><span class="keyword">let</span> n2: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<h4 id="symbol-类型"><a href="#symbol-类型" class="headerlink" title="symbol 类型"></a>symbol 类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> title1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> title2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> info2 = &#123;</span><br><span class="line">  <span class="comment">//通过symbol让两个key同名</span></span><br><span class="line">  [title1]: <span class="string">&#x27;程序员&#x27;</span>,</span><br><span class="line">  [title2]: <span class="string">&#x27;老师&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="any-类型"><a href="#any-类型" class="headerlink" title="any 类型"></a>any 类型</h4><p>无法确定一个变量是什么类型的时候，或变量的类型会发生改变的时候，可以使用 any 类型</p>
<p>最好不要使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message: <span class="built_in">any</span> = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">message = <span class="number">123</span></span><br></pre></td></tr></table></figure>

<h4 id="unknown-类型"><a href="#unknown-类型" class="headerlink" title="unknown 类型"></a>unknown 类型</h4><p>用于描述类型不确定的变量</p>
<p>unknown 类型只能赋值给 any 和 unknown 类型，any 类型可以赋值给任意类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result: unknown</span><br></pre></td></tr></table></figure>

<h4 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h4><p>用来指定一个函数是没有返回值的，那么它的返回值就是 void 类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">num: <span class="built_in">number</span></span>): <span class="title">void</span> </span>&#123; <span class="comment">//使用频率较低</span></span><br><span class="line">  <span class="comment">//函数如果没写任何类型，默认返回值的类型就是void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="never-类型"><a href="#never-类型" class="headerlink" title="never 类型"></a>never 类型</h4><p>永远不会发生值的类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="comment">//表示函数永远不会返回值</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="comment">//抛出一个错误，没有返回值</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="tuple-类型"><a href="#tuple-类型" class="headerlink" title="tuple 类型"></a>tuple 类型</h4><p>元组类型：多种元素的组合，可以确定里面每个元素是什么类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info: [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;abc&#x27;</span>, <span class="number">18</span>, <span class="number">1.88</span>]</span><br></pre></td></tr></table></figure>

<h4 id="函数的参数和返回值类型"><a href="#函数的参数和返回值类型" class="headerlink" title="函数的参数和返回值类型"></a>函数的参数和返回值类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给参数加上类型注解   给返回值加上类型注解</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="comment">//在开发中，通常可以不写返回值的类型(自动推导)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="匿名函数的参数"><a href="#匿名函数的参数" class="headerlink" title="匿名函数的参数"></a>匿名函数的参数</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names: <span class="built_in">string</span>[] = [<span class="string">&#x27;shj&#x27;</span>, <span class="string">&#x27;ysj&#x27;</span>]</span><br><span class="line">names.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//item可以不写类型注解，item来自数组，数组有类型</span></span><br><span class="line">  <span class="comment">//上下文中的函数，可以不加类型注解</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPoint</span>(<span class="params">point: &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(point.x)</span><br><span class="line">  <span class="built_in">console</span>.log(point.y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printPoint(&#123; <span class="attr">x</span>: <span class="number">123</span>, <span class="attr">y</span>: <span class="number">456</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">point2</span>(<span class="params">point: &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span>; z?: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//z为可选的number类型，调用函数时可以不传</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printId</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//id可以是number或string类型</span></span><br><span class="line">  <span class="comment">//使用联合类型的值时需要进行类型判断 narrow:缩小</span></span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">typeof</span> id) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="可选类型和联合类型的关系"><a href="#可选类型和联合类型的关系" class="headerlink" title="可选类型和联合类型的关系"></a>可选类型和联合类型的关系</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">message?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//一个参数为可选类型的时候，本质上类似于这个参数 类型|undefined 的联合类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> idType = <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span> <span class="comment">//type用于定义类型别名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printId</span>(<span class="params">id: idType</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><p>有时 TypeScript 无法获取具体的类型信息，就需要使用类型断言</p>
<p>通过类型断言将一个普遍的类型转换为一个具体类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ysj&#x27;</span>) <span class="keyword">as</span> HTMLImageElement</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">studying</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">p: Person</span>) </span>&#123;</span><br><span class="line">  ;(p <span class="keyword">as</span> Student).studying()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> stu = <span class="keyword">new</span> Student()</span><br><span class="line">sayHello(stu)</span><br></pre></td></tr></table></figure>

<h4 id="非空类型断言"><a href="#非空类型断言" class="headerlink" title="非空类型断言"></a>非空类型断言</h4><p>在可能为空的值的后面加上一个!号</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printMessage</span>(<span class="params">message?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//参数message为可选类型</span></span><br><span class="line">  <span class="built_in">console</span>.log(message!.length) <span class="comment">//message后加叹号，表示message一定会有值，不用做非空类型判断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="可选链的使用"><a href="#可选链的使用" class="headerlink" title="可选链的使用"></a>可选链的使用</h4><p>可选链是 ES11(ES2020)增加的特性</p>
<p>可选链使用可选链接操作符?.</p>
<p>作用：当对象的属性不存在时，会短路，后面的代码全部不再执行，直接返回 undefined，如果存在，才会继续执行</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  friend?: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> info: Person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ysj2&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另外一个文件中</span></span><br><span class="line"><span class="built_in">console</span>.log(info.friend?.name) <span class="comment">//info里面可能有friend,在friend后面加?.有值就取，没有值就不取</span></span><br></pre></td></tr></table></figure>

<p>??和!!的作用</p>
<p>!!操作符：</p>
<ul>
<li>将其他类型转换成 boolean 类型</li>
<li>作用类似于 Boolean(遍历)的方式</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"><span class="comment">// const flag = Boolean(message); //两者等价</span></span><br><span class="line"><span class="keyword">const</span> flag = !!message <span class="comment">//js特性</span></span><br></pre></td></tr></table></figure>

<p>??操作符：</p>
<ul>
<li>ES11 新特性</li>
<li>控制合并操作符(??)是一个逻辑操作符，当操作符左侧是 null 或 undefined 时，返回其右侧操作数，否则返回左侧操作数</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> content = message ?? <span class="string">&#x27;默认值&#x27;</span> <span class="comment">//message有值就是用message的值，否则使用默认值</span></span><br></pre></td></tr></table></figure>

<h4 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h4><p>字面量类型的值必须和类型保持一致</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> message: <span class="string">&#x27;hhh&#x27;</span> = <span class="string">&#x27;hhh&#x27;</span> <span class="comment">//hhh字符串也可以作为类型，称为字面量类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量类型的意义就是必须结合联合类型</span></span><br><span class="line"><span class="keyword">type</span> Align = <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span> | <span class="string">&#x27;center&#x27;</span> <span class="comment">//对齐方式</span></span><br><span class="line"><span class="keyword">let</span> align: Align = <span class="string">&#x27;left&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="类型缩小"><a href="#类型缩小" class="headerlink" title="类型缩小"></a>类型缩小</h4><p>缩小(Narrowing)：在给定的执行路径中，缩小比声明时更小的类型</p>
<p>类型保护(type guards)：编写类似 typeof padding === “number” 之类的代码</p>
<p>常见类型保护：</p>
<ul>
<li>typeof</li>
<li>平等缩小(如=== ， !==，switch)</li>
<li>instanceof</li>
<li>in</li>
<li>switch</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//typeof类型缩小</span></span><br><span class="line"><span class="keyword">type</span> idType = <span class="built_in">number</span>|<span class="built_in">string</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printID</span>(<span class="params">id: idType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> id === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id.toLowerCase());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//平等的类型缩小(=== == != !== switch)</span></span><br><span class="line"><span class="keyword">type</span> Direction = <span class="string">&quot;left&quot;</span>|<span class="string">&quot;right&quot;</span>|<span class="string">&quot;top&quot;</span>|<span class="string">&quot;bottom&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">direction: Direction</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// if(direction === &quot;left&quot;) &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">switch</span>(direction) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;left&quot;</span> :</span><br><span class="line">      <span class="built_in">console</span>.log(direction);<span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//instanceof， obj instanceof class,若obj对象是类class的实例，则返回true</span></span><br><span class="line"><span class="keyword">type</span> Time = <span class="built_in">string</span>|<span class="built_in">Date</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printTime</span>(<span class="params">time : Time</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(time <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params">p: Student|Teacher</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in, a in b,若b对象拥有a属性返回true</span></span><br><span class="line"><span class="keyword">type</span> Fish = &#123;</span><br><span class="line">  <span class="attr">swimming</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog = &#123;</span><br><span class="line">  <span class="attr">running</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">animal: Fish|Dog</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="string">&quot;swimming&quot;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">    animal.swimming();</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    animal.running();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fish:Fish = &#123;</span><br><span class="line">  <span class="function"><span class="title">swimming</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;swimming&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">walk(fish);</span><br></pre></td></tr></table></figure>

<h4 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h4><p>自定义类型时，希望一个接口允许有任意的属性签名。任意属性有两种定义方式：</p>
<ul>
<li>属性签名是 string 类型</li>
<li>属性签名是 number 类型</li>
</ul>
<p><strong>string 任意类型属性</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IString &#123;</span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">number</span> <span class="comment">//IString类型的对象可以有任意属性名，</span></span><br><span class="line">  <span class="comment">//string指对象的键都是字符串类型，number规定了属性值的类型</span></span><br><span class="line">  <span class="comment">//propName 类似于函数的形参，是可以取其他名字的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj: IString = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>number 任意类型属性</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> INumber &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span> <span class="comment">//INumber类型的数组可以有任意的数字下标，数组成员的类型必须是string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr: INumber = [<span class="string">&#x27;suukii&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>同时定义两种任意属性</strong></p>
<p>一个接口可以同时定义这两种任意属性，但是 number 类型的签名指定的值类型必须是 string 类型的签名指定的值类型的子集</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IDouble &#123;</span><br><span class="line">  [prop: <span class="built_in">string</span>]: <span class="built_in">object</span></span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">Function</span> <span class="comment">//Function是object的子集</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>同时定义任意属性和其它类型的属性</strong></p>
<p>注：一旦定义了任意属性，那么其他属性(确定属性、可选属性、只读属性等)的类型都必须是它的类型的子集</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  age?: <span class="built_in">number</span></span><br><span class="line">  [prop: <span class="built_in">string</span>]: <span class="built_in">string</span> | <span class="built_in">number</span> <span class="comment">//当不是子集时可以使用联合类型使其它类型变成子集</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//但是number 类型的任意属性签名不会影响其他 string 类型的属性签名</span></span><br><span class="line"><span class="keyword">type</span> Arg = &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">fn: () =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//参数名为fn,参数类型为函数类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义常量时，编写函数的类型</span></span><br><span class="line"><span class="keyword">type</span> AddFn = <span class="function">(<span class="params">num: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> add: AddFn = <span class="function">(<span class="params">num1: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> returnFn = &#123;</span><br><span class="line">  <span class="comment">//返回值里面有函数时</span></span><br><span class="line">  <span class="attr">echartInstance</span>: echarts.EChartsType</span><br><span class="line">  <span class="attr">setOptions</span>: <span class="function">(<span class="params">options: echarts.EChartsOption</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="attr">updateSize</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="可选类型"><a href="#可选类型" class="headerlink" title="可选类型"></a>可选类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可选类型必须写在必选类型后面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>) </span>&#123; <span class="comment">//y -&gt; number|undefined</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参数的默认值"><a href="#参数的默认值" class="headerlink" title="参数的默认值"></a>参数的默认值</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般函数参数顺序</span></span><br><span class="line"><span class="comment">//必传参数  有默认值的参数  可选参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span> = <span class="number">100</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...nums: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    total += num</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure>

<h4 id="可推导的-this-类型"><a href="#可推导的-this-类型" class="headerlink" title="可推导的 this 类型"></a>可推导的 this 类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//this的不明确类型</span></span><br><span class="line"><span class="keyword">type</span> ThisType = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eating</span>(<span class="params"><span class="built_in">this</span>: ThisType, str: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//第一个参数传this,其他参数放到this后面</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; eating &#x27;</span> + str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">eating</span>: eating,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//隐式绑定</span></span><br><span class="line">info.eating(<span class="string">&#x27;hhhh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//显式绑定</span></span><br><span class="line">eating.call(&#123; <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span> &#125;, <span class="string">&#x27;hhh&#x27;</span>)</span><br><span class="line">eating.apply(&#123; <span class="attr">name</span>: <span class="string">&#x27;james&#x27;</span> &#125;, [<span class="string">&#x27;hhh&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h4><p>函数的重载：函数的名称相同，但是参数不同的几个函数，就是函数的重载</p>
<p>其他语言</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">function <span class="title">add</span><span class="params">(num1, num2)</span></span>&#123;<span class="comment">// 具体实现&#125;</span></span><br><span class="line"><span class="function">function <span class="title">add</span><span class="params">(num1, num2, num3)</span></span>&#123;<span class="comment">//具体实现&#125;</span></span><br></pre></td></tr></table></figure>

<p>TS</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>): <span class="title">number</span> //不写具体实现</span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1: <span class="built_in">string</span>, num2: <span class="built_in">string</span></span>): <span class="title">string</span> //重载函数</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1: <span class="built_in">any</span>, num2: <span class="built_in">any</span></span>) </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function">  //具体实现</span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="title">if</span> (<span class="params"><span class="keyword">typeof</span> num1 === <span class="string">&#x27;string&#x27;</span></span>) </span>&#123;</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">num1</span>.<span class="title">length</span> + <span class="title">num2</span>.<span class="title">length</span></span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="title">return</span> <span class="title">num1</span> + <span class="title">num2</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">const</span> <span class="title">result</span> = <span class="title">add</span>(<span class="params"><span class="number">20</span>, <span class="number">30</span></span>)</span></span><br><span class="line"><span class="function"><span class="title">const</span> <span class="title">result2</span> = <span class="title">add</span>(<span class="params"><span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span></span>)</span></span><br><span class="line"><span class="function">//在函数的重载中，实现函数是不能直接被调用的</span></span><br></pre></td></tr></table></figure>

<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">//ts中要求类的属性必须有默认值</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">//定义属性的时候直接初始化</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  <span class="function"><span class="title">eating</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; eating&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//别人在new一个对象的时候会自动调用此函数，要求别人new的时候传参</span></span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Person2(<span class="string">&#x27;ysj&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">//将老师和学生重复的属性抽到Person里面,让学生类和老师类再继承Person</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  <span class="function"><span class="title">eating</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;eating&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">sno</span>: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">studying</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;studying&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">teaching</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;teaching&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stu = <span class="keyword">new</span> Student()</span><br><span class="line">stu.name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line">stu.age = <span class="number">18</span></span><br><span class="line"><span class="built_in">console</span>.log(stu.name)</span><br><span class="line"><span class="built_in">console</span>.log(stu.sno)</span><br></pre></td></tr></table></figure>

<p>类的继承 2</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">eating</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;eating&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">sno</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, sno: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name, age) <span class="comment">//通过super调用父类的构造器</span></span><br><span class="line">    <span class="built_in">this</span>.sno = sno</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">eating</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//子类对父类方法进行重写(overwrite)</span></span><br><span class="line">    <span class="built_in">super</span>.eating() <span class="comment">//执行父类方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;student eating&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">studying</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;studying&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stu = <span class="keyword">new</span> Student(<span class="string">&#x27;ysj&#x27;</span>, <span class="number">18</span>, <span class="number">2017</span>)</span><br><span class="line"><span class="built_in">console</span>.log(stu.name)</span><br><span class="line"><span class="built_in">console</span>.log(stu.sno)</span><br></pre></td></tr></table></figure>

<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>多态：在某一个方法里面，看似相同的类型，在真正执行方法的时候，表现出来的形态是不一样的<br>多态前提：父类引用指向子类对象(继承或接口)<br>多态目的：为了写出更加具备通用性的代码</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">action</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;animal running&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">action</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;dog running!!!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">action</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fish swimming!!!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeActions</span>(<span class="params">animal: Animal[]</span>) </span>&#123;</span><br><span class="line">  animal.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item.action() <span class="comment">//执行的重写之后的方法</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makeActions([<span class="keyword">new</span> Dog(), <span class="keyword">new</span> Fish()])</span><br></pre></td></tr></table></figure>

<h4 id="类的成员修饰符"><a href="#类的成员修饰符" class="headerlink" title="类的成员修饰符"></a>类的成员修饰符</h4><p>ts 中，类的属性和方法支持三种修饰符：public、private、protected</p>
<ul>
<li>public 修饰的是在任何地方可见、公有的属性或方法，默认编写的属性就是 public 的</li>
<li>private 修饰的是仅在同一类中可见、私有的属性或方法</li>
<li>protected 修饰的是仅在类自身及子类中可见、受保护的属性或方法</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span> <span class="comment">//默认修饰符</span></span><br><span class="line">  <span class="keyword">private</span> age: <span class="built_in">number</span> <span class="comment">//仅在当前类(Person)中能访问</span></span><br><span class="line">  <span class="keyword">protected</span> height: <span class="built_in">number</span> <span class="comment">//在类内部和子类中可以访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="只读属性-readonly"><a href="#只读属性-readonly" class="headerlink" title="只读属性 readonly"></a>只读属性 readonly</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">readonly</span> name: <span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span> <span class="comment">//可以在constructor里面赋值，赋值之后就不可以再修改</span></span><br><span class="line">  <span class="keyword">readonly</span> friend?: Person <span class="comment">//属性本身不能进行修改，但若为对象类型，则可修改对象中的属性</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, friend?: Person</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;ysj&#x27;</span>, <span class="keyword">new</span> Person(<span class="string">&#x27;kobe&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="getters-setters"><a href="#getters-setters" class="headerlink" title="getters/setters"></a>getters/setters</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> _name: <span class="built_in">string</span> <span class="comment">//私有属性一般用下划线开头</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//访问器 getter/setter</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title">name</span>(<span class="params">newName</span>) &#123;</span><br><span class="line">    <span class="comment">//调用： p.name</span></span><br><span class="line">    <span class="built_in">this</span>._name = newName</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;ysj&#x27;</span>)</span><br><span class="line">p.name = <span class="string">&#x27;ysj2&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(p.name)</span><br></pre></td></tr></table></figure>

<h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> time: <span class="built_in">string</span> = <span class="string">&#x27;20:00&#x27;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">sport</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;做运动&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.time) <span class="comment">//静态属性可通过类直接访问，而不用new一个对象再访问</span></span><br><span class="line">Person.sport()</span><br></pre></td></tr></table></figure>

<h4 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类 abstract"></a>抽象类 abstract</h4><p>父类本身可能并不需要对某些方法进行具体的实现，所以父类中定义的方法，可以定义为抽象方法</p>
<ul>
<li>抽象方法必须存在于抽象类中</li>
<li>抽象类不能被实例化(不能通过 new 创建)</li>
<li>抽象方法必须被子类实现，否则该子类必须也是一个抽象类</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> shape.getArea()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="comment">//抽象类不能被实例化</span></span><br><span class="line">  <span class="keyword">abstract</span> getArea(): <span class="built_in">number</span> <span class="comment">//抽象方法必须在抽象类里面，且必须被子类实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> width: <span class="built_in">number</span></span><br><span class="line">  <span class="keyword">private</span> height: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">width: <span class="built_in">number</span>, height: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">    <span class="built_in">this</span>.width = width</span><br><span class="line">    <span class="built_in">this</span>.height = height</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//抽象类被子类实现</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.height</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ce = <span class="keyword">new</span> Rectangle(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(makeArea(ce))</span><br></pre></td></tr></table></figure>

<h4 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  <span class="function"><span class="title">eating</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;eating&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1: Person = &#123;</span><br><span class="line">  <span class="comment">//类本身可以作为类型注解的类型</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">eating</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;p1 eating&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>规范：定义接口名字的时候，名字前面加个大写的 I</p>
<h4 id="声明对象类型"><a href="#声明对象类型" class="headerlink" title="声明对象类型"></a>声明对象类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口方式来声明对象类型 interface</span></span><br><span class="line"><span class="keyword">interface</span> InfoType2 &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  age?: <span class="built_in">number</span> <span class="comment">//可选属性</span></span><br><span class="line">  <span class="keyword">readonly</span> height: <span class="built_in">number</span> <span class="comment">//只读属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> info2: InfoType2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj2&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.8</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过interface定义索引类型</span></span><br><span class="line"><span class="keyword">interface</span> Index &#123;</span><br><span class="line">  <span class="comment">//要求key为number类型  value为string类型</span></span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> frontLanguage: Index = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;HTML&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;CSS&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;JS&#x27;</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数类型-1"><a href="#函数类型-1" class="headerlink" title="函数类型"></a>函数类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Fn &#123;</span><br><span class="line">  (n1: <span class="built_in">number</span>, <span class="attr">n2</span>: <span class="built_in">number</span>): <span class="built_in">number</span> <span class="comment">//函数类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> ISwim &#123;</span><br><span class="line">  <span class="attr">swimming</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IFly &#123;</span><br><span class="line">  <span class="attr">flying</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IAction <span class="keyword">extends</span> ISwim, IFly &#123;</span><br><span class="line">  <span class="comment">//继承多个接口</span></span><br><span class="line">  <span class="comment">//实现两个接口组合的方式：定义一个新的接口，继承自原来的的接口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> action: IAction = &#123;</span><br><span class="line">  <span class="function"><span class="title">swimming</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">flying</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//另一种组合类型的方式：交叉类型</span></span><br><span class="line"><span class="keyword">interface</span> ISwim &#123;</span><br><span class="line">  <span class="attr">swimming</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IFly &#123;</span><br><span class="line">  <span class="attr">flying</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyType1 = ISwim | IFly</span><br><span class="line"><span class="keyword">const</span> obj1: MyType1 = &#123;</span><br><span class="line">  <span class="function"><span class="title">swimming</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//ISwim和IFly接口的方法有其中一个就行</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyType2 = ISwim &amp; IFly <span class="comment">//使用交叉类型将两个对象类型结合在一起</span></span><br><span class="line"><span class="keyword">const</span> obj2: MyType2 = &#123;</span><br><span class="line">  <span class="function"><span class="title">swimming</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//ISwim和IFly接口的方法必须都有才行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">flying</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> ISwim &#123;</span><br><span class="line">  <span class="attr">swimming</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> IEat &#123;</span><br><span class="line">  <span class="attr">eating</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承只能实现单继承</span></span><br><span class="line"><span class="comment">//实现：实现接口，类可以实现多个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="title">implements</span> <span class="title">ISwim</span>, <span class="title">IEat</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">swimming</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Fish Swimming&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">eating</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Fish Eating&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">ISwim</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">swimming</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写一些公共的API：可以面向接口进行编程(前提：让类实现对应的接口)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swimAction</span>(<span class="params">swimable: ISwim</span>) </span>&#123;</span><br><span class="line">  swimAction.swimming() <span class="comment">//实现了这个接口的类对应的对象都有此方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.所有实现了接口的类对应的对象，都是可以传入</span></span><br><span class="line">swimAction(<span class="keyword">new</span> Person()) <span class="comment">//传入Person对象</span></span><br><span class="line">swimAction(<span class="keyword">new</span> Fish()) <span class="comment">//传入Fish对象</span></span><br></pre></td></tr></table></figure>

<h4 id="interface-和-type-区别"><a href="#interface-和-type-区别" class="headerlink" title="interface 和 type 区别"></a>interface 和 type 区别</h4><ul>
<li>定义非对象类型，通常使用 type</li>
<li>定义对象类型<ul>
<li>interface 可以重复的对某个接口来定义属性和方法</li>
<li>而 type 定义的是别名，别名是不能重复的</li>
</ul>
</li>
</ul>
<p>定义接口如果名称相同，会将所有属性进行合并</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IFoo &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> IFoo &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo: IFoo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以定义新接口，用来给内置对象增加属性</span></span><br><span class="line"><span class="comment">// interface Winidow &#123;</span></span><br><span class="line"><span class="comment">//   name: string</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>官网推荐尽可能使用 interface，也可根据自己爱好选择</p>
<h4 id="字面量赋值"><a href="#字面量赋值" class="headerlink" title="字面量赋值"></a>字面量赋值</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: <span class="string">&#x27;重庆市&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//info引用直接赋值给IPerson类型的数据时</span></span><br><span class="line"><span class="comment">//ts会做一个擦除(freshness)操作，在进行类型检测时，将多余的属性擦除，擦除后若满足IPerson类型，ts就认为可以赋值</span></span><br><span class="line"><span class="keyword">const</span> p: IPerson = info</span><br><span class="line"></span><br><span class="line"><span class="comment">// const p1: IPerson = &#123; //直接赋值会报错，无法通过ts的类型检测</span></span><br><span class="line"><span class="comment">//   name: &quot;ysj&quot;,</span></span><br><span class="line"><span class="comment">//   address: &quot;重庆市&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>枚举类型为 ts 特有特性之一：</p>
<ul>
<li>枚举就是将一组可能出现的值，一个个列举出来，定义在一个类型中(枚举类型)</li>
<li>枚举允许开发者定义一组命名常量，常量可以是字符串、数字类型</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Direction &#123; <span class="comment">//一般枚举类型都大写</span></span><br><span class="line">  LEFT, <span class="comment">// 默认有值，从0开始，即可以写为  LEFT = 0, RIGHT = 1, TOP = 2, BOTTOM = 3</span></span><br><span class="line">  RIGHT, <span class="comment">//也可以自定类型的值，若只改第一个的值，后面的值会依次递增(第一个为100，第二个就是101)</span></span><br><span class="line">  TOP, <span class="comment">//还可以赋值为字符串</span></span><br><span class="line">  BOTTOM,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">turnDirection</span>(<span class="params">direction: Direction</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (direction) &#123;</span><br><span class="line">    <span class="keyword">case</span> Direction.LEFT:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;向左转&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> Direction.RIGHT:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;向右转&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> Direction.TOP:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;向右转&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> Direction.BOTTOM:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;向右转&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">const</span> foo: <span class="built_in">never</span> = direction <span class="comment">//少穷举一个此行代码就会报错(因为任何值都不能赋值给never)</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">turnDirection(Direction.LEFT) <span class="comment">//代码阅读性强，看参数就知道是向左转</span></span><br></pre></td></tr></table></figure>

<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>泛型：将函数的类型进行参数化，让外界决定参数类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类型的参数化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在定义函数时，不决定参数的类型</span></span><br><span class="line"><span class="comment">//而是让调用者以参数的形式告知此处函数的参数应该为何种类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>&lt;<span class="title">Type</span>&gt;(<span class="params">num: Type</span>): <span class="title">Type</span> </span>&#123;</span><br><span class="line">  <span class="comment">//Type首字母一般大写(规范)，常简写为T</span></span><br><span class="line">  <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方式一：明确传入参数类型</span></span><br><span class="line">sum&lt;<span class="built_in">number</span>&gt;(<span class="number">20</span>) <span class="comment">//传入number类型</span></span><br><span class="line">sum&lt;&#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;&gt;(&#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span> &#125;) <span class="comment">//传入对象类型</span></span><br><span class="line">sum&lt;<span class="built_in">any</span>[]&gt;([<span class="string">&#x27;ysj1&#x27;</span>, <span class="string">&#x27;ysj2&#x27;</span>]) <span class="comment">//传入数组类型</span></span><br><span class="line"><span class="comment">//调用方式二：类型推导</span></span><br><span class="line">sum(<span class="number">5</span>) <span class="comment">//会推导为字面量类型,最好明确指定类型</span></span><br></pre></td></tr></table></figure>

<p><strong>泛型接收类型参数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>&lt;<span class="title">T</span>, <span class="title">E</span>&gt;(<span class="params">arg1: T, arg2: E</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">foo&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">50</span>, <span class="string">&#x27;ysj&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>开发中常用名称简写：</p>
<ul>
<li>T：Type 缩写，类型</li>
<li>K、V：key 和 value 的缩写，键值对</li>
<li>E：Element 缩写，元素</li>
<li>O：Object 缩写，对象</li>
</ul>
<p><strong>泛型接口</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson&lt;S = string, N = number&gt; &#123;</span><br><span class="line">  <span class="comment">//默认类型</span></span><br><span class="line">  <span class="attr">name</span>: S</span><br><span class="line">  <span class="attr">age</span>: N</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p: IPerson&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = &#123;</span><br><span class="line">  <span class="comment">//若无默认类型，此处不传类型也不会进行类型推导，会报错</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>泛型类</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="attr">x</span>: T</span><br><span class="line">  <span class="attr">y</span>: T</span><br><span class="line">  <span class="attr">z</span>: T</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x: T, y: T, z: T</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x</span><br><span class="line">    <span class="built_in">this</span>.y = y</span><br><span class="line">    <span class="built_in">this</span>.z = z</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Point(<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">//没有明确指定时会有类型推导</span></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Point&lt;<span class="built_in">number</span>&gt;(<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">const</span> p3: Point&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> Point(<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p><strong>泛型的类型约束</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> ILength &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ILength</span>&gt;(<span class="params">arg: T</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//要求传进来的属性必须具有length属性，且会返回一个number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h3><p>TS 支持两种方式控制作用域</p>
<ul>
<li>模块化：每个文件可以是一个独立的模块，支持 ES Module、CommonJS</li>
<li>命名空间：通过 namespace 来声明一个命名空间</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> time &#123;</span><br><span class="line">  <span class="comment">//命名空间里面的数据要想在外部拿到，必须要export</span></span><br><span class="line">  <span class="comment">//通过 time.format(&quot;dd&quot;); 获取</span></span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">time: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;2222-05-20&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> price &#123;</span><br><span class="line">  <span class="comment">//要想在其它模块使用，则需要导出命名空间</span></span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">price: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;99.99元&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; time, price &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/format&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(time.format(<span class="string">&#x27;dd&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(price.format(<span class="number">99</span>))</span><br></pre></td></tr></table></figure>

<p><strong>类型查找</strong></p>
<p>typeacritp 文件： .d.ts 文件</p>
<ul>
<li>用来做类型的声明(declare)。仅仅用来做类型检测，告知 ts 我们有哪些类型</li>
</ul>
<p>ts 会在以下查找类型声明</p>
<ul>
<li><p>内置类型声明</p>
<ul>
<li>ts 自带的，帮助我们内置了 js 运行时的一些标准化 API 的声明文件</li>
<li>如 Math、Date、Window、Document 等</li>
</ul>
</li>
<li><p>外部定义类型声明(三方库)</p>
<ul>
<li>在自己库中进行类型声明（编写.d.ts 文件），比如 axios</li>
<li>通过社区的一个公有库 DefinitelyTyped 存放类型声明文件<ul>
<li>该库的 GitHub 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RlZmluaXRlbHlUeXBlZC9EZWZpbml0ZWx5VHlwZWQv">https://github.com/DefinitelyTyped/DefinitelyTyped/<i class="fa fa-external-link-alt"></i></span></li>
<li>该库查找声明安装方式的地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2R0L3NlYXJjaD9zZWFyY2g9">https://www.typescriptlang.org/dt/search?search=<i class="fa fa-external-link-alt"></i></span></li>
<li>比如我们安装 react 的类型声明： npm i @types/lodash –save-dev(或-D，开发时)</li>
</ul>
</li>
</ul>
</li>
<li><p>自己定义类型声明</p>
<ul>
<li><p>在任意路径下新建***.d.ts 文件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;lodash&#x27;</span>&#123; <span class="comment">//给lodash声明模块</span></span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">join</span>(<span class="params">arr: <span class="built_in">any</span>[]</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">// 声明变量/函数/类</span></span><br><span class="line"><span class="function"><span class="title">declare</span> <span class="title">let</span> <span class="title">name</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="title">declare</span> <span class="title">functionfoo</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function"><span class="title">declare</span> <span class="title">class</span> <span class="title">Preson</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span><br><span class="line">&#125;</span><br><span class="line">//声明文件</span><br><span class="line"><span class="title">declare</span> <span class="title">module</span> &#x27;*.<span class="title">jpg</span>&#x27;; <span class="comment">//将以.jpg结尾的文件当成一个模块</span></span><br><span class="line"><span class="keyword">import</span> aImg  <span class="keyword">from</span> <span class="string">&#x27;./img/a/jpg&#x27;</span>; <span class="comment">//再在其它文件通过impor引入图片文件时就不会再报错了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明命令空间</span></span><br><span class="line"><span class="keyword">declare</span> namsespace $ &#123; <span class="comment">//如果引用Jquery</span></span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">settings: <span class="built_in">any</span></span>): <span class="title">any</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL3RzY29uZmln">https://www.typescriptlang.org/tsconfig<i class="fa fa-external-link-alt"></i></span></p>
<p>ts 的配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">//编译选项</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span>, <span class="comment">//目标代码(ts -&gt; js(es5/6/7))</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>, <span class="comment">//目标代码需要使用的模块化方案 esnext:es6+ umd:支持多种模块化</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>, <span class="comment">//打开一些严格的检查</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>, <span class="comment">//是否对jsx进行某种处理 preserve：保留</span></span><br><span class="line">    <span class="attr">&quot;importHelpers&quot;</span>: <span class="literal">true</span>, <span class="comment">//辅助的导入功能</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>, <span class="comment">//按照node的方式去解析模块</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>, <span class="comment">//跳过对一些库的类型检测</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>, <span class="comment">//是否允许esmodule与commonjs混合使用</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>, <span class="comment">//是否允许esmodule与commonjs混合使用</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span>, <span class="comment">//是否生成映射文件</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>, <span class="comment">//文件路径在解析时基本的url(基于当前文件)</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span>: [<span class="string">&quot;webpack-env&quot;</span>], <span class="comment">//指定具体要解析使用的类型(不传时类型来自于target)</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="comment">//编译阶段路径解析(类似于webpack中的alias)</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span>: [<span class="string">&quot;src/*&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;components/*&quot;</span>: [<span class="string">&quot;src/components/*&quot;</span>] <span class="comment">//路径别名配置components报错时可加上此配置选项</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;esnext&quot;</span>, <span class="string">&quot;dom&quot;</span>, <span class="string">&quot;dom.iterable&quot;</span>, <span class="string">&quot;scripthost&quot;</span>] <span class="comment">//指定在项目中可以使用哪些库里面的类型</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//当前有哪些ts代码是需要经过编译解析的</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [<span class="string">&quot;src/**/*.ts&quot;</span>, <span class="string">&quot;src/**/*.tsx&quot;</span>, <span class="string">&quot;src/**/*.vue&quot;</span>, <span class="string">&quot;tests/**/*.ts&quot;</span>, <span class="string">&quot;tests/**/*.tsx&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>] <span class="comment">//排除哪些东西</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ts</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>186-nodejs</title>
    <url>/20220315/186-nodejs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>官网：nodejs.org</p>
<ul>
<li>LTS：长期支持版本，相对稳定一些，推荐线上环境使用该版本</li>
<li>Current：最新的 node 版本，包含很多新特性（学习阶段使用）</li>
</ul>
<p>安装 node 时会自动安装 npm 工具包</p>
<p>REPL：Read-Eval-Print- Loop，读取-求值-输出 循环，简单的、交互式的编程环境</p>
<h3 id="全局对象和模块化开发"><a href="#全局对象和模块化开发" class="headerlink" title="全局对象和模块化开发"></a>全局对象和模块化开发</h3><p>清空控制台：console.clear</p>
<p>打印函数的调用栈：console.trace</p>
<h4 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h4><h5 id="特殊的全局对象"><a href="#特殊的全局对象" class="headerlink" title="特殊的全局对象"></a>特殊的全局对象</h5><p>这些全局对象可以在模块中任意使用(每个模块都有，看起来像全局对象)，但是在命令行交互中是不可以使用的</p>
<p>__dirname、__filename、exports、module、require()</p>
<ul>
<li><p>__dirname:获取当前文件所在的路径，不包括后面的文件名</p>
</li>
<li><p>__filename：获取当前文件所在的路径和文件名称，包括后面的文件名称</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(__dirname) <span class="comment">/* 打印当前文件所在目录：E:\Web\Node */</span></span><br><span class="line"><span class="built_in">console</span>.log(__filename) <span class="comment">/* 打印当前路径+文件名：E:\Web\Node\index.js */</span></span><br></pre></td></tr></table></figure>

<h5 id="常见的全局对象"><a href="#常见的全局对象" class="headerlink" title="常见的全局对象"></a>常见的全局对象</h5><ul>
<li><p>process 对象：process 提供了 Node 进程中相关的信息：</p>
<ul>
<li>比如 Node 的运行环境、参数信息等；</li>
</ul>
</li>
<li><p>console 对象：提供了简单的调试控制台</p>
</li>
<li><p>定时器函数：在 Node 中使用定时器有好几种方式</p>
<ul>
<li>setTimeout( fn , 1000)：fn 在 1000 毫秒后执行一次；</li>
<li>setInterval( fn , 1000)：fn 每 1000 毫秒重复执行一次；</li>
<li>setImmediate(callback[, …args])：callbackI / O 事件后的回调的“立即”执行</li>
<li>process.nextTick(callback[, …args])：添加到下一次 tick 队列中；</li>
</ul>
</li>
</ul>
<h5 id="global-对象"><a href="#global-对象" class="headerlink" title="global 对象"></a>global 对象</h5><p>是一个全局对象，process、console、setTimeout 等都有被放到 global 中</p>
<p>和 window 的区别：</p>
<ul>
<li>在浏览器中，全局变量都是在 window 上的，比如有 document、setInterval、setTimeout、alert、console 等等</li>
<li>浏览器顶层 var 定义一个变量会默认添加到 window 对象上，node 中不会，只是当前模块的中的变量，不会放到全局中</li>
</ul>
<h4 id="JS-模块化"><a href="#JS-模块化" class="headerlink" title="JS 模块化"></a>JS 模块化</h4><p>模块化：将程序划分成一个个小的结构</p>
<p>Node 中对 CommonJS 进行了支持和实现：</p>
<ul>
<li>在 Node 中每一个 js 就是一个单独的模块</li>
<li>模块的包含 CommonJS 规范的核心变量：exports、module.exports、require<ul>
<li>exports 和 module.exports 可以负责对模块中的内容进行导出；</li>
<li>require 函数可以帮助我们导入其他模块（自定义模块、系统模块、第三方库模块）中的内容；</li>
</ul>
</li>
<li>可以使用这些变量进行模块化开发</li>
<li>每个模块里面都有一个 exports 对象，默认指向一个空对象</li>
<li>Node 中实现 commonJS 的本质就是引用赋值</li>
</ul>
<h5 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bar.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;coderwhy&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello,&#x27;</span> + name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.name = name <span class="comment">/* 想把谁导出就往exports上加属性(属性自己取名) */</span></span><br><span class="line"><span class="built_in">exports</span>.age = age</span><br><span class="line"><span class="built_in">exports</span>.sayHello = sayHello</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">require</span>(<span class="string">&#x27;./bar&#x27;</span>) <span class="comment">/**返回一个exports对象 */</span></span><br><span class="line"><span class="comment">// 实质： bar = &#123;name, age, sayHello&#125;</span></span><br><span class="line"><span class="comment">// const &#123;name, age, sayHello&#125; = require(&#x27;./bar&#x27;); //对象的解构</span></span><br><span class="line"><span class="built_in">console</span>.log(bar.name)</span><br><span class="line"><span class="built_in">console</span>.log(bar.sayHello(<span class="string">&#x27;World&#x27;</span>))</span><br><span class="line"><span class="comment">//bar对象是exports对象的浅层拷贝(引用赋值)</span></span><br></pre></td></tr></table></figure>

<h5 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h5><p>一个 js 文件就是一个模块，每一个模块都是 Module 的一个实例</p>
<p>module.exports = exports (一个对象，赋值的操作在顶层)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//使用此种方式导出时，与exports就没关系了</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="attr">sayHello</span>: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello, &#x27;</span> + name)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="require-细节"><a href="#require-细节" class="headerlink" title="require 细节"></a>require 细节</h5><p>require 是一个函数</p>
<p>require 查找规则(导入格式如下：require(x) ):</p>
<ul>
<li><p><input disabled="" type="checkbox">  x 是一个核心模块，比如 path、http</p>
<ul>
<li><input disabled="" type="checkbox"> 直接返回核心模块，并且停止查找</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox">  X 是以 ./ 或 ../ 或 /（根目录）开头的</p>
<ol>
<li>将 X 当做一个文件在对应的目录下查找<ul>
<li><input disabled="" type="checkbox"> 如果有后缀名，按照后缀名的格式查找对应的文件</li>
<li><input disabled="" type="checkbox"> 如果没有后缀名，会按照如下顺序：<ul>
<li><input disabled="" type="checkbox"> 直接查找文件 X</li>
<li><input disabled="" type="checkbox"> 查找 X.js 文件</li>
<li><input disabled="" type="checkbox"> 查找 X.json 文件</li>
<li><input disabled="" type="checkbox"> 查找 X.node 文件</li>
</ul>
</li>
</ul>
</li>
<li>没有找到对应的文件，将 X 作为一个目录<ul>
<li><input disabled="" type="checkbox"> 查找目录下面的 index 文件（查找 X/index.js 文件 &gt; 查找 X/index.json 文件 &gt; 查找 X/index.node 文件）</li>
</ul>
</li>
<li>如果没有找到，那么报错：not found</li>
</ol>
</li>
<li><p><input disabled="" type="checkbox">  直接是一个 X（没有路径），并且 X 不是一个核心模块</p>
<ul>
<li><input disabled="" type="checkbox"> 会在每一层目录里面的 node_modules 里查找第三方模块</li>
<li><input disabled="" type="checkbox"> 如果找到根目录也没找到，报错 not found</li>
</ul>
</li>
</ul>
<h5 id="模块的加载过程"><a href="#模块的加载过程" class="headerlink" title="模块的加载过程"></a>模块的加载过程</h5><ul>
<li><input disabled="" type="checkbox"> 模块在被第一次引入时，模块中的 js 代码会被运行一次</li>
<li><input disabled="" type="checkbox"> 模块被多次引入时，会缓存，最终只加载（运行）一次<ul>
<li><input disabled="" type="checkbox"> 是因为每个模块对象 module 都有一个属性：loaded，为 false 表示还没有加载，为 true 表示已经加载；</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 如果有循环引入，node 采用深度优先算法加载</li>
</ul>
<h5 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h5><p>ES Module 模块采用 export 和 import 关键字来实现模块化</p>
<ul>
<li><input disabled="" type="checkbox"> export 负责将模块内的内容导出</li>
<li><input disabled="" type="checkbox"> import 负责从其他模块导入内容</li>
<li><input disabled="" type="checkbox"> ES Module 将自动采用严格模式(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RyaWN0X21vZGU=">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode<i class="fa fa-external-link-alt"></i></span>)</li>
</ul>
<p><strong>导出导入方式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//export导出的是引用(地址)，不是值</span></span><br><span class="line"><span class="comment">//导出方式一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;dsad&#x27;</span></span><br><span class="line"><span class="comment">//导出方式二</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="comment">//此处为大括号，不是对象,里面放要导出的变量的引用列表</span></span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出方式三</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="comment">//导出时给变量起别名</span></span><br><span class="line">  name <span class="keyword">as</span> Fname,</span><br><span class="line">  age <span class="keyword">as</span> Fage,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导入方式一</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, age &#125; <span class="keyword">from</span> <span class="string">&#x27;./modules/foo.js&#x27;</span></span><br><span class="line"><span class="comment">//导入方式二</span></span><br><span class="line"><span class="keyword">import</span> &#123; name <span class="keyword">as</span> Sname, age <span class="keyword">as</span> Sage &#125; <span class="keyword">from</span> <span class="string">&#x27;./modules/foo.js&#x27;</span> <span class="comment">//导入时取别名</span></span><br><span class="line"><span class="comment">//导入方式三</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> foo <span class="keyword">from</span> <span class="string">&#x27;./modules/foo.js&#x27;</span> <span class="comment">//将导入的所有东西放进一个对象中</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">//export 和import结合使用</span></span><br><span class="line"><span class="keyword">export</span> &#123; name, age &#125; <span class="keyword">from</span> <span class="string">&#x27;.*foo.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>default 用法</strong>（默认导出）</p>
<ul>
<li>默认导出 export 时不需要指定名字</li>
<li>导入时不需要使用{}，并且可以自己指定名字</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params"></span>) </span>&#123;	<span class="comment">//一个模块中只能有一个默认导出export default</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;	<span class="comment">//导出时不需要名字</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> format <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span>;	<span class="comment">//导入时自己取名</span></span><br></pre></td></tr></table></figure>

<h5 id="import-函数"><a href="#import-函数" class="headerlink" title="import 函数"></a>import 函数</h5><p>用来动态加载某一个模块，返回一个 promise</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./modules/foo.js&#x27;</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res.name)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">  <span class="comment">//或者</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./modules/foo.js&#x27;</span>).then(<span class="function">(<span class="params">aaa</span>) =&gt;</span> &#123;</span><br><span class="line">    aaa.sayHello()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用内置模块解析"><a href="#常用内置模块解析" class="headerlink" title="常用内置模块解析"></a>常用内置模块解析</h3><h4 id="path"><a href="#path" class="headerlink" title="path"></a>path</h4><ul>
<li>使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> filepath = path.resolve(basePath, filename) <span class="comment">//路径拼接,自动转成操作系统上支持的路径格式</span></span><br><span class="line"><span class="built_in">console</span>.log(filepath)</span><br></pre></td></tr></table></figure>

<ul>
<li>path 模块的其他方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">//1.获取路径的信息</span></span><br><span class="line"><span class="keyword">const</span> filename = <span class="string">&#x27;/User/why/abc.txt&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(path.dirname(filename)) <span class="comment">//获取文件路径  /User/why</span></span><br><span class="line"><span class="built_in">console</span>.log(path.basename(filename)) <span class="comment">//获取文件名  abc.txt</span></span><br><span class="line"><span class="built_in">console</span>.log(path.extname(filename)) <span class="comment">//获取后缀名  .txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.join路径拼接</span></span><br><span class="line"><span class="comment">// resolve会判断拼接的路径字符串中,是否有以/或./或../开头的路径,使用最多</span></span><br><span class="line"><span class="comment">//join是直接拼接两个路径</span></span><br><span class="line"><span class="keyword">const</span> basepath = <span class="string">&#x27;/User/why&#x27;</span></span><br><span class="line"><span class="keyword">const</span> filename = <span class="string">&#x27;abc.txt&#x27;</span></span><br><span class="line"><span class="keyword">const</span> filepath = path.join(basepath, filename)</span><br></pre></td></tr></table></figure>

<h4 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h4><p>fs 是 File System 的缩写，表示文件系统</p>
<ul>
<li>fs 的三种使用操作</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例: 读取文件的信息</span></span><br><span class="line"><span class="keyword">const</span> filepath = <span class="string">&#x27;./abc.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.方式一: 同步操作</span></span><br><span class="line"><span class="keyword">const</span> info = fs.statSync(filepath)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;后续需要执行的代码&#x27;</span>) <span class="comment">//会被阻塞</span></span><br><span class="line"><span class="built_in">console</span>.log(info)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.方式二: 异步操作</span></span><br><span class="line">fs.stat(filepath, <span class="function">(<span class="params">err, info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(info)</span><br><span class="line">  <span class="built_in">console</span>.log(info.isFile())</span><br><span class="line">  <span class="built_in">console</span>.log(info.isDirectory())</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;后续需要执行的代码&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.方式三: 基于Promise的异步操作</span></span><br><span class="line">fs.promises</span><br><span class="line">  .stat(filepath)</span><br><span class="line">  .then(<span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;后续需要执行的代码&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>文件描述符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.open(<span class="string">&#x27;./abc.txt&#x27;</span>, <span class="function">(<span class="params">err, fd</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过描述符去获取文件的信息</span></span><br><span class="line">  fs.fstat(fd, <span class="function">(<span class="params">err, info</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>文件的读写</li>
</ul>
<p>fs.readFile(path[, options], callback)：读取文件的内容</p>
<p>fs.writeFile(file, data[, options], callback)：在文件中写入内容</p>
<p>option 参数：flag：写入的方式,encoding：字符的编码；</p>
<ul>
<li><input disabled="" type="checkbox"> flag</li>
<li><input disabled="" type="checkbox"> w 打开文件写入，默认值，会覆盖原有内容；</li>
<li><input disabled="" type="checkbox"> w+打开文件进行读写，如果不存在则创建文件；</li>
<li><input disabled="" type="checkbox"> r+ 打开文件进行读写，如果不存在那么抛出异常；</li>
<li><input disabled="" type="checkbox"> r 打开文件读取，读取时的默认值</li>
<li><input disabled="" type="checkbox"> a 打开要写入的文件，将流放在文件末尾。如果不存在则创建文件；</li>
<li><input disabled="" type="checkbox"> a+打开文件以进行读写，将流放在文件末尾。如果不存在则创建文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.文件写入</span></span><br><span class="line"><span class="keyword">const</span> content = <span class="string">&#x27;你好啊,李银河&#x27;</span></span><br><span class="line">fs.writeFile(<span class="string">&#x27;./abc.txt&#x27;</span>, content, &#123; <span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2.文件读取  如果不填写encoding，返回的结果是Buffer</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./abc.txt&#x27;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>文件夹的操作</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建文件夹</span></span><br><span class="line"><span class="keyword">const</span> dirname = <span class="string">&#x27;./why&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (!fs.existsSync(dirname)) &#123;</span><br><span class="line">  <span class="comment">//如果文件不存在</span></span><br><span class="line">  fs.mkdir(dirname, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//创建文件夹</span></span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取文件夹中的所有文件的名字</span></span><br><span class="line">fs.readdir(dirname, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//简单读取</span></span><br><span class="line">  <span class="built_in">console</span>.log(files) <span class="comment">//files：该文件夹下的所有文件的名字放进一个数组里面</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//读取其他文件时</span></span><br><span class="line"><span class="keyword">const</span> avatarPath = <span class="string">&#x27;../../uploads/avatar/&#x27;</span></span><br><span class="line">fs.readdirSync(path.join(__dirname, avatarPath)).forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// __dirname 当前目录</span></span><br><span class="line">  <span class="built_in">console</span>.log(file)</span><br><span class="line">&#125;) <span class="comment">//读取当前文件所在的目录，遍历</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFiles</span>(<span class="params">dirname</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//递归读取多重文件夹的文件</span></span><br><span class="line">  fs.readdir(dirname, &#123; <span class="attr">withFileTypes</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//withFileTypes: true 传入文件类型</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> file <span class="keyword">of</span> files) &#123;</span><br><span class="line">      <span class="comment">// info.isFile(); 判断是不是文件</span></span><br><span class="line">      <span class="comment">// info.isDirectory(); //判断info是不是文件夹</span></span><br><span class="line">      <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">        <span class="comment">//如果当前的是文件夹</span></span><br><span class="line">        <span class="keyword">const</span> filepath = path.resolve(dirname, file.name)</span><br><span class="line">        getFiles(filepath) <span class="comment">//递归调用</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(file.name) <span class="comment">//不是文件夹，打印文件名</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">getFiles(dirname)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.重命名</span></span><br><span class="line">fs.rename(<span class="string">&#x27;./why&#x27;</span>, <span class="string">&#x27;./kobe&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//why重命名为kobe</span></span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>padStart(2, 0);</p>
<p>一个函数，数字是两位数，不足时用 0 补齐;（01、02 之类）</p>
<h4 id="events-模块"><a href="#events-模块" class="headerlink" title="events 模块"></a>events 模块</h4><ul>
<li>emitter.on(eventName, listener):监听事件，也可使用 addListener(emitter.once():监听一次)</li>
<li>emitter.off():参数同上，移除事件监听,也可使用 removeListener</li>
<li>emitter.emit(eventName[…args]):发出事件，可以携带一些参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本使用</span></span><br><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>) <span class="comment">//导入的是一个类</span></span><br><span class="line"><span class="comment">// 1.创建发射器</span></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> EventEmitter() <span class="comment">//创建对象，事件总线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.监听某一个事件</span></span><br><span class="line"><span class="comment">// addListener是on的alias简写</span></span><br><span class="line">emitter.on(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 监听事件名为click的事件</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;监听1到click事件&#x27;</span>, args)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listener2 = <span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;监听2到click事件&#x27;</span>, args)</span><br><span class="line">&#125;</span><br><span class="line">emitter.on(<span class="string">&#x27;click&#x27;</span>, listener2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.发出一个事件</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  emitter.emit(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;coderwhy&#x27;</span>, <span class="string">&#x27;james&#x27;</span>, <span class="string">&#x27;kobe&#x27;</span>) <span class="comment">//发射事件的时候传递参数</span></span><br><span class="line">  emitter.off(<span class="string">&#x27;click&#x27;</span>, listener2) <span class="comment">//取消监听</span></span><br><span class="line">  emitter.emit(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;coderwhy&#x27;</span>, <span class="string">&#x27;james&#x27;</span>, <span class="string">&#x27;kobe&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="包管理工具-🔖"><a href="#包管理工具-🔖" class="headerlink" title="包管理工具 🔖"></a>包管理工具 🔖</h3><p>Node Package Manager，Node 包管理器</p>
<p>版本号：<span class="exturl" data-url="aHR0cHM6Ly9zZW12ZXIub3JnL2xhbmcvemgtQ04v">https://semver.org/lang/zh-CN/<i class="fa fa-external-link-alt"></i></span></p>
<p>semver 版本规范是 X.Y.Z</p>
<ul>
<li>X 主版本号(major)：当你做了不兼容的 API 修改(可能不兼容之前的版本)</li>
<li>Y 次版本号(minor)：当你做了向下兼容的功能性新增(新功能增加，但是兼容之前的版本)</li>
<li>Z 修订号(patch)：当你做了向下兼容的问题修正(没有新功能，修复了之前版本的 BUG)</li>
</ul>
<p>^和~区别：</p>
<ul>
<li>^x.y.z：x 保持不变，y 和 z 安装最新的版本</li>
<li>~x.y.z：x 和 y 保持不变，z 永远安装最新的版本</li>
</ul>
<h4 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h4><ul>
<li><p>scripts 属性</p>
<p>用于配置一些脚本命令，以键值对的形式存在</p>
</li>
<li><p>dependencies 属性</p>
<p>指定开发和生产环境都需要依赖的包，通常是项目实际开发用到的一些库模块</p>
</li>
<li><p>devDependencies 属性</p>
<p>指定开发时需要，生产环境不需要的包，比如 webpack，使用–save-dev 安装到此属性中</p>
</li>
</ul>
<h4 id="npm-install-命令"><a href="#npm-install-命令" class="headerlink" title="npm install 命令"></a>npm install 命令</h4><ul>
<li><p>全局安装</p>
<p>npm install 包名 -g</p>
<p>直接将某个包安装到全局：npm install yarn -g</p>
<p>全局安装一般是安装工具</p>
</li>
<li><p>局部安装</p>
<p>npm install 包名</p>
<ul>
<li><p>安装发开和生产依赖</p>
<p>npm install axios</p>
<p>npm i axios</p>
</li>
<li><p>安装开发时依赖</p>
<p>npm install axios –save-dev</p>
<p>npm install axios -D</p>
<p>npm i axios -D</p>
</li>
<li><p>安装 package.json 中的依赖包</p>
<p>npm install</p>
</li>
</ul>
</li>
</ul>
<p>从 npm5 开始，npm 支持缓存策略，package-lock.json</p>
<p>npm config get cache 查看缓存文件的路径</p>
<h4 id="npm-其他命令"><a href="#npm-其他命令" class="headerlink" title="npm 其他命令"></a>npm 其他命令</h4><ul>
<li><p>卸载某个依赖包</p>
<p>npm uninstall package</p>
<p>npm uninstall package –save-dev</p>
<p>npm uninstall package -D</p>
</li>
<li><p>强制重新 build</p>
<p>npm recuild</p>
</li>
<li><p>清除缓存</p>
<p>npm cache clean</p>
</li>
</ul>
<h4 id="Yarn-工具"><a href="#Yarn-工具" class="headerlink" title="Yarn 工具"></a>Yarn 工具</h4><p>安装：npm install yarn -g</p>
<h4 id="cnpm-工具"><a href="#cnpm-工具" class="headerlink" title="cnpm 工具"></a>cnpm 工具</h4><p>安装：npm install -g cnpm –registry=<span class="exturl" data-url="aHR0cHM6Ly9yZWdpc3RyeS5ucG0udGFvYmFvLm9yZy8=">https://registry.npm.taobao.org<i class="fa fa-external-link-alt"></i></span></p>
<p>查看镜像：cnpm config get registry # <span class="exturl" data-url="aHR0cHM6Ly9yLm5wbS50YW9iYW8ub3JnLw==">https://r.npm.taobao.org/<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="npx-工具"><a href="#npx-工具" class="headerlink" title="npx 工具"></a>npx 工具</h4><p>npm5.2 之后自带的一个命令</p>
<p>常用来调用项目中的某个模块的指令</p>
<p>npx webpack –version</p>
<p>若全局安装的 4.0.0，局部安装的 3.6.0，运行此命令后显示 3.6.0</p>
<h3 id="开发脚手架工具"><a href="#开发脚手架工具" class="headerlink" title="开发脚手架工具"></a>开发脚手架工具</h3><p>使用第三方库，commander.js，安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install commander</span><br></pre></td></tr></table></figure>

<p>06 和 07 两节，以后用到时看视频</p>
<p>发布 npm 包：</p>
<ol>
<li>去 npmjs.com 注册账号</li>
<li>在本地电脑 npm 包文件夹里终端输入 npm login，输入账号密码邮箱登录</li>
<li>修改 package.json</li>
<li>终端输入 npm publish 进行发布</li>
</ol>
<h3 id="Buffer-和浏览器的事件循环"><a href="#Buffer-和浏览器的事件循环" class="headerlink" title="Buffer 和浏览器的事件循环"></a>Buffer 和浏览器的事件循环</h3><h4 id="编码和解码"><a href="#编码和解码" class="headerlink" title="编码和解码"></a>编码和解码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Buffer</span></span><br><span class="line"><span class="comment">//方式1，已过期，不推荐</span></span><br><span class="line"><span class="comment">// const buffer = new Buffer(message);</span></span><br><span class="line"><span class="comment">// console.log(buffer);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建方式二</span></span><br><span class="line"><span class="keyword">const</span> buffer = Buffer.from(message)</span><br><span class="line"><span class="built_in">console</span>.log(buffer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message2 = <span class="string">&#x27;孙悟空&#x27;</span></span><br><span class="line"><span class="keyword">const</span> buffer2 = Buffer.from(message2, <span class="string">&#x27;utf8&#x27;</span>) <span class="comment">//指定编码方式,默认就是utf8</span></span><br><span class="line"><span class="built_in">console</span>.log(buffer2)</span><br><span class="line"><span class="built_in">console</span>.log(buffer2.toString(<span class="string">&#x27;utf8&#x27;</span>)) <span class="comment">//指定解码方式，不指定默认为utf8</span></span><br></pre></td></tr></table></figure>

<h4 id="Buffer-和文件操作"><a href="#Buffer-和文件操作" class="headerlink" title="Buffer 和文件操作"></a>Buffer 和文件操作</h4><ul>
<li>文本文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;./foo.txt&#x27;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//指定解码方式</span></span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">fs.readFile(<span class="string">&#x27;./foo.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//未指定解码方式</span></span><br><span class="line">  <span class="built_in">console</span>.log(data.toString()) <span class="comment">//将读取到的字节流使用utf8解码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>图片文件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取图片文件</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./wamp.png&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">  fs.writeFile(<span class="string">&#x27;./foo.png&#x27;</span>, data, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//将读取到的图片文件写入到当前文件夹</span></span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//sharp库的使用(sharp库：对图片进行处理)</span></span><br><span class="line"><span class="keyword">const</span> sharp = <span class="built_in">require</span>(<span class="string">&#x27;sharp&#x27;</span>)</span><br><span class="line">sharp(<span class="string">&#x27;./foo.png&#x27;</span>)</span><br><span class="line">  .resize(<span class="number">200</span>, <span class="number">200</span>) <span class="comment">//将图片大小变为200*200</span></span><br><span class="line">  .toFile(<span class="string">&#x27;./baz.png&#x27;</span>) <span class="comment">//将缩小后的图片写入当前文件夹</span></span><br></pre></td></tr></table></figure>

<h4 id="事件循环和异步-IO"><a href="#事件循环和异步-IO" class="headerlink" title="事件循环和异步 IO"></a>事件循环和异步 IO</h4><p>事件循环：我们编写的 js 代码和浏览器/Node 之间的一个桥梁</p>
<p>进程(process)：计算机啊已经运行的程序</p>
<p>线程(thread)：操作系统能够运行运算调度的最小单位</p>
<p>优先执行微任务，微任务执行完以后才执行宏任务队列，宏任务执行之前，微任务队列必须为空</p>
<h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h4><p>流：一连串的字节，字节流，所有的流都是 EventEmitter 的实例</p>
<p>Writable:可以向其写入数据的流</p>
<p>Readble：可以从中读取数据的流</p>
<p>流的读取：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//流的方式读取</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> reader = fs.createReadStream(<span class="string">&#x27;./foo.txt&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">start</span>: <span class="number">3</span>, <span class="comment">//从第三个位置开始读</span></span><br><span class="line">  <span class="attr">end</span>: <span class="number">6</span>, <span class="comment">//读到第六个位置结束</span></span><br><span class="line">  <span class="attr">highWaterMark</span>: <span class="number">2</span>, <span class="comment">//最高读两个</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据读取的过程</span></span><br><span class="line">reader.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">  reader.pause() <span class="comment">//暂停读取</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    reader.resume() <span class="comment">//暂停1s后恢复读取</span></span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">reader.on(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;文件被打开&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">reader.on(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;文件被关闭&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>流的写入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//传统写入方式</span></span><br><span class="line"><span class="comment">// fs.writeFile(&quot;./bar.txt&quot;, &quot;Hello Stream&quot;, (err) =&gt; &#123;</span></span><br><span class="line"><span class="comment">// console.log(err);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="keyword">const</span> writer = fs.createWriteStream(<span class="string">&#x27;./bar.txt&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">flags</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="attr">start</span>: <span class="number">4</span>, <span class="comment">//开始写入的位置,如果这个位置有字符，会覆盖原来的</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">writer.write(<span class="string">&#x27;你好啊&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//流的写入</span></span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// writer.close();   //关闭文件</span></span><br><span class="line"></span><br><span class="line">writer.end(<span class="string">&#x27;Hello World&#x27;</span>) <span class="comment">//end是先写入再执行close关闭文件</span></span><br><span class="line"></span><br><span class="line">writer.on(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;文件被关闭&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>pipe 的使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//把一个文件的内容写入到另一个文件里面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传统写法</span></span><br><span class="line"><span class="comment">// fs.writeFile(&#x27;./bar.txt&#x27;, (err, data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   fs.writeFile(&#x27;./baz.txt&#x27;, data, (err) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(err);</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//stream写法</span></span><br><span class="line"><span class="keyword">const</span> reader = fs.createReadStream(<span class="string">&#x27;./foo.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> writer = fs.createWriteStream(<span class="string">&#x27;./foz.txt&#x27;</span>)</span><br><span class="line">reader.pipe(writer)</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>

<h3 id="Http-模块"><a href="#Http-模块" class="headerlink" title="Http 模块"></a>Http 模块</h3><h4 id="Web-服务器"><a href="#Web-服务器" class="headerlink" title="Web 服务器"></a>Web 服务器</h4><ul>
<li>初体验</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>) <span class="comment">//导入模块</span></span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&#x27;Hello Server&#x27;</span>) <span class="comment">//等价于执行 write和close</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8000</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//启动服务器,并且指定端口号和主机</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>检测服务器有没有发生改变：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g nodemon  #全局安装</span><br><span class="line"><span class="meta">#</span><span class="bash">通过nodemon启动服务器，修改代码后服务器可以自动重启</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如：nodemon aaa.js</span></span><br></pre></td></tr></table></figure>

<ul>
<li>另一种创建服务器的方式(本质是一样的)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server1 = <span class="keyword">new</span> http.Server(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//创建服务器</span></span><br><span class="line">  res.end(<span class="string">&#x27;另一种方式创建server&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">server1.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;server启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>listen 的三个参数：</p>
<ol>
<li>端口 port：可省，系统会默认分配端</li>
<li>主机 host：localhost 会被解析成 127.0.0.1，0.0.0.0 监听 ip 上的所有地址</li>
<li>回调函数</li>
</ol>
<h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><p>request 对象中封装了客户端给服务器传递过来的所有信息</p>
<ul>
<li><p>res.url:请求的地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>) <span class="comment">//解析url</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>) <span class="comment">//解析query</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//请求地址：http://localhost:8000/login?username=ysj&amp;password=123</span></span><br><span class="line">  <span class="built_in">console</span>.log(req.url) <span class="comment">// /login?username=ysj&amp;password=123</span></span><br><span class="line">  <span class="keyword">const</span> &#123; pathname, query &#125; = url.parse(req.url) <span class="comment">//解析req.url</span></span><br><span class="line">  <span class="built_in">console</span>.log(pathname) <span class="comment">// /login</span></span><br><span class="line">  <span class="built_in">console</span>.log(query) <span class="comment">// username=ysj&amp;password=123</span></span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = qs.parse(query) <span class="comment">//解析query</span></span><br><span class="line">  <span class="built_in">console</span>.log(username, password) <span class="comment">// ysj 123</span></span><br><span class="line">  res.end(<span class="string">&#x27;Hello Server&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>res.method:请求方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;kobe&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;8888&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当其为字符串时转成对象</span></span><br><span class="line"><span class="keyword">const</span> &#123; username, password &#125; = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>) <span class="comment">//解析url</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>) <span class="comment">//解析query</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//请求地址：http://localhost:8000/login?username=ysj&amp;password=123</span></span><br><span class="line">  <span class="keyword">const</span> &#123; pathname &#125; = url.parse(req.url)</span><br><span class="line">  <span class="keyword">if</span> (pathname == <span class="string">&#x27;/login&#x27;</span> &amp;&amp; req.method == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">//拿到body中的数据</span></span><br><span class="line">    <span class="comment">// 如果确定传过来的数据是字符串类型</span></span><br><span class="line">    req.setEncoding(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">// 提前设置编码格式</span></span><br><span class="line">    req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//若未提前设置编码格式，传过来的数据是二进制</span></span><br><span class="line">      <span class="comment">// console.log(data.toString()); //将二进制转成字符串</span></span><br><span class="line">      <span class="keyword">const</span> &#123; username, password &#125; = <span class="built_in">JSON</span>.parse(data) <span class="comment">//将字符串转换为json对象</span></span><br><span class="line">      <span class="built_in">console</span>.log(username, password)</span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(<span class="string">&#x27;Hello Server&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在 Restful 规范(设计风格)中，对于数据的增删改查应该通过不同的请求方式:</p>
<ul>
<li>GET：查询数据</li>
<li>POST：新建数据</li>
<li>PATCH：更新数据（部分更新）</li>
<li>PUT：更新数据（全部更新）</li>
<li>DELETE：删除数据</li>
</ul>
</li>
<li><p>res.headers:请求头</p>
<ul>
<li>content-type：请求携带数据的类型<ul>
<li>application/json 是 json 类型</li>
<li>text/plain 是文本类型</li>
<li>application/xml 是 xml 类型</li>
<li>multipart/form-data 表示是上传文件</li>
</ul>
</li>
<li>content-lenght：数据的长度</li>
<li>accept-encoding：告知服务器，客户端支持的文件压缩格式</li>
<li>accept：告知服务器，客户端可接受文件的格式类型</li>
<li>user-agent：客户端相关的信息</li>
</ul>
</li>
</ul>
<h4 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h4><p>返回状态码</p>
<table>
<thead>
<tr>
<th>状态代码</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>客户端请求成功</td>
</tr>
<tr>
<td>400</td>
<td>由于客户端请求有语法错误，不能被服务器所理解</td>
</tr>
<tr>
<td>401</td>
<td>请求未经授权，这个状态码必须与 WWW-Authenticate 报头域一起使用</td>
</tr>
<tr>
<td>403</td>
<td>服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因</td>
</tr>
<tr>
<td>404</td>
<td>请求的资源不存在，如输入了错误的 url</td>
</tr>
<tr>
<td>500</td>
<td>服务器发生不可预期的错误，导致无法完成客户端的请求</td>
</tr>
<tr>
<td>503</td>
<td>服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常</td>
</tr>
</tbody></table>
<p>状态码的设置方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.直接给属性赋值</span></span><br><span class="line">res.statusCode = <span class="number">500</span></span><br><span class="line"><span class="comment">// 2.和Head一起设置</span></span><br><span class="line">res.writeHead(<span class="number">500</span>)</span><br></pre></td></tr></table></figure>

<p>设置响应 Header</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置方式一</span></span><br><span class="line">res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">//设置方式二</span></span><br><span class="line">res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">  <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=utf8&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Http-请求"><a href="#Http-请求" class="headerlink" title="Http 请求"></a>Http 请求</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//http发送get请求</span></span><br><span class="line"><span class="comment">// http.get(&quot;http://localhost:8000&quot;, (res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   res.on(&#x27;data&#x27;, (data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(data,toString());</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"><span class="comment">//   res.on(&#x27;end&#x27;, () =&gt; &#123;	//监听数据结束</span></span><br><span class="line"><span class="comment">//     console.log(&quot;获取到了所有的结果&quot;);</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//http发送post请求</span></span><br><span class="line"><span class="keyword">const</span> req = http.request(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8888</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 拿到结果</span></span><br><span class="line">    res.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data, toString())</span><br><span class="line">    &#125;)</span><br><span class="line">    res.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;获取到了所有的结果&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">req.end() <span class="comment">//结束请求</span></span><br></pre></td></tr></table></figure>

<h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装脚手架</span></span><br><span class="line">npm install -g express-generator</span><br><span class="line"><span class="meta">#</span><span class="bash">创建项目</span></span><br><span class="line">express express-project-name</span><br><span class="line"><span class="meta">#</span><span class="bash">进入项目文件夹</span></span><br><span class="line">cd express-project-name</span><br><span class="line"><span class="meta">#</span><span class="bash">安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta">#</span><span class="bash">启动项目</span></span><br><span class="line">node 	bin/www</span><br><span class="line"><span class="meta">#</span><span class="bash">浏览器访问</span></span><br><span class="line">http://localhost:3000/</span><br></pre></td></tr></table></figure>

<h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>Express 是一个路由和中间件的 Web 框架，本质上是一系列中间件函数的调用</p>
<p>基本模式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>) <span class="comment">//导入express模块,express是一个函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express() <span class="comment">//调用express，返回一个函数赋值给app</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听默认路径</span></span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&#x27;Hello POST Express&#x27;</span>) <span class="comment">//结束请求响应生命周期</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启监听</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;express服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>中间件本质是一个传递给 express 的接收三个参数的回调函数</p>
<ul>
<li>请求对象(request 对象)</li>
<li>响应对象(response 对象)</li>
<li>next 函数(在 express 中定义的用于执行下一个中间件的函数)</li>
</ul>
<p>执行的任务：</p>
<ul>
<li>执行任何代码</li>
<li>更改请求和响应对象</li>
<li>结束请求响应周期(返回数据)</li>
<li>调用栈中的下一个中间件</li>
</ul>
<p>如果当前中间件没有结束请求-响应周期，则必须调用 next()将控制权传递给下一个中间件功能，否则，请求将被挂起</p>
<p>中间件应用到程序中：</p>
<ul>
<li>​ app.use() router.use()</li>
<li>app.methods() router.use()</li>
</ul>
<p><strong>四种中间件</strong></p>
<ul>
<li><p>普通中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写普通中间件 使用use注册中间件(本质回调函数)</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//任何路径都可以匹配</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;注册第一个普通的中间件&#x27;</span>)</span><br><span class="line">  res.end(<span class="string">&#x27;Hello World&#x27;</span>) <span class="comment">//res.end一般放最后一个中间件里面</span></span><br><span class="line">  next() <span class="comment">//调用下一个中间件,不调用next()下一个中间件就不会执行</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;注册第二个中间件&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;普通中间件&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>路径匹配中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//路径匹配中间件</span></span><br><span class="line">app.use(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 只匹配路径</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;middleware01&#x27;</span>)</span><br><span class="line">  res.end(<span class="string">&#x27;MiddleWare&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>路径和方法中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//路径和方法匹配中间件</span></span><br><span class="line">app.get(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;path and method middleware01&#x27;</span>)</span><br><span class="line">  res.end(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>连续注册中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(</span><br><span class="line">  <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;home path and method middleware01&#x27;</span>)</span><br><span class="line">    next()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;home path and method middleware02&#x27;</span>)</span><br><span class="line">    next()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;home path and method middleware03&#x27;</span>)</span><br><span class="line">    next()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;home path and method middleware04&#x27;</span>)</span><br><span class="line">    next()</span><br><span class="line">    res.end(<span class="string">&#x27;home page&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>解析 json 数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> e = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use((req, res, next) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   if(req.headers[&quot;content-type&quot;] === &#x27;application/json&#x27;) &#123;  //如果前端传过来的是json数据就做解析</span></span><br><span class="line"><span class="comment">//     req.on(&#x27;data&#x27;, (data) =&gt; &#123;  // 监听前端传过来的数据</span></span><br><span class="line"><span class="comment">//       console.log(data.toString());</span></span><br><span class="line"><span class="comment">//       const info = JSON.parse(data.toString());</span></span><br><span class="line"><span class="comment">//       req.body = info;  //给request添加属性body,并且赋值为info</span></span><br><span class="line"><span class="comment">//       // 在其它中间件通过req.body就可拿到info参数</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">//     res.on(&#x27;end&#x27;, () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//       res.end(&quot;Json~&quot;);</span></span><br><span class="line"><span class="comment">//       next();</span></span><br><span class="line"><span class="comment">//     &#125;);</span></span><br><span class="line"><span class="comment">//   &#125;else &#123;</span></span><br><span class="line"><span class="comment">//     next();</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">app.use(express.json()) <span class="comment">//express内置的解析json的函数,等价于以上代码</span></span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;)) <span class="comment">// 解析x-www-form-urlencoded类型的数据</span></span><br><span class="line"><span class="comment">// extend:</span></span><br><span class="line"><span class="comment">// true: 对urlencoded进行解析时使用的第三方库： qs</span></span><br><span class="line"><span class="comment">// false：对urlencoded进行解析时使用的Node内置模块： querystring</span></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body)</span><br><span class="line">  res.end(<span class="string">&#x27;Json~&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>body 数据解析</p>
<p>安装第三方库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install multer	#express官方开发的用于解析表单数据的插件</span><br></pre></td></tr></table></figure>

<p>form-data 非文件类型解析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>) <span class="comment">// 导入用于解析form-data的库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = multer() <span class="comment">//调用函数multer，将返回的结果赋值给upload</span></span><br><span class="line"></span><br><span class="line">app.use(upload.any()) <span class="comment">//调用any方法,返回一个函数,注册为中间件;非文件类型使用any()解析</span></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body)</span><br><span class="line">  res.end(<span class="string">&#x27;form-data&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;form-data解析服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>form-data 文件解析</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>) <span class="comment">// 导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storage = multer.diskStorage(&#123;</span><br><span class="line">  <span class="comment">//自定义存储信息</span></span><br><span class="line">  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="string">&#x27;./uploads/&#x27;</span>) <span class="comment">//调用cb回调函数 参数1：有无错误  参数2：上传文件保存路径</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="built_in">Date</span>.now() + path.extname(file.originalname)) <span class="comment">//参数2：文件名 时间戳+从原始文件里面取出的后缀名</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123;</span><br><span class="line">  <span class="comment">// dest:&#x27;./uploads/&#x27;, //上传的文件放到当前文件的uploads的文件夹下面,没有会自动创建文件夹</span></span><br><span class="line">  storage, <span class="comment">//自定义存储信息</span></span><br><span class="line">&#125;) <span class="comment">//调用函数multer，将返回的结果赋值给upload</span></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/upload&#x27;</span>, upload.single(<span class="string">&#x27;file&#x27;</span>), <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//文件上传接口</span></span><br><span class="line">  <span class="comment">//中间插入中间件,获取上传的文件,并且进行保存,file为表单key,以便于精准拿到文件</span></span><br><span class="line">  <span class="comment">//上传一个文件:upload.single()  上传多个文件:upload.array(&#x27;file&#x27;)</span></span><br><span class="line">  <span class="comment">// upload.fields([&#123;name: &quot;file&quot;, maxCount: 2&#125;])</span></span><br><span class="line">  <span class="built_in">console</span>.log(req.file) <span class="comment">//获取上传后的文件的信息  多个文件使用req.files</span></span><br><span class="line">  <span class="comment">// 不要将multer作为全局中间件使用</span></span><br><span class="line">  res.end(<span class="string">&#x27;文件上传成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;form-data解析服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="核心用法"><a href="#核心用法" class="headerlink" title="核心用法"></a>核心用法</h4><p>客户端传递到服务器参数的方法常见的是 5 种</p>
<ul>
<li><p>通过 get 请求中的 URL 的 params</p>
</li>
<li><p>通过 get 请求中的 URL 的 query</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.get(<span class="string">&#x27;/products/:id/:name&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//传过来一个id和name   localhost:8000/products/1/coderwhy</span></span><br><span class="line">  <span class="built_in">console</span>.log(req.params) <span class="comment">//获取传过来的参数(是一个对象)</span></span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// localhost:8000/login?username=coderwhy&amp;password=123</span></span><br><span class="line">  <span class="built_in">console</span>.log(req.query)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>通过 post 请求中的 body 的 json 格式</p>
</li>
<li><p>通过 post 请求中的 body 的 x-www-form-urlencoded 格式</p>
</li>
<li><p>通过 post 请求中的 form-data 格式</p>
</li>
</ul>
<p>响应数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.json() <span class="comment">//里面可以放json数据、数组</span></span><br><span class="line">res.status(<span class="number">404</span>) <span class="comment">//返回状态码</span></span><br></pre></td></tr></table></figure>

<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>可以使用 express.Router 来创建一个路由处理程序,一个 Router 实例拥有完整的中间件和路由系统</p>
<p>路由的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//user.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router() <span class="comment">//调用express.Router函数创建路由</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.json([<span class="string">&#x27;why&#x27;</span>, <span class="string">&#x27;kobe&#x27;</span>, <span class="string">&#x27;lilei&#x27;</span>])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/:id&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.json(<span class="string">`<span class="subst">$&#123;req.params.id&#125;</span>用户的信息`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.json(<span class="string">&#x27;create users success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router <span class="comment">//导出路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用路由.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routers/users&#x27;</span>) <span class="comment">//导入用户路由</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/users&#x27;</span>, userRouter) <span class="comment">//注册用户路由里面的接口,指定用户路由请求路径为/user</span></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;路由服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="静态资源服务器"><a href="#静态资源服务器" class="headerlink" title="静态资源服务器"></a>静态资源服务器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(express.static(<span class="string">&#x27;./build&#x27;</span>)) <span class="comment">//静态资源的相对位置</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;路由服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install koa</span><br></pre></td></tr></table></figure>

<p>初体验</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>) <span class="comment">//导入,是一个类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa() <span class="comment">//创建类的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// koa中所有中间件执行完之后没有返回结果，就会返回not found</span></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//使用中间件 ctx：context,上下文</span></span><br><span class="line">  ctx.response.body = <span class="string">&#x27;Hello World&#x27;</span> <span class="comment">// 给body赋的值会返回给前端,类似于express的res.end(&quot;Hello World&quot;)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;koa初体验服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//koa注册中间件只能使用app.use()</span></span><br><span class="line"><span class="comment">//app.get/post  app.use(&#x27;/home&#x27;)    没有提供这些方式,连续注册中间件也没有提供</span></span><br></pre></td></tr></table></figure>

<h4 id="路由-1"><a href="#路由-1" class="headerlink" title="路由"></a>路由</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install koa-router</span><br></pre></td></tr></table></figure>

<p>路由的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//user-router.js</span></span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>) <span class="comment">//导入koa-router的类</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123; <span class="attr">prefix</span>: <span class="string">&#x27;/users&#x27;</span> &#125;) <span class="comment">// 创建路由的类,并填入路由的前缀</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//注册路由接口</span></span><br><span class="line">  ctx.response.body = <span class="string">&#x27;User List~&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">router.put(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//注册路由接口</span></span><br><span class="line">  ctx.response.body = <span class="string">&#x27;put request~&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router <span class="comment">//导出路由的类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router/user&#x27;</span>) <span class="comment">//导入用户路由</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.use(userRouter.routes()) <span class="comment">//调用userRouter.routes(),返回一个函数,注册路由中间件</span></span><br><span class="line">app.use(userRouter.allowedMethods()) <span class="comment">//某个methods请求方式不被服务器支持时会给出对应提示</span></span><br><span class="line"><span class="comment">//allowedMethods()用于判断某一个methods是否支持</span></span><br><span class="line"><span class="comment">//如请求put\delete\patch自动报错Method Not Allowed，状态码405</span></span><br><span class="line"><span class="comment">//link\copy\lock自动报错Not Implemented,状态码501</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;koa路由服务器启动成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h4><p><strong>params 和 query</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="keyword">new</span> Router(&#123; <span class="attr">prefix</span>: <span class="string">&#x27;/users&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">//   http://localhost:8000/users/abc?name=ysj&amp;password=123</span></span><br><span class="line">userRouter.get(<span class="string">&#x27;/:id&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.request.params) <span class="comment">//&#123; id: &#x27;abc&#x27; &#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(ctx.request.query) <span class="comment">//&#123; name: &#x27;ysj&#x27;, password: &#x27;123&#x27; &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line">app.use(userRouter.routes()) <span class="comment">//注册路由</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;服务器参数解析&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>json 和 urlencoded</strong></p>
<p>安装第三方库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install koa-bodyparser	#用来解析json和urlencoded</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>) <span class="comment">// 导入解析json和urlencoded的第三方库</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.use(bodyParser()) <span class="comment">// 调用bodyParser函数,返回值注册为中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.request.body) <span class="comment">// 打印解析的json或urlencoded数据</span></span><br><span class="line">  ctx.response.body = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;urlencoded和json解析&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>解析 form-data</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install koa-multer</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;koa-multer&#x27;</span>) <span class="comment">// 导入解析form-data数据的第三方库</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> upload = multer() <span class="comment">// 调用multer函数</span></span><br><span class="line">app.use(upload.any()) <span class="comment">// 注册解析form-data的中间件</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.req.body) <span class="comment">// form-data解析之后的数据放在req里面(非request)</span></span><br><span class="line">  ctx.response.body = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;form-data服务器解析&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a><strong>文件上传</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;koa-multer&#x27;</span>) <span class="comment">// 导入库</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> uploadRouter = <span class="keyword">new</span> Router(&#123; <span class="attr">prefix</span>: <span class="string">&#x27;/upload&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storage = multer.diskStorage(&#123;</span><br><span class="line">  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="string">&#x27;./uploads/&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="built_in">Date</span>.now() + path.extname(file.originalname))</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123;</span><br><span class="line">  storage,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">uploadRouter.post(<span class="string">&#x27;/avatar&#x27;</span>, upload.single(<span class="string">&#x27;avatar&#x27;</span>), <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.req.file) <span class="comment">// 打印当前上传文件的信息</span></span><br><span class="line">  ctx.response.body = <span class="string">&#x27;上传头像成功&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(uploadRouter.routes())</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;文件上传服务器&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="数据响应"><a href="#数据响应" class="headerlink" title="数据响应"></a>数据响应</h4><p>输出结果：body 将响应主题设置为以下之一:</p>
<ul>
<li>string:字符串数据</li>
<li>Buffer:Buffer 数据</li>
<li>Stream:流数据</li>
<li>Object || Array: 对象或数组</li>
<li>null: 不输出任何内容</li>
<li>若 response.status 尚未设置，Koa 会自动将状态设置为 200 或 204</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置状态码</span></span><br><span class="line">  ctx.status = <span class="number">200</span></span><br><span class="line">  <span class="comment">//设置响应内容</span></span><br><span class="line">  <span class="comment">// ctx.response.body = &quot;Hello World&quot;;</span></span><br><span class="line">  ctx.body = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;koa文件上传服务器&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="静态服务器"><a href="#静态服务器" class="headerlink" title="静态服务器"></a>静态服务器</h4><p>koa 并未内置部署相关的功能，需要使用第三方库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install koa-static</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> staticAssets = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>) <span class="comment">//引入</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.use(staticAssets(<span class="string">&#x27;./build/&#x27;</span>)) <span class="comment">//设置静态资源的路径</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;静态资源服务器&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isLogin = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (!isLogin) &#123;</span><br><span class="line">    ctx.app.emit(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;您还未登录&#x27;</span>), ctx)</span><br><span class="line">    <span class="comment">//抛出错误，传出ctx</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.status = <span class="number">401</span></span><br><span class="line">  ctx.body = err.message</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;静态资源服务器&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p>下载软件：<span class="exturl" data-url="aHR0cHM6Ly93d3cubXlzcWwuY29tLyVFRiVCQyU4QyVFNiU4QiU4OSVFNSU4OCVCMCVFNSVCQSU5NSVFOSU4MyVBOCVFRiVCQyU4QyVFOSU4MCU4OSVFNiU4QiVBOU15U1FM">https://www.mysql.com/，拉到底部，选择MySQL<i class="fa fa-external-link-alt"></i></span> Community Server 进行下载</p>
<p>点击 Go to Download Page,下载大一点的版本(小版本需要联网进行安装，安装教程详见视频 14)</p>
<p>MySQLroot 账户密码：123.</p>
<h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>打开终端，输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123.</span><br><span class="line"><span class="meta">#</span><span class="bash">root表示root用户  -p后跟密码</span></span><br><span class="line">mysql -uroot -p #回车后再输入密码</span><br></pre></td></tr></table></figure>

<h4 id="GUI-工具"><a href="#GUI-工具" class="headerlink" title="GUI 工具"></a>GUI 工具</h4><p>Navicat 破解教程，注册机在自己百度网盘：</p>
<p>[]: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcG9sb3l5L3AvMTIyMzEzNTcuaHRtbA==">https://www.cnblogs.com/poloyy/p/12231357.html<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h4><h5 id="常用规范"><a href="#常用规范" class="headerlink" title="常用规范"></a>常用规范</h5><ul>
<li>通常关键字大写</li>
<li>一句语句结束以后以;结尾</li>
<li>如遇到关键字作为表名或字段名称，可以使用``包裹</li>
</ul>
<h5 id="语句分类"><a href="#语句分类" class="headerlink" title="语句分类"></a>语句分类</h5><ul>
<li><p>DDL(Data Definition Language):数据定义语言</p>
<ul>
<li>对数据库或表进行创建、删除、修改等操作</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查询所有数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"># 选择某一个数据库</span><br><span class="line">use coderhub;</span><br><span class="line"></span><br><span class="line">#查看当前正在使用的数据库</span><br><span class="line">select database();</span><br><span class="line"></span><br><span class="line">#创建数据库</span><br><span class="line">-- CREATE DATABASE douyu;</span><br><span class="line">carete database if not exists douyu;	-- 当这个数据库不存在时就创建这个数据库</span><br><span class="line">-- create database if not exists huya default character set utf8mb4 collate utf8mb4_0900_ai_ci;	-- 创建时设置字符集</span><br><span class="line"></span><br><span class="line">#删除数据库</span><br><span class="line">drop database if exists douyu;	-- 数据库存在则删除</span><br><span class="line"></span><br><span class="line"># 修改数据库编码</span><br><span class="line">alter database douyu character set = utf8 collate utf8_unicode_ci;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查看当前数据库有哪些表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">-- 表不存在时创建表</span><br><span class="line">create table if not exists students(</span><br><span class="line">	`name` varchar(10),</span><br><span class="line">  age int,</span><br><span class="line">  score double</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 删除表</span><br><span class="line">drop table if exists `students`;</span><br></pre></td></tr></table></figure></li>
<li><p>DML(Data Manipulation Language):数据操作语言</p>
<ul>
<li>对表进行添加、删除、修改等操作</li>
</ul>
</li>
<li><p>DQL(Data Query Language):数据查询语言</p>
<ul>
<li>从数据库中查询记录</li>
</ul>
</li>
<li><p>DCL(Data Control Language):数据控制语言</p>
<ul>
<li>对数据库、表格的权限进行相关访问控制操作</li>
</ul>
</li>
</ul>
<h4 id="创建表-amp-数据查询"><a href="#创建表-amp-数据查询" class="headerlink" title="创建表&amp;数据查询"></a>创建表&amp;数据查询</h4><h5 id="MySQL-常用数据类型"><a href="#MySQL-常用数据类型" class="headerlink" title="MySQL 常用数据类型"></a><strong>MySQL 常用数据类型</strong></h5><ul>
<li>数字类型<ul>
<li>整数数字类型:int bigint ……</li>
<li>浮点数字类型:float double (float 是 4 个字节，double 是 8 个字节)</li>
<li>精确数字类型:decimal(n, m) numeric (n 位数字，保留 m 位小数)</li>
</ul>
</li>
<li>日期类型<ul>
<li>year：以 yyyy 格式显示值，范围 1901 到 2155，和 0000</li>
<li>date：以 YYYY-MM-DD 的格式显示值，支持范围 1000-01-01 到 9999-12-31</li>
<li>datetime：以 YYYY-MM-DD hh-mm-ss 的格式显示值，支持范围 1000-01-01 00:00:00 到 9999-12-31 23:59:59</li>
<li>timestamp：以 YYYY-MM-DD hh-mm-ss 的格式显示值但是范围为 UTC 的时间范围：1970-01-01 00:00:01 到 2038-01-19 03:14:07</li>
</ul>
</li>
<li>字符串类型<ul>
<li>char 类型在创建表时为固定长度，长度为 0-255，被查询时会删除后面的空格</li>
<li>varchar 类型是可变长度的字符串，长度可以指定为 0-65535 之间的值，被查询时不会删除后面的空格</li>
<li>binary 和 varbinary 用与存储二进制字符串，存储的是字节字符串</li>
<li>blob 用于存储大的二进制类型</li>
<li>text 用于存储大的字符串类型</li>
</ul>
</li>
</ul>
<h5 id="表约束"><a href="#表约束" class="headerlink" title="表约束"></a><strong>表约束</strong></h5><ul>
<li>主键：primary key<ul>
<li>区分每一条记录的唯一性，永远不会重复，不会为空</li>
<li>主键是表中唯一索引</li>
<li>创建表时若没有设置 not null，mysql 会自动设置</li>
<li>主键可以是多列索引，称为联合主键</li>
<li>开发中主键的字段应该是和业务无关的</li>
</ul>
</li>
<li>唯一性：unique<ul>
<li>约束某些字段，使其不会重复</li>
<li>null 可以重复</li>
</ul>
</li>
<li>不能为空：not null</li>
<li>默认值：default</li>
<li>自动递增：auto_increment</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建表的完整语法</span><br><span class="line">CREATE TABLE IF NOT EXISTS users (</span><br><span class="line">	id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,  #id为int类型,主键,不为空,自动增长</span><br><span class="line">	name VARCHAR(20) NOT NULL,	#可变长度，但是范围在20之内</span><br><span class="line">	age INT DEFAULT 0,</span><br><span class="line">	phoneNum VARCHAR(20) UNIQUE DEFAULT &#x27;&#x27;,</span><br><span class="line">	createTime TIMESTAMP</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 修改表</span><br><span class="line">-- 修改表名</span><br><span class="line">ALTER TABLE users RENAME TO `user`;</span><br><span class="line">-- 添加一个新的列</span><br><span class="line">ALTER TABLE `user` ADD `updateTime` TIMESTAMP;</span><br><span class="line">-- 修改列名(字段名称)</span><br><span class="line">ALTER TABLE `user` CHANGE `phoneNum` `telPhone` VARCHAR(20);	-- phoneNum列的名字改为telPhone</span><br><span class="line">-- 修改字段的类型</span><br><span class="line">ALTER TABLE `user` MODIFY `name` VARCHAR(30);	-- name字段的长度改为30</span><br><span class="line">-- 删除某一个字段</span><br><span class="line">ALTER TABLE `user` DROP `age`; -- 删除age</span><br><span class="line"></span><br><span class="line">#根据一个表结构取创建另外一张表</span><br><span class="line">CREATE TABLE `user1` LIKE `user`; -- 根据user创建user1,只复制结构</span><br><span class="line">#根据另外一个表中的所有内容创建一个新的表</span><br><span class="line">CREATE TABLE `user2` AS (SELECT * FROM `user`);	-- as可以省略，复制内容</span><br></pre></td></tr></table></figure>

<h5 id="DML-数据库的增删改"><a href="#DML-数据库的增删改" class="headerlink" title="DML-数据库的增删改"></a><strong>DML-数据库的增删改</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 插入数据</span><br><span class="line">INSERT INTO `user` VALUES (110, &#x27;why&#x27;, &#x27;0216451&#x27;, &#x27;2020-10-10&#x27;, &#x27;2020-11-11&#x27;);</span><br><span class="line">-- 不写id，id自动递增</span><br><span class="line">INSERT INTO `user` (name, telPhone, createTime, updateTime)</span><br><span class="line">						VALUES (&#x27;kobe&#x27;, &#x27;000-1111111&#x27;, &#x27;2020-10-10&#x27;, &#x27;2020-11-12&#x27;);</span><br><span class="line">-- 需求：createTime和updateTime自动设置值</span><br><span class="line">ALTER TABLE `user` MODIFY `createTime` TIMESTAMP DEFAULT CURRENT_TIMESTAMP;</span><br><span class="line">ALTER TABLE `user` MODIFY `updateTime` TIMESTAMP DEFAULT CURRENT_TIMESTAMP</span><br><span class="line">			ON UPDATE CURRENT_TIMESTAMP; -- 插入记录时为插入记录的时间，修改记录时时间更新</span><br><span class="line"></span><br><span class="line">INSERT INTO `user` (name, telPhone)</span><br><span class="line">						VALUES (&#x27;hmm&#x27;, &#x27;000-1111112&#x27;);</span><br><span class="line"></span><br><span class="line">#删除数据</span><br><span class="line">DELETE FROM `user`; -- 删除所有数据</span><br><span class="line">DELETE FROM `user` WHERE id = 110; -- 删除符合条件的数据</span><br><span class="line"></span><br><span class="line">#更新数据</span><br><span class="line">UPDATE `user` SET name = &#x27;lily&#x27;, telPhone = &#x27;010-110110&#x27;;	-- 更新所有数据</span><br><span class="line">UPDATE `user` SET name = &#x27;lily&#x27;, telPhone = &#x27;010-110110&#x27; WHERE id = 110;	-- 更新符合条件的数据</span><br></pre></td></tr></table></figure>

<h5 id="DQL-数据查询"><a href="#DQL-数据查询" class="headerlink" title="DQL-数据查询"></a><strong>DQL-数据查询</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 选择表达式</span><br><span class="line">	from 表名</span><br><span class="line">	where ……</span><br><span class="line">	order by ……</span><br><span class="line">	limit ……</span><br><span class="line">	group by ……</span><br><span class="line">	having ……</span><br></pre></td></tr></table></figure>

<p><strong>基本查询</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products;</span><br><span class="line">#查询指定字段</span><br><span class="line">SELECT title, price FROM products;</span><br><span class="line">#对字段结果取别名,as可省略</span><br><span class="line">SELECT title as phoneTitle, price currentPrice FROM products;</span><br></pre></td></tr></table></figure>

<p><strong>where 查询条件</strong></p>
<p>IN：表示取多个值中的一个即可</p>
<p>模糊查询：like</p>
<ul>
<li>%表示匹配任意个的任意字符</li>
<li>_表示匹配一个的任意字符</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询价格小于1000的手机</span><br><span class="line">SELECT title, price FROM products WHERE price &lt; 1000;</span><br><span class="line">-- 查询价格在1000-2000之间的手机</span><br><span class="line">SELECT * FROM products WHERE price &gt; 1000 AND price &lt; 2000;</span><br><span class="line">SELECT * FROM products WHERE price &gt; 1000 &amp;&amp; price &lt; 2000;</span><br><span class="line">-- between and 包含等于</span><br><span class="line">SELECT * FROM products WHERE price BETWEEN 1000 AND 2000;</span><br><span class="line"></span><br><span class="line">-- 查询价格在5000以上或品牌是华为手机</span><br><span class="line">SELECT * FROM products WHERE price &gt; 5000 or brand = &#x27;华为&#x27;;</span><br><span class="line">SELECT * FROM products WHERE price &gt; 5000 || brand = &#x27;华为&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询某一个值为null</span><br><span class="line">select * from products where url is null;</span><br><span class="line"></span><br><span class="line">-- 模糊查询</span><br><span class="line">select * from products where title like &#x27;%M%&#x27;;</span><br><span class="line">select * from products where title like &#x27;_P%&#x27;;</span><br><span class="line">-- 查询所有的华为或者小米手机</span><br><span class="line">select * from products where brand in (&#x27;华为&#x27;, &#x27;小米&#x27;);</span><br></pre></td></tr></table></figure>

<p><strong>查询结果排序</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询结果按照价格升序,价格相同时按照评分降序排序</span><br><span class="line">select * from products where brand in (&#x27;华为&#x27;, &#x27;小米&#x27;)</span><br><span class="line">					order by price asc, score desc;</span><br></pre></td></tr></table></figure>

<p><strong>分页查询</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询20条数据，偏移0条</span><br><span class="line">select * from products limit 20 offset 0;</span><br><span class="line">select * from products limit 20 offset 20;	-- 偏移20条,从第21条开始</span><br><span class="line">-- limit offset, limit</span><br><span class="line">-- 从第一条开始(偏移0条)，查询20条</span><br><span class="line">select * from products limit 0, 20;</span><br></pre></td></tr></table></figure>

<h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>将整个表的所有数据看成是一组数据，对这一组数据进行某些操作使用到的函数称为聚合函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#表名products</span><br><span class="line"># 1.聚合函数的使用</span><br><span class="line"># 求所有手机的价格的总和,并给查询出来的列重命名为totalPrice</span><br><span class="line">SELECT SUM(price) totalPrice FROM `products`;</span><br><span class="line"># 求一下华为手机的价格的总和</span><br><span class="line">SELECT SUM(price) FROM `products` WHERE brand = &#x27;华为&#x27;;</span><br><span class="line"># 求华为手机的平均价格</span><br><span class="line">SELECT AVG(price) FROM `products` WHERE brand = &#x27;华为&#x27;;</span><br><span class="line"># 最高手机的价格和最低手机的价格</span><br><span class="line">SELECT MAX(price) FROM `products`;</span><br><span class="line">SELECT MIN(price) FROM `products`;</span><br><span class="line"></span><br><span class="line"># 求华为手机的个数(有多少条记录)</span><br><span class="line">SELECT COUNT(*) FROM `products` WHERE brand = &#x27;华为&#x27;;</span><br><span class="line">SELECT COUNT(*) FROM `products` WHERE brand = &#x27;苹果&#x27;;</span><br><span class="line">SELECT COUNT(url) FROM `products` WHERE brand = &#x27;苹果&#x27;;	-- 字段为null时不会计算在内</span><br><span class="line"></span><br><span class="line">SELECT COUNT(price) FROM `products`;</span><br><span class="line">SELECT COUNT(DISTINCT price) FROM `products`;	-- 重复的数据不计算在内</span><br><span class="line"></span><br><span class="line"># 2.GROUP BY的使用</span><br><span class="line">SELECT brand, AVG(price), COUNT(*), AVG(score) FROM `products` GROUP BY brand;</span><br><span class="line">-- 通过brand进行分组,查找不同分组(手机品牌)的平均价格等信息……</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3.HAVING的使用(对分组之后查询到的结果进行筛选)</span><br><span class="line">-- where 是直接对表进行相关的筛选</span><br><span class="line">-- WHERE不能放在group by 后面,可以放在group by之前,即筛选生产的表的后面</span><br><span class="line">SELECT brand, AVG(price) avgPrice, COUNT(*), AVG(score) FROM `products` GROUP BY brand HAVING avgPrice &gt; 2000;</span><br><span class="line">-- 求分组之后的生成的表里平均价格大于2000的手机品牌</span><br><span class="line"></span><br><span class="line"># 4.需求：求评分score &gt; 7.5的手机的，平均价格是多少？</span><br><span class="line"># 升级：评分大于7.5的手机，按照品牌进行分类，求出平均价格。</span><br><span class="line">-- 每个品牌评分大于7.5分的手机求平均价格</span><br><span class="line">SELECT brand, AVG(price) FROM `products` WHERE score &gt; 7.5 GROUP BY brand;</span><br><span class="line"></span><br><span class="line">-- 保留两位小数</span><br><span class="line">ROUND(AVG(price), 2)</span><br></pre></td></tr></table></figure>

<h4 id="外键约束-amp-多表查询"><a href="#外键约束-amp-多表查询" class="headerlink" title="外键约束&amp;多表查询"></a>外键约束&amp;多表查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建表时添加外键约束</span><br><span class="line">create table products(</span><br><span class="line">  -- 定义的字段……,</span><br><span class="line">	foreign key(brand_id) references brand(id)	-- brand_id字段引用brand表的id字段作为外键</span><br><span class="line">)</span><br><span class="line">-- 删除一列</span><br><span class="line">alter table `products` drop `brand_id`;</span><br><span class="line">-- 给已经创建好的表添加一个字段</span><br><span class="line">alter table `products` add `brand_id` int;</span><br><span class="line">-- 给已经创建好的表设置外键,修改brand_id为外键</span><br><span class="line">alter table `products` add foreign key(brand_id) references brand(id);</span><br><span class="line">-- 设置brand_id的值</span><br><span class="line">update `products` set `brand_id` = 1 where `brand` = &#x27;华为&#x27;;</span><br></pre></td></tr></table></figure>

<h5 id="外键存在时更新和删除数据"><a href="#外键存在时更新和删除数据" class="headerlink" title="外键存在时更新和删除数据"></a><strong>外键存在时更新和删除数据</strong></h5><p>需要修改 on delete 或者 on update 的值，可以给更新或者删除时设置几个值:</p>
<ul>
<li>RESTRICT（默认属性）：当更新或删除某个记录时，会检查该记录是否有关联的外键记录，有的话会报错的， 不允许更新或删除</li>
<li>NO ACTION：和 RESTRICT 是一致的，是在 SQL 标准中定义的</li>
<li>CASCADE：当更新或删除某个记录时，会检查该记录是否有关联的外键记录，有的话：<ul>
<li>更新：那么会更新对应的记录</li>
<li>删除：那么关联的记录会被一起删除掉</li>
</ul>
</li>
<li>SET NULL：当更新或删除某个记录时，会检查该记录是否有关联的外键记录，有的话，将对应的值设置为 NULL</li>
</ul>
<p>修改关联外键的 action</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 1.获取到目前的关联外键的名称</span><br><span class="line">SHOW CREATE TABLE `products`;</span><br><span class="line"># CONSTRAINT `products_ibfk_1` FOREIGN KEY (`brand_id`) REFERENCES `brand` (`id`)</span><br><span class="line">-- 2.根据名称将外键删除</span><br><span class="line">ALTER TABLE `products` DROP FOREIGN KEY products_ibfk_1;</span><br><span class="line">-- 3.重新添加外键约束</span><br><span class="line">ALTER TABLE `products` ADD FOREIGN KEY (brand_id) REFERENCES brand(id)</span><br><span class="line">		ON UPDATE CASCADE -- 修改时使用级联修改</span><br><span class="line">		ON DELETE RESTRICT; -- 删除时使用默认的删除action</span><br></pre></td></tr></table></figure>

<h5 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a><strong>多表查询</strong></h5><p>笛卡尔积：第一个表的每一条数据都和第二个表的每一条数据结合形成的结果</p>
<p>多表连接(SQL JOIN)：</p>
<ul>
<li><p>左连接</p>
<p>左表的记录将会全部表示出来，而右表只会显示符合搜索条件的记录。右表记录不足的地方均为 NULL</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- ON后加限制条件：通过什么条件进行连接 ，左连接outer可以省略，只写left join</span><br><span class="line"># 2.1. 查询所有的手机（包括没有品牌信息的手机）以及对应的品牌 null</span><br><span class="line">SELECT * FROM `products` LEFT OUTER JOIN `brand` ON products.brand_id = brand.id;</span><br><span class="line"></span><br><span class="line"># 2.2. 查询没有对应品牌数据的手机</span><br><span class="line">SELECT * FROM `products` LEFT JOIN `brand` ON products.brand_id = brand.id WHERE brand.id IS NULL;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>右连接</p>
<p>左表只会显示符合搜索条件的记录，而右表的记录将会全部表示出来。左表记录不足的地方均为 NULL。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 3.1. 查询所有的品牌（没有对应的手机数据，品牌也显示）以及对应的手机数据；</span><br><span class="line">SELECT * FROM `products` RIGHT OUTER JOIN `brand` ON products.brand_id = brand.id;</span><br><span class="line"></span><br><span class="line"># 3.2. 查询没有对应手机的品牌信息</span><br><span class="line">SELECT * FROM `products` RIGHT JOIN `brand` ON products.brand_id = brand.id WHERE products.brand_id IS NULL;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>内连接</p>
<p>组合两个表中的记录，返回关联字段相符的记录，也就是返回两个表的交集部分。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 4.内连接</span><br><span class="line">SELECT * FROM `products` JOIN `brand` ON products.brand_id = brand.id;</span><br><span class="line">SELECT * FROM `products` JOIN `brand` ON products.brand_id = brand.id WHERE price = 8699;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>全连接</p>
<p>MySQL 不支持全连接，左右连接结合起来实现全连接的效果</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(SELECT * FROM `products` LEFT OUTER JOIN `brand` ON products.brand_id = brand.id)</span><br><span class="line">UNION</span><br><span class="line">(SELECT * FROM `products` RIGHT OUTER JOIN `brand` ON products.brand_id = brand.id)</span><br><span class="line"></span><br><span class="line">(SELECT * FROM `products` LEFT OUTER JOIN `brand` ON products.brand_id = brand.id WHERE brand.id IS NULL)</span><br><span class="line">UNION</span><br><span class="line">(SELECT * FROM `products` RIGHT OUTER JOIN `brand` ON products.brand_id = brand.id WHERE products.brand_id IS NULL)</span><br></pre></td></tr></table></figure>

<h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>两个多对多关系表之间加一个关系表，用于联系两张表</p>
<p>联合主键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table if not exists students_select_course(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">	sid int not null,</span><br><span class="line">	cid int not null,</span><br><span class="line">	foreign key (sid) references students(id) on update cascade,</span><br><span class="line">	foreign key (cid) references courses(id) on update cascade,</span><br><span class="line">	primary key (sid, cid);	-- 联合主键</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>查询需求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 17</span><br><span class="line">-- 查询所有有选课的学生选择了哪些课程</span><br><span class="line">select stu.id stuId, stu.name stuName,stu.age stuAge,cs.id csId, cs.name csName, cs.price csPrice</span><br><span class="line">from students stu</span><br><span class="line">join students_select_course ssc on stu.id = ssc.sid</span><br><span class="line">join courses cs on ssc.cid = cs.id;</span><br><span class="line"></span><br><span class="line">-- 查询所有学生的选课情况</span><br><span class="line">select stu.id stuId, stu.name stuName,stu.age stuAge,cs.id csId, cs.name csName, cs.price csPrice</span><br><span class="line">from students stu</span><br><span class="line">left join students_select_course ssc on stu.id = ssc.sid</span><br><span class="line">left join courses cs on ssc.cid = cs.id;</span><br><span class="line"></span><br><span class="line">-- 查询哪些学生没有选课</span><br><span class="line">select stu.id stuId, stu.name stuName,stu.age stuAge,cs.id csId, cs.name csName, cs.price csPrice</span><br><span class="line">from students stu</span><br><span class="line">left join students_select_course ssc on stu.id = ssc.sid</span><br><span class="line">left join courses cs on ssc.cid = cs.id</span><br><span class="line">where cs.id is null;	-- 此处无法使用select后面取的别名</span><br><span class="line"></span><br><span class="line">-- 查询哪些课程没有被学生选择的</span><br><span class="line">select stu.id stuId, stu.name stuName,stu.age stuAge,cs.id csId, cs.name csName, cs.price csPrice</span><br><span class="line">from students stu</span><br><span class="line">right join students_select_course ssc on stu.id = ssc.sid</span><br><span class="line">right join courses cs on ssc.cid = cs.id</span><br><span class="line">where stu.id is null;</span><br><span class="line"></span><br><span class="line">-- 某一个学生选择了哪些课程</span><br><span class="line">select stu.id stuId, stu.name stuName,stu.age stuAge,cs.id csId, cs.name csName, cs.price csPrice</span><br><span class="line">from students stu</span><br><span class="line">left join students_select_course ssc on stu.id = ssc.sid</span><br><span class="line">left join courses cs on ssc.cid = cs.id</span><br><span class="line">where stu.`name` = &#x27;why&#x27;;</span><br></pre></td></tr></table></figure>

<p>数据转对象或数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将联合查询到的数据转成对象(一对多)</span><br><span class="line">SELECT products.id id, products.title title,products.price price,</span><br><span class="line">	JSON_OBJECT(&#x27;id&#x27;, brand.id, &#x27;name&#x27;, brand.`name`, &#x27;website&#x27;, brand.website) brand	-- 放入对象</span><br><span class="line">FROM products LEFT JOIN brand on products.brand_id = brand.id;</span><br><span class="line"></span><br><span class="line">#将查询到的多条数据，组织成对象，放入到一个数组中(多对多)</span><br><span class="line">select</span><br><span class="line">	stu.id id, stu.name name,stu.age age,</span><br><span class="line">	-- cs.id csId, cs.name csName, cs.price csPrice</span><br><span class="line">	JSON_ARRAYAGG(JSON_OBJECT(&#x27;id&#x27;, cs.id, &#x27;name&#x27;, cs.`name`, &#x27;price&#x27;, cs.price)) course	-- 放入对象，再把对象放入数组</span><br><span class="line">from students stu</span><br><span class="line">join students_select_course ssc on stu.id = ssc.sid</span><br><span class="line">join courses cs on ssc.cid = cs.id</span><br><span class="line">GROUP BY stu.id;</span><br></pre></td></tr></table></figure>

<h4 id="Node-中操作数据库"><a href="#Node-中操作数据库" class="headerlink" title="Node 中操作数据库"></a>Node 中操作数据库</h4><p>在 node 代码中执行 sql 语句：</p>
<ul>
<li>mysql：最早的 node 连接 mysql 的数据库驱动</li>
<li>mysql2：在 mysql 的基础上，进行了很多优化、改进</li>
</ul>
<p>安装 mysql2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install mysql2</span><br></pre></td></tr></table></figure>

<h5 id="mysql2-基本使用"><a href="#mysql2-基本使用" class="headerlink" title="mysql2 基本使用"></a>mysql2 基本使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>) <span class="comment">//导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建数据库连接</span></span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>, <span class="comment">// 默认3306，可省略不写</span></span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;coderhub&#x27;</span>, <span class="comment">// 操作的数据库名称</span></span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123.&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//2.执行sql语句</span></span><br><span class="line"><span class="keyword">const</span> statement = <span class="string">`</span></span><br><span class="line"><span class="string">  SELECT * FROM products WHERE price &gt; 9000;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">connection.query(statement, <span class="function">(<span class="params">err, result, fields</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//执行,回调函数中拿到结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">  connection.end() <span class="comment">//拿到结果后终止程序</span></span><br><span class="line">  <span class="comment">// connection.destroy();  //拿到结果后终止程序</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="预处理语句"><a href="#预处理语句" class="headerlink" title="预处理语句"></a>预处理语句</h5><p>Prepared Statement（预编译语句）:</p>
<ul>
<li>提高性能：将创建的语句模块发送给 MySQL，然后 MySQL 编译（解析、优化、转换）语句模块，并且存储 它但是不执行，之后我们在真正执行时会给?提供实际的参数才会执行；就算多次执行，也只会编译一次，所 以性能是更高的；</li>
<li>防止 SQL 注入：之后传入的值不会像模块引擎那样就编译，那么一些 SQL 注入的内容不会被执行；or 1 = 1 不 会被执行；</li>
<li>如果再次执行该语句，它将会从 LRU（Least Recently Used） Cache 中获取获取，省略了编译 statement 的时间来提高性能。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;coderhub&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123.&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> statement = <span class="string">`</span></span><br><span class="line"><span class="string">  SELECT * FROM products WHERE price &gt; ? AND score &gt; ?;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">connection.execute(statement, [<span class="number">6000</span>, <span class="number">7</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//查询价格大于600评分高于7的手机</span></span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>) <span class="comment">//导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建连接池</span></span><br><span class="line"><span class="keyword">const</span> connections = mysql.createPool(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;coderhub&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123.&#x27;</span>,</span><br><span class="line">  <span class="attr">connectionLimit</span>: <span class="number">10</span>, <span class="comment">//最多允许建立几个连接</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> statement = <span class="string">`</span></span><br><span class="line"><span class="string">  SELECT * FROM products WHERE price &gt; ? AND score &gt; ?;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用连接池</span></span><br><span class="line">connections.execute(statement, [<span class="number">6000</span>, <span class="number">7</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>promise 方式使用连接池</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>) <span class="comment">//导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建连接池</span></span><br><span class="line"><span class="keyword">const</span> connections = mysql.createPool(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;coderhub&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123.&#x27;</span>,</span><br><span class="line">  <span class="attr">connectionLimit</span>: <span class="number">10</span>, <span class="comment">//最多允许建立几个连接</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> statement = <span class="string">`</span></span><br><span class="line"><span class="string">  SELECT * FROM products WHERE price &gt; ? AND score &gt; ?;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用连接池</span></span><br><span class="line">connections</span><br><span class="line">  .promise()</span><br><span class="line">  .execute(statement, [<span class="number">6000</span>, <span class="number">7</span>])</span><br><span class="line">  .then(<span class="function">(<span class="params">[results]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results) <span class="comment">//打印结果</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err) <span class="comment">//打印错误信息</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h5 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h5><p>对象关系映射(Object Relational Mapping):</p>
<ul>
<li>简称 ORM，或 O/RM，或 O/R mapping，是一种程序设计的方案</li>
<li>提供了一个可在编程语言中，使用虚拟对象数据库的效果</li>
<li>node 中的 ORM 通常使用的是 sequelize</li>
</ul>
<p>如果希望将 Sequelize 和 mysql 一起使用，需要安装两个东西：</p>
<ul>
<li>mysql2：sequelize 在操作 mysql 的时候使用的是 mysql2</li>
<li>sequelize：使用它来让对象映射到表中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install mysql2 sequelize</span><br></pre></td></tr></table></figure>

<p><strong>基本使用</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建一个Sequelize对象，并且指定数据库、用户名、密码、数据库类型、主机地址等</span></span><br><span class="line"><span class="keyword">const</span> &#123; Sequelize &#125; = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">&#x27;coderhub&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;123.&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">//数据库名字 用户名 密码</span></span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">dialect</span>: <span class="string">&#x27;mysql&#x27;</span>, <span class="comment">//数据库类型</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//2.测试连接是否成功</span></span><br><span class="line">sequelize</span><br><span class="line">  .authenticate()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;连接数据库成功&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;连接数据库失败&#x27;</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>其他使用见视频 18</p>
<h3 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h3><p>完整的项目接口包括：</p>
<ul>
<li>面向用户的业务接口</li>
<li>面向企业或内部的后台管理接口</li>
</ul>
<h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init -y   # 项目描述信息</span><br><span class="line">npm install koa # 安装node框架koa</span><br><span class="line">npm install nodemon --save-dev	#热启动,开发阶段使用 或者-D</span><br><span class="line"><span class="meta">#</span><span class="bash">需修改package.json</span></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;nodemon ./src/main.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后续启动项目使用  npm start</span></span><br><span class="line">npm install dotenv  #加载当前根目录下.env文件，将里面的数据加载到环境变量里面</span><br><span class="line">npm install koa-router #koa的路由库</span><br><span class="line">npm install koa-bodyparser #解析传过来的json数据</span><br><span class="line">npm install mysql2 #连接数据库的驱动</span><br><span class="line"><span class="meta">#</span><span class="bash"> crypto：node中自带的用于加密密码的库</span></span><br><span class="line">npm install jsonwebtoken #加密密码产生密钥的第三方库</span><br><span class="line">npm install koa-multer #上传文件所用的第三方库</span><br><span class="line">npm install jimp #对图像大小进行处理，库小一点</span><br><span class="line">npm install sharp #对图像大小进行处理，库大一点</span><br><span class="line">npm install koa2-cors #解决跨域访问</span><br><span class="line">npm install svg-captcha #生成图形验证码</span><br></pre></td></tr></table></figure>

<h4 id="目录结构划分"><a href="#目录结构划分" class="headerlink" title="目录结构划分"></a>目录结构划分</h4><p>常见划分方式：</p>
<ul>
<li>按照功能模块划分</li>
<li>按照业务模块划分</li>
</ul>
<p>coderhub：</p>
<ul>
<li>src<ul>
<li>main.js //入口文件</li>
<li>app //放置全局相关的东西<ul>
<li>keys //放置 token 的私钥和公钥</li>
<li>config.js //加载.env 的环境变量,存放其他全局常量(私钥公钥等)</li>
<li>database.js //数据库连接池</li>
<li>error-handle.js //错误处理函数</li>
<li>index.js //放置对 app 的操作</li>
</ul>
</li>
<li>constants //存放常量<ul>
<li>error-types.js //错误类型</li>
<li>file-path.js //文件路径</li>
</ul>
</li>
<li>controller //放所有的控制器，路由的处理逻辑在此编写</li>
<li>middleware //放一些中间件</li>
<li>router //注册路由<ul>
<li>index.js //自动加载路由</li>
<li>***.router.js //负责注册接口</li>
</ul>
</li>
<li>service //放与数据库操作相关的东西</li>
<li>utils //放工具<ul>
<li>password-handle.js //使用 token 加密密码</li>
</ul>
</li>
</ul>
</li>
<li>.env // 放置环境变量，应用程序的配置</li>
</ul>
<h4 id="登录凭证"><a href="#登录凭证" class="headerlink" title="登录凭证"></a>登录凭证</h4><h5 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h5><p>Cookie(复数 Cookies)，又称小甜饼，类型为小型文本文件，某些网站为了辨别用户身份而存储在用户本地终端上的数据</p>
<ul>
<li>浏览器会在特定的情况下携带上 cookie 来发送请求，我们可以通过 cookie 来获取一些信息</li>
<li>Cookie 总是保存在客户端中，按在客户端中的存储位置，Cookie 可以分为内存 Cookie 和硬盘 Cookie<ul>
<li>没有设置过期时间，默认情况下 cookie 是内存 cookie(也称会话 cookie)</li>
<li>内存 Cookie 由浏览器维护，保存在内存中，浏览器关闭时 Cookie 就会消失，其存在时间是短暂的</li>
<li>有设置过期时间，并且过期时间不为 0 或者负数的 cookie，是硬盘 cookie</li>
<li>硬盘 Cookie 保存在硬盘中，有一个过期时间，用户手动清理或者过期时间到时，才会被清理</li>
</ul>
</li>
</ul>
<p><strong>常见属性</strong></p>
<p>生命周期</p>
<ul>
<li>可以通过设置 expires 或者 max-age 来设置过期的时间<ul>
<li>expires：设置的是 Date.toUTCString()，设置格式是;expires=date-in-GMTString-format</li>
<li>max-age：设置过期的秒钟，;max-age=max-age-in-seconds (例如一年为 60<em>60</em>24*365)</li>
</ul>
</li>
</ul>
<p>作用域(允许 cookie 发送给哪些 URL)</p>
<ul>
<li>Domain：指定哪些主机可以接受 cookie<ul>
<li>如果不指定，那么默认是 origin，不包括子域名</li>
<li>如果指定 Domain，则包含子域名。</li>
</ul>
</li>
<li>Path：指定主机下哪些路径可以接受 cookie<ul>
<li>设置 Path=/docs，则以下地址都会匹配</li>
<li>/docs</li>
<li>/docs/Web/</li>
<li>/docs/Web/HTTP</li>
</ul>
</li>
</ul>
<p>设置 cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="comment">// document.cookie = &quot;name=coderwhy&quot;;</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;age=18;max-age=5;&#x27;</span> <span class="comment">//5秒钟后过期</span></span><br><span class="line"><span class="comment">//删除cookie：设置值为空，过期时间为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器端设置cookie</span></span><br><span class="line"><span class="comment">// maxAge对应毫秒</span></span><br><span class="line">ctx.cookies.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;lilei&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">maxAge</span>: <span class="number">50</span> * <span class="number">1000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 读取cookie</span></span><br><span class="line"><span class="keyword">const</span> value = ctx.cookies.get(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="session"><a href="#session" class="headerlink" title="session"></a>session</h5><p>不能在客户端设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install koa-session</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Session = <span class="built_in">require</span>(<span class="string">&#x27;koa-session&#x27;</span>) <span class="comment">//一个函数</span></span><br><span class="line"><span class="comment">// 创建Session的配置</span></span><br><span class="line"><span class="keyword">const</span> session = Session(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;sessionid&#x27;</span>,</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">10</span> * <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">signed</span>: <span class="literal">true</span>, <span class="comment">// 是否使用加密签名,默认为true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  app</span><br><span class="line">)</span><br><span class="line">app.keys = [<span class="string">&#x27;aaaa&#x27;</span>]</span><br><span class="line">app.use(session)</span><br><span class="line">ctx.session.user = &#123; id, name &#125; <span class="comment">//存入数据到session</span></span><br></pre></td></tr></table></figure>

<h5 id="token"><a href="#token" class="headerlink" title="token"></a>token</h5><p><strong>cookie 和 session 缺点</strong>：</p>
<ul>
<li>Cookie 会被附加在每个 HTTP 请求中，所以无形中增加了流量</li>
<li>Cookie 是明文传递的，所以存在安全性的问题</li>
<li>Cookie 的大小限制是 4KB，对于复杂的需求来说是不够的</li>
<li>对于浏览器外的其他客户端（比如 iOS、Android），必须手动的设置 cookie 和 session</li>
<li>对于分布式系统和服务器集群中如何可以保证其他系统也可以正确的解析 session？</li>
</ul>
<p>token，翻译为令牌，验证了用户账号和密码正确的情况下，给用户颁发一个令牌，作为后续用户访问一些接口或资源的凭证，以此判断用户是否有权限访问</p>
<p><strong>token 的使用</strong>：</p>
<ol>
<li>生成 token：登录的时候颁发 token</li>
<li>验证 token：访问某些资源或接口的时候，验证 token</li>
</ol>
<p><strong>JWT 实现 Token 机制</strong></p>
<p>JWT(json web token)生成的 Token 由三部分组成：</p>
<ol>
<li>header<ul>
<li>alg：采用的加密算法，默认是 HMAC SHA256（HS256），采用同一个密钥进行 加密和解密</li>
<li>typ：JWT，固定值，通常都写成 JWT 即可</li>
<li>会通过 base64Url 算法进行编码</li>
</ul>
</li>
<li>payload<ul>
<li>携带的数据，比如我们可以将用户的 id 和 name 放到 payload 中</li>
<li>默认也会携带 iat（issued at），令牌的签发时间</li>
<li>我们也可以设置过期时间：exp（expiration time）</li>
<li>会通过 base64Url 算法进行编码</li>
</ul>
</li>
<li>signature<ul>
<li>设置一个 secretKey，通过将前两个的结果合并后进行 HMACSHA256 的算法</li>
<li>HMACSHA256(base64Url(header)+.+base64Url(payload), secretKey)</li>
<li>但是如果 secretKey 暴露是一件非常危险的事情，因为之后就可以模拟颁发 token， 也可以解密 token</li>
</ul>
</li>
</ol>
<p><strong>Token 的使用</strong></p>
<p>安装库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install jsonwebtoken</span><br></pre></td></tr></table></figure>

<p>token 对称加密</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>) <span class="comment">//导入token</span></span><br><span class="line"><span class="keyword">const</span> SECRET_KEY = <span class="string">&#x27;abcdsad123&#x27;</span> <span class="comment">//密钥,自己设置,解密时需要用到</span></span><br><span class="line"><span class="comment">//登录接口</span></span><br><span class="line">testRouter.post(<span class="string">&#x27;/test&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = &#123; <span class="attr">id</span>: <span class="number">110</span>, <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span> &#125;</span><br><span class="line">  <span class="keyword">const</span> token = jwt.sign(user, SECRET_KEY, &#123;</span><br><span class="line">    <span class="comment">//颁发令牌,参数1：携带的数据,参数2：携带的密钥,参数3:额外参数</span></span><br><span class="line">    <span class="attr">expiresIn</span>: <span class="number">10</span>, <span class="comment">//10秒后过期</span></span><br><span class="line">  &#125;)</span><br><span class="line">  ctx.body = token <span class="comment">//返回token</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证接口</span></span><br><span class="line">testRouter.get(<span class="string">&#x27;/demo&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> authorization = ctx.headers.authorization <span class="comment">//拿到授权的token</span></span><br><span class="line">  <span class="keyword">const</span> token = authorization.replace(<span class="string">&#x27;Bearer &#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// 替换多余字符串，拿到真正的token</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//token过期时捕获异常</span></span><br><span class="line">    <span class="keyword">const</span> result = jwt.verify(token, SECRET_KEY) <span class="comment">//使用密钥验证token</span></span><br><span class="line">    ctx.body = result <span class="comment">//验证成功,返回验证结果</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    ctx.body = <span class="string">&#x27;token是无效的&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>token 非对称加密</p>
<ul>
<li>私钥(private Key)：用于发布令牌</li>
<li>公钥(public Key)：用于验证令牌</li>
</ul>
<p>openssl 在 windows 的 cmd 中无法直接使用，git bash 中可以直接使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.在要生成私钥的文件夹打开git bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">2.输入命令</span></span><br><span class="line">openssl</span><br><span class="line"><span class="meta">#</span><span class="bash">3.生成rsa的私钥(名字为private.key，长度为1024)</span></span><br><span class="line">genrsa -out private.key 1024</span><br><span class="line"><span class="meta">#</span><span class="bash">4.通过私钥生产公钥</span></span><br><span class="line">rsa -in private.key -pubout -out public.key</span><br></pre></td></tr></table></figure>

<p>私钥加密，公钥验证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>) <span class="comment">//导入token</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PRIVATE_KEY = fs.readFileSync(<span class="string">&#x27;./keys/private.key&#x27;</span>) <span class="comment">//拿到私钥,Buffer</span></span><br><span class="line"><span class="keyword">const</span> PUBLIC_KEY = fs.readFileSync(<span class="string">&#x27;./keys/public.key&#x27;</span>) <span class="comment">//拿到公钥,Buffer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录接口</span></span><br><span class="line">testRouter.post(<span class="string">&#x27;/test&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = &#123; <span class="attr">id</span>: <span class="number">110</span>, <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span> &#125;</span><br><span class="line">  <span class="keyword">const</span> token = jwt.sign(user, PRIVATE_KEY, &#123;</span><br><span class="line">    <span class="comment">//签发token</span></span><br><span class="line">    <span class="attr">expiresIn</span>: <span class="number">10</span>, <span class="comment">//10秒后过期</span></span><br><span class="line">    <span class="attr">algorithm</span>: <span class="string">&#x27;RS256&#x27;</span>, <span class="comment">//告知使用的加密算法</span></span><br><span class="line">  &#125;) <span class="comment">//颁发令牌,参数1：携带的数据,参数2：携带的私钥,参数3:额外参数</span></span><br><span class="line">  ctx.body = token <span class="comment">//返回token</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证接口</span></span><br><span class="line">testRouter.get(<span class="string">&#x27;/demo&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> authorization = ctx.headers.authorization <span class="comment">//拿到授权的token</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//token过期时捕获异常</span></span><br><span class="line">    <span class="keyword">const</span> token = authorization.replace(<span class="string">&#x27;Bearer &#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment">// 替换多余字符串，拿到真正的token</span></span><br><span class="line">    <span class="keyword">const</span> result = jwt.verify(token, PUBLIC_KEY, &#123;</span><br><span class="line">      <span class="attr">algorithms</span>: [<span class="string">&#x27;RS256&#x27;</span>], <span class="comment">//告知加密算法</span></span><br><span class="line">    &#125;) <span class="comment">//使用公钥验证token</span></span><br><span class="line">    ctx.body = result <span class="comment">//验证成功,返回验证结果</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    ctx.body = <span class="string">&#x27;token是无效的&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="crypto-加密密码"><a href="#crypto-加密密码" class="headerlink" title="crypto 加密密码"></a>crypto 加密密码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>) <span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> md5password = <span class="function">(<span class="params">password</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> md5 = crypto.createHash(<span class="string">&#x27;md5&#x27;</span>) <span class="comment">//调用哈希函数,采用md5的加密方式,返回一个对象</span></span><br><span class="line">  <span class="keyword">const</span> result = md5.update(password).digest(<span class="string">&#x27;hex&#x27;</span>) <span class="comment">// 不写hex拿到的是一个buffer</span></span><br><span class="line">  <span class="comment">// 对密码进行加密，并拿到加密之后的字符串,将加密之后生产的二进制转成16进制</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = md5password</span><br></pre></td></tr></table></figure>

<h5 id="相对路径补充"><a href="#相对路径补充" class="headerlink" title="相对路径补充"></a>相对路径补充</h5><p>在项目中的任何一个地方的相对路径，都是相对于 process.cwd(启动项目时所在的文件夹)</p>
<h5 id="http-响应代码"><a href="#http-响应代码" class="headerlink" title="http 响应代码"></a>http 响应代码</h5><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9TdGF0dXM=">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="jimp-图像处理"><a href="#jimp-图像处理" class="headerlink" title="jimp 图像处理"></a>jimp 图像处理</h4><p>作用等同于 sharp 库</p>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install jimp</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> jimp = <span class="built_in">require</span>(<span class="string">&#x27;jimp&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> file <span class="keyword">of</span> files) &#123;</span><br><span class="line">  <span class="keyword">const</span> destPath = path.join(file.destination, file.filename) <span class="comment">//路径拼接</span></span><br><span class="line">  jimp.read(file.path).then(<span class="function">(<span class="params">image</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//读物某一个文件,根据传进来的图像通过read，创建一个image对象</span></span><br><span class="line">    image.resize(<span class="number">1280</span>, jimp.AUTO).write(<span class="string">`<span class="subst">$&#123;destPath&#125;</span>-large`</span>) <span class="comment">//宽缩放为1280，高根据宽度按比例缩放,写入到destPath里面</span></span><br><span class="line">    image.resize(<span class="number">640</span>, jimp.AUTO).write(<span class="string">`<span class="subst">$&#123;destPath&#125;</span>-middle`</span>) <span class="comment">//中图</span></span><br><span class="line">    image.resize(<span class="number">320</span>, jimp.AUTO).write(<span class="string">`<span class="subst">$&#123;destPath&#125;</span>-small`</span>) <span class="comment">//小图</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生成图形验证码"><a href="#生成图形验证码" class="headerlink" title="生成图形验证码"></a>生成图形验证码</h4><p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install svg-captcha</span><br></pre></td></tr></table></figure>

<p>生成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.生成有4个字符的图片和字符串</span></span><br><span class="line"><span class="keyword">const</span> svgCaptcha = <span class="built_in">require</span>(<span class="string">&#x27;svg-captcha&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cap = svgCaptcha.create(&#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="number">4</span>, <span class="comment">// 验证码长度</span></span><br><span class="line">  <span class="attr">width</span>: <span class="number">160</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">60</span>,</span><br><span class="line">  <span class="attr">fontSize</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">ignoreChars</span>: <span class="string">&#x27;0oO1ilI&#x27;</span>, <span class="comment">// 验证码字符中排除 0o1i</span></span><br><span class="line">  <span class="attr">noise</span>: <span class="number">2</span>, <span class="comment">// 干扰线条的数量</span></span><br><span class="line">  <span class="attr">color</span>: <span class="literal">true</span>, <span class="comment">// 验证码的字符是否有颜色，默认没有，如果设定了背景，则默认有</span></span><br><span class="line">  <span class="attr">background</span>: <span class="string">&#x27;#eee&#x27;</span>, <span class="comment">// 验证码图片背景颜色</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c)</span><br><span class="line"><span class="comment">// &#123;data: &#x27;&lt;svg.../svg&gt;&#x27;, text: &#x27;abcd&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.生成一个算术式和计算结果</span></span><br><span class="line"><span class="keyword">const</span> cap = svgCaptcha.createMathExpr(&#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="number">4</span>, <span class="comment">// 验证码长度</span></span><br><span class="line">  <span class="attr">width</span>: <span class="number">160</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">60</span>,</span><br><span class="line">  <span class="attr">fontSize</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">ignoreChars</span>: <span class="string">&#x27;0oO1ilI&#x27;</span>, <span class="comment">// 验证码字符中排除 0o1i</span></span><br><span class="line">  <span class="attr">noise</span>: <span class="number">2</span>, <span class="comment">// 干扰线条的数量</span></span><br><span class="line">  <span class="attr">color</span>: <span class="literal">true</span>, <span class="comment">// 验证码的字符是否有颜色，默认没有，如果设定了背景，则默认有</span></span><br><span class="line">  <span class="attr">background</span>: <span class="string">&#x27;#eee&#x27;</span>, <span class="comment">// 验证码图片背景颜色</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fourChar.text = fourChar.text.toLowerCase() <span class="comment">//验证码字符，忽略大小写</span></span><br><span class="line"><span class="comment">//前端展示</span></span><br><span class="line">;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;&#123;</span> <span class="attr">__html:</span> <span class="attr">captchaSvg</span> &#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="comment">// let img = fourChar.data; //验证码图片</span></span><br><span class="line"><span class="comment">// let text = fourChar.text.toLowerCase(); //验证码字符，忽略大小写</span></span><br><span class="line"><span class="comment">// ctx.type = &#x27;html&#x27;;</span></span><br><span class="line"><span class="comment">// ctx.body = `$&#123;img&#125;&lt;br&gt;&lt;a href=&quot;##&quot;&gt;$&#123;text&#125;&lt;/a&gt;`</span></span><br></pre></td></tr></table></figure>

<h3 id="云服务器自动化部署"><a href="#云服务器自动化部署" class="headerlink" title="云服务器自动化部署"></a>云服务器自动化部署</h3><h4 id="购买云服务器"><a href="#购买云服务器" class="headerlink" title="购买云服务器"></a>购买云服务器</h4><p>注册阿里云账号：</p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5hbGl5dW4uY29tLw==">www.aliyun.com<i class="fa fa-external-link-alt"></i></span></p>
<p>控制台-&gt;云服务器 ECS-&gt;实例-&gt;创建实例</p>
<ul>
<li><p>付费模式：包年包月(活动期间会偏移很多) 按量付费(按流量来)</p>
</li>
<li><p>地域及可用区：选离自己近一点的地方，访问会快一点</p>
</li>
<li><p>实例配置：2vCPU 4GiB 高主频计算型</p>
</li>
<li><p>镜像(服务器准备安装的操作系统)：CentOS 8.2 64 位 (自带 dnf 包管理器)</p>
</li>
<li><p>存储云盘：40 GiB</p>
</li>
</ul>
<p>下一步：</p>
<ul>
<li>安全组：除了 3389 其它都勾选</li>
<li>其他默认</li>
</ul>
<p>下一步：</p>
<ul>
<li>登录凭证：选择自定义密码</li>
<li>实例名称：自定义</li>
<li>主机名：自定义</li>
</ul>
<p>下一步：</p>
<ul>
<li>默认</li>
</ul>
<p>下一步：确认订单</p>
<h4 id="配置云服务器"><a href="#配置云服务器" class="headerlink" title="配置云服务器"></a>配置云服务器</h4><h5 id="连接云服务器"><a href="#连接云服务器" class="headerlink" title="连接云服务器"></a>连接云服务器</h5><p>windows 上使用 git bash ssh 工具</p>
<p>连接：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@8.134.6.135 #root:账户面 8.……：公有ip地址</span><br><span class="line"><span class="meta">#</span><span class="bash"> 回车，输入密码</span></span><br></pre></td></tr></table></figure>

<h5 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf search nodejs #搜索软件</span><br><span class="line">dnf info nodejs #查看包的详细信息</span><br><span class="line">dnf install nodejs #安装nodejs</span><br><span class="line">node --version #查看版本号</span><br><span class="line">npm install -g n #安装管理多个node版本的工具</span><br><span class="line">n install lts #使用n安装最新的lts</span><br><span class="line">n install latest #通过n安装最新的current</span><br><span class="line">n  #通过n切换版本</span><br></pre></td></tr></table></figure>

<p>若发现切换之后终端没有反应，可以进行重启：</p>
<ul>
<li>方式一：重新通过 shh 建立连接</li>
<li>方式二：重启 ssh: service sshd restart</li>
</ul>
<h5 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h5><h6 id="安装-mySQL"><a href="#安装-mySQL" class="headerlink" title="安装 mySQL"></a>安装 mySQL</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf search mysql-server #</span><br><span class="line">dnf info mysql-server</span><br><span class="line">dnf install mysql-server -y #安装,加-y的意思是依赖的内容也安装</span><br></pre></td></tr></table></figure>

<p>启动 mysql-server</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld   # 开启MySQL后台服务</span><br><span class="line">systemctl status mysqld  # 查看MySQL服务：active (running)表示启动成功</span><br><span class="line">systemctl enable mysqld # 让mysqld随着系统⼀起启动</span><br></pre></td></tr></table></figure>

<h6 id="配置-mySQL"><a href="#配置-mySQL" class="headerlink" title="配置 mySQL"></a>配置 mySQL</h6><p>配置 MySQL 账号和密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br><span class="line"><span class="meta">#</span><span class="bash"> 接下来有⼀些选项，⽐如密码强度等等⼀些</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL8开始通常设置密码强度较强，选择2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其他的选项可以⾃⾏选择</span></span><br></pre></td></tr></table></figure>

<p>现在，我们就可以直接在服务器中操作 MySQL 了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p #在服务器连接mysql 后面会提示输入密码Ysj123.0</span><br></pre></td></tr></table></figure>

<p>在自己电脑上远程连接 mysql 需要进行的配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">可在navicat里面新建连接，以在本地操作远程的数据库</span></span><br><span class="line">mysql -u root -p #在服务器连接mysql 后面会提示输入密码Ysj123.0</span><br><span class="line"></span><br><span class="line">use mysql; #使用mysql数据库</span><br><span class="line">select host, user from user; #查看user表中连接权限，默认看到root是localhost</span><br><span class="line">update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;	#修改权限，是navicat能远程连接服务器中的数据库,%表示任何地址都可以连接上</span><br><span class="line"><span class="meta">#</span><span class="bash">若此时navicat还是无法连接上远程数据库，则需要刷新一下</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>阿里云在安全组中默认是禁止 3306 端的连接的</p>
<p>实例-&gt;更多-&gt;网络和安全组-&gt;安全组配置-&gt;配置规则-&gt;快速创建规则-&gt;勾选 3306，授权对象：0.0.0.0/0</p>
<p>然后在 Navicat 中新建连接，主机填写公有 ip 地址</p>
<h6 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h6><p>将本地数据库迁移到服务器的 MySQL 数据库中：</p>
<ul>
<li>在服务器中创建 coderhub 数据库</li>
<li>选中本地 coderhub 数据库，右键，转储 SQL 文件，选择结构+数据</li>
<li>选择云服务器的 mysql 数据库，右键，运行 sql 文件，找到刚刚导出的文件，点击开始</li>
</ul>
<h4 id="部署-node-项目"><a href="#部署-node-项目" class="headerlink" title="部署 node 项目"></a>部署 node 项目</h4><h5 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h5><h6 id="代码托管到-Git-仓库"><a href="#代码托管到-Git-仓库" class="headerlink" title="代码托管到 Git 仓库"></a>代码托管到 Git 仓库</h6><p>在 GitHub 中创建仓库，并且将当前代码放到 GitHub 中</p>
<p>添加.gitignore 文件时，忽略一些文件：</p>
<ul>
<li>忽略 node_modules</li>
<li>忽略 uploads</li>
<li>忽略.env</li>
</ul>
<h6 id="代码-clone-到服务器"><a href="#代码-clone-到服务器" class="headerlink" title="代码 clone 到服务器"></a>代码 clone 到服务器</h6><p>在根目录下创建自己的文件夹(后续代码会 clone 到此文件夹目录下)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ysj</span><br><span class="line">cd ysj/ #进入到创建的文件夹，便于后续clone</span><br><span class="line"><span class="meta">#</span><span class="bash">删除文件夹</span></span><br><span class="line">rm -rf filename</span><br></pre></td></tr></table></figure>

<p>服务器使用 Git 来 clone 代码：(centOS 中可以使用 dnf 安装 Git)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf search git;</span><br><span class="line">dnf info git;</span><br><span class="line">dnf install git; #安装</span><br></pre></td></tr></table></figure>

<p>clone 项目到 ysj 中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone htps://github.com/ysj/ysj.git  #git地址为github仓库中code中的https中复制的</span><br></pre></td></tr></table></figure>

<h6 id="VSCode-中打开代码"><a href="#VSCode-中打开代码" class="headerlink" title="VSCode 中打开代码"></a>VSCode 中打开代码</h6><p>在本地的 VSCode 中直接编辑远程代码，可以使用一个 VSCode 插件：remote-ssh</p>
<p>点击左边的插件，出现的界面点击+号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@8.134.60.235 #回车确定</span><br></pre></td></tr></table></figure>

<p>在侧边栏新出现的服务器右键，选择 Connect to Host in Current Window</p>
<p>选择 Linux</p>
<p>输入密码</p>
<p>选择文件夹之后即可在 vscode 打开远程项目</p>
<p>安装依赖：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>创建新的配置文件.env</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意变量名字</span></span><br><span class="line">APP_HOST=http:<span class="comment">//8.134.60.235</span></span><br><span class="line">APP_PORT=<span class="number">8001</span></span><br><span class="line">MYSQL_HOST=localhost</span><br><span class="line">MYSQL_PORT=<span class="number">3306</span></span><br><span class="line">MYSQL_DATABASE=coderhub</span><br><span class="line">MYSQL_USER=root</span><br><span class="line">MYSQL_PASSWORD=Coderwhy888.</span><br></pre></td></tr></table></figure>

<p>启动项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm ./src/main.js</span><br></pre></td></tr></table></figure>

<p>加入 8000 端口到安全组中:</p>
<p>安全组规则-&gt;快速创建规则-&gt;自定义端口：8000，授权对象：0.0.0.0/0</p>
<h6 id="pm2-启动-node-程序"><a href="#pm2-启动-node-程序" class="headerlink" title="pm2 启动 node 程序"></a>pm2 启动 node 程序</h6><ul>
<li>pm2 是一个 node 的进程管理器</li>
<li>可以使用它来管理 node 的后台进程</li>
<li>这样在关闭本地 vscode 连接的远程终端时，node 继承会继续执行，服务器就可以继续为前端提供服务了</li>
</ul>
<p>安装 pm2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure>

<p>pm2 常用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pm2 start ./src/main.js --name my-api # 启动时命名进程</span><br><span class="line">pm2 list # 显示所有进程状态</span><br><span class="line">pm2 stop 0 # 停⽌指定的进程</span><br><span class="line">pm2 stop all # 停⽌所有进程</span><br><span class="line">pm2 restart all # 重启所有进程</span><br><span class="line">pm2 restart 0 # 重启指定的进程</span><br><span class="line">pm2 delete 0 # 杀死指定的进程</span><br><span class="line">pm2 delete all # 杀死全部进程</span><br><span class="line">pm2 start app.js -i 4  #后台运⾏pm2，启动4个app.js，实现负载均衡</span><br></pre></td></tr></table></figure>

<h5 id="jenkins-自动化部署"><a href="#jenkins-自动化部署" class="headerlink" title="jenkins 自动化部署"></a>jenkins 自动化部署</h5>]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>187-js高级</title>
    <url>/20220315/187-js%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>`typora-copy-images-to: img</p>
<hr>
<h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><h4 id="浏览器引擎-js-执行原理"><a href="#浏览器引擎-js-执行原理" class="headerlink" title="浏览器引擎 js 执行原理"></a>浏览器引擎 js 执行原理</h4><p>浏览器内核指浏览器的排版引擎</p>
<ul>
<li>Webkit 内核，苹果基于 LHTML 开发，开源的，用于 Safari</li>
<li>Blink，Webkit 的一个分支，Goole 开发</li>
<li>排版引擎(layout engine)，也称浏览器引擎(browser engine)，页面渲染引擎(rendering engine)或样版引擎</li>
</ul>
<p>JS 引擎：将 js 代码翻译成 CPU 指令来执行</p>
<p><strong>浏览器内核和 js 引擎的关系</strong></p>
<p>以 WebKit 为例，WebKit 由两部分组成：</p>
<ul>
<li>WebCore:负责 HTML 解析、布局、渲染等相关工作</li>
<li>JavaScriptCore:解析、执行 js 代码</li>
</ul>
<p>chrome 浏览器使用 blink 内核，V8JS 引擎</p>
<h4 id="V8-引擎"><a href="#V8-引擎" class="headerlink" title="V8 引擎"></a><strong>V8 引擎</strong></h4><p>定义：V8 使用 c++编写的 Google 开源高性能 JavaScript 和 WebAssembly 引擎，用于 Google 和 nodejs 等</p>
<p>v8 可以独立运行，也可以嵌入到任何 c++应用程序中</p>
<p>js 源码 -&gt; Parse(词法分析，语法分析) -&gt; AST 抽象语法树 -&gt; Ignition -&gt; bytecode 字节码 -&gt; 运行结果</p>
<p><img src="E:\Web\studyNotes\js高级.assets\js运行过程.png" alt="image-20210905201029834"></p>
<p>v8 引擎本身源码非常复杂，有超过 100w 行 c++代码</p>
<ul>
<li>Parse 模块会将 JavaScript 代码转换成 AST（抽象语法树），这是因为解释器并不直接认识 JavaScript 代码<ul>
<li>如果函数没有被调用，那么是不会被转换成 AST 的</li>
</ul>
</li>
<li>Ignition 是一个解释器，会将 AST 转换成 ByteCode（字节码）<ul>
<li>同时会收集 TurboFan 优化所需要的信息（比如函数参数的类型信息，有了类型才能进行真实的运算）</li>
<li>如果函数只调用一次，Ignition 会执行解释执行 ByteCode</li>
</ul>
</li>
<li>TurboFan 是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码<ul>
<li>如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过 TurboFan 转换成优化的机器码，提高代码的执行性能</li>
<li>但机器码实际上也会被还原为 ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化（比如 sum 函数原来执行的是 number 类型，后来执行变成了 string 类型），之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码</li>
</ul>
</li>
</ul>
<p><strong>js 代码运行过程</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">30</span></span><br><span class="line"><span class="keyword">var</span> sum = num1 + num2</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1.代码被解析时，v8引擎内部会帮助我们创建一个对象(globalObject -&gt; go)，</span></span><br><span class="line"><span class="comment">  对象里面有很多全局属性或对象(String,Date,setTimeout等)，window属性指向这个全局对象</span></span><br><span class="line"><span class="comment">  var globalObject = &#123; //go，解析阶段创建(从源代码到抽象语法树之间)</span></span><br><span class="line"><span class="comment">    String: &quot;一个类&quot;,</span></span><br><span class="line"><span class="comment">    Date: &quot;类&quot;，</span></span><br><span class="line"><span class="comment">    setTimeout； &quot;函数&quot;,</span></span><br><span class="line"><span class="comment">    window: globalObject,</span></span><br><span class="line"><span class="comment">    name: undefined, //解析阶段会将全局变量放进来</span></span><br><span class="line"><span class="comment">    num1: undefined, //此时代码还没运行，所以定义的所有全局变量的值都为undefined</span></span><br><span class="line"><span class="comment">    num2: undefined,</span></span><br><span class="line"><span class="comment">    result: undefined,</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  2.运行代码</span></span><br><span class="line"><span class="comment">    2.1 v8引擎为了执行代码，v8引擎内部会有执行上下文栈(Execution Context Stack, ECStack, ECS)(函数调用栈)</span></span><br><span class="line"><span class="comment">    2.2因为执行的是全局代码， 为了全局代码能够正常执行，</span></span><br><span class="line"><span class="comment">    需要创建 全局执行上下文(Global Execution Context, GEC)(全局代码需要被执行时才会创建) </span></span><br><span class="line"><span class="comment">      全局执行上下文:</span></span><br><span class="line"><span class="comment">        vo(variable Object，变量对象)，指向GO</span></span><br><span class="line"><span class="comment">        执行代码(会给定义的全局变量赋值)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="函数执行作用域链"><a href="#函数执行作用域链" class="headerlink" title="函数执行作用域链"></a>函数执行作用域链</h4><p>当 js 引擎编译过程中，发现是一个函数时，会在内存中开辟一块空间，创建另外一个对象，是一个函数对象，用来储存函数</p>
<ul>
<li>会保存函数的父级作用域</li>
<li>保存内存中函数的执行体(代码块)</li>
</ul>
<p>js 创建全局对象遇到函数时，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GlobalObject = &#123;</span><br><span class="line">	<span class="attr">f00</span>: <span class="number">0xa00</span>, <span class="comment">//全局对象里面保存 存储函数的内存的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当函数被调用时，会在ECStack(调用栈)创建一个函数执行上下文(FEC:Function Execution Context)</span></span><br><span class="line"><span class="comment">//此处的VO(Variable Object)指向AO(Activation Object:活跃对象)</span></span><br><span class="line"><span class="comment">//函数执行完后，EFC就会弹出ECStack，然后被销毁掉</span></span><br><span class="line">FEC = &#123;</span><br><span class="line">  <span class="attr">VO</span>:AO,</span><br><span class="line">  scope chain: VO + ParentScope, <span class="comment">//作用域链，包含当前的VO对象和父级作用域,父级作用域在编译阶段就已经确定了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当查找变量的时候，是沿着作用域链查找的</p>
<p>如果函数是定义在函数里面的，那么函数里面的这个函数在编译时也会在内存中开辟一块空间储存函数执行体。外部函数的 AO 对象会保存此空间的内存地址</p>
<p>内部函数也有自己的执行上下文，会创建自己的 AO 对象</p>
<h4 id="变量环境和记录"><a href="#变量环境和记录" class="headerlink" title="变量环境和记录"></a>变量环境和记录</h4><p>以上都是早期的 ECMA 版本规范：</p>
<ul>
<li>每一个执行上下文会被关联到一个变量对象（Variable Object， VO），在源代码中的变量和函数声明会被作为属性添加到 VO 中。对于函数来说，参数也会被添加到 VO 中</li>
</ul>
<p>在最新 ECMA 版本规范中，对一些词汇进行了修改：</p>
<ul>
<li>每一个执行上下文会关联到一个变量环境(VariableEnvironment)中，在执行代码中变量和函数的声明会作为环境记录(Environment Record)添加到变量环境中。对于函数来说，参数也会被作为环境记录添加到变量环境中</li>
</ul>
<h4 id="作用域补充"><a href="#作用域补充" class="headerlink" title="作用域补充"></a>作用域补充</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  m = <span class="number">100</span> <span class="comment">//变量直接赋值，没有在其它地方定义时，js会认为这个变量是定义在全局对象里面的</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">console</span>.log(m) <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = (b = <span class="number">10</span>)</span><br><span class="line">  <span class="comment">//等价于</span></span><br><span class="line">  <span class="comment">//var a = 10;</span></span><br><span class="line">  <span class="comment">// b = 10</span></span><br><span class="line">&#125;</span><br><span class="line">bar()</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><p>任何编程语言，在代码执行过程中都是需要给他分配内存的(有的需要手动管理内存，有的自动管理)</p>
<p>内存管理生命周期(申请-使用-释放)：</p>
<ul>
<li>分配申请你需要的内存(申请)</li>
<li>使用分配的内存(存放一些东西，比如对象等)</li>
<li>不需要使用时，对其进行释放</li>
</ul>
<p>js 内存管理：</p>
<ul>
<li>js 在<strong>定义变量时</strong>就会自动分配内存<ul>
<li>js 对于基本<strong>数据类型类型的分配</strong>会在执行时，直接在<strong>栈</strong>空间进行分配</li>
<li>js 对于<strong>复杂数据类型的分配</strong>会在<strong>堆</strong>内存中开辟一块空间，并且将这块空间的指针返回值变量引用</li>
</ul>
</li>
</ul>
<p>js 垃圾回收：</p>
<ul>
<li>因为内存大小是有限的，所以当内存不再需要的时候，需要对其进行释放，以便腾出更多内存空间</li>
<li>垃圾回收(Garbage Collection，GC)：不再使用的对象，称为垃圾，需要回收</li>
</ul>
<p>常见 GC 算法：</p>
<ul>
<li>引用计数:只要有引用指向变量，变量的引用计数就会+1(默认为 0)，引用计数再次变为 0 的时候就会回收</li>
<li>标记清除：设置一个根对象，立即回收器会定期从这个根开始，找所有从根开始引用到的对象，对于那些没有引用到的对象，则认为是不可用的对象</li>
</ul>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>在 js 中，函数是一等公民：</p>
<ul>
<li>函数可以作为另外一个函数的参数，也可以作为另外一个函数的返回值</li>
</ul>
<p>高阶函数：一个函数接收另外一个函数作为参数，或者该函数会将另外一个函数作为返回值</p>
<p>函数：独立的 function，称之为函数</p>
<p>方法：当一个函数属于某一个对象时，称这个函数是这个对象的方法</p>
<p>相关常用高阶函数：数组的函数(filter、map 等)</p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>在计算机科学中：</p>
<ul>
<li>闭包(Closure)，又称词法闭包或函数闭包</li>
<li>是在支持头等函数(函数可以作为第一公民)的编程语言中，实现词法绑定的一种技术</li>
<li>闭包在实现上是一个结构体，它存储了一个函数和一个关联的环境(相当于一个符号查找表)</li>
<li>闭包和函数最大的区别在于，当捕捉闭包的时候，它的自由变量会在捕捉时被确定，这样即使脱离捕捉的上下文，也能照常运行</li>
</ul>
<p>在 JavaScript 中：</p>
<ul>
<li>一个函数对其周围状态(词法环境)的引用捆绑在一起(或者说函数被引用包围)，这样的组合就是闭包</li>
<li>即：闭包让你可以在一个内层函数中访问到外层函数的作用域</li>
<li>在 js 中，每创建一个函数，闭包就会在函数创建的同时被创建出来</li>
</ul>
<p>理解：</p>
<ul>
<li>一个普通的函数，如果它可以访问外层作用域的自由变量，那么这个函数就是一个闭包</li>
<li>从广义的角度来说，js 中的函数都是闭包</li>
<li>从狭义的角度来说，js 中的一个函数，如果访问量外层作用域的变量，那么它是一个闭包</li>
</ul>
<h4 id="闭包的内存泄露"><a href="#闭包的内存泄露" class="headerlink" title="闭包的内存泄露"></a>闭包的内存泄露</h4><p>闭包执行完后，该销毁的没有销毁掉，称为内存泄漏。</p>
<p>解决：将不再使用的闭包变量置为 null</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">    <span class="built_in">console</span>.log(age)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = foo()</span><br><span class="line">fn()</span><br><span class="line">fn = <span class="literal">null</span> <span class="comment">//并不会立马销毁，GC会按照算法的时间不固定销毁</span></span><br></pre></td></tr></table></figure>

<p>闭包里面定义的变量如果没用到，也会被销毁掉</p>
<h3 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h3><p>在大多数情况下，this 出现在函数中</p>
<p>在全局作用域下，浏览器环境的 this 绑定的 window，node 环境的 this 绑定一个空对象</p>
<p>this 是在函数被执行的时候，才会绑定上去；</p>
<p>==this 指向什么，跟函数所处的位置没有关系；跟函数被调用的方式有关==</p>
<h4 id="this-绑定规则-默认绑定"><a href="#this-绑定规则-默认绑定" class="headerlink" title="this 绑定规则-默认绑定"></a>this 绑定规则-默认绑定</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认绑定：独立函数调用(函数是独立调用的，没有其它对象调用此函数,即没有调用主体)，this指向全局对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">  foo1()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">  foo2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo3() <span class="comment">//window window window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//案例3</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = obj.foo</span><br><span class="line">bar() <span class="comment">//独立函数调用，指向全局对象</span></span><br></pre></td></tr></table></figure>

<h4 id="this-绑定规则-隐式绑定"><a href="#this-绑定规则-隐式绑定" class="headerlink" title="this 绑定规则-隐式绑定"></a>this 绑定规则-隐式绑定</h4><p>object.fn()，object 对象会被 js 引擎绑定到 fn 函数中的 this 里面</p>
<p>通过某个对象来进行调用，即：它的调用位置中，是通过某个对象发起的函数调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例1</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.foo() <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//案例2</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;在吃饭&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = obj2.eating</span><br><span class="line">fn() <span class="comment">//此时变成了独立函数调用，指向了window</span></span><br></pre></td></tr></table></figure>

<p>隐式绑定前提：</p>
<ul>
<li>必须在调用的对象内部有一个对函数的引用</li>
<li>正是通过这个引用，间接的将这个 this 绑定到了这个对象上</li>
</ul>
<h4 id="this-绑定规则-显示绑定"><a href="#this-绑定规则-显示绑定" class="headerlink" title="this 绑定规则-显示绑定"></a>this 绑定规则-显示绑定</h4><p>如果不希望在对象内部包含这个函数的引用，同时又希望在这个对象上进行强制调用</p>
<ul>
<li>js 所有函数都可以使用 call 和 apply 方法</li>
<li>这两个的区别：第一个参数相同，后面的参数，apply 为数组，call 为参数列表</li>
<li>这两个函数的第一个参数都要求是一个对象，在调用这个函数时，会将 this 绑定到这个传入的对象上</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//call apply bind</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;函数被调用&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//foo直接调用和call/apply调用的不同在于this绑定的不同</span></span><br><span class="line">foo() <span class="comment">//foo直接调用指向全局对象</span></span><br><span class="line">foo.call() <span class="comment">//</span></span><br><span class="line">foo.apply()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call/apply可以指定this的绑定对象</span></span><br><span class="line">foo.call(obj) <span class="comment">//通过call使this指向obj</span></span><br><span class="line">foo.apply(obj) <span class="comment">//指向obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.call和apply的区别</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num1 + num2, <span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">20</span>, <span class="number">30</span>) <span class="comment">//直接调用传参方式</span></span><br><span class="line">sum.call(<span class="string">&#x27;call&#x27;</span>, <span class="number">20</span>, <span class="number">30</span>) <span class="comment">//绑定的this ...参数列表(类似于剩余参数)</span></span><br><span class="line">sum.apply(<span class="string">&#x27;apply&#x27;</span>, [<span class="number">20</span>, <span class="number">30</span>]) <span class="comment">//绑定的this 参数(所有参数放进数组里面)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.call和apply在执行函数时，可以明确绑定this(显式绑定)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.bind</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>, arg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newFoo = foo.bind(<span class="string">&#x27;aaa&#x27;</span>) <span class="comment">//bind参数：绑定的this</span></span><br><span class="line">newFoo() <span class="comment">//调用这个独立函数，但因为这个独立函数在调用之前已经被显式绑定aaa，所以this指向aaa</span></span><br><span class="line"><span class="comment">//默认绑定和显示绑定冲突，显示绑定的this优先级更高</span></span><br></pre></td></tr></table></figure>

<h4 id="this-绑定规则-new-绑定"><a href="#this-绑定规则-new-绑定" class="headerlink" title="this 绑定规则-new 绑定"></a>this 绑定规则-new 绑定</h4><p>js 中的函数可以当作一个类的构造函数来使用，也就是使用 new 关键字</p>
<p>使用 new 关键字来调用函数时，会执行如下操作</p>
<ul>
<li>创建一个全新的对象</li>
<li>这个新对象会被执行 prototype 连接</li>
<li>这个新对象会绑定到函数调用的 this 上(this 的绑定,即 new 绑定在这个步骤完成)</li>
<li>执行函数体代码</li>
<li>如果函数没有返回其它对象，表达式会返回这个新对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">&#x27;ysj&#x27;</span>, <span class="number">18</span>) <span class="comment">//通过new关键字来调用一个函数(构造器)，这时的this是在调用这个构造器时创建出来的对象</span></span><br><span class="line"><span class="comment">//this = 创建出来的对象 =&gt; new 绑定</span></span><br></pre></td></tr></table></figure>

<h4 id="内置函数-this-分析"><a href="#内置函数-this-分析" class="headerlink" title="内置函数 this 分析"></a>内置函数 this 分析</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.setTimeout</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">//window，不论是否是严格模式，this都是指向window</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.监听点击</span></span><br><span class="line">boxDiv.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">//this指向boxDiv</span></span><br><span class="line">  <span class="comment">// 内部是以boxDiv.onclick();的方式调用</span></span><br><span class="line">&#125;</span><br><span class="line">boxDiv.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">//boxDiv</span></span><br><span class="line">  <span class="comment">//fn.call(boxDiv)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 数组forEach map filter find</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;ds&#x27;</span>, <span class="string">&#x27;dsad&#x27;</span>, <span class="string">&#x27;ffd&#x27;</span>, <span class="string">&#x27;fdg&#x27;</span>, <span class="string">&#x27;gfd&#x27;</span>]</span><br><span class="line">names.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">//this默认指向window</span></span><br><span class="line">&#125;, <span class="string">&#x27;ddd&#x27;</span>) <span class="comment">//参数一：函数  参数二：你要绑定的this</span></span><br></pre></td></tr></table></figure>

<h4 id="规则优先级"><a href="#规则优先级" class="headerlink" title="规则优先级"></a>规则优先级</h4><ol>
<li><p>默认规则优先级最低</p>
<ul>
<li>存在其它规则时，就会通过其它规则的方式来绑定 this</li>
</ul>
</li>
<li><p>显示绑定优先级高于隐式绑定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.foo.call(<span class="string">&#x27;aaa&#x27;</span>) <span class="comment">//此处this指向aaa</span></span><br><span class="line">obj.foo.apply(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> bar = obj.foo.bind(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">bar() <span class="comment">//this指向aaa</span></span><br></pre></td></tr></table></figure></li>
<li><p>new 绑定优先级高于隐式绑定</p>
</li>
<li><p>new 绑定高于显式绑定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   new关键字不能和apply/call一起使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = foo.bind(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> bar() <span class="comment">//this指向空对象，说明使用的是new绑定</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>new 绑定 &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定(独立函数调用)</p>
<h4 id="规则之外-忽略显式绑定"><a href="#规则之外-忽略显式绑定" class="headerlink" title="规则之外-忽略显式绑定"></a>规则之外-忽略显式绑定</h4><p>apply/call/bind：当传入的是 null/undefined 时，自动将 this 绑定成全局对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">foo.apply(<span class="literal">null</span>) <span class="comment">//此时函数的this指向window</span></span><br><span class="line">foo.apply(<span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure>

<p>规则之外-间接函数引用</p>
<p>创建一个函数的间接引用时，使用的是默认绑定规则</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">;(obj2.bar = obj1.foo)() <span class="comment">//独立的函数调用,第一个括号会拿到函数foo,第二个括号执行函数foo</span></span><br></pre></td></tr></table></figure>

<h4 id="规则之外-箭头函数"><a href="#规则之外-箭头函数" class="headerlink" title="规则之外-箭头函数"></a>规则之外-箭头函数</h4><p>箭头函数是 es6 之后增加的一种编写函数的方法，并且它比函数表达式要更加简洁</p>
<ul>
<li>==<strong>箭头函数不会绑定 this</strong>==、arguments 属性</li>
<li>箭头函数不能作为构造函数使用(不能和 new 一起使用，会抛出错误)</li>
<li>==<strong>箭头函数的 this 只看上层作用域</strong>==</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function">(<span class="params">n1, n2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//定义的独立箭头函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//高阶函数使用时传入箭头函数</span></span><br><span class="line">nums.forEach(<span class="function">(<span class="params">el, i</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>箭头函数常见简写</p>
<ul>
<li>当只有一个参数时，小括号可以省略</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nums.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果函数执行体只有一行代码，大括号也可以省略;并且会将这行代码的执行结果作为返回值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nums.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> <span class="built_in">console</span>.log(el))</span><br></pre></td></tr></table></figure>

<ul>
<li>如果箭头函数只有一行代码，返回一个对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="function">() =&gt;</span> (&#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>箭头函数不使用 this 的四种标准规则(也就是不绑定 this)，而是根据外层作用域来决定 this</p>
<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpnNU1EQXpOemt3TkE9PSZtaWQ9MjI0NzQ4Mzg0NyZpZHg9MSZzbj1mZTgwODlkZWQ4MTA5OGIzNTQ2MWQzYzE0YmI4NWNkZSZjaGtzbT1jZmUzZjIzOGY4OTQ3YjJlNzM0MjIxYzUxMzFlM2E2YmM0MmYyZGFlNjZiOTY0MGNjMGYwMzhlOWRmZmVmNDVkZDRhNTJkOGRkOTMwJm1wc2hhcmU9MSZzY2VuZT0yMyZzcmNpZD0wNTE0UkpTUU5YekZSMHZkMDNvMjJCMnAmc2hhcmVyX3NoYXJldGltZT0xNjIxMDc0OTE1NTkwJnNoYXJlcl9zaGFyZWlkPTlkZTY3YWMwNjBhZmNkMzU3Y2VlZWY0OWEyMzY1MmNiI3Jk">前端面试之彻底搞懂 this 指向<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;person&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sss = person.sayName</span><br><span class="line">  sss() <span class="comment">//独立函数调用，window</span></span><br><span class="line">  person.sayName() <span class="comment">//隐式调用，person</span></span><br><span class="line">  person.sayName() <span class="comment">//person,此处加不加括号没区别</span></span><br><span class="line">  ;(b = person.sayName)() <span class="comment">//赋值表达式-&gt;间接函数引用-&gt;独立函数调用，window</span></span><br><span class="line">&#125;</span><br><span class="line">sayName()</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;person1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo1</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo2</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name),</span><br><span class="line">  <span class="attr">foo3</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo4</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;person2&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">person1.foo1() <span class="comment">//隐式绑定,person1</span></span><br><span class="line">person1.foo1.call(person2) <span class="comment">//显示绑定，person2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="comment">//定义对象，没有产生作用域</span></span><br><span class="line">  <span class="attr">foo</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//foo的上层作用域是全局(window)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name) <span class="comment">//window</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person1.foo2() <span class="comment">//箭头函数，寻找上层作用域，window</span></span><br><span class="line">person1.foo2.call(person2) <span class="comment">//箭头函数只会从上层作用域寻找this，还是指向window</span></span><br><span class="line"></span><br><span class="line">person1.foo3()() <span class="comment">//person1.foo()拿到函数返回的结果（一个函数），调用返回的函数，独立函数调用，window</span></span><br><span class="line">person1.foo3.call(person2)() <span class="comment">//person1.foo3.call(person2)拿到返回的函数，独立函数调用，window</span></span><br><span class="line">person1.foo3().call(person2) <span class="comment">//person1.foo3()拿到返回的函数，再在调用时显式绑定， person2</span></span><br><span class="line"></span><br><span class="line">person1.foo4()() <span class="comment">//person1.foo4()拿到返回值箭头函数，箭头函数向上层作用域找,找到foo4这个函数,这个函数的this是person1</span></span><br><span class="line">person1.foo4.call(person2)() <span class="comment">//person1.foo4.call(person2)将foo4的this绑定到person2,上层作用域为foo4函数的this，指向person2</span></span><br><span class="line">person1.foo4().call(person2) <span class="comment">//person1.foo4()拿到箭头函数，箭头函数call绑定不生效，只会向上层作用域找，上层作用域为foo4的this,指向person1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.foo1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.foo2 = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  <span class="built_in">this</span>.foo3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.foo4 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">person1.foo1() <span class="comment">//隐式绑定，person1</span></span><br><span class="line">person1.foo1.call(person2) <span class="comment">//显式绑定&gt;隐式绑定，person2</span></span><br><span class="line"></span><br><span class="line">person1.foo2() <span class="comment">//箭头函数，上层作用域查找，找到Person这个函数的作用域，这里的this指向person1</span></span><br><span class="line">person1.foo2.call(person2) <span class="comment">//箭头函数不绑定this，call绑定不影响，依然向上层作用域查找，person1</span></span><br><span class="line"></span><br><span class="line">person1.foo3()() <span class="comment">//独立函数调用，window</span></span><br><span class="line">person1.foo3.call(person2)() <span class="comment">//独立函数调用，window</span></span><br><span class="line">person1.foo3().call(person2) <span class="comment">//person1.foo3()拿到返回的函数然后显式绑定，person2</span></span><br><span class="line"></span><br><span class="line">person1.foo4()() <span class="comment">//person1.foo4()拿到返回的箭头函数，上层作用域查找找到foo4,foo4绑定的this是person1</span></span><br><span class="line">person1.foo4.call(person2)() <span class="comment">//person1.foo4.call(person2)显式绑定person2,箭头函数向上层查找找到foo4,foo4绑定的this是person2</span></span><br><span class="line">person1.foo4().call(person2) <span class="comment">//person1.foo4()拿到箭头函数，上层查找找到person1(箭头函数t绑定不生效)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.obj = &#123;</span><br><span class="line">    <span class="comment">//定义对象，对象的&#123;&#125;没有作用域，不是代码块</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">foo1</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">foo2</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">person1.obj.foo1()() <span class="comment">//独立函数调用，window</span></span><br><span class="line">person1.obj.foo1.call(person2)() <span class="comment">//person1.obj.foo1.call(person2)拿到返回的函数，独立函数调用，window</span></span><br><span class="line">person1.obj.foo1().call(person2) <span class="comment">//person1.obj.foo1()拿到返回的函数后显式绑定，person2</span></span><br><span class="line"></span><br><span class="line">person1.obj.foo2()() <span class="comment">//箭头函数,上层作用域foo2,foo被obj调用，obj</span></span><br><span class="line">person1.obj.foo2.call(person2)() <span class="comment">//箭头函数，person2</span></span><br><span class="line">person1.obj.foo2().call(person2) <span class="comment">//箭头函数，obj</span></span><br></pre></td></tr></table></figure>

<h3 id="JS-函数式编程"><a href="#JS-函数式编程" class="headerlink" title="JS 函数式编程"></a>JS 函数式编程</h3><h4 id="call-apply-bind-的实现"><a href="#call-apply-bind-的实现" class="headerlink" title="call-apply-bind 的实现"></a>call-apply-bind 的实现</h4><p>call 方法的实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给所有函数添加一个封装的call方法</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.ysjCall = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg, ...rest</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//参数一：接收this  参数二：接收额外参数</span></span><br><span class="line">  <span class="keyword">var</span> fn = <span class="built_in">this</span> <span class="comment">//获取到调用ysjCall的函数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将thisArg转成对象类型(防止传入的thisArg是非对象类型)</span></span><br><span class="line">  thisArg = thisArg !== <span class="literal">null</span> &amp;&amp; thisArg !== <span class="literal">undefined</span> ? <span class="built_in">Object</span>(thisArg) : <span class="built_in">window</span></span><br><span class="line">  <span class="comment">//转化之前判断传进来的this有没有值，没有值时绑定window</span></span><br><span class="line">  <span class="comment">//调用需要被执行的函数</span></span><br><span class="line">  thisArg.fn = fn</span><br><span class="line">  <span class="keyword">var</span> result = thisArg.fn(...rest) <span class="comment">//拿到执行结果</span></span><br><span class="line">  <span class="keyword">delete</span> thisArg.fn <span class="comment">//使用完后删除该属性</span></span><br><span class="line">  <span class="keyword">return</span> result <span class="comment">//将函数的执行结果返回出去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>apply 方法的实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.ysjApply = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg, argArray</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//参数一：接收this  参数二：以数组形式接收额外参数</span></span><br><span class="line">  <span class="keyword">var</span> fn = <span class="built_in">this</span> <span class="comment">//获取到调用ysjApply的函数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将thisArg转成对象类型(防止传入的thisArg是非对象类型)</span></span><br><span class="line">  thisArg = thisArg !== <span class="literal">null</span> &amp;&amp; thisArg !== <span class="literal">undefined</span> ? <span class="built_in">Object</span>(thisArg) : <span class="built_in">window</span></span><br><span class="line">  <span class="comment">//转化之前判断传进来的this有没有值，没有值时绑定window</span></span><br><span class="line">  <span class="comment">//调用需要被执行的函数</span></span><br><span class="line">  thisArg.fn = fn</span><br><span class="line">  <span class="keyword">var</span> result</span><br><span class="line">  <span class="comment">// if (!argArray) &#123;</span></span><br><span class="line">  <span class="comment">//   //没有传参数</span></span><br><span class="line">  <span class="comment">//   result = thisArg.fn(); //拿到执行结果</span></span><br><span class="line">  <span class="comment">// &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//   result = thisArg.fn(...argArray); //拿到执行结果</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  argArray = argArray ?? []</span><br><span class="line">  result = thisArg.fn(...argArray)</span><br><span class="line">  <span class="keyword">delete</span> thisArg.fn</span><br><span class="line">  <span class="keyword">return</span> result <span class="comment">//将函数的执行结果返回出去</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bind 方法的实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//系统bind传参方式</span></span><br><span class="line"><span class="keyword">var</span> newSum = sum.bind(<span class="number">10</span>) <span class="comment">//方式一</span></span><br><span class="line">newSum(<span class="number">20</span>, <span class="number">30</span>) <span class="comment">//方式二</span></span><br><span class="line"><span class="comment">//两种方式可以独立使用，也可以混合使用;混合使用时，方式为前面的参数，方式二为后面的参数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.ysjBind = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg, ...argArray</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取调用bind的函数</span></span><br><span class="line">  <span class="keyword">var</span> fn = <span class="built_in">this</span></span><br><span class="line">  <span class="comment">//绑定this</span></span><br><span class="line">  thisArg = thisArg !== <span class="literal">null</span> &amp;&amp; thisArg !== <span class="literal">undefined</span> ? <span class="built_in">Object</span>(thisArg) : <span class="built_in">window</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...argArray2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将函数放到thisArg中进行调用</span></span><br><span class="line">    thisArg.fn = fn</span><br><span class="line">    <span class="keyword">var</span> finalArg = [...argArray, ...argArray2] <span class="comment">//对两个函数的参数进行合并</span></span><br><span class="line">    <span class="keyword">var</span> result = thisArg.fn(...finalArg)</span><br><span class="line">    <span class="keyword">delete</span> thisArg.fn</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h4><p>arguments 是一个对应于<strong>传递给函数的参数</strong>的<strong>类数组对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2, num3</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//函数所接收的所有参数会放进一个类数组对象中：arguments</span></span><br><span class="line">  <span class="comment">//类数组：有length属性，可以通过index索引访问，但没有数组的方法</span></span><br><span class="line">  <span class="comment">//常见的对arguments的操作有三个</span></span><br><span class="line">  <span class="comment">//1.获取参数的长度</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length)</span><br><span class="line">  <span class="comment">//2.根据索引值获取某一个参数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">2</span>])</span><br><span class="line">  <span class="comment">//3.callee获取当前arguments所在的函数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee) <span class="comment">//此处打印的函数就为foo</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将arguments转成数组类型的集中方式</span></span><br><span class="line">  <span class="comment">//1.自己遍历arguments中的所有元素再放到一个数组里面</span></span><br><span class="line">  <span class="comment">//2.利用Array.prototype.slice将arguments转成数组</span></span><br><span class="line">  <span class="keyword">var</span> newArr1 = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>) <span class="comment">//内部会将arguments这个可遍历对象遍历，然后放进一个数组再返回</span></span><br><span class="line">  <span class="comment">//写法等价于  [].slice.call(arguments);</span></span><br><span class="line">  <span class="comment">//3.ES6的语法</span></span><br><span class="line">  <span class="keyword">var</span> newArray2 = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">  <span class="keyword">var</span> newArray3 = [...arguments] <span class="comment">//利用展开运算符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>箭头函数中没有 arguments</p>
<h4 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h4><p>在程序设计中，若一个函数符合以下条件，那么这个函数被称为纯函数：</p>
<ul>
<li>此函数在相同的输入值时，需产生相同的输出</li>
<li>函数的输出和输入值以外的其它隐藏信息或状态无关，也和由 I/O 设备产生的外部输出无关</li>
<li>该函数不能有语义上可观察的函数副作用，如：触发事件，使输出设备输出或更改输出值以外物件的内容等</li>
</ul>
<p>总结：</p>
<ul>
<li>确定的输入，一定会产生确定的输出</li>
<li>函数在执行过程中，不能产生副作用</li>
</ul>
<p>副作用(slide effect)：表示在执行一个函数时，除了返回函数值之外，还对调用函数产生了附加的影响，比如修改了全局变量，修改参数或改变外部存储</p>
<h4 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h4><p>柯里化(Currying)也属于函数式编程里面一个非常重要的概念</p>
<ul>
<li>柯里化是把接收多个参数的函数，变成接收一个单一参数(最初函数的第一个参数)的函数，并且返回接收余下的参数，而且返回结果的新函数的技术</li>
<li>柯里化声称：如果你固定某些参数，你将得到接收余下参数的一个函数</li>
</ul>
<p>总结：</p>
<ul>
<li>只传递给函数一部分参数来调用它，让它返回一个函数去处理剩余的参数，这个过程称为柯里化</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//柯里化之前</span></span><br><span class="line">  <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转成柯里化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">z</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x + y + z</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>)(<span class="number">20</span>)(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化柯里化的代码</span></span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="function">(<span class="params">y</span>) =&gt;</span> <span class="function">(<span class="params">z</span>) =&gt;</span> x + y + z</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum2(<span class="number">10</span>)(<span class="number">20</span>)(<span class="number">30</span>))</span><br></pre></td></tr></table></figure>

<p>柯里化作用：</p>
<ul>
<li><p>让函数职责单一</p>
<ul>
<li>在函数式编程中，我们其实往往希望一个函数处理的问题尽可能单一，而不是将一大堆的处理过程交给一个函数来处理</li>
<li>我们就可以将每次传入的参数在单一的函数中进行处理，处理完后在下一个函数中再使用处理后的结果</li>
</ul>
</li>
<li><p>逻辑的复用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAdder</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m + n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//柯里化每次接收一个或多个参数</span></span><br><span class="line"><span class="keyword">var</span> makeAdder2 = <span class="function">(<span class="params">m</span>) =&gt;</span> <span class="function">(<span class="params">n</span>) =&gt;</span> m + n <span class="comment">//简写</span></span><br><span class="line"><span class="comment">//如果需要多次将5与另一个数相加</span></span><br><span class="line"><span class="keyword">var</span> adder5 = makeAdder(<span class="number">5</span>)</span><br><span class="line">adder(<span class="number">6</span>) <span class="comment">// 5 + 6</span></span><br><span class="line">adder(<span class="number">67</span>) <span class="comment">// 5 + 67</span></span><br><span class="line">adder(<span class="number">7</span>) <span class="comment">// 5 +7</span></span><br><span class="line">adder(<span class="number">76</span>) <span class="comment">// 5 + 76</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>柯里化函数的实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//柯里化函数的实现：传入一个函数，自动转换成柯里化之后的函数并返回</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curring</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//判断当前已经接受的参数的个数，是否和参数本身需要接收的参数一致</span></span><br><span class="line">    <span class="comment">//函数名.length可以获取该函数接收几个参数</span></span><br><span class="line">    <span class="keyword">if</span> (args.length &gt;= fn.length) &#123;</span><br><span class="line">      <span class="comment">//当已经传入的参数大于需要的参数时，执行函数</span></span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>, args) <span class="comment">//使用apply调用函数，若外界使用调用函数的时候绑定了this，可保持this与外界一致</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//接收的参数个数不够，还需返回新的函数，继续接收剩余的参数</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args2</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//接收到参数后递归调用curried,来检查函数参数个数是否达到</span></span><br><span class="line">        <span class="keyword">return</span> curried.apply(<span class="built_in">this</span>, [...args, ...args2])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> curried</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组合函数"><a href="#组合函数" class="headerlink" title="组合函数"></a>组合函数</h4><p>组合函数是在 js 开发过程中一种对函数的使用技巧、模式：</p>
<ul>
<li>如：需对某一个数据进行函数的调用，执行两个函数 fn1、fn2，两个函数依次执行</li>
<li>可以将这两个函数组合起来，自动依次调用(避免每次调用时操作上显得重复)</li>
<li>这个过程就是对函数的组合，称之为组合函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">composeFn</span>(<span class="params">fn1, fn2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//将传入的两个函数组合</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">count</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn2(fn1(count))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newFn = composeFn(doubleFn, squareFn)</span><br><span class="line"><span class="built_in">console</span>.log(newFn(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<p>封装通用组合函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ysjCompose</span>(<span class="params">...fns</span>) </span>&#123;</span><br><span class="line">  fns.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> el !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//如果传进来的参数有不是函数的</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Expect arguments are functions!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = args</span><br><span class="line">    fns.forEach(<span class="function">(<span class="params">fn, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) <span class="keyword">return</span> (result = fn.apply(<span class="built_in">this</span>, args))</span><br><span class="line">      result = fn.call(<span class="built_in">this</span>, result)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newFn = ysjCompose(fn1, fn2)</span><br><span class="line">newFn(<span class="number">20</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<h3 id="JS-小知识"><a href="#JS-小知识" class="headerlink" title="JS 小知识"></a>JS 小知识</h3><h4 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h4><p>可以形成自己的作用域(不建议在开发中使用，严格模式会报错)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;ysj&quot;</span>, <span class="attr">message</span>: <span class="string">&quot;obj message&quot;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">with</span>(<span class="params">obj</span>)</span> &#123; <span class="comment">//with语句参数为一个对象</span></span><br><span class="line">      <span class="built_in">console</span>.log(message); <span class="comment">//此时会沿着作用域链向上查找，with是遇到的第一个作用域，里面有message，就会停止查找</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> info = &#123;<span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>&#125;;</span><br><span class="line"><span class="function"><span class="title">whih</span>(<span class="params">info</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name); <span class="comment">//ysj</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval 函数"></a>eval 函数</h4><p>eval 是一个特殊的函数，可以将传入的字符串当作 js 代码来执行(不建议使用)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsString = <span class="string">&#x27;var message = &quot;hello&quot;; console.log(message);&#x27;</span></span><br><span class="line"><span class="built_in">eval</span>(jsString) <span class="comment">//hello</span></span><br></pre></td></tr></table></figure>

<h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>在 ES5 中，JS 提出了严格模式的概念(Strict Mode)：</p>
<ul>
<li>支持严格模式的浏览器在检测到代码有严格模式时，会以更加严格的方式对代码进行检测和执行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span> <span class="comment">//在js文件顶部书写，给这个js文件开启严格模式</span></span><br><span class="line"><span class="comment">//脚手架打包之后的代码会自动开启严格模式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span> <span class="comment">//在函数最前面书写，单独给这个函数开启严格模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>严格模式对正常的 js 语义进行了一些限制：</p>
<ul>
<li>严格模式通过抛出错误来显出一些原有的静默(silent)错误</li>
<li>严格模式让 js 引擎在执行代码时可以进行更多的优化(不需要对一些特殊的语法进行处理)</li>
<li>严格模式禁用了在 ECMAScript 未来版本中可能会定义的一些语法(禁止使用保留字、关键字)</li>
</ul>
<p>严格模式常见限制：</p>
<ul>
<li>无法意外的创建全局变量</li>
<li>严格模式会使引起静默失败(silently fail，不报错也没有任何效果)的赋值操作抛出异常</li>
<li>严格模式下试图删除不可删除的属性</li>
<li>严格模式下不允许函数参数有相同的名称</li>
<li>不允许 0 的八进制语法(原来的 0123 表示的八进制，现用 0o123 表八进制)</li>
<li>在严格模式下不允许使用 with</li>
<li>在严格模式下，eval 不再向上引用变量</li>
<li>严格模式下，this 绑定不会默认转成对象(严格模式下自执行函数&lt;默认绑定&gt;会指向 undefined)</li>
</ul>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象是现实的抽象方式，对象可以将多个相关联的数据封装到一起，更好的描述一个事物</p>
<ul>
<li>如车的颜色、速度、品牌、价格等</li>
</ul>
<p>用对象来描述事物，更有利于我们将现实的事物，抽离成代码中的某个数据结构</p>
<h5 id="对象的创建方式"><a href="#对象的创建方式" class="headerlink" title="对象的创建方式"></a>对象的创建方式</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个对象，对某一个人进行抽象(描述)</span></span><br><span class="line"><span class="comment">//创建方式一：通过new Object创建</span></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">obj1.name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line">obj1.age = <span class="number">18</span></span><br><span class="line">obj1.running = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;在跑步&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建方式2:字面量形式</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">eating</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;在吃饭&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="对属性操作的控制"><a href="#对属性操作的控制" class="headerlink" title="对属性操作的控制"></a>对属性操作的控制</h5><p>属性直接定义到对象内部或添加到对象内部，就无法对属性进行一些限制；如果想要对属性进行一些比较精准的操作控制，可以使用属性描述符</p>
<ul>
<li>通过属性描述符可以精准的添加或修改对象属性</li>
<li>属性描述符需要使用 Object.defineProperty 来对属性进行添加或修改</li>
</ul>
<p>Object.defineProperty()方法会直接在一个对象上定义一个新属性或修改一个对象现有的属性，并返回此对象</p>
<ul>
<li><p>参数一：要进行操作的对象</p>
</li>
<li><p>参数二：要对这个对象的哪一个属性进行操作</p>
</li>
<li><p>参数三：属性描述符(是一个对象,可以分为两类)</p>
<ul>
<li>数据属性描述符<ul>
<li>[[configurable]]:表示属性是否可以通过 delete 删除属性，是否可以修改它的特性，是否可以将它修改为存取属性描述符<ul>
<li>直接在对象上定义属性时，这个属性的 configurable 为 true</li>
<li>通过属性描述符定义一个属性时，这个属性的 configurable 默认为 false</li>
</ul>
</li>
<li>[[enumerable]]:表示属性是否可以通过 for-in 或者 Object.keys()返回该属性<ul>
<li>直接在对象上定义属性时，这个属性的 enumerable 为 true</li>
<li>通过属性描述符定义一个属性时，这个属性的 enumerable 默认为 false</li>
</ul>
</li>
<li>[[writable]]:表示是否可以修改属性的值<ul>
<li>直接在对象上定义属性时，这个属性的 writable 为 true</li>
<li>通过属性描述符定义一个属性时，这个属性的 writable 默认为 false</li>
</ul>
</li>
<li>[[value]]:属性的 value 值，读取属性时会返回该值，修改属性时，会对其进行修改<ul>
<li>默认情况下这个值为 undefined</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没有使用属性描述符定义的属性，也具备对应的特性</span></span><br><span class="line"><span class="comment">//value:赋值的value</span></span><br><span class="line"><span class="comment">//其它特性默认值都为true</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据属性描述符</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;address&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;重庆市&#x27;</span>, <span class="comment">//默认值undefined</span></span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>, <span class="comment">//不可配置(不能删除address属性,也不可重新定义属性描述符),默认值false</span></span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="comment">//不可枚举(只能通过对象.属性名取到这个属性的值,其它方式都看不到这个属性),默认值false</span></span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>, <span class="comment">//不可修改address的属性值(不可写入),默认值false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>存取属性描述符(也称访问器描述符)<ul>
<li>[[configurable]]特性与数据属性描述符相同</li>
<li>[[enumerable]]特性与数据属性描述符相同</li>
<li>[[get]]:获取属性时会执行的函数。默认为 undefined</li>
<li>[[set]]:设置属性时会执行的函数。默认为 undefined</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">_address</span>: <span class="string">&#x27;重庆市&#x27;</span>, <span class="comment">//_开头，表私有,隐藏该属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存取属性描述符(vue2响应式原理)</span></span><br><span class="line"><span class="comment">//应用场景：1.隐藏某一个私有属性，不希望直接被外界使用和赋值</span></span><br><span class="line"><span class="comment">//2.如果希望截获某个属性的访问和设置值的过程时,也会使用存取属性描述符</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;address&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// value: &quot;重庆市&quot;, //&lt;value,write&gt;和&lt;getter,setter&gt;只能二选一</span></span><br><span class="line">  <span class="comment">// writable: true,</span></span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._address</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._address = value</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.address) <span class="comment">//重庆市</span></span><br><span class="line">obj.address = <span class="string">&#x27;北京市&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.address) <span class="comment">//北京市</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>configurable</th>
<th>enumerable</th>
<th>value</th>
<th>writable</th>
<th>get</th>
<th>set</th>
</tr>
</thead>
<tbody><tr>
<td>数据描述符</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
<td></td>
</tr>
<tr>
<td>存取描述符</td>
<td>支持</td>
<td>支持</td>
<td></td>
<td></td>
<td>支持</td>
<td>支持</td>
</tr>
</tbody></table>
</li>
</ul>
<p><strong>定义多个属性描述符</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">_age</span>: <span class="number">18</span>, <span class="comment">//js没有严格意义上的私有属性,以_开头的属性或方法认为是私有属性、方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">  <span class="comment">//变y为i加es表复数，可以定义多个属性描述符</span></span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="comment">//在此对象里面添加对应的属性描述符</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="comment">//age属性</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>._age</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>._age = value</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.age)</span><br><span class="line">obj.age = <span class="number">33</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.age)</span><br></pre></td></tr></table></figure>

<p>另一种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">_age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="keyword">set</span> <span class="title">age</span>(<span class="params">value</span>) &#123; <span class="comment">//此写法enumerable，configurable都是使用默认值，都为true</span></span><br><span class="line">    <span class="built_in">this</span>._age = value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title">age</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="对象方法补充-了解"><a href="#对象方法补充-了解" class="headerlink" title="对象方法补充(了解)"></a>对象方法补充(了解)</h5><p>获取属性描述符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取某一个属性的属性描述符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="comment">//获取对象的所有属性描述符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(obj))</span><br></pre></td></tr></table></figure>

<p>Object 的方法对对象进行限制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//禁止对象继续添加新的属性</span></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(obj) <span class="comment">//阻止对象进行扩展</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//禁止对象配置、删除里面的属性</span></span><br><span class="line"><span class="comment">//方法一：遍历对象，将对象每个描述符的configurable修改为false</span></span><br><span class="line"><span class="built_in">Object</span>.seal(obj) <span class="comment">//方法二，让对面里面的所有属性变得不可配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//让对象的属性不可被修改(writable设置成false)</span></span><br><span class="line"><span class="built_in">Object</span>.freeze(obj) <span class="comment">//freeze:冻结</span></span><br></pre></td></tr></table></figure>

<h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><p>构造函数也称之为构造器(constructor)，通常是我们在创建对象时会调用的函数</p>
<p>在其它面向对象编程的语言中，构造函数是存在于类中的一个方法，称之为构造方法</p>
<p>构造函数也是一个普通的函数，从表现形式上和其它函数没有任何区别；一旦一个普通函数被使用 new 操作符调用了，这个函数就称之为一个构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;构造函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过new关键字调用一个函数，那么这个函数就是一个构造函数</span></span><br><span class="line"><span class="keyword">new</span> Person() <span class="comment">//通过new调用，会将函数执行一遍</span></span><br></pre></td></tr></table></figure>

<p>如果一个函数被使用 new 操作符调用了，则会执行如下操作：</p>
<ol>
<li>在堆内存中创建一个新对象(空对象)</li>
<li>这个对象内部的[[prototype]]属性会被赋值为该构造函数的 prototype 属性<ul>
<li>this.__proto__ = fn.prototype (隐式原型指向显式原型)</li>
</ul>
</li>
<li>构造函数内部的 this，会指向创建出来的新对象</li>
<li>执行函数内部的代码(函数体代码)</li>
<li>如果构造函数没有返回非空对象，则返回创建出来的新对象</li>
</ol>
<p>构造函数创建对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, height, address</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//构造函数,函数名首字母大写，多个字母时采用驼峰(约定俗成的规范)</span></span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">  <span class="built_in">this</span>.height = height</span><br><span class="line">  <span class="built_in">this</span>.address = address</span><br><span class="line">  <span class="built_in">this</span>.eating = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;在吃东西&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.running = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;在跑步&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="number">1.88</span>, <span class="string">&#x27;重庆市&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>构造函数缺点：</p>
<p>每个对象都会重复创建新的函数对象(如果有属性为函数),浪费空间(解决方案：原型)</p>
<h5 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h5><p><strong>对象原型</strong></p>
<p>JS 中每个对象都有一个特殊的内置属性[[prototype]]，这个特殊的对象可以指向另外一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span> &#125; <span class="comment">//每个对象被创建后里面就有一个属性[[prototype]],这个属性称之为对象的隐式原型</span></span><br><span class="line"><span class="comment">//早期的ECMA没有规范如何去查看[[prototype]]</span></span><br><span class="line"><span class="comment">//所以有些浏览器厂商给对象提供了一个属性,让我们可以查看这个原型对象</span></span><br><span class="line"><span class="comment">//  __proto__</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.__proto__)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj)) <span class="comment">//获取原型，ES5之后提供</span></span><br></pre></td></tr></table></figure>

<p>原型作用</p>
<p>当从一个对象中获取某一个属性时，会触发[[get]]操作(getter 操作)，进行两步操作</p>
<ol>
<li>在当前对象中去查找对应的属性,如果找到就直接使用</li>
<li>如果没有找到，就会沿着它的原型链(prototype chain)去查找，即去[[prototype]]里面查找(为了方便实现继承)</li>
</ol>
<p><strong>函数原型</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">//函数也是一个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.__proto__) <span class="comment">//函数作为对象来说，也有[[prototype]] 隐式原型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数因为是一个函数,所以还会多出一个显式原型属性: prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.prototype)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> foo()</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> foo()</span><br><span class="line"><span class="comment">//this.__proto__ = fn.prototype (创建出来的对象的隐式原型指向函数的显式原型)</span></span><br><span class="line"><span class="comment">//new操作时，p1和p2的隐式原型会指向函数的显式原型</span></span><br><span class="line"><span class="comment">// 即 p1.__proto__ = p2.__proto__ = foo.prototype, 三者相等</span></span><br></pre></td></tr></table></figure>

<p>创建对象的内存表现</p>
<p>Person 函数的 prototype 指向 Person 函数的原型对象</p>
<p><img src="E:\Web\studyNotes\js高级.assets\image-20211120221128918.png" alt="image-20211120221128918"></p>
<p><strong>函数原型上的属性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//这个对象的显式原型上有一个constructor属性(此属性可枚举为false)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Person.prototype.constructor = 构造函数本身(指向构造函数本身)</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor)</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor.name) <span class="comment">//拿到函数名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以给原型上面添加自己的属性</span></span><br><span class="line">Person.prototype.name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要添加多个属性，可以直接修改整个prototype对像</span></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: Person, <span class="comment">//此时添加的constructor的可枚举为true，与原先的constructor属性可枚举属性的值不一致</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//真实开发中，可以通过Object.defineProperty的方式添加constructor</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">&#x27;constructor&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">writeable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">value</span>: Person,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>创建对象方案：原型和构造函数结合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, height</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name <span class="comment">//属性放到对象自己上面</span></span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">  <span class="built_in">this</span>.height = height</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.eating = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//方法放到原型上面(执行过程都一样，没必要每个对象都创建一个独立的方法)</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27;在吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;ysj&#x27;</span>, <span class="number">18</span>, <span class="number">1.88</span>)</span><br></pre></td></tr></table></figure>

<h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><p>面向对象三大特性：封装、继承、多态</p>
<ul>
<li>封装：将属性和方法封装到一个类中，称为封装的过程(编写类的过程称之为封装的过程)</li>
<li>继承：可以复用代码，是多态的前提</li>
<li>多态：在某一个方法里面，看似相同的类型，在真正执行方法的时候，表现出来的形态是不一样的</li>
</ul>
<p>继承可以将重复的代码和逻辑抽取到父类中，子类只需要直接继承过来使用即可(JS 利用原型链实现继承)</p>
<p><strong>当从对象取一个属性在自身没找到时，会去原型对象上的__proto__上查找，原型对象也是一个对象，也有__proto__属性，这个原型对象会在他的原型对象上面接着查找，还没找到会继续往下一个原型对象上面找，依次向后查找…… 所有的这些原型最终会形成一个链条，称之为原型链</strong></p>
<p>原型链: obj.__proto__.__proto__.__proto__</p>
<p><img src="E:\Web\studyNotes\js高级.assets\image-20220220110135691.png" alt="image-20220220110135691"></p>
<p>obj.name</p>
<ul>
<li><p>取出对象的一个属性，会先从对象开始查找</p>
</li>
<li><p>没找到就在对象的__proto__上查找该属性，一直找到没有__proto__（Object.prototype.__proto__ === null）属性结束</p>
</li>
<li><p>即有一个对象的__proto__ === Object.prototype 时，就找到了顶层的原型，然后会停止查找</p>
</li>
</ul>
<p>==Object 是所有类的父类，本质上是一个构造函数==</p>
<p>Object 是一个函数，所以也有显式原型对象 prototype</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="comment">//此写法等价于  const obj = new Object();  所以 obj.__proto__ = Object.prototype</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.__proto__) <span class="comment">//打印出来的是Object.prototype</span></span><br></pre></td></tr></table></figure>

<p>Object 原型</p>
<ul>
<li>该对象有原型属性,但他的原型(__proto__)属性指向 null，也就是已经是顶层原型了</li>
<li>该对象上有很多默认的属性和方法（constructor、ToString、valueOf 等）</li>
</ul>
<p><strong>Person 构造函数原型</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype) <span class="comment">//里面有一个constructor</span></span><br><span class="line">Person.prototype.__proto__ <span class="comment">//Person的原型对象上面的原型属性指向顶层原型</span></span><br><span class="line"><span class="comment">//Person继承自Object</span></span><br></pre></td></tr></table></figure>

<p><img src="E:\Web\studyNotes\js高级.assets\image-20220220165108250.png" alt="image-20220220165108250"></p>
<h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><h6 id="原型链继承方案"><a href="#原型链继承方案" class="headerlink" title="原型链继承方案"></a>原型链继承方案</h6><p>让子类的显式原型执指向父类 new 出来的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类：公共</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.friends = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eating = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; eating&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类：放自己特有的属性和方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.sno = <span class="number">111</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person()</span><br><span class="line">Student.prototype = p <span class="comment">//继承</span></span><br><span class="line"></span><br><span class="line">Student.prototype.studying = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; studying&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student()</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型链实现继承弊端</span></span><br><span class="line"><span class="comment">//1.打印stu对象时，继承过来的属性是看不到的</span></span><br><span class="line"><span class="comment">//2.创建多个对象时,获取引用,修改引用中的值会相互影响</span></span><br><span class="line"><span class="keyword">const</span> stu1 = <span class="keyword">new</span> Student()</span><br><span class="line"><span class="keyword">const</span> stu2 = <span class="keyword">new</span> Student()</span><br><span class="line">stu1.friends.push(<span class="string">&#x27;kobe&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(stu2.friends) <span class="comment">// [&quot;kobe&quot;]</span></span><br><span class="line"><span class="comment">//因为stu1和stu2的__proto__都指向同一个原型对象，</span></span><br><span class="line">stu1.name = <span class="string">&#x27;kobe&#x27;</span> <span class="comment">//直接修改对象上的属性，是给本对象添加了一个新属性，不会影响原型对象上面的值</span></span><br><span class="line">stu1.frieds = [<span class="string">&#x27;kobe&#x27;</span>] <span class="comment">//给stu1上添加属性，也不会影响原型上的值</span></span><br><span class="line"><span class="built_in">console</span>.log(stu2.name) <span class="comment">// ysj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.传参只能传到子类Student，传不到父类Person，所以公共处理逻辑无法放到父类Person上面</span></span><br></pre></td></tr></table></figure>

<p>原型链继承方案内存图：</p>
<p><img src="E:\Web\studyNotes\js高级.assets\image-20220220183522719.png"></p>
<h6 id="借用构造函数继承方案"><a href="#借用构造函数继承方案" class="headerlink" title="借用构造函数继承方案"></a>借用构造函数继承方案</h6><p>让子类的显式原型指向父类 new 出来的实例</p>
<p>同时在子类构造函数中用 call 绑定 this 调用父类构造函数并传入参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类：公共</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, friends</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">  <span class="built_in">this</span>.friends = friends</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eating = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; eating&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类：放自己特有的属性和方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, friends, sno</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>, name, age, friends) <span class="comment">//公共逻辑放到父类，解决原型链继承的弊端，此处会调用一次父类构造函数</span></span><br><span class="line">  <span class="built_in">this</span>.sno = sno</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person() <span class="comment">//此处new Person也会调用一次父类构造函数</span></span><br><span class="line"></span><br><span class="line">Student.prototype.studying = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; studying&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stu1 = <span class="keyword">new</span> Student(<span class="string">&#x27;ysj&#x27;</span>, <span class="number">17</span>, [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>], <span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合继承弊端</span></span><br><span class="line"><span class="comment">//1.最大的问题就是无论在什么情况下，都会至少调用两次父类构造函数</span></span><br><span class="line"><span class="comment">//一次在创建子类原型的时候</span></span><br><span class="line"><span class="comment">//另一次在子类构造函数内部(也就是每次创建子类实例的时候)</span></span><br><span class="line"><span class="comment">//2.stu的原型上会多出一些属性，但是这些属性没有存在的必要</span></span><br><span class="line"><span class="comment">//2.所有的子类实例事实上都会拥有两份父类的属性</span></span><br><span class="line"><span class="comment">//一份在当前的实例自己里面(也就是stu1本身的)，</span></span><br><span class="line"><span class="comment">//另一份在子类对应的原型对象中(也就是stu1.__proto__里面，属性的值都为undefined,因为第18行代码指向父类实例的时候没有传参数)</span></span><br></pre></td></tr></table></figure>

<p>内存图：</p>
<p><img src="E:\Web\studyNotes\js高级.assets\image-20220220202843560.png" alt="image-20220220202843560"></p>
<p>原型式继承(对象)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newObj = &#123;&#125;</span><br><span class="line">  <span class="built_in">Object</span>.setPrototypeOf(newObj, o) <span class="comment">//将newObj的原型设置为传进来的o这个对象</span></span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject2</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//不适用Object.setPrototypeOf方法，实现办法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Fn.prototype = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Fn()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = createObject(obj) <span class="comment">//此时info的原型就为obj info.__proto__ === obj</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = <span class="built_in">Object</span>.create(obj) <span class="comment">//将info的原型设置为obj，Object.create功能等同于以上两个函数</span></span><br></pre></td></tr></table></figure>

<h6 id="寄生式继承方案"><a href="#寄生式继承方案" class="headerlink" title="寄生式继承方案"></a>寄生式继承方案</h6><p>结合原型类继承和工厂模式的一种方案：</p>
<ul>
<li>即创建一个封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再将这个对象返回</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pObj = &#123;</span><br><span class="line">  <span class="comment">//原型式继承</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">running</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStu</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//工厂函数，</span></span><br><span class="line">  <span class="keyword">var</span> stu = <span class="built_in">Object</span>.create(pObj) <span class="comment">// stu.__proto__ === pObj</span></span><br><span class="line">  stu.name = name</span><br><span class="line">  stu.studying = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//这个方法每个实例对象都会有一份，浪费空间，且无法看到实例的类型，也不是通过new创建实例，不直观</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;studying&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stu</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stuObj = createStu(<span class="string">&#x27;ysj&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h6 id="寄生组合式继承方案"><a href="#寄生组合式继承方案" class="headerlink" title="寄生组合式继承方案"></a>寄生组合式继承方案</h6><p>创建一个新对象，使子类 Student.prototype 指向这个新对象，新对象的__proto__指向父类 Person.prototype</p>
<p>仍然需要在子类中使用 call 调用父类函数绑定 this，并传入参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">SubType, SuperType</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//封装的继承函数</span></span><br><span class="line">  SubType.prototype = <span class="built_in">Object</span>.create(SuperType.prototype) <span class="comment">//SubType.prototype.__proto__ === newObj.__proto__ ===  SuperType.prototype</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(SubType.prototype, <span class="string">&#x27;constructor&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">//给SubType.prototype添加constructor属性，使得SubType的实例的类型显式正确</span></span><br><span class="line">    <span class="attr">value</span>: SubType,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, friends</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">  <span class="built_in">this</span>.friends = friends</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.eating = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; eating&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, friends, sno, score</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>, name, age, friends)</span><br><span class="line">  <span class="built_in">this</span>.sno = sno</span><br><span class="line">  <span class="built_in">this</span>.score = score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Student, Person) <span class="comment">//调用封装的继承函数</span></span><br><span class="line"></span><br><span class="line">Student.prototype.studying = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; studying&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">&#x27;ysj&#x27;</span>, <span class="number">18</span>, [<span class="string">&#x27;james&#x27;</span>, <span class="string">&#x27;curry&#x27;</span>], <span class="number">111</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(stu1)</span><br><span class="line">stu1.studying()</span><br></pre></td></tr></table></figure>

<h5 id="JS-原型相关判断方法"><a href="#JS-原型相关判断方法" class="headerlink" title="JS 原型相关判断方法"></a>JS 原型相关判断方法</h5><p><strong>hasOwnProperty</strong></p>
<p>判断对象上是否具有某个属性：</p>
<ul>
<li>obj.hasOwnProperty(“propertyName”)</li>
<li>有返回 true，没有返回 false</li>
</ul>
<p><strong>in 操作符</strong></p>
<p><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%88%A4%E6%96%AD">数据类型和判断</a></p>
<p>判断指定的属性是否在指定的对象或其原型链中</p>
<ul>
<li>“prop” in obj</li>
<li>在对象或对象原型链上返回 true</li>
<li>不在返回 false</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">Object</span>.create(obj, &#123;</span><br><span class="line">  <span class="comment">//创建一个对象并赋值给info</span></span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="comment">//创建对象的时候同时向对象上增加属性</span></span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;北京市&#x27;</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//hasOwnProperty 判断的属性在当前对象中就返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(info.hasOwnProperty(<span class="string">&#x27;address&#x27;</span>)) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(info.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//in操作符(只要判断的属性在当前对象或当前对象的原型（__proto__）上面，都返回true)(只要存在这个属性就都返回true)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;address&#x27;</span> <span class="keyword">in</span> info) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> info) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> info) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key) <span class="comment">// address name age 对象本身和对象原型上面的属性都能遍历出来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>instanceof</strong></p>
<p><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%88%A4%E6%96%AD">数据类型和判断</a></p>
<p>用来检测<strong>构造函数的 prototype</strong>，是否出现在<strong>某个实例对象的原型链上</strong></p>
<ul>
<li>语法： 实例对象 instanceof 构造函数(只能是函数)</li>
<li>如果 <code>实例对象</code> 隶属于 <code>Class</code> 类（或 <code>Class</code> 类的衍生类），则返回 <code>true</code>。</li>
<li>出现返回 true，没出现返回 false</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">SubType, SuperType</span>) </span>&#123;</span><br><span class="line">  SubType.prototype = <span class="built_in">Object</span>.create(SuperType.prototype)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(SubType.prototype, <span class="string">&#x27;constructor&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: SubType,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Student, Person) <span class="comment">//让Student继承自Person</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Student()</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断stu的原型链上会不会出现Student的原型，能出现返回true，否则返回false</span></span><br><span class="line"><span class="comment">// stu.__proto__ === Student.prototype</span></span><br><span class="line"><span class="comment">// Student.prototype.__proto__ === Person.prototype</span></span><br><span class="line"><span class="comment">// Person.prototype.__proto__ === Object.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stu <span class="keyword">instanceof</span> Student) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(stu <span class="keyword">instanceof</span> Person) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(stu <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><strong>isPrototypeOf(了解)</strong></p>
<p>用于检测某个对象，是否出现在某个实例对象的原型链上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(p <span class="keyword">instanceof</span> Person) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(p)) <span class="comment">//true 判断p有没有直接出现在Person.prototype这个对象上面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">Object</span>.create(obj)</span><br><span class="line"><span class="built_in">console</span>.log(obj.isPrototypeOf(info)) <span class="comment">//判断obj对象有没有出现在info的原型链上面</span></span><br></pre></td></tr></table></figure>

<h5 id="对象-函数-原型关系"><a href="#对象-函数-原型关系" class="headerlink" title="对象-函数-原型关系"></a>对象-函数-原型关系</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="comment">//对象由 new Object()创建出来的</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在全局由Object和Function两个类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Object</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.__proto__ === <span class="built_in">Object</span>.prototype) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象里面有一个隐式原型对象：__proto__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Foo是一个函数，所以会有一个显式原型对象：Foo.prototype(来自创建函数时，js给这个函数生成的新的对象)</span></span><br><span class="line"><span class="comment">// Foo.prototype == &#123; constructor: Foo &#125; (constructor属性指向Foo本身)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数本身也是一个对象,这个对象由new Function()创建出来，所以会有一个隐式原型对象：Foo.__proto__(来自new Function)</span></span><br><span class="line"><span class="comment">// Foo.__proto__ == Function.prototype</span></span><br><span class="line"><span class="comment">// Function.prototype == &#123; constructor: Function &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//函数由 new Function()创建出来的：const Foo = new Function()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function作为函数，本身也是由new Function()创建出来,Function.__proto__ == Function.prototype</span></span><br><span class="line"><span class="comment">// Object.prototype.__proto__ === null</span></span><br><span class="line"><span class="comment">// Object本身由new Function()创建出来：Object.__proto__ == Function.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo1 = <span class="keyword">new</span> Foo()</span><br><span class="line"><span class="comment">// foo1.__proto__ == Foo.prototype;因为Foo.prototype是一个对象，所以Foo.prototype.__proto__ == Object.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>() <span class="comment">// obj1.__proto__ = Object.prototype;</span></span><br></pre></td></tr></table></figure>

<p><img src="E:\Web\studyNotes\js高级.assets\image-20220222224244191.png" alt="image-20220222224244191"></p>
<p><img src="E:\Web\studyNotes\js高级.assets\image-20211122221033194.png" alt="image-20211122221033194"></p>
<p><img src="E:\Web\studyNotes\js高级.assets\image-20220223215011307.png" alt="image-20220223215011307"></p>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6+"></a>ES6+</h3><h4 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h4><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><h6 id="使用-class-来定义类"><a href="#使用-class-来定义类" class="headerlink" title="使用 class 来定义类"></a>使用 class 来定义类</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">//声明一个类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Animal = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="comment">//类的表达式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类的特点</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person) <span class="comment">//function</span></span><br></pre></td></tr></table></figure>

<h6 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a>类的构造函数</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//类的构造函数,一个类只能有一个构造函数</span></span><br><span class="line">    <span class="comment">//1.在内存中创建一个对象</span></span><br><span class="line">    <span class="comment">//2.将类的原型对象prototype赋值给创建出来的对象 moni.__proto__ = Person.prototype</span></span><br><span class="line">    <span class="comment">//3.将对象赋值给函数的this：new 绑定 this = moni</span></span><br><span class="line">    <span class="comment">//4.执行函数体中的代码</span></span><br><span class="line">    <span class="comment">//5.自动返回创建出来的对象</span></span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;ysj&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<h6 id="类中定义方法"><a href="#类中定义方法" class="headerlink" title="类中定义方法"></a>类中定义方法</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>._address = <span class="string">&#x27;重庆市&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">eating</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//类中的普通的实例方法，通过创建出来的对象进行访问</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; eating&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//类的访问器方法</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">address</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;拦截访问操作&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._address</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">address</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;拦截设置操作&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>._address = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//类的静态方法(也称类方法)，通过类名去访问 Person.randomPerson()</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">randomPerson</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> age = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&#x27;ysj&#x27;</span>, age) <span class="comment">//随机产生一个年龄然后返回</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">//没写继承会默认继承自Object</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">running</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; running&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">personMethods</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;父类处理逻辑&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">staticMethods</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;父类静态方法逻辑&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student称之为子类或派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name, age, sno</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//在子类的构造函数中使用this或者返回默认对象之前，必须先通过super调用父类的构造函数</span></span><br><span class="line">    <span class="comment">//super的使用位置有三个：子类的构造函数、实例方法、静态方法</span></span><br><span class="line">    <span class="built_in">super</span>(name, age) <span class="comment">//调用父类构造方法</span></span><br><span class="line">    <span class="built_in">this</span>.sno = sno</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">running</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//子类对父类方法进行重写</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;student &#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27; running&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">personMethods</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.personMethods() <span class="comment">//继续使用父类personMethods,对父类逻辑进行复用</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;子类处理逻辑&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">staticMethods</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//子类重写父类静态方法</span></span><br><span class="line">    <span class="built_in">super</span>.staticMethods()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;子类静态方法逻辑&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="继承内置类"><a href="#继承内置类" class="headerlink" title="继承内置类"></a>继承内置类</h6><p>继承内置类，在保留原有内置类方法/属性的基础上进行扩展</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SJArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">firstItem</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">lastItem</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>[<span class="built_in">this</span>.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> SJArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr.firstItem())</span><br><span class="line"><span class="built_in">console</span>.log(arr.lastItem())</span><br></pre></td></tr></table></figure>

<h5 id="字面量增强"><a href="#字面量增强" class="headerlink" title="字面量增强"></a>字面量增强</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name, <span class="comment">//key、value名称相同时，可以简写(属性简写)</span></span><br><span class="line">  age,</span><br><span class="line">  <span class="function"><span class="title">bar</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//方法的简写</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fda&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">baz</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//这种写法不是简写，绑定baz为箭头函数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//计算属性名</span></span><br><span class="line">  [name + <span class="string">&#x27;hhh&#x27;</span>]: <span class="string">&#x27;呵呵呵&#x27;</span>, <span class="comment">//此处属性名为  ysjhhh</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.ysjhhh) <span class="comment">//呵呵呵</span></span><br></pre></td></tr></table></figure>

<h5 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h5><p>数组的解构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> [item1, item2, item3] = arr</span><br><span class="line"><span class="built_in">console</span>.log(item1) <span class="comment">//aaa</span></span><br><span class="line"><span class="built_in">console</span>.log(item2) <span class="comment">//bbb</span></span><br><span class="line"><span class="built_in">console</span>.log(item3) <span class="comment">//ccc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解构后面的元素</span></span><br><span class="line"><span class="keyword">const</span> [, el1, el2] = arr <span class="comment">//解构后面两个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(el1) <span class="comment">//bbb</span></span><br><span class="line"><span class="built_in">console</span>.log(el2) <span class="comment">//ccc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解构出一个元素，后面的元素放到一个新数组中</span></span><br><span class="line"><span class="keyword">const</span> [itemA, ...newNames] = arr</span><br><span class="line"><span class="built_in">console</span>.log(itemA) <span class="comment">//aaa</span></span><br><span class="line"><span class="built_in">console</span>.log(newNames) <span class="comment">//[ &#x27;bbb&#x27;, &#x27;ccc&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解构的默认值</span></span><br><span class="line"><span class="keyword">const</span> [itema, itemb, itemc, itemd = <span class="string">&#x27;ddd&#x27;</span>] = arr</span><br><span class="line"><span class="built_in">console</span>.log(itemd) <span class="comment">//ddd</span></span><br></pre></td></tr></table></figure>

<p>对象的解构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; age, name &#125; = obj <span class="comment">//对象解构是按key解构，与顺序无关</span></span><br><span class="line"><span class="built_in">console</span>.log(age, name) <span class="comment">//18 ysj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给解构出来的属性取别名</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">age</span>: newAge, <span class="attr">name</span>: newName &#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(newName, newAge) <span class="comment">//ysj 18</span></span><br><span class="line"><span class="comment">//解构时赋默认值</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span>: name2 = <span class="string">&#x27;yyy&#x27;</span>, address = <span class="string">&#x27;默认地址&#x27;</span> &#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(name2, ddd) <span class="comment">// ysj 默认地址</span></span><br></pre></td></tr></table></figure>

<p>应用场景：</p>
<ul>
<li>参数的参数若为一个对象，可以直接在参数中解构</li>
<li>拿到一个变量时，解构后使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params">&#123; name, age &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//在参数中解构</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = <span class="keyword">await</span> getData() <span class="comment">//对结果解构</span></span><br></pre></td></tr></table></figure>

<h5 id="let-const"><a href="#let-const" class="headerlink" title="let/const"></a>let/const</h5><p>const:传递的值不能修改，但若传递的是一个引用类型，可以修改其属性</p>
<p>通过 let/const 定义的变量不可以重复定义</p>
<p>let/const 会在执行上下文创建阶段被创建出来,但不可访问，所以没有作用域提升</p>
<p><strong>块级作用域</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="comment">//声明对象字面量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//块代码</span></span><br><span class="line">  <span class="keyword">let</span> foo = <span class="string">&#x27;ddd&#x27;</span> <span class="comment">//块级作用域duilet/const/function/class声明的类型有效</span></span><br><span class="line">  <span class="comment">//浏览器为了兼容以前的代码，让function没有块级作用域</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5中只有全局作用域和函数作用域</span></span><br><span class="line"><span class="comment">//es6增加了块级作用域</span></span><br><span class="line"><span class="comment">// if、switch、for都是块级作用域</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, i &lt; arr.length; i++)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//此时会把上面的i+1,得到一个结果</span></span><br><span class="line">	<span class="keyword">let</span> i = 结果; <span class="comment">//再把结果赋值给新定义的i，并不是沿用上面的i</span></span><br><span class="line">	<span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>暂时性死区</strong></p>
<p>在一个代码中，使用 let、const 声明的变量，在声明之前，变量都是不可以访问的</p>
<p>这种现象称之为暂时性死区 temporal dead zone(暂时性死区，TDZ)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;dd&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo) <span class="comment">//在变量声明之前访问，报错</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> foo = <span class="string">&#x27;gvv&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优先使用 const 定义变量，如果后面要修改变量，再考虑用 let</p>
<h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;name&#125;</span>, age is <span class="subst">$&#123;age * <span class="number">2</span>&#125;</span>, height is <span class="subst">$&#123;getHeight()&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>

<p>标签模板字符串(Tagged Template Literals)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(m, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//普通调用函数方式</span></span><br><span class="line">foo(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//标签模板字符串调用函数(styled-components)</span></span><br><span class="line">foo<span class="string">``</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line">foo<span class="string">`Hello<span class="subst">$&#123;name&#125;</span>Wo<span class="subst">$&#123;age&#125;</span>rld`</span> <span class="comment">//[&#x27;Hello&#x27;, &#x27;Wo&#x27;, &#x27;rld&#x27;] ysj</span></span><br><span class="line"><span class="comment">//参数一：$&#123;&#125;将整个字符串切成三部分，将每部分都放进数组中(模板字符串的整个字符串，只是被切成多份，放进数组)</span></span><br><span class="line"><span class="comment">//参数二：使用模板字符串传入时，第一个$&#123;&#125;传入的变量的值</span></span><br><span class="line"><span class="comment">//参数三：使用模板字符串传入时，第二个$&#123;&#125;传入的变量的值</span></span><br><span class="line"><span class="comment">//参数四：以此类推</span></span><br></pre></td></tr></table></figure>

<h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p><strong>函数的默认参数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fuction <span class="function"><span class="title">foo</span>(<span class="params">name = <span class="string">&#x27;ysj&#x27;</span>, age =<span class="number">18</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">&#123;name, age&#125; = &#123;name:<span class="string">&#x27;ysj&#x27;</span>, age:<span class="number">18</span>&#125;</span>)</span>&#123; <span class="comment">//对象参数设置默认值并同时解构</span></span><br><span class="line">  <span class="built_in">console</span>.log(name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar2</span>(<span class="params">&#123;name = <span class="string">&quot;ysj&quot;</span>, age = <span class="number">18</span>&#125; = &#123;&#125;</span>)</span>&#123; <span class="comment">//对象参数设置默认值(空对象)并同时解构(解构时给属性设置默认值)</span></span><br><span class="line">  <span class="built_in">console</span>.log(name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有默认值的形参最好放到最后</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有默认值的函数的参数不算在函数的length之内,并且默认参数之后的所有参数都不算在length之内</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tt</span>(<span class="params">a, b, c = <span class="number">3</span>, d, e</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(tt.length); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p><strong>函数的剩余参数</strong>(rest parameter)</p>
<p>如果最后一个参数是…为前缀的，那么它会将剩余的参数放到该参数中，并且作为一个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//args必须放到最后</span></span><br><span class="line">  <span class="built_in">console</span>.log(args <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与 arguments 区别：</p>
<ul>
<li>剩余参数只包含没有对应形参的实参，arguemnts 对象包含了传给函数的所有实参</li>
<li>arguments 对象不是一个真正的数组,而 rest 参数是一个真正的数组，可以进行数组的所有操作</li>
</ul>
<p><strong>箭头函数</strong></p>
<ul>
<li>箭头函数没有显式原型，所以不能作为构造函数，使用 new 来创建对象</li>
<li>箭头函数没有 this,arguments</li>
</ul>
<h5 id="展开语法"><a href="#展开语法" class="headerlink" title="展开语法"></a>展开语法</h5><p>Spread syntax：</p>
<ul>
<li>可以在函数调用数组构造时，将数组表达式或者 string 在语法层面展开</li>
<li>可以在构造字面量对象时，将对象表达式按 key-value 的方式展开</li>
</ul>
<p>应用场景：</p>
<ul>
<li>在函数调用时使用</li>
<li>在数组构造时使用</li>
<li>在构建对象字面量时，也可以使用展开运算符，ES2018（ES9）中添加的新特性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y, z)</span><br><span class="line">&#125;</span><br><span class="line">foo.apply(<span class="literal">null</span>, names) <span class="comment">//aaa bbb ccc</span></span><br><span class="line">foo(...names) <span class="comment">//aaa bbb ccc</span></span><br><span class="line">foo(...name) <span class="comment">//y s j</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newNames = [...names, ...name]</span><br><span class="line"><span class="built_in">console</span>.log(newNames) <span class="comment">//[&#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;, &#x27;y&#x27;, &#x27;s&#x27;, &#x27;j&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123; ...info, <span class="attr">address</span>: <span class="string">&#x27;重庆市&#x27;</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">//&#123;name:&#x27;ysj&#x27;, age: 18, address: &#x27;重庆市&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//展开运算符进行的是一个浅拷贝</span></span><br></pre></td></tr></table></figure>

<h5 id="数值的表示"><a href="#数值的表示" class="headerlink" title="数值的表示"></a>数值的表示</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num1 = <span class="number">100</span>; <span class="comment">//10进制</span></span><br><span class="line"><span class="keyword">const</span> num2 = 0b100l <span class="comment">//二进制 -&gt; binary</span></span><br><span class="line"><span class="keyword">const</span> num3 = <span class="number">0o100</span>; <span class="comment">//八进制 -&gt; octonary</span></span><br><span class="line"><span class="keyword">const</span> num4 = ox100; <span class="comment">//十六进制 -&gt; hexdecimal</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//大的数值可以使用连接符(ES2021 ES12)</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">10_000_000_000</span></span><br></pre></td></tr></table></figure>

<h5 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h5><p>ES6 中新增的一个基本数据类型,翻译为符号</p>
<ul>
<li>在 ES6 之前，对象的属性名都是字符串形式，很容易造成属性名的冲突</li>
<li>Symbol 就是用来解决这个问题，用来生成一个独一无二的值</li>
<li>Symbol 是通过 Symbol 函数来生成的，生成后可以作为属性名</li>
<li>ES6 中，对象的属性名可以使用字符串或 Symbol 值</li>
<li>Symbol 值即使多次创建，他们也是不同的，每次都是独一无二的值</li>
<li>创建 Symbol 时也可以传入一个描述 description(ES2019 ES10 新特性)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="built_in">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s3 = <span class="built_in">Symbol</span>(<span class="string">&#x27;aaa&#x27;</span>) <span class="comment">//创建时传入描述</span></span><br><span class="line"><span class="built_in">console</span>.log(s3.description) <span class="comment">//aaa</span></span><br><span class="line"><span class="keyword">const</span> s4 = <span class="built_in">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="comment">//定义对象字面量时使用</span></span><br><span class="line">  [s1]: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">  [s2]: <span class="string">&#x27;cba&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj[s3] = <span class="string">&#x27;bac&#x27;</span> <span class="comment">//新增属性时使用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, s4, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;cab&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj[s1]) <span class="comment">//获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Symbol作为key的属性名,在遍历/Object.keys等中获取不到这些Symbol值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)) <span class="comment">//只能通过这种方式获取</span></span><br><span class="line"><span class="comment">// [ Symbol(), Symbol(), Symbol(aaa), Symbol() ]</span></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">const</span> sKeys = <span class="built_in">Object</span>.getOwnPropertySymbols(obj)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> sKeys) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj[key])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一样的Symbol值 Symbol.for(描述)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s5 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;ysj&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> s6 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;ysj&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s5 === s6) <span class="comment">//true</span></span><br><span class="line"><span class="comment">//获取key</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="built_in">Symbol</span>.keyFor(s5)</span><br><span class="line"><span class="built_in">console</span>.log(key) <span class="comment">//ysj</span></span><br></pre></td></tr></table></figure>

<h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>ES6 中新增了另外两种数据解构：Set、Map，以及它们的另外形式：WeakSet、WeakMap</p>
<p>Set 类似于数组，但是和数组的区别是元素不能重复</p>
<ul>
<li>创建 Set 时需要通过 Set 构造函数(暂时没有字面量创建方式)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">set.add(<span class="number">10</span>) <span class="comment">//向set中添加元素</span></span><br><span class="line">set.add(<span class="number">20</span>)</span><br><span class="line">set.add(<span class="number">30</span>)</span><br><span class="line">set.add(<span class="number">40</span>)</span><br><span class="line"><span class="built_in">console</span>.log(set)</span><br><span class="line"><span class="comment">//向 set中添加对象时，只要对象内存地址不一致，就可以添加成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给数组去重</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">66</span>, <span class="number">11</span>]</span><br><span class="line"><span class="keyword">const</span> arrSet = <span class="keyword">new</span> <span class="built_in">Set</span>(arr) <span class="comment">//创建时可以传入可迭代对象</span></span><br><span class="line"><span class="built_in">console</span>.log(arrSet) <span class="comment">// Set(6) &#123; 11, 22, 33, 44, 55, 66 &#125;</span></span><br><span class="line"><span class="keyword">const</span> newArr = <span class="built_in">Array</span>.from(arrSet) <span class="comment">//将set转为数组结构</span></span><br><span class="line"><span class="keyword">const</span> newArr2 = [...arrSet] <span class="comment">//将set使用展开运算符放进数组中</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr, newArr2) <span class="comment">//[ 11, 22, 33, 44, 55, 66 ] [ 11, 22, 33, 44, 55, 66 ]</span></span><br></pre></td></tr></table></figure>

<p>Set 常见属性和方法：</p>
<ul>
<li>size,返回 set 中元素个数，set.size</li>
<li>add，向 set 中添加元素，set.add(el)</li>
<li>delete，删除 set 中的元素，set.delete(el)</li>
<li>has，判断 set 中有没有包含某个元素，set.has(el)</li>
<li>clear,清空 set，set.clear()</li>
</ul>
<p>对 set 遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])</span><br><span class="line">set.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> el <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h5><p>和 Set 类似的另外一个数据结构，也是内部元素不能重复的数据结构</p>
<p>和 Set 区别：</p>
<ul>
<li>WeakSet 中只能存放对象类型，不能存放基本数据类型</li>
<li>WeakSet 对元素的引用是弱引用，如果没有其它引用对某个对象进行引用，那么 GC 会对该对象进行回收</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> weakSet = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line">weakSet.add(&#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;) <span class="comment">//建立的是弱引用</span></span><br></pre></td></tr></table></figure>

<p>WeakSet 常见方法：</p>
<ul>
<li>add(el)，添加某个元素，返回 WeakSet 对象本身</li>
<li>delete(el)，从 WeakSet 中删除和这个值相等的元素，返回 boolean 类型</li>
<li>has(value)，判断 WeakSet 中是否存在某个元素，返回 boolea 类型</li>
</ul>
<p>注意：WeakSet 不能进行遍历</p>
<ul>
<li>因为 WeakSet 只是对象的弱引用，如果我们遍历获取其中元素，那么有可能造成对象不能正常地销毁</li>
<li>所以存储到 WeakSet 中的对象是没办法获取的</li>
</ul>
<h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><p>用于存储映射关系(键值对)</p>
<p>与对象存储映射关系的区别：</p>
<ul>
<li>对象存储映射关系只能用字符串或 Symbol；</li>
<li>Map 可以将其它类型作为 key</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">map.set(obj1, <span class="string">&#x27;aaa&#x27;</span>) <span class="comment">//使用对象作为key</span></span><br><span class="line">map.set(obj2, <span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">map.set(<span class="number">1</span>, <span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [key, value],</span><br><span class="line">  [key, value],</span><br><span class="line">  [key, value],</span><br><span class="line">]) <span class="comment">//Map传入数组需要以此种格式</span></span><br></pre></td></tr></table></figure>

<p>常见的属性和方法：</p>
<ul>
<li>map.size，查看 map 有几个元素</li>
<li>map.set(key, value)，向 map 中添加元素</li>
<li>map.get(key)，获取 key 对应的值</li>
<li>map.has(key)，判断某个 key 是否存在</li>
<li>map.delete(key)，删除某个元素，成功返回 true</li>
<li>map.clear()，清空元素</li>
</ul>
<p>遍历 map</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [key, value],</span><br><span class="line">  [key, value],</span><br><span class="line">  [key, value],</span><br><span class="line">])</span><br><span class="line">map.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, key)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> el <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el) <span class="comment">//打印出来的每一项都是一个数组，数组第一个元素放key，第二个元素放value</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">//遍历的同时解构</span></span><br><span class="line">  <span class="built_in">console</span>.log(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h5><p>与 Map 类型相似的数据结构，也是以键值对的形式存在</p>
<p>和 Map 的区别：</p>
<ul>
<li>WeakMap 的 key 只能使用对象，不接受其它类型作为 key</li>
<li>WeakMap 的 key 对对象的引用是弱引用，如果没有其它引用引用这个对象，那么 GC 可以回收这个对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line">weakMap.set(obj, <span class="string">&#x27;sss&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>常见方法：</p>
<ul>
<li>weakmap.set(key, value),向 weakmap 中添加元素</li>
<li>weakmap.get(key)，获取 key 对应的值</li>
<li>weakmap.has(key)，判断某个 key 是否存在</li>
<li>weakmap.delete(key)，删除某个元素</li>
</ul>
<p>应用场景：vue3 响应式原理</p>
<h4 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h4><h5 id="Array-Includes"><a href="#Array-Includes" class="headerlink" title="Array Includes"></a>Array Includes</h5><p>判断数组中是否包含某个元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(names.includes(<span class="string">&#x27;aaa&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">//includes可以判断数组中是否包含NaN，indexOf()则没法判断</span></span><br></pre></td></tr></table></figure>

<h5 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">//获取2的3次方</span></span><br><span class="line"><span class="comment">//现在获取2的3次方</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> ** <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h4 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h4><h5 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values"></a>Object.values</h5><p>之前可以通过 Object.keys 获取一个对象所有的 key，在 ES8 中提供了 Object.values 来获取所有的 value 值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)) <span class="comment">//[&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)) <span class="comment">// [&#x27;ysj&#x27;, 18]</span></span><br></pre></td></tr></table></figure>

<h5 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries"></a>Object.entries</h5><p>通过 Object.entries 可以获取到一个数组，数组中会存放可枚举属性的键值对数组</p>
<p>将键值对格式的数据转化为 entries 格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)) <span class="comment">//[ [ &#x27;name&#x27;, &#x27;ysj&#x27; ], [ &#x27;age&#x27;, 18 ] ]</span></span><br></pre></td></tr></table></figure>

<h5 id="String-Padding"><a href="#String-Padding" class="headerlink" title="String Padding"></a>String Padding</h5><p>某些字符串需要进行前后的填充，来实现某种格式化的效果，ES8 中增加 padStart 和 padEnd 方法，分别对字符的首尾进行填充</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"><span class="keyword">const</span> newStr = str.padStart(<span class="number">14</span>, <span class="string">&#x27;8&#x27;</span>).padEnd(<span class="number">18</span>, <span class="string">&#x27;=&#x27;</span>) <span class="comment">//参数一：填充完后字符串的最长长度，参数二：填充进去的字符</span></span><br><span class="line"><span class="built_in">console</span>.log(newStr) <span class="comment">//888Hello World====</span></span><br></pre></td></tr></table></figure>

<h5 id="Object-Descripts"><a href="#Object-Descripts" class="headerlink" title="Object Descripts"></a>Object Descripts</h5><p>Object.getOwnPropertyDescriptors,获取对象描述符</p>
<p>Async Function: async await</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Object-assign-ES6"><a href="#Object-assign-ES6" class="headerlink" title="Object.assign(ES6)"></a>Object.assign(ES6)</h5><p>Object.assign(target, …source)</p>
<ul>
<li>将所有可枚举属性的值从一个或多个源对象分配到目标对象,并返回目标对象</li>
<li>目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性</li>
<li><code>Object.assign()</code>拷贝的是（可枚举）属性值，假如源值是一个对象的引用，它仅仅会复制其引用值。(只能拷贝第一层)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//赋值一个对象(浅拷贝)</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj)</span><br><span class="line"><span class="built_in">console</span>.log(copy) <span class="comment">// &#123; a: 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并对象</span></span><br><span class="line"><span class="keyword">const</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">const</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.assign(o1, o2, o3)</span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(o1) <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;, 注意目标对象自身也会改变。</span></span><br><span class="line"><span class="comment">//继承属性和不可枚举属性无法拷贝</span></span><br></pre></td></tr></table></figure>

<h4 id="ES9"><a href="#ES9" class="headerlink" title="ES9"></a>ES9</h4><p>Async iterators：迭代</p>
<p>Object Spread operators:对象展开运算符</p>
<p>Promise finally:Promise 的一个方法</p>
<p>for await of:</p>
<p>异步迭代器(for-await-of)：循环等待每个 Promise 对象变为 resolved 状态才进入下一步</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;异步操作&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ES10"><a href="#ES10" class="headerlink" title="ES10"></a>ES10</h4><h5 id="flat-flatMap"><a href="#flat-flatMap" class="headerlink" title="flat flatMap"></a>flat flatMap</h5><p>flat 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [</span><br><span class="line">  <span class="number">10</span>,</span><br><span class="line">  <span class="number">20</span>,</span><br><span class="line">  [<span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">  [</span><br><span class="line">    [<span class="number">30</span>, <span class="number">20</span>],</span><br><span class="line">    [<span class="number">423</span>, <span class="number">543</span>],</span><br><span class="line">  ],</span><br><span class="line">  <span class="number">34</span>,</span><br><span class="line">  [<span class="number">34</span>, <span class="number">878</span>],</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> newNum = nums.flat() <span class="comment">//flat参数：降维深度，默认为1</span></span><br><span class="line"><span class="built_in">console</span>.log(newNum) <span class="comment">//[ 10, 20, 2, 9, [ 30, 20 ], [ 423, 543 ], 34, 34, 878 ]</span></span><br></pre></td></tr></table></figure>

<p>flatMap:flatMap 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组</p>
<ul>
<li>flatMap 是先进行 map 操作，再做 flat 的操作</li>
<li>flatMap 中的 falt 相当于深度为 1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//flatMap</span></span><br><span class="line"><span class="keyword">const</span> nums2 = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">434</span>, <span class="number">43</span>]</span><br><span class="line"><span class="keyword">const</span> newNums2 = nums2.flatMap(<span class="function">(<span class="params">item</span>) =&gt;</span> item * <span class="number">2</span>) <span class="comment">//参数一：回调函数   参数2：绑定的this</span></span><br><span class="line"><span class="built_in">console</span>.log(newNums2) <span class="comment">//[ 24, 46, 868, 86 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用场景</span></span><br><span class="line"><span class="keyword">const</span> message = [<span class="string">&#x27;Hello World&#x27;</span>, <span class="string">&#x27;Hello ysj&#x27;</span>, <span class="string">&#x27;my name is ysj&#x27;</span>]</span><br><span class="line"><span class="comment">//要求：将每一个元素按照空格分隔，再将分割后的所有元素放进一个数组</span></span><br><span class="line"><span class="keyword">const</span> words = message.flatMap(<span class="function">(<span class="params">el</span>) =&gt;</span> el.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(words) <span class="comment">//[&#x27;Hello&#x27;, &#x27;World&#x27;, &#x27;Hello&#x27;, &#x27;ysj&#x27;, &#x27;my&#x27;, &#x27;name&#x27;, &#x27;is&#x27;, &#x27;ysj&#x27;]</span></span><br></pre></td></tr></table></figure>

<h5 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries"></a>Object.fromEntries</h5><p>将 entries 格式的数据转为对象键值对格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.8</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> entries = <span class="built_in">Object</span>.entries(obj)</span><br><span class="line"><span class="built_in">console</span>.log(entries) <span class="comment">//[ [ &#x27;name&#x27;, &#x27;ysj&#x27; ], [ &#x27;age&#x27;, 18 ], [ &#x27;height&#x27;, 1.8 ] ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">Object</span>.fromEntries(entries)</span><br><span class="line"><span class="built_in">console</span>.log(newObj) <span class="comment">//形式与obj一样 &#123; name: &#x27;ysj&#x27;, age: 18, height: 1.8 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用场景</span></span><br><span class="line"><span class="keyword">const</span> queryString = <span class="string">&#x27;name=ysj&amp;age=18&amp;height=1.80&#x27;</span></span><br><span class="line"><span class="keyword">const</span> queryParams = <span class="keyword">new</span> URLSearchParams(queryString)</span><br><span class="line"><span class="built_in">console</span>.log(queryParams) <span class="comment">//URLSearchParams &#123; &#x27;name&#x27; =&gt; &#x27;ysj&#x27;, &#x27;age&#x27; =&gt; &#x27;18&#x27;, &#x27;height&#x27; =&gt; &#x27;1.80&#x27; &#125;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> param <span class="keyword">of</span> queryParams) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(param) <span class="comment">//每个元素都是一个数组</span></span><br><span class="line">  <span class="comment">//[ &#x27;name&#x27;, &#x27;ysj&#x27; ]</span></span><br><span class="line">  <span class="comment">//[ &#x27;age&#x27;, &#x27;18&#x27; ]</span></span><br><span class="line">  <span class="comment">//[ &#x27;height&#x27;, &#x27;1.80&#x27; ]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> paramObj = <span class="built_in">Object</span>.fromEntries(queryParams) <span class="comment">//传入可迭代对象queryParams</span></span><br><span class="line"><span class="built_in">console</span>.log(paramObj) <span class="comment">//&#123; name: &#x27;ysj&#x27;, age: &#x27;18&#x27;, height: &#x27;1.80&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="trimStart、trimEnd"><a href="#trimStart、trimEnd" class="headerlink" title="trimStart、trimEnd"></a>trimStart、trimEnd</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;    Hello  World   &#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(message.trimStart()) <span class="comment">//去除开头的空格 trimLeft()是此方法的别名</span></span><br><span class="line"><span class="built_in">console</span>.log(message.trimEnd()) <span class="comment">//去除尾部的空格  trimRight 是 trimEnd 的别名</span></span><br></pre></td></tr></table></figure>

<h5 id="其它知识点"><a href="#其它知识点" class="headerlink" title="其它知识点"></a>其它知识点</h5><p>Symbol description:获取创建 Symbol 时传入的名字</p>
<p>Optional catch binding:见后面 try catch</p>
<h4 id="ES11"><a href="#ES11" class="headerlink" title="ES11"></a>ES11</h4><h5 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h5><p>ES11 之前，最大能正确表示的整数为 <em>Number</em>.MAX_SAFE_INTEGER</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> maxInt = <span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line"><span class="built_in">console</span>.log(maxInt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bigInt = <span class="number">9007199254740991999n</span> <span class="comment">//在超出max_safe_integer的数字后面加n</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bigInt + <span class="number">10</span>) <span class="comment">//bigInt和number不能直接相加，会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(bigInt + <span class="number">10n</span>) <span class="comment">//转换之后再相加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(bigInt + <span class="built_in">BigInt</span>(num)) <span class="comment">//转换</span></span><br></pre></td></tr></table></figure>

<h5 id="空值合并运算"><a href="#空值合并运算" class="headerlink" title="空值合并运算 ??"></a>空值合并运算 ??</h5><p>Nullish Coalscing Operator</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">const</span> bar = foo || <span class="string">&#x27;默认值&#x27;</span> <span class="comment">//当foo是一个空的字符串或者0就无法正确的拿到foo的值了</span></span><br><span class="line"><span class="keyword">const</span> bar = foo ?? <span class="string">&#x27;&#x27;</span> <span class="comment">//只有当foo为null或者undefined的时候才会使用后面的值</span></span><br></pre></td></tr></table></figure>

<h5 id="可选链"><a href="#可选链" class="headerlink" title="可选链 ?."></a>可选链 ?.</h5><p>Optional Chaining</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">friends</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lilei&#x27;</span>,</span><br><span class="line">    <span class="attr">girlFriend</span>:&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>hmm<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(info.friends.girlFriend.name); <span class="comment">//当friends字段不存在时，取值就会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(info.friends?.girlFriend.name); <span class="comment">//当friends为空时，后面代码不再执行，直接返回undefined</span></span><br></pre></td></tr></table></figure>

<h5 id="Global-This"><a href="#Global-This" class="headerlink" title="Global This"></a>Global This</h5><p>之前如果希望获取 JS 环境的全局对象，不同环境获取方式不一样</p>
<ul>
<li>浏览器需要通过 this、window 获取</li>
<li>node 里面需要通过 global 来获取</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(globalThis) <span class="comment">//不同环境指向的都是全局对象</span></span><br></pre></td></tr></table></figure>

<h5 id="for-in-标准化"><a href="#for-in-标准化" class="headerlink" title="for in 标准化"></a>for in 标准化</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="comment">//ES11以后，遍历对象，所有的浏览器的item都是对象的key</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="matchAll"><a href="#matchAll" class="headerlink" title="matchAll"></a>matchAll</h5><p><strong><code>matchAll()</code></strong> 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> regexp = <span class="regexp">/t(e)(st(\d?))/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;test1test2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [...str.matchAll(regexp)]</span><br><span class="line"><span class="built_in">console</span>.log(array[<span class="number">0</span>]) <span class="comment">// [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(array[<span class="number">1</span>]) <span class="comment">// [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;]</span></span><br></pre></td></tr></table></figure>

<h5 id="其它知识点-1"><a href="#其它知识点-1" class="headerlink" title="其它知识点"></a>其它知识点</h5><p>Dynamic Import:动态导入</p>
<p>Promise.allSettled:Promise 的一个方法</p>
<p>import meta：</p>
<h4 id="ES12"><a href="#ES12" class="headerlink" title="ES12"></a>ES12</h4><h5 id="FinalizationRegistry"><a href="#FinalizationRegistry" class="headerlink" title="FinalizationRegistry"></a>FinalizationRegistry</h5><p>用于检测某一个对象有没有被回收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> finalRegister = <span class="keyword">new</span> FinalizationRegistry(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//对象被销毁时会调用此回调函数，value为对象注册时绑定的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`注册在finalRegister的对象，<span class="subst">$&#123;value&#125;</span>被销毁了`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">let</span> info = &#123; <span class="attr">address</span>: <span class="string">&#x27;重庆市&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">finalRegister.register(obj, <span class="string">&#x27;obj&#x27;</span>) <span class="comment">//注册时可以绑定一个值，用于精确监听此对象被销毁的时候</span></span><br><span class="line">finalRegister.register(info, <span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = <span class="literal">null</span></span><br><span class="line">info = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h5 id="WeakRef"><a href="#WeakRef" class="headerlink" title="WeakRef"></a>WeakRef</h5><p>获取对一个对象的弱引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> finalRegister = <span class="keyword">new</span> FinalizationRegistry(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`注册在finalRegister的对象，<span class="subst">$&#123;value&#125;</span>被销毁了`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">let</span> info = <span class="keyword">new</span> WeakRef(obj) <span class="comment">//使info对obj的引用变为弱引用，使垃圾回收时忽略info对obj的引用</span></span><br><span class="line"></span><br><span class="line">finalRegister.register(obj, <span class="string">&#x27;obj&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(info.deref().name) <span class="comment">//弱引用拿原来的对象不能直接拿，需要通过deref来拿(原对象没有销毁才能拿到)</span></span><br><span class="line"><span class="built_in">console</span>.log(info.deref()?.name) <span class="comment">//使用可选链来拿,不会报错</span></span><br><span class="line"></span><br><span class="line">obj = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>逻辑赋值运算</p>
<p>logical assignment operators</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ||= 逻辑或赋值运算</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">message ||= <span class="string">&#x27;默认值&#x27;</span> <span class="comment">// 等价于 message = message || &quot;默认值&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(message)</span><br><span class="line"><span class="comment">// &amp;&amp;= 逻辑与赋值运算</span></span><br><span class="line"><span class="comment">// &amp;&amp;</span></span><br><span class="line"><span class="keyword">let</span> info = &#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">info = info &amp;&amp; info.name <span class="comment">//判断info是否有值，有就取出name属性赋值给info</span></span><br><span class="line"><span class="built_in">console</span>.log(info)</span><br><span class="line">info &amp;&amp;= info.name <span class="comment">//等价于上面的写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ??= 逻辑空赋值运算</span></span><br><span class="line"><span class="keyword">let</span> message2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">message2 ??= <span class="string">&#x27;默认值&#x27;</span> <span class="comment">// 等价于 message2 = message2 ?? &quot;默认值&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(message2)</span><br></pre></td></tr></table></figure>

<h5 id="其它知识点-2"><a href="#其它知识点-2" class="headerlink" title="其它知识点"></a>其它知识点</h5><p>Numeric Separtor:数字非常大时，可以使用下划线分割 312_432_435_554</p>
<p>String.replaceAll:字符串替换</p>
<p><code>replaceAll()</code> 方法返回一个新字符串，新字符串中所有满足 <code>pattern</code> 的部分都会被<code>replacement</code> 替换。<code>pattern</code>可以是一个字符串或一个<code>RegExp</code>，<code>replacement</code>可以是一个字符串或一个在每次匹配被调用的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;aabbcc&#x27;</span>.replaceAll(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;.&#x27;</span>) <span class="comment">// &#x27;aa..cc&#x27;</span></span><br><span class="line"><span class="comment">//使用正则表达式搜索值时，它必须是全局的。</span></span><br><span class="line"><span class="string">&#x27;aabbcc&#x27;</span>.replaceAll(<span class="regexp">/b/g</span>, <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">;(<span class="string">&#x27;aa..cc&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Proxy-Reflect"><a href="#Proxy-Reflect" class="headerlink" title="Proxy-Reflect"></a>Proxy-Reflect</h3><p>希望监听对象的属性被设置或获取的过程，可以使用 Object.defineProperty</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> value = obj[key]</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    <span class="comment">//为obj对象所有的key设置监听</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>属性被访问`</span>)</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      value = val</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>属性被设置为`</span>, val)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.name)</span><br><span class="line">obj.name = <span class="string">&#x27;ysj2&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name)</span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<ul>
<li>Object.defindeProperty 设计的初衷(直接在一个对象上定义新的属性或修改现有属性，并返回该对象)，并不是为了监听一个对象中的所有属性</li>
<li>没法监听新增属性，删除属性</li>
<li>在遇到一个对象的属性还是一个对象的情况下，需要递归监听。对于数组通过 push、unshift 方法增加的元素，也无法监听</li>
<li>使用时会将原来对象的属性描述符改掉(数据改为访问属性描述符)</li>
</ul>
<p>ES6 新增一个类 Proxy，就是专门用来监听属性的各种各样的操作的：</p>
<ul>
<li>如果希望监听一个对象的相关操作，可以先创建一个代理对象(Proxy 对象)</li>
<li>之后对该对象的所有操作，都通过代理对象来完成</li>
<li>Proxy 对 Object.defineProperty 做了增强，最主要是对原来的对象创建代理，后续对对象的所有操作全部放到代理对象上</li>
</ul>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="comment">//参数一：要进行代理的对象；参数二：捕获器</span></span><br><span class="line">  <span class="comment">//获取值时的捕获器(Trap)</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, key, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//target:代理时所代理的对象 key:被代理对象的属性 receiver:调用的Proxy代理对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;target&#125;</span>的<span class="subst">$&#123;key&#125;</span>属性被访问了`</span>)</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//设置值时的捕获器</span></span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, key, newValue, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// newValue:设置的新的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;target&#125;</span>对象的<span class="subst">$&#123;key&#125;</span>属性的值被设置为<span class="subst">$&#123;newValue&#125;</span>`</span>)</span><br><span class="line">    target[key] = newValue</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(objProxy.name)</span><br><span class="line">objProxy.name = <span class="string">&#x27;ysj2&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(objProxy.name)</span><br><span class="line"><span class="built_in">console</span>.log(objProxy.age)</span><br></pre></td></tr></table></figure>

<h4 id="Proxy-其它捕获器"><a href="#Proxy-其它捕获器" class="headerlink" title="Proxy 其它捕获器"></a>Proxy 其它捕获器</h4><ol>
<li>handler.getProtitypeOf()<ul>
<li>Object.getPrototypeof 方法的捕捉器(获取对象原型的捕捉器)</li>
</ul>
</li>
<li>handler.setPrototypeOf()<ul>
<li>Object.setPrototypeOf 方法的捕捉器(设置对象原型)</li>
</ul>
</li>
<li>handler.isExtensible()<ul>
<li>Object.isExtensible 方法的捕捉器(判断某一个对象能不能进行扩展)</li>
</ul>
</li>
<li>handler.preventExtensions()<ul>
<li>Object.preventExtensions 方法的捕捉器(阻止某一个对象进行扩展)</li>
</ul>
</li>
<li>handler.getOwnPropertyDescriptor()<ul>
<li>Object.getOwnPropertyDescriptor 方法的捕捉器(获取某一个对象的属性描述符)</li>
</ul>
</li>
<li>handler.defineProperty()<ul>
<li>Object.defineProperty 方法的捕捉器(给一个对象定义属性描述符)</li>
</ul>
</li>
<li>handler.ownKeys()<ul>
<li>Object.getOwnPropertyNames 方法和 Object.getOwnPropertySymbols 方法的捕捉器</li>
</ul>
</li>
<li><strong>handler.has()</strong><ul>
<li>in 操作符捕捉器</li>
</ul>
</li>
<li><strong>handler.get()</strong><ul>
<li>属性读取操作的捕捉器</li>
</ul>
</li>
<li><strong>handler.set()</strong><ul>
<li>属性设置操作捕捉器</li>
</ul>
</li>
<li><strong>handler.deleteProperty()</strong><ul>
<li>delete 操作符的捕捉器</li>
</ul>
</li>
<li>handler.apply()<ul>
<li>函数调用操作的捕捉器(用于函数对象通过 apply 方式调用时监听)</li>
</ul>
</li>
<li>handler.construct()<ul>
<li>new 操作符的捕捉器(用于函数对象)</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="comment">//监听in的捕获器</span></span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`监听到<span class="subst">$&#123;target&#125;</span>对象的in操作`</span>)</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//监听delete的捕获器</span></span><br><span class="line">  <span class="function"><span class="title">deleteProperty</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`监听到<span class="subst">$&#123;target&#125;</span>对象的<span class="subst">$&#123;key&#125;</span>属性被删除了`</span>)</span><br><span class="line">    <span class="keyword">delete</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//in 操作符</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> objProxy) <span class="comment">//name属性是否在objProxy对象里面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//delete操作</span></span><br><span class="line"><span class="keyword">delete</span> objProxy.name</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fooProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(foo, &#123;</span><br><span class="line">  <span class="function"><span class="title">apply</span>(<span class="params">target, thisArg, argArray</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//target:函数对象 thisArg:函数通过apply绑定的this  argArray:函数的额外参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;对foo函数进行了apply调用&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> target.apply(thisArg, argArray)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">construct</span>(<span class="params">target, argArray, newTarget</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//newTarget:与target一样，是同一个，一般不用</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;函数foo被通过new进行了调用&#x27;</span>, newTarget)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> target(...argArray)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fooProxy.apply(&#123;&#125;, [<span class="string">&#x27;das&#x27;</span>, <span class="string">&#x27;das&#x27;</span>])</span><br><span class="line"><span class="keyword">new</span> fooProxy(<span class="string">&#x27;dsad&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Reflect-的作用"><a href="#Reflect-的作用" class="headerlink" title="Reflect 的作用"></a>Reflect 的作用</h4><p>ES6 新增的 API，是一个对象，主要提供了很多操作 JS 对象的方法，类似 Object 中操作对象的方法</p>
<p>Object 可以做这些操作，还新增 Reflect 对象的原因：</p>
<ul>
<li>早期的 ECMA 规范中没有考虑到对对象本身的操作如何设计会更加规范，所以将这些 API 放到了 Object 上面</li>
<li>但是 Object 作为一个构造函数，这些操作实际上放他身上并不合适</li>
<li>所以 ES6 中新增了 Reflect，让这些操作都集中到了 Reflect 身上</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUmVmbGVjdC9Db21wYXJpbmdfUmVmbGVjdF9hbmRfT2JqZWN0X21ldGhvZHM=">比较 Reflect 和 Object 方法 MDN<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUmVmbGVjdA==">Reflect<i class="fa fa-external-link-alt"></i></span>并非一个构造函数，所以不能通过<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL25ldw==">new 运算符<i class="fa fa-external-link-alt"></i></span>对其进行调用，或者将<code>Reflect</code>对象作为一个函数来调用。<code>Reflect</code>的所有属性和方法都是静态的</p>
<p>Reflect 常见方法</p>
<p>Reflect 常见方法和 Proxy 是一一对应的，也是 13 个：</p>
<ol>
<li>Reflect.getPrototypeOf(target)<ul>
<li>类似于 Object.getPrototypeOf()</li>
</ul>
</li>
<li>Reflect.setPrototypeOf(target, prototype)<ul>
<li>设置对象原型的函数,返回一个 Boolean,如果更新成功,则返回 true</li>
</ul>
</li>
<li>Reflect.isExtensible(target)<ul>
<li>类似于 Object.isExtensible()</li>
</ul>
</li>
<li>Reflect.preventExtensions(target)<ul>
<li>类似于 Object.preventExtensions()。返回一个 Boolean</li>
</ul>
</li>
<li>Reflect.getOwnPropertyDescriptor(target, propertyKey)<ul>
<li>类似于 Object.getOwnPropertyDescriptor()。如果对象中存在该属性,则返回对应的属性描述符,否则返回 undefined</li>
</ul>
</li>
<li>Reflect.defineProperty(target, propertyKey, attributes)<ul>
<li>和 Object.defineProperty() 类似。如果设置成功就会返回 true</li>
</ul>
</li>
<li><code>Reflect.ownKeys(target)</code><ul>
<li>返回一个包含所有自身属性（不包含继承属性）的数组(类似于 Object.keys(), 但不会受 enumerable 影响)</li>
</ul>
</li>
<li><code>Reflect.has(target, propertyKey)</code><ul>
<li>判断一个对象是否存在某个属性，和 in 运算符 的功能完全相同</li>
</ul>
</li>
<li><code>Reflect.get(target, propertyKey[, receiver])</code><ul>
<li>获取对象身上某个属性的值，类似于 target[name]</li>
</ul>
</li>
<li><code>Reflect.set(target, propertyKey, value[, receiver])</code><ul>
<li>将值分配给属性的函数。返回一个 Boolean，如果更新成功，则返回 true</li>
</ul>
</li>
<li><code>Reflect.deleteProperty(target, propertyKey)</code><ul>
<li>作为函数的 delete 操作符，相当于执行 delete target[name]</li>
</ul>
</li>
<li>Reflect.apply(target, thisArgument, argumentsList)<ul>
<li>对一个函数进行调用操作，同时可以传入一个数组作为调用参数。和 Function.prototype.apply() 功能类似</li>
</ul>
</li>
<li>Reflect.construct(target, argumentsList[, newTarget])<ul>
<li>对构造函数进行 new 操作，相当于执行 new target(…args)</li>
</ul>
</li>
</ol>
<p>Reflect 和 Proxy 结合使用：</p>
<p>使用 Reflect 能保证操作的都是代理，不会直接对原始对象进行操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">17</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, key, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//target为原来的对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取值&#x27;</span>)</span><br><span class="line">    <span class="comment">// return target[key]; 这样是操作的原来的对象 target === obj =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver) <span class="comment">//通过Reflect操作对象,避免直接操作对象</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, key, newValue, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;设置值&#x27;</span>)</span><br><span class="line">    <span class="built_in">Reflect</span>.set(target, key, newValue, receiver) <span class="comment">//设置值成功之后就会返回true，原先直接操作对象是没法知道设置值是否成功的</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">objProxy.name = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(objProxy.name)</span><br></pre></td></tr></table></figure>

<p>Receiver 的作用（只有 getter 和 setter 里面有）</p>
<p>使 this 正确的指向创建出来的代理对象，而不是原目标对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="string">&#x27;ysj&#x27;</span>, <span class="comment">//对象中私有属性以下划线开头</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._name</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title">name</span>(<span class="params">newName</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = newName</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, key, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;获取值&#x27;</span>)</span><br><span class="line">    <span class="comment">//receiver是创建出来的代理对象:objProxy</span></span><br><span class="line">    <span class="comment">//传入receiver可以改变obj对象getter里面的this，this._name， 使this指向代理对象</span></span><br><span class="line">    <span class="comment">//改变this指向的作用：便于对get、set做拦截</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver)</span><br><span class="line">    <span class="comment">//如果没有receiver，objProxy.name会进入getter方法，后面访问this._name的时候,this指向obj，此时访问属性时就绕过了代理对象objProxy</span></span><br><span class="line">    <span class="comment">// 访问_name时就无法监听，对_name的访问过程，没有被拦截</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, key, newValue, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;设置值&#x27;</span>)</span><br><span class="line">    <span class="built_in">Reflect</span>.set(target, key, newValue, receiver) <span class="comment">//此时obj对象setter里的this也指向receiver</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">objProxy.name = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(objProxy.name)</span><br></pre></td></tr></table></figure>

<p>Reflect 中 contruct 的作用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要求：执行Student函数的内容，但是创建出来的对象是一个Teacher对象</span></span><br><span class="line"><span class="keyword">const</span> teacher = <span class="built_in">Reflect</span>.construct(Student, [<span class="string">&#x27;ysj&#x27;</span>, <span class="number">18</span>], Teacher)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(teacher.__proto__ === Teacher.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h4><h5 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h5><p>管理响应式数据的依赖</p>
<p><img src="E:\Web\studyNotes\js高级.assets\image-20220301140850398.png" alt="image-20220301140850398"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> activeReactiveFn = <span class="literal">null</span> <span class="comment">//全局变量，用于保存当前的响应函数，以便在其他地方中取到</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Depend</span> </span>&#123;</span><br><span class="line">  <span class="comment">//收集属性依赖的类</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.reactiveFns = <span class="keyword">new</span> <span class="built_in">Set</span>() <span class="comment">//用Set保存依赖，存放响应函数,防止响应函数重复</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">depend</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//添加依赖</span></span><br><span class="line">    <span class="keyword">if</span> (activeReactiveFn) &#123;</span><br><span class="line">      <span class="comment">//如果当前响应式函数不为空</span></span><br><span class="line">      <span class="built_in">this</span>.reactiveFns.add(activeReactiveFn) <span class="comment">//将当前的响应函数添加进依赖Set</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">notify</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//依赖属性发生改变时重新执行响应式函数</span></span><br><span class="line">    <span class="built_in">this</span>.reactiveFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个响应式的函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watchFn</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//传入需要响应式的函数</span></span><br><span class="line">  activeReactiveFn = fn <span class="comment">//记录当前的响应函数</span></span><br><span class="line">  fn() <span class="comment">//需要响应的函数里面会触发对象属性的getter方法，getter方法里面负责依赖收集</span></span><br><span class="line">  activeReactiveFn = <span class="literal">null</span> <span class="comment">//当前响应函数已经被添加进依赖，给activeReactiveFn置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>() <span class="comment">//使用WeakMap保存对象和对象依赖的映射</span></span><br><span class="line"><span class="comment">//封装一个获取depend实例的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDepend</span>(<span class="params">targetObj, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> map = targetMap.get(targetObj) <span class="comment">//根据对象这个key获取对应的value(一个map对象)</span></span><br><span class="line">  <span class="keyword">if</span> (!map) &#123;</span><br><span class="line">    <span class="comment">//如果map没有值</span></span><br><span class="line">    map = <span class="keyword">new</span> <span class="built_in">Map</span>() <span class="comment">//新建一个map</span></span><br><span class="line">    targetMap.set(targetObj, map)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//根据对象的属性key获取对应的depend对象</span></span><br><span class="line">  <span class="keyword">let</span> depend = map.get(key)</span><br><span class="line">  <span class="keyword">if</span> (!depend) &#123;</span><br><span class="line">    <span class="comment">//如果depend不存在</span></span><br><span class="line">    depend = <span class="keyword">new</span> Depend() <span class="comment">//给对象的属性创建对应的depend实例</span></span><br><span class="line">    map.set(key, depend)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> depend</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//将对象变为响应式对象，并返回</span></span><br><span class="line">  <span class="comment">//监听对象的属性变化:Proxy Object.defineProperty</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="comment">//创建obj对象的代理对象并返回响应式代理对象</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, key, receiver</span>)</span> &#123;</span><br><span class="line">      <span class="comment">//根据target、key获取对应的depend实例</span></span><br><span class="line">      <span class="keyword">const</span> depend = getDepend(target, key)</span><br><span class="line">      <span class="comment">//给depend对象中添加响应函数</span></span><br><span class="line">      depend.depend() <span class="comment">//将当前响应函数添加进对象属性对应的依赖数组</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver) <span class="comment">//通过Reflect操作对象,避免直接操作对象</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, key, newValue, receiver</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">Reflect</span>.set(target, key, newValue, receiver)</span><br><span class="line">      <span class="keyword">const</span> depend = getDepend(target, key) <span class="comment">//获取某个对象的属性对应的depend实例</span></span><br><span class="line">      depend.notify() <span class="comment">//自动监听，值变化后执行对应的响应式函数</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">const</span> objProxy = reactive(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watchFn(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(objProxy.name, <span class="string">&#x27;name需要响应式的函数1&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(objProxy.name, <span class="string">&#x27;name需要响应式的函数1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">watchFn(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(objProxy.age, <span class="string">&#x27;age需要响应式的函数1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;改变name后执行的响应式函数-----&#x27;</span>)</span><br><span class="line">objProxy.name = <span class="string">&#x27;ddd&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;改变age后执行的响应式函数-----&#x27;</span>)</span><br><span class="line">objProxy.age = <span class="number">22</span></span><br></pre></td></tr></table></figure>

<h5 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//将对象变为响应式对象，并返回</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = obj[key]</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> depend = getDepend(obj, key)</span><br><span class="line">        depend.depend()</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">        value = newValue</span><br><span class="line">        <span class="keyword">const</span> depend = getDepend(obj, key)</span><br><span class="line">        depend.notify()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其它与vue3一样</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>ES6 新增 API，在通过 new 创建 Promise 对象时，我们需要传入一个回调函数，称之为 executor：</p>
<ul>
<li>这个回调函数会被立即执行，并且传入给另外两个回调函数 resolve、reject;</li>
<li>调用 resolve 回调函数时，会执行 Promise 对象的 then 方法传入的回调函数</li>
<li>调用 reject 回调函数时，会执行 Promise 对象的 catch 方法传入的回调函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成功时调resolve函数，失败时调reject函数</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功时传递的参数&#x27;</span>)</span><br><span class="line">  <span class="comment">//reject(&quot;失败时传递的参数&quot;);</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//then方法传入的函数，会在Promise执行resolve函数时被回调</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//catch方法传入的函数，会在Promise执行reject函数时被回调</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种写法</span></span><br><span class="line">promise.then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//Promise执行resolve时被回调</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求成功&#x27;</span>, res)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//Promise执行rejct时被回调</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="resolve-详解"><a href="#resolve-详解" class="headerlink" title="resolve 详解"></a>resolve 详解</h4><p>promise 的三种状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注：Promise状态一旦确定下来，那么就是不可更改的(锁定)</span></span><br><span class="line"><span class="comment">//即调了resolve，后面再调reject也是不会执行的</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//此阶段为pending状态（待定/悬而未决）</span></span><br><span class="line">  <span class="comment">//初始状态，既没有被兑现，也没有被拒绝</span></span><br><span class="line">&#125;).then(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//执行了resolve时，处于该状态</span></span><br><span class="line">    <span class="comment">//此阶段为fulfilled、resolved状态(固定、已敲定)，意味操作成功完成</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//执行了reject时处于该状态</span></span><br><span class="line">    <span class="comment">//此阶段为rejected状态(已拒绝)，意味操作失败</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>promise 的 resolve 参数</p>
<p>resolve 参数：</p>
<ul>
<li>可以传入普通的值或对象</li>
<li>可以传入一个 Promise<ul>
<li>传入的是一个 Promsie 时，当前的 Promise 状态会由传入的 Promise 来决定。相当于状态进行了移交</li>
</ul>
</li>
<li>传入一个对象，并且这个对象有实现 then 方法(thenable)<ul>
<li>那么也会执行该 then 方法，并且由该 then 方法决定后续状态</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传入Promise</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res) <span class="comment">//aaa</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入一个对象，这个对象有then方法</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(&#123;</span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">resolve, reject</span>)</span> &#123;</span><br><span class="line">      resolve(<span class="string">&#x27;then方法&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res) <span class="comment">///then方法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="实例方法-then"><a href="#实例方法-then" class="headerlink" title="实例方法-then"></a>实例方法-then</h4><p>then 方法是 Promise 对象上的一个方法，放在 Promsie 原型上：Promise.prototype.then</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(<span class="built_in">Promise</span>.prototype))</span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;hahaha&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.同一个Promise可以被多次调用then方法</span></span><br><span class="line"><span class="comment">//当我们的resolve方法被回调时，所有的then方法传入的回调函数都会被调用</span></span><br><span class="line">promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;res1:&#x27;</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;res2:&#x27;</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.then方法传入的回调函数可以有返回值</span></span><br><span class="line"><span class="comment">// then方法本身有返回值，返回值是一个Promise,</span></span><br><span class="line"><span class="comment">// 新Promise有then方法，所以还可以继续调用then(链式调用)，没有返回值时即默认返回undefined</span></span><br><span class="line"><span class="comment">//如果返回的是一个普通值，那么这个普通值会被作为一个新的Promise的resolve值</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1111</span></span><br><span class="line">    <span class="comment">//等价于 =&gt; return new Promise(resolve =&gt; resolve(1111))</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// 1111</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果返回的是一个Promise</span></span><br><span class="line"><span class="comment">// 此时情况等同于传入一个Promise，当前的Promise状态会由传入的Promise来决定</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">1111</span>) <span class="comment">//传入的Promise调用了resolve</span></span><br><span class="line">      &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.如果返回的是一个对象，并且该对象实现了thenable</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="function"><span class="title">then</span>(<span class="params">resolve, reject</span>)</span> &#123;</span><br><span class="line">        resolve(<span class="number">2222</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">// 2222</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="实例方法-catch"><a href="#实例方法-catch" class="headerlink" title="实例方法-catch"></a>实例方法-catch</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// reject(&quot;rejected &quot;);</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;rejected &#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="literal">null</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//调用reject或者抛出异常都会来到此函数</span></span><br><span class="line">  <span class="built_in">console</span>.log(err) <span class="comment">//rejected</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//其它写法</span></span><br><span class="line">promise.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err) <span class="comment">// rejected</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//此处的reject优先捕获promise变量的异常，没有异常再捕获then返回的新的Promise的异常</span></span><br><span class="line">    <span class="built_in">console</span>.log(err) <span class="comment">//rejected</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>catch 返回值也会被包裹一个 Promise 返回，只要返回值不调用 reject 或抛出异常，就会继续调用 then 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1111</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) <span class="comment">//1111</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="实例方法-finally"><a href="#实例方法-finally" class="headerlink" title="实例方法-finally"></a>实例方法-finally</h4><p>ES9(2018)新增特性，表示 Promise 对象无论变成 fulfilled 还是 rejected 状态，最终都会被执行的代码</p>
<p>finally 方法不接收参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;resolve&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">  .finally(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;finally code&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="类方法-resolve"><a href="#类方法-resolve" class="headerlink" title="类方法-resolve"></a>类方法-resolve</h4><p>有时候有一个现成的内容，希望将其转成 Promise 来用，可以使用 Promise.resolve 方法来完成</p>
<p>Promise.resolve 用法相当于 new Promise,并且执行 resolve 操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(&#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span> &#125;)) <span class="comment">//两者等价</span></span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res) <span class="comment">//&#123;name: &#x27;ysj&#x27;&#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//传入普通值</span></span><br><span class="line"><span class="comment">//传入Promise</span></span><br><span class="line"><span class="comment">//传入thenable</span></span><br><span class="line"><span class="comment">//此三种情况与之前类似</span></span><br></pre></td></tr></table></figure>

<h4 id="类方法-reject"><a href="#类方法-reject" class="headerlink" title="类方法-reject"></a>类方法-reject</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.reject(&#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(&#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span> &#125;)) <span class="comment">//两者等价</span></span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err) <span class="comment">//&#123;name: &#x27;ysj&#x27;&#125;</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">//reject无论传入什么值都是一样的，都会来到catch</span></span><br></pre></td></tr></table></figure>

<h4 id="类方法-all"><a href="#类方法-all" class="headerlink" title="类方法-all"></a>类方法-all</h4><p>作用：将多个 Promise 包裹在一起形成一个新的 Promise</p>
<p>新的 Promise 状态由包裹的所有 Promise 共同决定：</p>
<ul>
<li>当<strong>所有的 Promise</strong>状态<strong>变为 fulfilled</strong>状态时，<strong>新的 Promise</strong>状态<strong>为 fulfilled</strong>，并且会将<strong>所有 Promise 返回值组成一个数组</strong></li>
<li>一旦<strong>有一个 Promise</strong>状态<strong>为 rejected</strong>时，<strong>新的 Promise 状态为 rejected</strong>，并且会将<strong>第一个 reject 的返回值作为参数</strong></li>
</ul>
<p>缺陷：</p>
<ul>
<li>当有其中一个 Promise 变成 reject 状态时，新 Promise 就会立即变成对应的 reject 状态</li>
<li>对于 resolved 的，以及依然处于 pending 状态的 Promise，我们是获取不到对应的结果的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建多个Promise</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1111</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">222</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1111</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//希望所有的Promise都变成fulfilled时，再拿到结果</span></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3, <span class="string">&#x27;aaaa&#x27;</span>]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//如果数组传入的不是一个Promise，会被转成一个Promise</span></span><br><span class="line">  <span class="built_in">console</span>.log(res) <span class="comment">//  [ 1111, 222, 1111, &#x27;aaaa&#x27; ],会将几个resolve的结果按照传入的顺序放进一个数组里面</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//意外：在拿到所有结果之前，有一个Promise变成了rejected，那么整个Promise是rejected</span></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3, <span class="string">&#x27;aaaa&#x27;</span>])</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// p2的返回结果改为reject</span></span><br><span class="line">    <span class="built_in">console</span>.log(err) <span class="comment">//222</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="类方法-allSettled"><a href="#类方法-allSettled" class="headerlink" title="类方法-allSettled"></a>类方法-allSettled</h4><p>ES11(2020)新增 API Promise.allSettled：</p>
<ul>
<li>该方法会在所有的 Promise 都有结果（settled），无论是 fulfilled，还是 reject 时，才会有最终的状态</li>
<li>并且这个 Promise 的结果一定是 fulfilled 的(不会来到 catch 里面)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.allSettled([p1, p2, p3]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res) <span class="comment">//返回一个数组，数组里面包含每一个Promise的状态和结果</span></span><br><span class="line">  <span class="comment">// [</span></span><br><span class="line">  <span class="comment">//   &#123; status: &#x27;fulfilled&#x27;, value: 1111 &#125;,</span></span><br><span class="line">  <span class="comment">//   &#123; status: &#x27;rejected&#x27;, reason: 222 &#125;,</span></span><br><span class="line">  <span class="comment">//   &#123; status: &#x27;fulfilled&#x27;, value: 1111 &#125;</span></span><br><span class="line">  <span class="comment">// ]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="类方法-race"><a href="#类方法-race" class="headerlink" title="类方法-race"></a>类方法-race</h4><p>如果有一个 Promise 有了结果，我们就希望决定最终新 Promise 的状态，那么可以使用 race 方法：</p>
<ul>
<li>race 是竞技、竞赛的意思，表示多个 Promise 相互竞争，谁先有结果，那么就使用谁的结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="number">1111</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2, p3])</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;res&#x27;</span>, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, err) <span class="comment">// err 1111</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="类方法-any"><a href="#类方法-any" class="headerlink" title="类方法-any"></a>类方法-any</h4><p>ES12 新增，与和 race 方法类似：</p>
<ul>
<li>any 方法会至少等到一个 fulfilled 状态，才会决定新 Promise 的状态</li>
<li>如果所有的 Promise 都是 reject 的，那么也会等到所有的 Promise 都变成 rejected 状态</li>
<li>并且会报一个 AggregateError 的错误</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="number">222</span>)</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.any([p1, p2, p3])</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;res&#x27;</span>, res) <span class="comment">//  res 1111</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, err.errors)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="手写-Promise"><a href="#手写-Promise" class="headerlink" title="手写 Promise"></a>手写 Promise</h4><p>构造函数规划</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HYPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义状态</span></span><br><span class="line">    <span class="comment">// 定义resolve、reject回调</span></span><br><span class="line">    <span class="comment">// resolve执行微任务队列：改变状态、获取value、then传入执行成功回调</span></span><br><span class="line">    <span class="comment">// reject执行微任务队列：改变状态、获取reason、then传入执行失败回调</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// try catch</span></span><br><span class="line">    executor(resolve, reject)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="then-方法实现"><a href="#then-方法实现" class="headerlink" title="then 方法实现"></a>then 方法实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HYPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// this.onFulfilled = onFulfilled</span></span><br><span class="line">    <span class="comment">// this.onRejected = onRejected</span></span><br><span class="line">    <span class="comment">// 1.判断onFulfilled、onRejected，会给默认值</span></span><br><span class="line">    <span class="comment">// 2.返回Promise resolve/reject</span></span><br><span class="line">    <span class="comment">// 3.判断之前的promise状态是否确定</span></span><br><span class="line">    <span class="comment">// onFulfilled/onRejected直接执行（捕获异常）</span></span><br><span class="line">    <span class="comment">// 4.添加到数组中push(() =&gt; &#123; 执行 onFulfilled/onRejected 直接执行代码&#125;)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装工具函数，抽取相似的try catch代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execFunctionWithCatchError</span>(<span class="params">execFn, value, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = execFn(value) <span class="comment">//直接调用函数,并拿到函数执行的返回值</span></span><br><span class="line">    resolve(result) <span class="comment">//链式调用时使其能获取到上一次的返回值</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err) <span class="comment">//链式调用时使其能获取到上一次的返回值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SJPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//接收创建实例时传进来的函数</span></span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&#x27;pending&#x27;</span> <span class="comment">//记录当前Promise的状态(pending、fulfilled、rejected)</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span> <span class="comment">//保存调用resolve时传进来的参数,链式调用的时候作为then里面的回调函数的参数</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span> <span class="comment">//保存调用reject时传进来的参数,链式调用的时候作为catch里面的回调函数的参数</span></span><br><span class="line">    <span class="built_in">this</span>.onFulfilledFns = [] <span class="comment">//保存通过实例对象多次调用then或者链式调用时传进来的成功回调函数</span></span><br><span class="line">    <span class="built_in">this</span>.onRejectedFns = [] <span class="comment">//保存通过实例对象多次调用then或者链式调用时传进来的失败回调函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//成功回调函数</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//如果状态为pending时</span></span><br><span class="line">        <span class="comment">//new Promise时，传入的回调函数会被立即执行，resolve就会被调用(reject同理)</span></span><br><span class="line">        <span class="comment">//就会执行resolve函数,但此时then方法还未执行,保存成功后回调函数的this.onFulfilled还未被赋值，此时值还为undefined</span></span><br><span class="line">        <span class="comment">//所以要让resolve函数的代码在then方法执行完以后，this.onFulfilled被赋值以后再执行</span></span><br><span class="line">        <span class="comment">//所以需要将resolve代码放进微任务里面，保证以上执行顺序</span></span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//添加微任务</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span> <span class="comment">//如果promise的状态现在不等于pending，后面的代码不再执行</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;fulfilled&#x27;</span> <span class="comment">//调用resolve之后将状态改为fulfilled</span></span><br><span class="line">          <span class="built_in">this</span>.value = value <span class="comment">//保存调用resolve时传进来的参数</span></span><br><span class="line">          <span class="comment">//resolve被调用之后要执行then传进来的第一个回调函数</span></span><br><span class="line">          <span class="built_in">this</span>.onFulfilledFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(value) <span class="comment">//遍历保存的所有成功的回调函数并执行</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//失败回调函数</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//如果状态为pending时</span></span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//添加微任务</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span> <span class="comment">//如果promise的状态现在不等于pending，后面的代码不再执行</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;rejected&#x27;</span> <span class="comment">//调用reject之后将状态改为rejected</span></span><br><span class="line">          <span class="built_in">this</span>.reason = reason <span class="comment">//存调用reject时传进来的参数</span></span><br><span class="line">          <span class="comment">//reject被调用之后要执行then传进来的第二个回调函数</span></span><br><span class="line">          <span class="built_in">this</span>.onRejectedFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(reason)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject) <span class="comment">//函数传进来后会被直接调用,此函数接收成功和失败两个参数</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//then方法, 参数一：调用resolve后的回调函数;参数二：调用reject后的回调函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//返回一个promise，使其支持链式调用</span></span><br><span class="line">      <span class="comment">//如果在promise.then调用时状态已经确定下来，直接执行即可</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;fulfilled&#x27;</span> &amp;&amp; onFulfilled) &#123;</span><br><span class="line">        <span class="comment">//如果传入进来时已经时fulfilled状态</span></span><br><span class="line">        execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;rejected&#x27;</span> &amp;&amp; onRejected) &#123;</span><br><span class="line">        <span class="comment">//如果传入进来时已经时rejected状态</span></span><br><span class="line">        execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果在promise.then调用时状态还是pending，将每次promise.then传进来得函数放进数组，以便后续执行</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//如果是pending状态</span></span><br><span class="line">        <span class="built_in">this</span>.onFulfilledFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//将本次执行的结果通过resolve或reject传给下一次链式的then</span></span><br><span class="line">          execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.onRejectedFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//此函数传进去后会被直接调用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;pending状态&#x27;</span>)</span><br><span class="line">  reject(<span class="number">222</span>)</span><br><span class="line">  resolve(<span class="number">111</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;res1:&#x27;</span>, res)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;err1:&#x27;</span>, err)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;bbb&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .then(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;res2:&#x27;</span>, res)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;err2:&#x27;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//确定promise状态后再次调用then，传进的回调函数直接执行即可</span></span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="catch-方法实现"><a href="#catch-方法实现" class="headerlink" title="catch 方法实现"></a>catch 方法实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HYPromise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execFunctionWithCatchError</span>(<span class="params">execFn, value, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = execFn(value)</span><br><span class="line">    resolve(result)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SJPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.onFulfilledFns = []</span><br><span class="line">    <span class="built_in">this</span>.onRejectedFns = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">          <span class="built_in">this</span>.value = value</span><br><span class="line">          <span class="built_in">this</span>.onFulfilledFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(value)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">          <span class="built_in">this</span>.reason = reason</span><br><span class="line">          <span class="built_in">this</span>.onRejectedFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(reason)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//当调用了reject，但是then的onRejected回调为空时，没有处理异常，给其默认值，直接将异常抛出</span></span><br><span class="line">    <span class="comment">//让这个then返回的promise直接进入到失败回调函数里面</span></span><br><span class="line">    <span class="comment">// onRejected = onRejected || (err =&gt; &#123; throw new Error(err) &#125;)</span></span><br><span class="line">    onRejected ||= <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;fulfilled&#x27;</span> &amp;&amp; onFulfilled) &#123;</span><br><span class="line">        execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;rejected&#x27;</span> &amp;&amp; onRejected) &#123;</span><br><span class="line">        execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (onFulfilled)</span><br><span class="line">          <span class="built_in">this</span>.onFulfilledFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">          &#125;)</span><br><span class="line">        <span class="keyword">if</span> (onRejected)</span><br><span class="line">          <span class="built_in">this</span>.onRejectedFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="comment">//catch方法</span></span><br><span class="line">    <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="number">222</span>)</span><br><span class="line">  <span class="comment">// resolve(111);</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//then为第一个promise，此时第一个then的失败处理回调为undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;res1:&#x27;</span>, res)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//catch为第二个promise</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err1:&#x27;</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h5 id="finally-方法实现"><a href="#finally-方法实现" class="headerlink" title="finally 方法实现"></a>finally 方法实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HYPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">finally</span>(<span class="params">onFinally</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        onFinally()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        onFinally()</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execFunctionWithCatchError</span>(<span class="params">execFn, value, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = execFn(value)</span><br><span class="line">    resolve(result)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SJPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.onFulfilledFns = []</span><br><span class="line">    <span class="built_in">this</span>.onRejectedFns = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">          <span class="built_in">this</span>.value = value</span><br><span class="line">          <span class="built_in">this</span>.onFulfilledFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(value)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">          <span class="built_in">this</span>.reason = reason</span><br><span class="line">          <span class="built_in">this</span>.onRejectedFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(reason)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    onRejected ||= <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当调用了then再调用catch再调用finally时，then返回一个值，但是catch中onFulfilled为undefined，</span></span><br><span class="line">    <span class="comment">//因为catch返回的promise中onFulfilled为空，就会导致无法返回一个新的promise，则无法链式调用finally</span></span><br><span class="line">    <span class="comment">//所以需要给其一个默认值，使得返回一个promise，用这个promise调用finally</span></span><br><span class="line">    onFulfilled ||= <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onFulfilledFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.onRejectedFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected) <span class="comment">//将调用then方法生成的promise返回出去</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">finally</span>(<span class="params">onFinally</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// this.then(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   onFinally()</span></span><br><span class="line">    <span class="comment">// &#125;, () =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   onFinally()</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="built_in">this</span>.then(onFinally, onFinally)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="number">222</span>)</span><br><span class="line">  <span class="comment">// resolve(111);</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//promise1:</span></span><br><span class="line"><span class="comment">//success1 err =&gt; &#123; throw err &#125;</span></span><br><span class="line"><span class="comment">//promise2:</span></span><br><span class="line"><span class="comment">//undefined err =&gt; &#123;console.log(err)&#125;</span></span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;res1:&#x27;</span>, res)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, err)</span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;finally&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h5 id="resolve-和-reject-类方法"><a href="#resolve-和-reject-类方法" class="headerlink" title="resolve 和 reject 类方法"></a>resolve 和 reject 类方法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execFunctionWithCatchError</span>(<span class="params">execFn, value, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = execFn(value)</span><br><span class="line">    resolve(result)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SJPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.onFulfilledFns = []</span><br><span class="line">    <span class="built_in">this</span>.onRejectedFns = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">          <span class="built_in">this</span>.value = value</span><br><span class="line">          <span class="built_in">this</span>.onFulfilledFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(value)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">          <span class="built_in">this</span>.reason = reason</span><br><span class="line">          <span class="built_in">this</span>.onRejectedFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(reason)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    onRejected ||= <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    onFulfilled ||= <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onFulfilledFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.onRejectedFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">finally</span>(<span class="params">onFinally</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.then(onFinally, onFinally)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//static作为前缀的方法称之为类方法，也称为静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">reason</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//reject类方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(reason))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SJPromise.resolve(<span class="string">&#x27;aaa&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;res1:&#x27;</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line">SJPromise.reject(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;res2:&#x27;</span>, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err:&#x27;</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h5 id="all-和-allSettled-方法"><a href="#all-和-allSettled-方法" class="headerlink" title="all 和 allSettled 方法"></a>all 和 allSettled 方法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execFunctionWithCatchError</span>(<span class="params">execFn, value, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = execFn(value)</span><br><span class="line">    resolve(result)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SJPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.onFulfilledFns = []</span><br><span class="line">    <span class="built_in">this</span>.onRejectedFns = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">          <span class="built_in">this</span>.value = value</span><br><span class="line">          <span class="built_in">this</span>.onFulfilledFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(value)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">          <span class="built_in">this</span>.reason = reason</span><br><span class="line">          <span class="built_in">this</span>.onRejectedFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(reason)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    onRejected ||= <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    onFulfilled ||= <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onFulfilledFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.onRejectedFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">finally</span>(<span class="params">onFinally</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.then(onFinally, onFinally)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">reason</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(reason))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">all</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> values = [] <span class="comment">//用于收集promise数组成功后的结果</span></span><br><span class="line">      promises.forEach(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//遍历传入的promise数组</span></span><br><span class="line">        promise.then(</span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            values.push(res) <span class="comment">//收集结果</span></span><br><span class="line">            <span class="keyword">if</span> (values.length === promises.length) &#123;</span><br><span class="line">              <span class="comment">//如果收集结果的数组和传进来的promise数组长度相等，说明所有的promise都执行成功了</span></span><br><span class="line">              resolve(values)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(err) <span class="comment">//只要有错误，立马调用reject</span></span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">allSettled</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//搜集所有的结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> results = [] <span class="comment">//搜集所有的结果</span></span><br><span class="line">      promises.forEach(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.then(</span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            results.push(&#123; <span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>, <span class="attr">value</span>: res &#125;)</span><br><span class="line">            <span class="keyword">if</span> (results.length === promises.length) &#123;</span><br><span class="line">              <span class="comment">//如果遍历完成</span></span><br><span class="line">              resolve(results)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            results.push(&#123; <span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>, <span class="attr">value</span>: err &#125;)</span><br><span class="line">            <span class="keyword">if</span> (results.length === promises.length) &#123;</span><br><span class="line">              <span class="comment">//如果遍历完成</span></span><br><span class="line">              resolve(results)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">111</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="number">222</span>)</span><br><span class="line">    resolve(<span class="number">222</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">333</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SJPromise.all([p1, p2, p3]).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(res);</span></span><br><span class="line"><span class="comment">// &#125;).catch(err =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(err);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">SJPromise.allSettled([p1, p2, p3]).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="race-和-any-方法"><a href="#race-和-any-方法" class="headerlink" title="race 和 any 方法"></a>race 和 any 方法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execFunctionWithCatchError</span>(<span class="params">execFn, value, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = execFn(value)</span><br><span class="line">    resolve(result)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SJPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.status = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line">    <span class="built_in">this</span>.onFulfilledFns = []</span><br><span class="line">    <span class="built_in">this</span>.onRejectedFns = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">          <span class="built_in">this</span>.value = value</span><br><span class="line">          <span class="built_in">this</span>.onFulfilledFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(value)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">this</span>.status !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">          <span class="built_in">this</span>.status = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">          <span class="built_in">this</span>.reason = reason</span><br><span class="line">          <span class="built_in">this</span>.onRejectedFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">            fn(reason)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    onRejected ||= <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    onFulfilled ||= <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onFulfilledFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          execFunctionWithCatchError(onFulfilled, <span class="built_in">this</span>.value, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.onRejectedFns.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          execFunctionWithCatchError(onRejected, <span class="built_in">this</span>.reason, resolve, reject)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">finally</span>(<span class="params">onFinally</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.then(onFinally, onFinally)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">reject</span>(<span class="params">reason</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(reason))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">all</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> values = []</span><br><span class="line">      promises.forEach(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.then(</span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            values.push(res)</span><br><span class="line">            <span class="keyword">if</span> (values.length === promises.length) &#123;</span><br><span class="line">              resolve(values)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">allSettled</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> results = []</span><br><span class="line">      promises.forEach(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.then(</span><br><span class="line">          <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            results.push(&#123; <span class="attr">status</span>: <span class="string">&#x27;fulfilled&#x27;</span>, <span class="attr">value</span>: res &#125;)</span><br><span class="line">            <span class="keyword">if</span> (results.length === promises.length) &#123;</span><br><span class="line">              resolve(results)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            results.push(&#123; <span class="attr">status</span>: <span class="string">&#x27;rejected&#x27;</span>, <span class="attr">value</span>: err &#125;)</span><br><span class="line">            <span class="keyword">if</span> (results.length === promises.length) &#123;</span><br><span class="line">              resolve(results)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">race</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//谁先有结果就用谁</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promises.forEach(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// promise.then(res =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//   resolve(res)</span></span><br><span class="line">        <span class="comment">// &#125;, err =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//   reject(err)</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        promise.then(resolve, reject) <span class="comment">//简写</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//至少等到有一个resolve，才会决定新Promise状态</span></span><br><span class="line">  <span class="comment">//全为rejected状态时，结果的promise也是rejected状态</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">any</span>(<span class="params">promises</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//一旦有一个成功的结果就执行resolve</span></span><br><span class="line">    <span class="comment">//所有的都失败了就执行reject</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> reasons = [] <span class="comment">//搜集错误信息的数组</span></span><br><span class="line">      promises.forEach(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">        promise.then(resolve, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          reasons.push(err) <span class="comment">//将错误信息保存</span></span><br><span class="line">          <span class="keyword">if</span> (reasons.length === promises.length) &#123;</span><br><span class="line">            reject(<span class="keyword">new</span> AggregateError(reasons))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(111)</span></span><br><span class="line">    reject(<span class="number">111</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="number">222</span>)</span><br><span class="line">    <span class="comment">// resolve(222)</span></span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> SJPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(333)</span></span><br><span class="line">    reject(<span class="number">333</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SJPromise.race([p1, p2, p3]).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(res);</span></span><br><span class="line"><span class="comment">// &#125;).catch(err =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(err);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line">SJPromise.any([p1, p2, p3])</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.errors) <span class="comment">//拿到所有错误信息</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h3><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><h5 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h5><p>迭代器(Iterator),是确使用户可在容器对象（container，如链表或数组）上遍访的对象，使用该接口无需关心对象的内部实现细节</p>
<p>即：==迭代器是帮助我们对某个数据结构进行遍历的对象==</p>
<p>在 js 中，迭代器也是一个具体的对象，这个对象需要符合迭代器协议(iterator protocol):</p>
<ul>
<li>迭代器协议定义了产生一系列值(无论是有限还是无限个)的标准方式</li>
<li>在 js 中这个标准就是一个特定的 next 方法</li>
</ul>
<p>next 方法有如下要求：</p>
<ul>
<li>一个无参或者一个参数的函数，返回一个应当拥有以下两个属性的对象</li>
<li>done(boolean)<ul>
<li>如果迭代器可以产生序列中的下一个值，则为 false。(等价于没有指定 done 这个属性)</li>
<li>如果迭代器已将序列迭代完毕，则为 true。此时，value 可选，如果依然存在，即为迭代结束之后的默认返回值</li>
</ul>
</li>
<li>value<ul>
<li>迭代器返回的任何 js 值，done 为 true 时可省略</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个迭代器对象来访问数组</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> namesIterator = &#123;</span><br><span class="line">  <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; names.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: names[index++] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125; <span class="comment">//当没有值可以访问时</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(namesIterator.next())</span><br><span class="line"><span class="built_in">console</span>.log(namesIterator.next())</span><br><span class="line"><span class="built_in">console</span>.log(namesIterator.next())</span><br><span class="line"><span class="built_in">console</span>.log(namesIterator.next()) <span class="comment">//&#123; done: true, value: undefined &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArrayIterator</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//生成数组迭代器的函数</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; arr.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: arr[index++] &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h5><p>当一个对象实现了可迭代(iterable protocol)协议时，它就是一个可迭代对象</p>
<p>这个对象必须实现@@iterator 方法，在代码中我们使用 Symbol.iterator 访问该属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iterableObj = &#123;</span><br><span class="line">  <span class="comment">//可迭代对象</span></span><br><span class="line">  <span class="attr">names</span>: [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>],</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//@@iterator方法</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="built_in">this</span>.names.length) <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="built_in">this</span>.names[index++] &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator = iterableObj[<span class="built_in">Symbol</span>.iterator]() <span class="comment">//每次调用函数都是生成一个新的迭代器</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next())</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next())</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next())</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next())</span><br><span class="line"></span><br><span class="line"><span class="comment">//for……of可以遍历的东西必须是一个可迭代对象</span></span><br><span class="line"><span class="comment">//普通对象不是一个可迭代对象，所以不能用for……of遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> el <span class="keyword">of</span> iterableObj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="原生迭代器对象"><a href="#原生迭代器对象" class="headerlink" title="原生迭代器对象"></a>原生迭代器对象</h5><p>很多原生对象已经实现了可迭代协议，会生成一个迭代器对象：</p>
<ul>
<li>String、Array、Map、Set、arguments 对象、NodeList 集合</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> iterator = names[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">//&#123;value: &quot;aaa&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">//&#123;value: &quot;bbb&quot;, done: false&#125;</span></span><br></pre></td></tr></table></figure>

<p>可迭代对象可以应用的场景：</p>
<ul>
<li>for…of、展开语法、yield*、解构赋值</li>
<li>new Map()、new WeakMap()、new Set()、new WeakSet()</li>
<li>Promise.all()、Promise.race()、Array.from()</li>
</ul>
<p>注:对象不是可迭代对象，但也可用展开运算符和解构语法</p>
<h5 id="自定义类的迭代"><a href="#自定义类的迭代" class="headerlink" title="自定义类的迭代"></a>自定义类的迭代</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建教室类，使这个类创建出来的对象都是可迭代对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classroom</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">address, name, student</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.address = address</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.student = student</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">entry</span>(<span class="params">newStu</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.student.push(newStu)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="built_in">this</span>.student.length) <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="built_in">this</span>.student[i++] &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">return</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//监听迭代器提前终止</span></span><br><span class="line">        <span class="comment">//可以监听break、continue、return、throw</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;迭代器提前停止&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> classroom = <span class="keyword">new</span> Classroom(<span class="string">&#x27;重庆市&#x27;</span>, <span class="string">&#x27;计算机一班&#x27;</span>, [<span class="string">&#x27;james&#x27;</span>, <span class="string">&#x27;kobe&#x27;</span>, <span class="string">&#x27;curry&#x27;</span>, <span class="string">&#x27;why&#x27;</span>])</span><br><span class="line">classroom.entry(<span class="string">&#x27;ysj&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> el <span class="keyword">of</span> classroom) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>==生成器是==ES6 中新增的==一种函数控制、使用的方案==，可以让我们更加灵活的控制函数什么时候继续执行、暂停执行</p>
<h5 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h5><p>生成器函数也是一个函数，但是和普通的函数有一些区别：</p>
<ul>
<li>生成器函数需要在 function 后面加一个符号：*</li>
<li>生成器函数可以通过 yield 关键字来控制函数的执行过程</li>
<li>生成器函数的返回值是一个 Generator(生成器)<ul>
<li>生成器是一种特殊的迭代器</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;生成器函数开始执行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第一段代码&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第二段代码&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第三段代码&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;函数执行结束&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = foo()</span><br><span class="line"><span class="comment">//执行第一段代码</span></span><br><span class="line">generator.next() <span class="comment">//生成器函数开始执行 第一段代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行第二段代码</span></span><br><span class="line">generator.next() <span class="comment">//第二段代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行第三段代码</span></span><br><span class="line">generator.next() <span class="comment">//第三段代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行第三段代码后面的代码(最后一个yield后面的所有代码)</span></span><br><span class="line">generator.next() <span class="comment">//函数执行结束</span></span><br></pre></td></tr></table></figure>

<h5 id="生成器函数执行流程"><a href="#生成器函数执行流程" class="headerlink" title="生成器函数执行流程"></a>生成器函数执行流程</h5><ul>
<li><p>当函数遇到 yield 的时候，暂停执行</p>
</li>
<li><p>当函数遇到 return 的时候，停止执行</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第一段代码&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;返回1&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第二段代码&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;返回2&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第三段代码&#x27;</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;返回3&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;函数执行结束&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = foo()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generator.next())</span><br><span class="line"><span class="comment">// 第一段代码</span></span><br><span class="line"><span class="comment">// &#123; value: &#x27;返回1&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generator.next())</span><br><span class="line"><span class="comment">// 第二段代码</span></span><br><span class="line"><span class="comment">// &#123; value: &#x27;返回2&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generator.next())</span><br><span class="line"><span class="comment">// 第三段代码</span></span><br><span class="line"><span class="comment">// &#123; value: &#x27;返回3&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generator.next())</span><br><span class="line"><span class="comment">// 函数执行结束</span></span><br><span class="line"><span class="comment">// &#123; value: 123, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="生成器其它方法使用"><a href="#生成器其它方法使用" class="headerlink" title="生成器其它方法使用"></a>生成器其它方法使用</h5><p>next 传递参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(z) <span class="comment">// 5</span></span><br><span class="line">  <span class="keyword">const</span> n = <span class="keyword">yield</span> <span class="string">&#x27;第一段代码返回值&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(n) <span class="comment">// 10，这一段yield代码接收的参数</span></span><br><span class="line">  <span class="keyword">const</span> m = <span class="keyword">yield</span> <span class="string">&#x27;第二段代码返回值&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(m) <span class="comment">//20</span></span><br><span class="line">  <span class="keyword">const</span> x = <span class="keyword">yield</span> <span class="string">&#x27;第三段代码返回值&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(x) <span class="comment">//30</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;函数执行结束&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = foo(<span class="number">5</span>) <span class="comment">//第一个yield接收的参数在此处传入</span></span><br><span class="line"><span class="comment">// 截止到每一个yield就是一段代码</span></span><br><span class="line"><span class="comment">// 上一个yield表达式的返回值即为下一段yield代码接受的参数</span></span><br><span class="line"><span class="built_in">console</span>.log(generator.next())</span><br><span class="line"><span class="built_in">console</span>.log(generator.next(<span class="number">10</span>)) <span class="comment">//第二次调用next传入的参数，可以通过第一个yield的返回值拿到</span></span><br><span class="line"><span class="built_in">console</span>.log(generator.next(<span class="number">20</span>)) <span class="comment">//第三次调用next传入的参数，可以通过第二个yield的返回值拿到</span></span><br><span class="line"><span class="built_in">console</span>.log(generator.next(<span class="number">30</span>)) <span class="comment">//第四次调用next传入的参数，可以通过第三个yield的返回值拿到</span></span><br></pre></td></tr></table></figure>

<p>生成器的 return</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(z) <span class="comment">// 5</span></span><br><span class="line">  <span class="keyword">const</span> n = <span class="keyword">yield</span> <span class="string">&#x27;第一段代码返回值&#x27;</span></span><br><span class="line">  <span class="comment">//等价  =&gt; return n</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;第二段代码返回值&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;函数执行结束&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = foo(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generator.next())</span><br><span class="line"><span class="built_in">console</span>.log(generator.return(<span class="number">10</span>)) <span class="comment">//调用return时，第二段代码不会执行，但是会有返回值</span></span><br><span class="line"><span class="comment">// 等价于在第一个yield后面写了一个return,终止生成器函数代码执行，后续再调next，返回值都是undefined</span></span><br></pre></td></tr></table></figure>

<p>生成器的 throw 抛出异常</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第一段代码&#x27;</span>)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//捕获异常</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">100</span> <span class="comment">//会在此处发生异常</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err) <span class="comment">//抛出一个异常</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第二段代码&#x27;</span>) <span class="comment">//如未捕获异常，代码会终止执行，此行及之后的代码不会执行</span></span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;函数执行结束&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = foo()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generator.next()) <span class="comment">//&#123; value: 100, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generator.throw(<span class="string">&#x27;抛出一个异常&#x27;</span>)) <span class="comment">//调用throw，会在上一个yield处发生异常(第四行)</span></span><br></pre></td></tr></table></figure>

<h5 id="生成器替代迭代器"><a href="#生成器替代迭代器" class="headerlink" title="生成器替代迭代器"></a>生成器替代迭代器</h5><p>开发中，优先使用生成器，代码会更简洁</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成器替代迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">createIterator</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// for (const el of arr) &#123;</span></span><br><span class="line">  <span class="comment">//   yield el;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//简便写法 yield* 自动迭代</span></span><br><span class="line">  <span class="keyword">yield</span>* arr <span class="comment">//yield* 后面跟上可迭代对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> namesGenerator = createIterator(names)</span><br><span class="line"><span class="built_in">console</span>.log(namesGenerator.next()) <span class="comment">//&#123; value: &#x27;aaa&#x27;, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(namesGenerator.next()) <span class="comment">//&#123; value: &#x27;bbb&#x27;, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(namesGenerator.next()) <span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个函数，函数可以迭代一定范围内的数字</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">createRangeIterator</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = start</span><br><span class="line">  <span class="keyword">while</span> (i &lt; end) <span class="keyword">yield</span> i++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rangeIterator = createRangeIterator(<span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line"><span class="built_in">console</span>.log(rangeIterator.next()) <span class="comment">//&#123; value: 10, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(rangeIterator.next()) <span class="comment">//&#123; value: 11, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(rangeIterator.next()) <span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classroom</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">address, name, student</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.address = address</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.student = student</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">yield</span>* <span class="built_in">this</span>.student</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> classroom = <span class="keyword">new</span> Classroom(<span class="string">&#x27;重庆市&#x27;</span>, <span class="string">&#x27;计算机一班&#x27;</span>, [<span class="string">&#x27;james&#x27;</span>, <span class="string">&#x27;kobe&#x27;</span>, <span class="string">&#x27;curry&#x27;</span>, <span class="string">&#x27;why&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> el <span class="keyword">of</span> classroom) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="多个异步顺序调用"><a href="#多个异步顺序调用" class="headerlink" title="多个异步顺序调用"></a>多个异步顺序调用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 异步请求的代码会被放入到executor中</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">// 模拟网络请求</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 拿到请求的结果</span></span><br><span class="line">      resolve(url)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise + generator实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">yield</span> requestData(<span class="string">&quot;ysj&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">yield</span> requestData(res1 + <span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">yield</span> requestData(res2 + <span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> res4 = <span class="keyword">yield</span> requestData(res3 + <span class="string">&quot;ccc&quot;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res4)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1&gt; 手动执行生成器函数</span></span><br><span class="line"><span class="keyword">const</span> generator = getData()</span><br><span class="line">generator.next().value.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  generator.next(res).value.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    generator.next(res).value.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      generator.next(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2&gt; 自己封装了一个自动执行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execGenerator</span>(<span class="params">genFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> generator = genFn()</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params">res</span>) </span>&#123; <span class="comment">//递归执行生成器的next</span></span><br><span class="line">    <span class="keyword">const</span> result = generator.next(res)</span><br><span class="line">    <span class="keyword">if</span> (result.done) &#123; <span class="comment">//如果生成器已经执行完了</span></span><br><span class="line">      <span class="keyword">return</span> result.value</span><br><span class="line">    &#125;</span><br><span class="line">    result.value.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">//生成器没有执行完，递归调用</span></span><br><span class="line">      exec(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  exec()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execGenerator(getData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 async/await</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> requestData(<span class="string">&quot;ysj&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> requestData(res1 + <span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">await</span> requestData(res2 + <span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> res4 = a requestData(res3 + <span class="string">&quot;ccc&quot;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="aync-await"><a href="#aync-await" class="headerlink" title="aync/await"></a>aync/await</h3><h4 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h4><p>async function，async 关键字用于声明一个异步函数</p>
<p>异步函数写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo2 = <span class="keyword">async</span> () =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异步函数的内部代码执行过程和普通的函数是一致的，默认情况下也是会被同步执行</p>
<p>异步函数有返回值时，和普通函数会有区别：</p>
<ul>
<li>异步函数返回值会被包裹到 Promise.resolve()中</li>
<li>如果异步函数的返回值是 Promise，Promise.resolve 的状态会由 Promise 决定</li>
<li>如果异步函数的返回值是一个对象，并且实现了 thenable，那么会由对象的 then 方法来决定</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// return &quot;aaa&quot;; //返回一个普通值，会被包裹到Promise.resolve中</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// return &#123; //返回一个thenable</span></span><br><span class="line">  <span class="comment">//   then(resolve, reject) &#123;</span></span><br><span class="line">  <span class="comment">//     resolve(&quot;hahahha&quot;);</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//返回yPromise</span></span><br><span class="line">    resolve(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = foo()</span><br><span class="line">promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果在 async 中抛出了异常，程序并不会像普通函数一样报错，而是会作为 Promsie 的 reject 来传递</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo().catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err) <span class="comment">//Error: 出错了</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="await-关键字"><a href="#await-关键字" class="headerlink" title="await 关键字"></a>await 关键字</h4><p>async 函数内部可以使用 await 关键字：</p>
<ul>
<li>使用 await 关键字时，后面会跟上一个表达式，这个表达式会返回一个 Promsie</li>
<li>await 会等到 Promise 的状态变成 fulfilled 状态，之后继续执行异步函数</li>
<li>若 Promise 没有结果，await 后面的代码都不会执行</li>
</ul>
<p>如果 await 后面跟一个普通的值，会直接返回这个值</p>
<p>如果 await 后面是一个 thenable 对象，那么会根据对象的 then 方法调用来决定后续的值</p>
<p>如果 await 后面的表达式，返回的 Promise 是 reject 的状态，那么会将这个 reject 的结果直接作为整个 async 函数的 Promise 的 reject 值</p>
<h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><h4 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h4><p>进程和线程是操作系统中的两个概念：</p>
<ul>
<li>进程(process)：计算机已经运行的程序，是操作系统管理程序的一种方式</li>
<li>线程(thread)：操作系统能够运行运算调度的最小单位，通常情况下被包含在进程中</li>
</ul>
<p>可以认为，启动一个应用程序，就会默认启动一个进程(也可能是多个进程)；每一个进程中，都会启动至少一个线程用来执行程序中的代码，这个线程被称之为主线程，所以也可以说进程是线程的容器</p>
<p><strong>浏览器中的 JS 线程</strong></p>
<p>JS 是单线程，但是 JS 的线程应该有自己的容器进程：浏览器或 Node</p>
<p>JS 代码执行是在一个单独的线程中执行的。JS 代码同一时刻只能做一件事，如果这件事非常耗时，当前线程就会被阻塞</p>
<p>所以耗时的操作，实际上并不是由 js 线程在执行的，浏览器的每个进程是多线程的，可以由其他线程完成耗时操作</p>
<h4 id="浏览器的事件循环"><a href="#浏览器的事件循环" class="headerlink" title="浏览器的事件循环"></a>浏览器的事件循环</h4><p>js 是单线程，同一时刻只能处理一个任务。</p>
<p>阮一峰事件循环：<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE0LzEwL2V2ZW50LWxvb3AuaHRtbA==">https://www.ruanyifeng.com/blog/2014/10/event-loop.html<i class="fa fa-external-link-alt"></i></span></p>
<p>同步任务:在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务</p>
<p>异步任务：不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行</p>
<p><strong>事件循环：</strong>js 主线程遇到耗时操作时，会在浏览器其他线程中做耗时操作，耗时操作完成以后，会将耗时操作的回调函数加入浏览器维护的任务队列中。主线程的任务执行完毕以后，会去任务队列中读取对应的任务，将这些回调函数取出，推入到主线程中执行。整个过程不断重复就称之为事件循环</p>
<p><img src="E:\Web\studyNotes\js高级.assets\image-20211220220608871.png" alt="image-20211220220608871"></p>
<h4 id="微任务和宏任务"><a href="#微任务和宏任务" class="headerlink" title="微任务和宏任务"></a>微任务和宏任务</h4><p>一个微任务就是一个简短的函数</p>
<p>事件循环中维护着两个队列：</p>
<ul>
<li>宏任务队列(macrotask queue)：ajax、setTimeout、setInterval、DOM 监听、UI Rendering 等</li>
<li>微任务队列(microtask queue)：Promise 的 then 回调、Mutation Observer API、queueMicrotask()等都是微任务</li>
</ul>
<p>事件循环对于两个队列执行的优先级：</p>
<ul>
<li>main script 中的代码优先执行(编写的顶层的 script 代码)</li>
<li>在执行任何一个宏任务之前，都会先查看微任务队列中是否有任务需要执行<ul>
<li>宏任务执行之前，必须保证微任务队列是空的</li>
<li>如果不为空，优先执行微任务队列中的任务(回调)</li>
</ul>
</li>
</ul>
<h4 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  a = <span class="keyword">await</span> sum() <span class="comment">//await 封装了promise，微任务保存了变量20，不在同步任务赋值</span></span><br><span class="line">  <span class="comment">//sum执行了，返回的20被保存了，然后等于号赋值被推入微任务了</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;1 :&#x27;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b()</span><br><span class="line">a++</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;2 : &#x27;</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上等价于这个</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve(sum())</span><br><span class="line">    p.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;1 :&gt;&gt; &#x27;</span>, res)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async1()</span><br><span class="line">a++</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;2 :&#x27;</span>, a)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout1&#x27;</span>)</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;then4&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;then1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;queueMicrotask1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;then3&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;22222&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;111111&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> bar()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;33333&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;444444&#x27;</span>)</span><br><span class="line"><span class="comment">// 遇到foo执行(直接调异步函数，默认异步函数里面的代码不会异步执行，直接按照顺序执行。)</span></span><br><span class="line"><span class="comment">// 打印111</span></span><br><span class="line"><span class="comment">// 遇到await</span></span><br><span class="line"><span class="comment">// 执行bar函数</span></span><br><span class="line"><span class="comment">// 打印222</span></span><br><span class="line"><span class="comment">// 返回了一个Promise，调用的resolve回调，</span></span><br><span class="line"><span class="comment">// await后面的代码等同于在promise的then回调里面</span></span><br><span class="line"><span class="comment">// await后面的代码会被加入到微任务队列</span></span><br><span class="line"><span class="comment">// 此时继续执行main script，打印444</span></span><br><span class="line"><span class="comment">// 执行微任务队列，打印333</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>) <span class="comment">//所以await后面的代码相当于在promise的then回调里面，会被加入到微任务队列中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">  <span class="comment">//没有返回值，等同于 return Promise.resolve(undefined)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 1.直接return一个值 相当于resolve(4)</span></span><br><span class="line">    <span class="comment">// return 4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.return thenable的值</span></span><br><span class="line">    <span class="comment">//原生promise会将执行then本身向后推迟一个微任务，推到下一次的微任务</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">then</span>: <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 大量的计算</span></span><br><span class="line">        resolve(<span class="number">4</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.return Promise</span></span><br><span class="line">    <span class="comment">// 不是普通的值, 多加一次微任务</span></span><br><span class="line">    <span class="comment">// Promise.resolve(4), 再多加一次微任务</span></span><br><span class="line">    <span class="comment">// 一共多加两次微任务</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="number">4</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="Node-事件循环"><a href="#Node-事件循环" class="headerlink" title="Node 事件循环"></a>Node 事件循环</h4><p>事件循环像一个桥梁，是连接着应用程序的 js 和系统调用之间的通道</p>
<ul>
<li>无论是文件 IO、数据库、网络 IO、定时器、子进程，在完成对应的操作后，都会将对应的结果和回调函数放到事件循环(任务队列)中</li>
<li>事件循环会不断的从任务队列中取出对应的事件(回调函数)来执行</li>
</ul>
<p>一次完整的事件循环 Tick 分成很多个阶段：</p>
<ul>
<li>定时器（Timers）：本阶段执行已经被 setTimeout() 和 setInterval() 的调度回调函数</li>
<li>待定回调（Pending Callback）：对某些系统操作（如 TCP 错误类型）执行回调，比如 TCP 连接时接收到 ECONNREFUSED</li>
<li>idle, prepare：仅系统内部使用。</li>
<li>轮询（Poll）：检索新的 I/O 事件；执行与 I/O 相关的回调</li>
<li>检测（check）：setImmediate() 回调函数在这里执行</li>
<li>关闭的回调函数：一些关闭的回调函数，如：socket.on(‘close’, …)</li>
</ul>
<p><strong>Node 事件循环阶段：</strong></p>
<p><img src="E:\Web\studyNotes\js高级.assets\image-20211222214136541.png" alt="image-20211222214136541"></p>
<p><strong>Node 的微任务和宏任务：</strong></p>
<ul>
<li>宏任务（macrotask）：setTimeout、setInterval、IO 事件、setImmediate、close 事件</li>
<li>微任务（microtask）：Promise 的 then 回调、process.nextTick、queueMicrotask</li>
</ul>
<p>微任务队列：</p>
<ul>
<li>next tick queue：process.nextTick</li>
<li>other queue：Promise 的 then 回调、queueMicrotask</li>
</ul>
<p>宏任务队列：</p>
<ul>
<li>timer queue：setTimeout、setInterval</li>
<li>poll queue：IO 事件</li>
<li>check queue：setImmediate</li>
<li>close queue：close 事件</li>
</ul>
<p><strong>Node 事件循环的顺序：</strong></p>
<ol>
<li>next tick microtask queue</li>
<li>other microtask queue</li>
<li>timer queue</li>
<li>poll queue</li>
<li>check queue</li>
<li>close queue</li>
</ol>
<p><strong>Node 执行面试题：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout0&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout2&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>))</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick1&#x27;</span>))</span><br><span class="line"></span><br><span class="line">async1()</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  resolve()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise3&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="错误处理方案"><a href="#错误处理方案" class="headerlink" title="错误处理方案"></a>错误处理方案</h3><h4 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num1 !== <span class="string">&#x27;number&#x27;</span> || <span class="keyword">typeof</span> num2 !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;parameters is error type~&#x27;</span> <span class="comment">//抛出错误信息，终止后面代码的执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sum(&#123; <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span> &#125;, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">errorCode, errorMessage</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.errorCode = errorCode</span><br><span class="line">    <span class="built_in">this</span>.errorMessage = errorMessage</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//1.抛出一个字符串类型（基本数据类型都可以抛出）</span></span><br><span class="line">    <span class="comment">//2.抛出一个对象类型</span></span><br><span class="line">    <span class="comment">// throw &#123; errorCode: 1002, errorMessage: &quot;type不能为0&quot; &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.创建一个类，并且创建类对应的对象</span></span><br><span class="line">    <span class="comment">// throw new MyError(1001, &quot;type不能为0&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.抛出js提供的Error类</span></span><br><span class="line">    <span class="comment">// throw new Error(&quot;type不能为0&quot;);</span></span><br><span class="line">    <span class="comment">//此种方法抛出会有函数调用栈信息</span></span><br><span class="line">    <span class="comment">// const err = new Error(&quot;type不能为0&quot;);</span></span><br><span class="line">    <span class="comment">// console.log(err.message); //错误信息</span></span><br><span class="line">    <span class="comment">// console.log(err.stack); //调用栈</span></span><br><span class="line">    <span class="comment">// console.log(err.name);  //</span></span><br><span class="line">    <span class="comment">// throw err;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.Error的子类</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;遇到类型错误时抛出这种&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>Error 的三个属性：</p>
<ul>
<li>message：创建 Error 对象时传入的 message</li>
<li>name：Error 的名称，通常和类的名称一致</li>
<li>stack：整个 Error 的错误信息，包括函数的调用栈</li>
</ul>
<p>Error 的子类：</p>
<ul>
<li>RangeError：下标越界时使用的错误类型</li>
<li>SyntaxError：解析语法错误时使用的错误类型</li>
<li>TypeError：出现类型错误时，使用的错误类型</li>
</ul>
<p>如果函数中已经抛出了异常，那么后续的代码都不会继续执行了</p>
<h4 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  foo()</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error) <span class="comment">//打印异常信息</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;不论是否发生异常都会执行finally的代码&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="comment">//如果用不到 (error) ,可以省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="commonJS"><a href="#commonJS" class="headerlink" title="commonJS"></a>commonJS</h4><p>commonJS 是一个规范，简称 CJS，Node 是 CommonJS 在服务器端一个具有代表性的实现</p>
<ul>
<li>在 Node 中每一个 js 文件都是一个单独的模块</li>
<li>这个模块中包括 CommonJS 规范的核心变量：exports、module.exports、require</li>
</ul>
<p>模块的核心和导入和导出，Node 对其进行了实现：</p>
<ul>
<li>exports 和 module.exports 可以负责对模块中的内容进行导出</li>
<li>require 函数可以导入其他模块(自定义模块、系统模块、第三方库的模块)中的内容</li>
</ul>
<h5 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//导出一个对象</span></span><br><span class="line">  name,</span><br><span class="line">  foo,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//module.exports.name = name;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, foo &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./main.js&#x27;</span>) <span class="comment">//导入时解构main.js导出的对象，导入和导出的是同一个地址</span></span><br><span class="line"><span class="built_in">console</span>.log(name, foo)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="comment">// module.exports = &#123;&#125;;</span></span><br><span class="line"><span class="comment">// exports = module.exports;</span></span><br><span class="line"><span class="comment">//最终导出的是module.exports = &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种导出写法</span></span><br><span class="line"><span class="built_in">exports</span>.name = name</span><br><span class="line"></span><br><span class="line"><span class="comment">//给exports重新赋值了一个对象，导致不再指向module.exports，exports对象的属性不会被导出</span></span><br><span class="line"><span class="built_in">exports</span> = &#123; name, age &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给module.exports重新赋值为一个空对象，不再指向之前的对象，所以之前对象的属性不会被导出</span></span><br><span class="line"><span class="built_in">exports</span>.name = name <span class="comment">//之前的对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="require"><a href="#require" class="headerlink" title="require"></a>require</h5><p>require 是一个函数，可以引入一个文件或模块中导出的对象</p>
<p>require 查找规则：<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0LXYxNC54L2RvY3MvYXBpL21vZHVsZXMuaHRtbA==">https://nodejs.org/dist/latest-v14.x/docs/api/modules.html<i class="fa fa-external-link-alt"></i></span></p>
<p>require 常见查找规则(导入格式如下：require(x) ):</p>
<ul>
<li><p>x 是一个核心模块，比如 path、http</p>
<ul>
<li>直接返回核心模块，并且停止查找</li>
</ul>
</li>
<li><p>X 是以 ./ 或 ../ 或 /（根目录）开头的</p>
<ol>
<li>将 X 当做一个文件在对应的目录下查找<ul>
<li>如果有后缀名，按照后缀名的格式查找对应的文件</li>
<li>如果没有后缀名，会按照如下顺序：<ul>
<li>直接查找文件 X</li>
<li>查找 X.js 文件</li>
<li>查找 X.json 文件</li>
<li>查找 X.node 文件</li>
</ul>
</li>
</ul>
</li>
<li>没有找到对应的文件，将 X 作为一个目录<ul>
<li>查找目录下面的 index 文件（查找 X/index.js 文件 &gt; 查找 X/index.json 文件 &gt; 查找 X/index.node 文件）</li>
</ul>
</li>
<li>如果没有找到，那么报错：not found</li>
</ol>
</li>
<li><p>直接是一个 X（不是路径），并且 X 不是一个核心模块</p>
<ul>
<li>会在每一层目录里面的 node_modules 里查找第三方模块(可打印 module.paths 查看路径)</li>
<li>如果找到根目录也没找到，报错 not found</li>
</ul>
</li>
</ul>
<h5 id="模块的加载过程"><a href="#模块的加载过程" class="headerlink" title="模块的加载过程"></a>模块的加载过程</h5><ul>
<li><input disabled="" type="checkbox"> 模块在被第一次引入时，模块中的 js 代码会被运行一次</li>
<li><input disabled="" type="checkbox"> 模块被多次引入时，会缓存，最终只加载（运行）一次<ul>
<li><input disabled="" type="checkbox"> 是因为每个模块对象 module 都有一个属性：loaded，为 false 表示还没有加载，为 true 表示已经加载；</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 如果有循环引入，node 采用深度优先算法加载</li>
</ul>
<h4 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h4><p>ES Module 模块采用 export 和 import 关键字来实现模块化</p>
<ul>
<li><input disabled="" type="checkbox"> export 负责将模块内的内容导出</li>
<li><input disabled="" type="checkbox"> import 负责从其他模块导入内容</li>
<li><input disabled="" type="checkbox"> ES Module 将自动采用严格模式(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RyaWN0X21vZGU=">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode<i class="fa fa-external-link-alt"></i></span>)</li>
</ul>
<h5 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h5><p><strong>导出</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导出方式1：声明前面加关键字export:export 声明语句</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出方式2：export导出和声明分开</span></span><br><span class="line"><span class="keyword">const</span> height = <span class="number">1.88</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="comment">//是一个大括号，不是一个对象,不能写键值对</span></span><br><span class="line">  height, <span class="comment">//此处放要导出的标识符的列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出方式3：导出时起别名</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  num <span class="keyword">as</span> num1, <span class="comment">//将num取别名为num1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>导入</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入方式1：普通导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, age &#125; <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span></span><br><span class="line"><span class="comment">//导入方式2：导入时取别名</span></span><br><span class="line"><span class="keyword">import</span> &#123; height <span class="keyword">as</span> myHeight &#125; <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导入方式3：将导入的所有内容放到一个标识符中</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> foo <span class="keyword">from</span> <span class="string">&#x27;./foo.js&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name, age, myHeight, foo.name)</span><br><span class="line"><span class="comment">//import导入方式会阻塞后面代码的执行,导入完成后才会执行import后面代码</span></span><br></pre></td></tr></table></figure>

<p><strong>结合使用</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统一出口</span></span><br><span class="line"><span class="comment">//导出方式1</span></span><br><span class="line"><span class="keyword">import</span> &#123; priceFormat, timeFormat &#125; <span class="keyword">from</span> <span class="string">&#x27;./format.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, sub &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; priceFormat, timeFormat, add, sub &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出方式2</span></span><br><span class="line"><span class="keyword">export</span> &#123; priceFormat, timeFormat &#125; <span class="keyword">from</span> <span class="string">&#x27;./format.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; add, sub &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导出方式3</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./format.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>默认导出</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;ysj&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">&quot;fsd fg&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">  foo <span class="keyword">as</span> <span class="keyword">default</span>, <span class="comment">//将foo作为默认导出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo; <span class="comment">//默认导出方式2</span></span><br><span class="line"><span class="comment">//注：默认导出只能有一个</span></span><br></pre></td></tr></table></figure>

<h5 id="import-函数"><a href="#import-函数" class="headerlink" title="import 函数"></a>import 函数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//import函数返回的结果是一个Promise</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./aaa.js&#x27;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//异步导出，不会阻塞后面代码的执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//ES11新增特性,import作为一个对象</span></span><br><span class="line"><span class="comment">//meta属性本身是一个对象： &#123;url: &quot;当前模块所在的路径&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">import</span>.meta)</span><br></pre></td></tr></table></figure>

<h5 id="ES-Module-解析流程"><a href="#ES-Module-解析流程" class="headerlink" title="ES Module 解析流程"></a>ES Module 解析流程</h5><p>ESModule 解析过程可以划分为三个阶段：</p>
<ol>
<li>构建(Construction),根据地址查找 js 文件，并且下载，将其解析成模块记录(Module Record)</li>
<li>实例化(Instantiation),对模块记录进行实例化，并且分配内存空间，解析模块的导入和导出语句，把模块指向对应的内存地址</li>
<li>运行(Evaluation),运行代码，计算值，并且将值填充到内存地址中</li>
</ol>
<p>Webpack 环境下，ESModule 和 commonJS 可以任意相互引用</p>
<h3 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h3><p>npm(node package manager):Node 包管理器</p>
<p>npm 属于 node 的一个管理工具，所以需要先安装<span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuLw==">node<i class="fa fa-external-link-alt"></i></span></p>
<p>node 管理的包的查看网址：<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tLw==">https://www.npmjs.com/<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="npm-配置文件"><a href="#npm-配置文件" class="headerlink" title="npm 配置文件"></a>npm 配置文件</h4><p>每个项目都有一个对应的配置文件 package.json，记录着项目的名称、版本号、项目描述、依赖库的信息和版本号</p>
<p>获取 pack 个.json:</p>
<ul>
<li>手动从零创建项目，npm init -y(创建时所有信息使用默认的)</li>
<li>通过脚手架创建项目，生成 package.json,里面由相关的配置</li>
</ul>
<p><strong>常见属性：</strong></p>
<ul>
<li><p>name 是项目的名称(必填属性)</p>
</li>
<li><p>version 是当前项目的版本号(必填属性)</p>
</li>
<li><p>description 是描述信息，很多时候是作为项目的基本描述</p>
</li>
<li><p>author 是作者相关信息（发布时用到）</p>
</li>
<li><p>license 是开源协议（发布时用到)</p>
</li>
<li><p>private 属性记录当前的项目是否是私有的</p>
<ul>
<li>当值为 true 时，npm 是不能发布它的，这是防止私有项目或模块发布出去的方式</li>
</ul>
</li>
<li><p>main 属性，设置程序的入口</p>
<ul>
<li>你发布一个模块的时候会用到</li>
</ul>
</li>
<li><p>scripts 属性用于配置一些脚本命令，以键值对的形式存在</p>
<ul>
<li>配置后我们可以通过 npm run 命令的 key 来执行这个命令</li>
<li>npm start 和 npm run start 是等价的</li>
<li>对于常用的 start、 test、stop、restart 可以省略掉 run 直接通过 npm start 等方式运行</li>
</ul>
</li>
<li><p>dependencies 属性指定无论开发环节还是生产环节都需要依赖的包</p>
<ul>
<li>通常是项目实际开发用到的一些库模块 vue、axios 等</li>
</ul>
</li>
<li><p>devDependencies</p>
<ul>
<li>一些包在生产环境是不需要的，比如 webpack、babel 等</li>
<li>可以通过 npm install webpack –save-dev，将它安装到 devDependencies 属性中</li>
</ul>
</li>
<li><p>peerDependencies 属性</p>
<ul>
<li>还有一种项目依赖关系是对等依赖，也就是你依赖的一个包，它必须是以另外一个宿主包为前提的</li>
<li>比如 element-plus 是依赖于 vue3 的，ant design 是依赖于 react、react-dom</li>
</ul>
</li>
</ul>
<h4 id="依赖的版本管理"><a href="#依赖的版本管理" class="headerlink" title="依赖的版本管理"></a><strong>依赖的版本管理</strong></h4><p>npm 的包通常需要遵从 semver 版本规范：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZW12ZXIub3JnL2xhbmcvemgtQ04v">semver<i class="fa fa-external-link-alt"></i></span>版本规范是 X.Y.Z<ul>
<li>X 主版本号（major）：当你做了不兼容的 API 修改（可能不兼容之前的版本）</li>
<li>Y 次版本号（minor）：当你做了向下兼容的功能性新增（新功能增加，但是兼容之前的版本）</li>
<li>Z 修订号（patch）：当你做了向下兼容的问题修正（没有新功能，修复了之前版本的 bug）</li>
</ul>
</li>
<li>npm semver：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9taXNjL3NlbXZlcg==">https://docs.npmjs.com/misc/semver<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>^和~的区别：</p>
<ul>
<li>^x.y.z：表示 x 是保持不变的，y 和 z 永远安装最新的版本</li>
<li>~x.y.z：表示 x 和 y 保持不变的，z 永远安装最新的版本</li>
</ul>
<p><strong>常见属性：</strong></p>
<ul>
<li>engines 属性用于指定 Node 和 NPM 的版本号<ul>
<li>在安装的过程中，会先检查对应的引擎版本，如果不符合就会报错</li>
<li>上也可以指定所在的操作系统 “os” : [ “darwin”, “linux” ]</li>
</ul>
</li>
<li>browserslist 属性用于配置打包后的 JavaScript 浏览器的兼容情况，参考<ul>
<li>否则我们需要手动的添加 polyfills 来让支持某些语法</li>
<li>它是为 webpack 等打包工具服务的一个属性</li>
</ul>
</li>
</ul>
<h4 id="npm-install-命令"><a href="#npm-install-命令" class="headerlink" title="npm install 命令"></a>npm install 命令</h4><p>安装 npm 包分两种情况：</p>
<ul>
<li><p>全局安装（global install）： npm install webpack -g</p>
<ul>
<li>直接将某个包安装到全局</li>
<li>比如 yarn 的全局安装：npm install yarn -g</li>
<li>通常使用 npm 全局安装的包都是一些工具包：yarn、webpack 等</li>
<li>并不是类似于 axios、express、koa 等库文件</li>
</ul>
</li>
<li><p>项目（局部）安装（local install）： npm install webpack</p>
<ul>
<li>局部安装分为开发时依赖和生产时依赖</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装开发和生产依赖</span></span><br><span class="line">npm install axios</span><br><span class="line">npm i axios</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开发时依赖</span></span><br><span class="line">npm install webpack --save-dev</span><br><span class="line">npm install webpack -D</span><br><span class="line">npm i webpack –D</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据package.json中的依赖包</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ul>
<p>项目安装会在当前目录下生产一个 node_modules 文件夹</p>
<h4 id="npm-install-原理"><a href="#npm-install-原理" class="headerlink" title="npm install 原理"></a>npm install 原理</h4><p><img src="E:\Web\studyNotes\js高级.assets\image-20211227214147478.png" alt="image-20211227214147478"></p>
<p>npm install 会检测有没有 package-lock.json 文件:</p>
<ul>
<li>没有 lock 文件<ul>
<li>分析依赖关系，这是因为我们可能包会依赖其他的包，并且多个包之间会产生相同依赖的情况</li>
<li>从 registry 仓库中下载压缩包（如果我们设置了镜像，那么会从镜像服务器下载压缩包）</li>
<li>获取到压缩包后会对压缩包进行缓存（从 npm5 开始有的）</li>
<li>将压缩包解压到项目的 node_modules 文件夹中</li>
</ul>
</li>
<li>有 lock 文件<ul>
<li>检测 lock 中包的版本是否和 package.json 中一致（会按照 semver 版本规范检测）<ul>
<li>不一致，那么会重新构建依赖关系，直接会走顶层的流程</li>
<li>一致的情况下，会去优先查找缓存<ul>
<li>没有找到，会从 registry 仓库下载，直接走顶层流程</li>
<li>查找到，会获取缓存中的压缩文件，并且将压缩文件解压到 node_modules 文件夹中</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h4><p>记录真实的版本号</p>
<ul>
<li>name：项目的名称</li>
<li>version：项目的版本</li>
<li>lockfileVersion：lock 文件的版本</li>
<li>requires：使用 requires 来跟踪模块的依赖关系</li>
<li>dependencies：项目的依赖<ul>
<li>如当前项目依赖 axios，但是 axios 依赖 follow-redireacts</li>
<li>axios 中的属性如下<ul>
<li>version 表示实际安装的 axios 的版本</li>
<li>resolved 用来记录下载的地址，registry 仓库中的位置</li>
<li>requires 记录当前模块的依赖</li>
<li>integrity 用来从缓存中获取索引，再通过索引去获取压缩包文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="npm-其它命令"><a href="#npm-其它命令" class="headerlink" title="npm 其它命令"></a>npm 其它命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载某个依赖包</span></span><br><span class="line">npm uninstall package</span><br><span class="line">npm uninstall package --save-dev</span><br><span class="line">npm uninstall package -D</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制重新build,安装过的依赖重新安装</span></span><br><span class="line">npm rebuild</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">清除缓存</span></span><br><span class="line">npm cache clean</span><br></pre></td></tr></table></figure>

<p>更多命令：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9jbGkvdjgvY29tbWFuZHMv">https://docs.npmjs.com/cli/v8/commands/<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="yarn-工具"><a href="#yarn-工具" class="headerlink" title="yarn 工具"></a>yarn 工具</h4><p>node 包管理工具 yarn，是由 Facebook、Google、Exponent 和 Tilde 联合推出的一个新的 JS 包管理工具</p>
<p>使用 yarn 初始化项目：yarn init</p>
<p>yarn 是为了弥补 npm 的一些缺陷而出现的</p>
<table>
<thead>
<tr>
<th>npm</th>
<th>yarn</th>
</tr>
</thead>
<tbody><tr>
<td>npm install</td>
<td>yarn install</td>
</tr>
<tr>
<td>npm install [package]</td>
<td>yarn add [package]</td>
</tr>
<tr>
<td>npm install –save [package]</td>
<td>yarn add [package]</td>
</tr>
<tr>
<td>npm install –save-dev [package]</td>
<td>yarn add [package] [–dev/-D]</td>
</tr>
<tr>
<td>npm rebuild</td>
<td>yarn install –force</td>
</tr>
<tr>
<td>npm uninstall [package]</td>
<td>yarn remove [package]</td>
</tr>
<tr>
<td>npm uninstall –save [package]</td>
<td>yarn remove [package]</td>
</tr>
<tr>
<td>npm uninstall –save-dev [package]</td>
<td>yarn remove [package]</td>
</tr>
<tr>
<td>npm uninstall –save-optional [package]</td>
<td>yarn remove [package]</td>
</tr>
<tr>
<td>npm cache clean</td>
<td>yarn cache clean</td>
</tr>
<tr>
<td>rm -rf node_modules &amp;&amp; npm install</td>
<td>yarn upgrade</td>
</tr>
</tbody></table>
<h4 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h4><p>查看 npm 镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<p>直接设置 npm 的镜像(不推荐)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>如果不希望修改 npm 镜像，可以使用 cnpm，并且将 cnpm 设置为淘宝的镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm config get registry # https://r.npm.taobao.org/</span><br></pre></td></tr></table></figure>

<h4 id="npx-工具"><a href="#npx-工具" class="headerlink" title="npx 工具"></a>npx 工具</h4><p>npx 是 npm5.2 之后自带的一个命令，常用它来调用项目中的某个模块的指令：</p>
<p>以 webpack 为例，全局安装的是 webpack5.1.3，项目安装的是 webpack3.6.0，如果在终端执行 webpack –version，示结果会是 webpack 5.1.3，事实上使用的是全局的，因为在当前目录下找不到 webpack 时，就会去全局找，并且执行命令；</p>
<p><strong>执行局部命令：</strong>(三种方法)</p>
<ol>
<li><p>在终端中使用如下命令（在项目根目录下）</p>
<ul>
<li>./node_modules/.bin/webpack –version</li>
</ul>
</li>
<li><p>修改 package.json 中的 scripts</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">	<span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;webpack --version&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// npm run webpack</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用 npx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx webpack --version</span><br><span class="line"><span class="meta">#</span><span class="bash">  npx会到当前目录的node_modules/.bin目录下查找对应的命令</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="npm-发布自己的包"><a href="#npm-发布自己的包" class="headerlink" title="npm 发布自己的包"></a>npm 发布自己的包</h4><ul>
<li>注册 npm 账号，<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tLyVFRiVCQyU4QyVFOSU4MCU4OSVFNiU4QiVBOXNpZ24=">https://www.npmjs.com/，选择sign<i class="fa fa-external-link-alt"></i></span> up</li>
<li>在命令行登录:npm login</li>
<li>修改 package.json</li>
<li>发布到 npm registry 上:npm publish</li>
<li>更新仓库：<ul>
<li>修改 package.json 里面的版本号(最好符合 semver 规范)</li>
<li>重新发布</li>
</ul>
</li>
<li>删除发布的包:npm unpublish</li>
<li>让发布的包过期:npm deprecate</li>
</ul>
<h3 id="JSON-和数据存储"><a href="#JSON-和数据存储" class="headerlink" title="JSON 和数据存储"></a>JSON 和数据存储</h3><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>JSON(JavaScript Object Notation，JavaScript 对象符号),一种数据格式，可以在服务器端和客户端进行传输</p>
<p>使用场景：</p>
<ul>
<li>网络数据的传输 JSON 数据</li>
<li>项目的某些配置文件</li>
<li>非关系型数据库(NoSQL)将 json 作为存储格式</li>
</ul>
<p>JSON 的顶层支持三种类型的值：</p>
<ul>
<li>简单值：数字、字符串(不支持单引号)、布尔类型、null 类型</li>
<li>对象值：由 key、value 组成，key 是字符串类型，必须添加双引号，值可以为简单值、对象值、数组值</li>
<li>数组值：数组的值可以是简单值、对象值、数组值</li>
</ul>
<h5 id="JSON-序列化和解析"><a href="#JSON-序列化和解析" class="headerlink" title="JSON 序列化和解析"></a><strong>JSON 序列化和解析</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonString = <span class="built_in">JSON</span>.stringify(obj) <span class="comment">//将对象转为json格式字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">JSON</span>.parse(jsonString) <span class="comment">//将JSON格式字符串转回对象</span></span><br></pre></td></tr></table></figure>

<p><strong>序列化方法 stringify 细节</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;ysj&quot;</span>m</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">	<span class="attr">friends</span>: &#123;</span><br><span class="line">		<span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">hobbies</span>: [<span class="string">&quot;唱&quot;</span>, <span class="string">&quot;跳&quot;</span>, <span class="string">&quot;rap&quot;</span>],</span><br><span class="line">  <span class="attr">toJSON</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;dddd&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JSON.stringify第二个参数replacer</span></span><br><span class="line"><span class="comment">//1.设定哪些需要转换,放入对应的key</span></span><br><span class="line"><span class="keyword">const</span> jsonString1 = <span class="built_in">JSON</span>.stringify(obj, [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;friends&quot;</span>]); <span class="comment">//转化的时候只保留name和friends属性，舍弃其他属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.传入回调函数</span></span><br><span class="line"><span class="keyword">const</span> jsonStringify = <span class="built_in">JSON</span>.stringify(obj, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//转化每个属性的时候，会回调这个函数</span></span><br><span class="line">  <span class="keyword">if</span>(key === <span class="string">&quot;age&quot;</span>) &#123; <span class="comment">//转化时将年龄加1</span></span><br><span class="line">     <span class="keyword">return</span> value + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value; <span class="comment">//其它属性不变</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON.stringify第三个参数 space(控制转化之后的缩进)</span></span><br><span class="line"><span class="keyword">const</span> jsonStringify4 = <span class="built_in">JSON</span>.stringify(obj, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//写数字时，转化每个键值对时都会换行并以2个空格进行缩进，写字符串时，以字符串进行缩进</span></span><br><span class="line"><span class="comment">//不再是一行字符串，增进可读性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果obj中有toJSON方法，就会以toJSON方法的返回值作为转化的结果</span></span><br><span class="line"><span class="built_in">console</span>.log(jsonStringify4); <span class="comment">// dddd</span></span><br></pre></td></tr></table></figure>

<p><strong>JSON 字符串解析 parse 细节</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> JSONString = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;ysj&quot;, &quot;age&quot;:18, &quot;hobbies&quot;:[&quot;唱&quot;, &quot;跳&quot;, &quot;rap&quot;]&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">//JSON.parse第二个参数</span></span><br><span class="line"><span class="keyword">const</span> info = <span class="built_in">JSON</span>.parse(JSONString, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123; <span class="comment">//解析时的拦截</span></span><br><span class="line">  <span class="keyword">if</span>(key === <span class="string">&quot;age&quot;</span>) <span class="keyword">return</span> value - <span class="number">1</span>；</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="利用-json-的序列化和解析做深拷贝"><a href="#利用-json-的序列化和解析做深拷贝" class="headerlink" title="利用 json 的序列化和解析做深拷贝"></a><strong>利用 json 的序列化和解析做深拷贝</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">friends</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">hobbies</span>: [<span class="string">&#x27;唱&#x27;</span>, <span class="string">&#x27;跳&#x27;</span>, <span class="string">&#x27;rap&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//展开运算符或Object.assign实现浅拷贝</span></span><br><span class="line"><span class="comment">//浅拷贝：第一层为引用类型时，赋值后依然使用的是原来的地址</span></span><br><span class="line"><span class="keyword">const</span> info1 = <span class="built_in">Object</span>.assign(obj)</span><br><span class="line"><span class="keyword">const</span> info2 = &#123; ...obj &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//stringify和parse实现深拷贝</span></span><br><span class="line"><span class="keyword">const</span> jsonString = <span class="built_in">JSON</span>.stringify(obj)</span><br><span class="line"><span class="keyword">const</span> info3 = <span class="built_in">JSON</span>.parse(jsonString)</span><br><span class="line"><span class="comment">//但是json里面有函数时，转化之后的结果不会包含函数，因为json数据格式不支持函数</span></span><br><span class="line"><span class="comment">//当Symbol作为键或者值的时候不会处理，也就无法拷贝</span></span><br><span class="line"><span class="comment">//无法拷贝循环引用(对象里面有个属性指向对象自己)</span></span><br></pre></td></tr></table></figure>

<h4 id="浏览器存储"><a href="#浏览器存储" class="headerlink" title="浏览器存储"></a>浏览器存储</h4><h5 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h5><p>WebStorage 提供了一种机制，可以让浏览器提供一种比 cookie 更直观的 key、value 存储方式：</p>
<ul>
<li>localStorage：本地存储，一种永久性的存储方法，在关闭网页重新打开后，存储的内容依然保留</li>
<li>sessionStorage：会话存储，提供的是本次会话存储，关闭调会话时，存储的内容会被清除</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">sessionStorage.setItem(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>) <span class="comment">//浏览器中一个标签可以看成一个会话</span></span><br></pre></td></tr></table></figure>

<p><strong>常见属性和方法</strong></p>
<p>Storage.length，只读属性：</p>
<ul>
<li>返回一个整数，表示存储在 Storage 对象中的数据项数量</li>
</ul>
<p>方法:</p>
<ul>
<li>Storage.key(),接受一个数值 n 作为参数，返回存储中的第 n 个 key 名称</li>
<li>Storage.getItem()，接受一个 key 作为参数，并且返回 key 对应的 value</li>
<li>Storage.setItem()，接受一个 key 和 value，并且会把 key 和 value 添加到存储中，如果 key 已存在，则更新其 value</li>
<li>Storage.removeItem()，接受一个 key 作为参数，并把该 key 从存储中删除</li>
<li>Storage.clear()，清空存储中的所有 key</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.length) <span class="comment">//打印localStorage的长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">localStorage</span>.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">localStorage</span>.key(i)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(key))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"><span class="built_in">localStorage</span>.key(<span class="number">0</span>) <span class="comment">//拿到第一个索引对应的key</span></span><br><span class="line"><span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="built_in">localStorage</span>.clear()</span><br><span class="line"><span class="comment">//sessionStorage也有以上方法和属性</span></span><br></pre></td></tr></table></figure>

<p>封装：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">isLocal = <span class="literal">true</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.storage = isLocal ? <span class="built_in">localStorage</span> : sessionStorage</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setItem</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value) <span class="built_in">this</span>.storage.setItem(key, <span class="built_in">JSON</span>.stringify(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getItem</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="built_in">this</span>.storage.getItem(key)</span><br><span class="line">    <span class="keyword">if</span> (value) value = <span class="built_in">JSON</span>.parse(value)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">removeItem</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.storage.removeItem(key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.storage.clear()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">key</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.storage.key(index)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">length</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.storage.length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localCache = <span class="keyword">new</span> Cache()</span><br><span class="line"><span class="keyword">const</span> sessionCache = <span class="keyword">new</span> Cache(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; localCache, sessionCache &#125;</span><br></pre></td></tr></table></figure>

<h5 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h5><p>一种数据库(Database)，通常在服务器端比较常见。如果有大量数据需要存储，可以选择 IndexedDB</p>
<p>IndexedDB 是一种底层的 API，用于在客户端存储大量的数据化结构</p>
<ul>
<li>是一种事务型数据库系统，一种基于 JS 面向对象数据库，类似 NoSQL(非关系型数据库)</li>
<li>本身基于事务，只需要指定数据库模式，打开与数据库的连接，然后检索和更行一系列事务即可</li>
</ul>
<p>事务：对数据库进行操作的时候的一个操作单元</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打开数据库(和数据库建立连接)</span></span><br><span class="line"><span class="keyword">const</span> dbRequest = indexedDB.open(<span class="string">&#x27;ysj&#x27;</span>) <span class="comment">//参数一：数据库名称  参数二：数据库版本  存在就打开，不存在就创建</span></span><br><span class="line"></span><br><span class="line">dbRequest.onerror = <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//数据库打开失败的回调函数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;数据库打开失败&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> db = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">dbRequest.onsuccess = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//数据库打开成功时的回调</span></span><br><span class="line">  db = event.target.result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dbRequest.onupgradeneeded = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//第一次打开或版本更新时的回调</span></span><br><span class="line">  <span class="keyword">const</span> db = event.target.result</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建一些存储对象(类似于数据库的表),使用id作为主键</span></span><br><span class="line">  db.createObjectStore(<span class="string">&#x27;users&#x27;</span>, &#123; <span class="attr">keyPath</span>: <span class="string">&#x27;id&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">id, name, age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&#x27;ysj1&#x27;</span>, <span class="number">18</span>),</span><br><span class="line">  <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&#x27;ysj2&#x27;</span>, <span class="number">19</span>),</span><br><span class="line">  <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&#x27;ysj3&#x27;</span>, <span class="number">20</span>),</span><br><span class="line">  <span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&#x27;ysj4&#x27;</span>, <span class="number">21</span>),</span><br><span class="line">  <span class="keyword">new</span> User(<span class="number">5</span>, <span class="string">&#x27;ysj5&#x27;</span>, <span class="number">22</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取btns，监听点击</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">  btns[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> transaction = db.transaction(<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;readwrite&#x27;</span>) <span class="comment">//表名  操作模式</span></span><br><span class="line">    <span class="keyword">const</span> store = transaction.objectStore(<span class="string">&#x27;users&#x27;</span>) <span class="comment">//获取存储对象</span></span><br><span class="line">    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> user <span class="keyword">of</span> users) &#123;</span><br><span class="line">          <span class="keyword">const</span> request = store.add(user)</span><br><span class="line">          request.onsuccess = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//监听每一次是否插入成功</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user.name&#125;</span>插入成功`</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        transaction.oncomplete = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;本次添加操作全部完成&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">//查询方法1(知道主键，根据主键查询)</span></span><br><span class="line">        <span class="comment">// const request1 = store.get(1);</span></span><br><span class="line">        <span class="comment">// request1.onsuccess = event =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//   console.log(event.target.result);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">//查询方式二：</span></span><br><span class="line">        <span class="keyword">const</span> request = store.openCursor() <span class="comment">//打开一个游标</span></span><br><span class="line">        request.onsuccess = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> cursor = event.target.result</span><br><span class="line">          <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(cursor.key, cursor.value)</span><br><span class="line">            cursor.continue() <span class="comment">//继续查询</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;查询完成&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">const</span> deleteRequest = store.openCursor() <span class="comment">//打开一个游标</span></span><br><span class="line">        deleteRequest.onsuccess = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> cursor = event.target.result</span><br><span class="line">          <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cursor.key === <span class="number">2</span>) &#123;</span><br><span class="line">              <span class="keyword">const</span> value = cursor.value</span><br><span class="line">              value.name = <span class="string">&#x27;yyy&#x27;</span></span><br><span class="line">              cursor.update(value)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              cursor.continue()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">const</span> updateRequest = store.openCursor() <span class="comment">//打开一个游标</span></span><br><span class="line">        updateRequest.onsuccess = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> cursor = event.target.result</span><br><span class="line">          <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cursor.key === <span class="number">2</span>) &#123;</span><br><span class="line">              cursor.delete()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              cursor.continue()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p>Cookie,类型为小型文本文件，某些网站为了辨别用户身份而存储在用户本地终端(Client Side)上的数据</p>
<p>浏览器会在特定情况下携带上 cookie 来发送请求，我们可以通过 cookie 来获取一些信息</p>
<p>cookie 保存在客户端中，按在客户端中的存储位置，Cookie 可以分为内存 Cookie 和硬盘 Cookie</p>
<ul>
<li>内存 Cookie 由浏览器维护，保护在内存中，浏览器关闭时内存就会消失，其存在时间是短暂的<ul>
<li>没有设置过期时间的 Cookie==默认==是内存 Cookie，关闭浏览器时会自动删除</li>
</ul>
</li>
<li>硬盘 Cookie 保存在硬盘中，有过期时间，用户手动清理或过期时间到时，才会被清理<ul>
<li>有设置过期时间，并且过期时间不为 0 或者负数的 Cookie，是硬盘 Cookie，需要手动或者到期时，才会删除</li>
</ul>
</li>
</ul>
<p><strong>cookie 常见属性：</strong></p>
<ul>
<li>可以通过设置 expires 或者 max-age 来设置过期的时间<ul>
<li>expires：设置的是 Date.toUTCString()，设置格式是;expires=date-in-GMTString-format</li>
<li>max-age：设置过期的秒钟，;max-age=max-age-in-seconds (例如一年为 60*60*24*365)</li>
</ul>
</li>
<li>cookie 作用域：允许 cookie 发送给哪些 URL<ul>
<li>Domain：指定哪些主机可以接受 cookie<ul>
<li>如果不指定，那么默认是 origin，不包括子域名</li>
<li>如果指定 Domain，则包含子域名。例如，如果设置 Domain=mozilla.org，则 Cookie 也包含在子域名中（如 developer.mozilla.org）</li>
</ul>
</li>
<li>Path：指定主机下哪些路径可以接受 cookie<ul>
<li>设置 Path=/docs，则以下地址都会匹配</li>
<li>/docs</li>
<li>/docs/Web/</li>
<li>/docs/Web/HTTP</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>客户端设置 cookie</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//js直接获取和是指cookie</span></span><br><span class="line">consoloe.log(<span class="built_in">document</span>.cookie)</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;name=ysj&#x27;</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;age=18&#x27;</span></span><br><span class="line"><span class="comment">//删除cookie，设置过期时间为0</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;name=ysj;max-age=0&#x27;</span></span><br><span class="line"><span class="comment">//设置cookie时设置过期时间(默认是秒钟)</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&#x27;name=ysj;max-age=10&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="BOM-DOM"><a href="#BOM-DOM" class="headerlink" title="BOM-DOM"></a>BOM-DOM</h3><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><p>JS 的一个重要运行环节就是浏览器，浏览器本身又作为一个应用程序需要对其本身进行操作，所有浏览器通常会有对应的对象模型(BOM,Browser Object Model)；可以将 BOM 看成是连接 JS 脚本与浏览器窗口的桥梁</p>
<p>BOM 主要包括的对象模型：</p>
<ul>
<li>window：包括全局属性、方法，控制浏览器窗口相关的属性、方法</li>
<li>location：浏览器连接到的对象的位置(URL)</li>
<li>history：操作浏览器的历史</li>
<li>document：当前窗口操作文档的对象</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dpbmRvdw==">window 对象<i class="fa fa-external-link-alt"></i></span>在浏览器中有两个身份：</p>
<ol>
<li>全局对象</li>
<li>浏览器窗口对象<ul>
<li>包含约 60+个属性属性：localStorage、console、history、scrollX、screenX 等</li>
<li>包含约 40+个方法方法：alert、close、scrollToopen 等</li>
<li>包含约 30+个事件：focus、blur、load、hashchange 等</li>
<li>包含从 EventTarget 继承过来的方法:addEventListener、removeEventListener、dispatchEvent 等(Window 类继承自 EventTarget)</li>
</ul>
</li>
</ol>
<p>事件参考 MDN：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvRXZlbnRz">https://developer.mozilla.org/zh-CN/docs/Web/Events<i class="fa fa-external-link-alt"></i></span></p>
<p>location:<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0xvY2F0aW9u">https://developer.mozilla.org/zh-CN/docs/Web/API/Location<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location)</span><br><span class="line"><span class="comment">// location.href 完整的url地址</span></span><br><span class="line"><span class="comment">// location.protocol  协议</span></span><br><span class="line"></span><br><span class="line">location.assign(<span class="string">&#x27;http://www.baidu.com&#x27;</span>) <span class="comment">//打开一个新的地址。跳转后有回退按钮</span></span><br><span class="line">location.href = <span class="string">&#x27;http://www.baidu.com&#x27;</span> <span class="comment">//两者等价</span></span><br><span class="line"></span><br><span class="line">location.replace(<span class="string">&#x27;http://www.baidu.com&#x27;</span>) <span class="comment">//跳转后无法返回</span></span><br><span class="line">location.reload() <span class="comment">//重新加载页面</span></span><br></pre></td></tr></table></figure>

<p>history:<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0hpc3RvcnlfQVBJ">https://developer.mozilla.org/zh-CN/docs/Web/API/History_API<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// history主要有两个属性</span></span><br><span class="line"><span class="attr">length</span>:会话中的记录条数</span><br><span class="line">state：当前保留的状态值</span><br><span class="line"></span><br><span class="line"><span class="comment">// back():返回上一页，等价于history.go(-1);</span></span><br><span class="line"><span class="comment">// forward():前进下一页，等价于history.go(1);</span></span><br><span class="line"><span class="comment">// go():加载历史中的某一页</span></span><br><span class="line"><span class="comment">// pushState():打开一个指定的地址(不会刷新页面)</span></span><br><span class="line"><span class="comment">// replaceState():打开一个新的地址，并且使用replace</span></span><br></pre></td></tr></table></figure>

<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  x,</span></span></span><br><span class="line"><span class="params"><span class="function">  y = <span class="keyword">function</span> () &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    x = <span class="number">3</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">console</span>.log(x)</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//当函数参数有默认值时，会多形成一个参数作用域，用于保存参数的值，作用域里面是所有的参数</span></span><br><span class="line">  <span class="comment">// 即： x = undefined y = function</span></span><br><span class="line">  consoloe.log(x)</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">2</span></span><br><span class="line">  y()</span><br><span class="line">  <span class="built_in">console</span>.log(x) <span class="comment">//找自己作用域里面的x，x = 2</span></span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br></pre></td></tr></table></figure>

<p>JS 通过 DOM(Document Object Model，文档对象模型)操作网页中的各种标签元素</p>
<p>所有的 DOM 节点类型都继承自<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL05vZGU=">Node<i class="fa fa-external-link-alt"></i></span>接口</p>
<p>Node 的几个重要的属性：</p>
<ul>
<li>nodeName:node 节点的名称(默认大写)</li>
<li>nodeType:可以区分节点的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL05vZGUvbm9kZVR5cGU=">类型<i class="fa fa-external-link-alt"></i></span>(文本类型、元素类型、注释类型等)</li>
<li>nodeValue:node 节点的值</li>
<li>childNodes:所有的子节点</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0RvY3VtZW50">Document<i class="fa fa-external-link-alt"></i></span>节点表示的整个载入的网页，常见的属性和方法：</p>
<ul>
<li>属性<ul>
<li>document.title</li>
<li>document.body</li>
<li>document.head</li>
<li>document.children</li>
<li>document.location(等同于 window.location)</li>
</ul>
</li>
<li>方法<ul>
<li>document.createElement(“h2”) 创建元素</li>
<li>document.body.appendChild(h3El) 追加元素</li>
<li>document.body.removeChild(h3El) 移除元素</li>
<li>document.getElementsByName(“aaa”) 获取元素</li>
<li>document.getElementsByTagName(“div”) 获取元素</li>
<li>document.querySelector(“div”) 获取元素</li>
<li>document.querySelectorAll(“div”) 获取元素</li>
</ul>
</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0VsZW1lbnQ=">Element<i class="fa fa-external-link-alt"></i></span>:div、p、span 等元素在 DOM 中表示为 Element 元素,常见属性和方法：</p>
<ul>
<li>属性<ul>
<li>el.children 获取子元素</li>
<li>el.childNodes 获取子元素</li>
<li>el.tagName 获取标签名</li>
<li>el.id</li>
<li>el.className</li>
<li>el.classList</li>
<li>el.clientWidth/clientHeight/clientLeft/clientTop</li>
</ul>
</li>
<li>方法<ul>
<li>el.getAttribute(“name”)</li>
<li>el.setAttribute(“height”, “1.22”)</li>
</ul>
</li>
</ul>
<h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a><strong>事件监听</strong></h4><p>浏览器在某个时刻可能会发生一些事件，需要以某种方式(代码)对其响应，进行事件的处理</p>
<p>事件对象：</p>
<ul>
<li>event.type:事件的类型</li>
<li>event.target:发生点击的元素</li>
<li>event.currentTarget：处理点击事件的元素</li>
<li>event.offsetX,event.offsetY：事件发生的位置</li>
<li>event.preventDefault():默认默认行为</li>
<li>event.stopPropagation():阻止事件进一步传递</li>
</ul>
<p>其它事件类型：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvRXZlbnRz">https://developer.mozilla.org/zh-CN/docs/Web/Events<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4><p>MDN:<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9EYXRhX3N0cnVjdHVyZXM=">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures<i class="fa fa-external-link-alt"></i></span></p>
<h5 id="Number-数字对象"><a href="#Number-数字对象" class="headerlink" title="Number 数字对象"></a>Number 数字对象</h5><ul>
<li>toFixed(x)：数字转化为字符串，结果的的小数点后有指定位有效数字</li>
<li>toString()把数字转换为字符串</li>
<li>valueOf()返回一个 Number 对象的基本数字值</li>
</ul>
<p>判断数字是否为纯数字、</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Number</span>(num) + <span class="string">&#x27;&#x27;</span> !== <span class="literal">NaN</span> + <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;是纯数字&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="number">1.22</span>) + <span class="string">&#x27;&#x27;</span>) <span class="comment">//1.22</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&#x27;1.22a&#x27;</span>) + <span class="string">&#x27;&#x27;</span>) <span class="comment">//NaN</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;不是纯数字&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="String-字符串对象"><a href="#String-字符串对象" class="headerlink" title="String 字符串对象"></a>String 字符串对象</h5><ul>
<li><p>length：字符串的长度</p>
</li>
<li><p>charAt() 返回在指定位置的字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.charAt(index) <span class="comment">//第一个字符的下标是0，若index下标越界，将返回一个空字符串</span></span><br></pre></td></tr></table></figure></li>
<li><p>concat() 连接两个或更多字符串，并返回新的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.concat(str1, str2, str3, …); <span class="comment">//连接多个字符串，使用+连接会更方便一点</span></span><br></pre></td></tr></table></figure></li>
<li><p>indexOf() 返回某个指定的字符串值在字符串中首次出现的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.indexOf(str1, start)</span><br><span class="line"><span class="comment">//检索str中是否含有str1,start为开始检索的下标，默认从0开始</span></span><br><span class="line"><span class="comment">//找到返回str1第一次出现的位置，没找到返回-1</span></span><br></pre></td></tr></table></figure></li>
<li><p>includes() 查找字符串中是否包含指定的子字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.includes(str1, start) <span class="comment">//判断str中是否包含str1字符串</span></span><br><span class="line"><span class="comment">//找到返回true，否则返回false</span></span><br><span class="line"><span class="comment">//start为开始查找的下标，默认为0</span></span><br></pre></td></tr></table></figure></li>
<li><p>lastIndexOf() 返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.lastIndexOf(str1, start)</span><br><span class="line"><span class="comment">//查找str1在str中最后出现在哪个位置</span></span><br><span class="line"><span class="comment">//start为开始检索位置的下标,默认为字符串结尾</span></span><br><span class="line"><span class="comment">//未搜索到时返回-1</span></span><br></pre></td></tr></table></figure></li>
<li><p>replace() 在字符串中查找匹配的子串，并替换与正则表达式匹配的子串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.replace(str1 | reg, newStr)</span><br><span class="line"><span class="comment">//将str中的str1字符串替换为newStr(只替换第一个str1)</span></span><br><span class="line"><span class="comment">//将str中符合正则表达式的字符串替换为newStr</span></span><br><span class="line"><span class="comment">//会返回一个替换后的字符串</span></span><br></pre></td></tr></table></figure></li>
<li><p>slice() 提取字符串的片段，并在新的字符串中返回被提取的部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.slice(start, end)</span><br><span class="line"><span class="comment">//[start, end)</span></span><br><span class="line"><span class="comment">//start从0开始，若为负数表示从w截取startg字符串，slice(-2)表示提取原字符串中最后两个字符</span></span><br><span class="line"><span class="comment">//end若为负数，-1指字符串最后一个字符的位置，-2指到数第二个字符</span></span><br></pre></td></tr></table></figure></li>
<li><p>split()把字符串分割为字符串数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.split(<span class="string">&#x27;str1&#x27;</span> | reg, limit)</span><br><span class="line"><span class="comment">//把一个字符串以str1作为分隔符分割成一个数组</span></span><br><span class="line"><span class="comment">//limit返回数组的最大长度</span></span><br></pre></td></tr></table></figure></li>
<li><p>substr()从起始索引号提取字符串中指定数目的字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.substr(start, length)</span><br><span class="line"><span class="comment">//start:抽取子串的起始下标，若为负数则从尾部开始算起，-1值最后一个字符</span></span><br><span class="line"><span class="comment">//length:可选，子串中的字符数，若省略则一直截取到str字符串末尾</span></span><br></pre></td></tr></table></figure></li>
<li><p>substring()提取字符串中两个指定的索引号之间的字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.substring(start, end)</span><br><span class="line"><span class="comment">// [start, end)</span></span><br><span class="line"><span class="comment">//from:非负整数，提取子串的起始位置</span></span><br><span class="line"><span class="comment">//to:可选，非负整数，比from大1，省略会一直提取到字符串结尾</span></span><br><span class="line"><span class="comment">// start == end,返回一个空字符串</span></span><br><span class="line"><span class="comment">//任意参数小于0或为NaN，会被视为0; 大于length会被视为length</span></span><br><span class="line"><span class="comment">//start &gt; end 则  str.substring(1, 0) &lt;==&gt; str.substring(0, 1)</span></span><br></pre></td></tr></table></figure></li>
<li><p>toLowerCase()把字符串转换为小写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.toLowerCase()</span><br></pre></td></tr></table></figure></li>
<li><p>toUpperCase()把字符串转换为大写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.toUpperCase()</span><br></pre></td></tr></table></figure></li>
<li><p>trim()去除字符串两边的空白</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">str.trim()</span><br></pre></td></tr></table></figure></li>
<li><p>valueOf()返回某个字符串对象的原始值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello world!&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.valueOf()) <span class="comment">//Hello world!</span></span><br></pre></td></tr></table></figure></li>
<li><p>toString()返回一个字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> myvar = bool.toString() <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="Date-日期对象"><a href="#Date-日期对象" class="headerlink" title="Date 日期对象"></a>Date 日期对象</h5><ul>
<li>getDate() 从 Date 对象中返回一个月中的某一天(1~31)</li>
<li>getDay() 从 Date 对象中返回一周中的某一天(0~6)</li>
<li>getFullYear() 返回四位数字的年份</li>
<li>getHours() 返回小时(0-23)</li>
<li>getMilliseconds() 返回毫秒(0~999)</li>
<li>getMinutes() 返回分钟(0~59)</li>
<li>getMonth() 返回月份(0~11)</li>
<li>getSeconds() 返回秒数(0~59)</li>
<li>getTime() 返回 1970 年 1 月 1 日至今的毫秒数</li>
<li>toJSON() 以 JSON 数据格式返回日期字符串</li>
<li>toString() 把 Date 对象转换为字符串</li>
<li>valueOf() 返回 Date 对象的原始值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//创建当前日期</span></span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2021-7-7 18:30:00&quot;</span>); <span class="comment">//创建指定日期</span></span><br><span class="line"><span class="keyword">var</span> date3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2021</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">50</span>， <span class="number">333</span>); <span class="comment">//创建指定日期（此处月份从0开始）</span></span><br></pre></td></tr></table></figure>

<p>日期在 js 中存储的是距离 1970 年 1 月 1 日 0 点 0 分 0 秒 0 毫秒的毫秒数</p>
<p>日期相加结果为字符串拼接，相减结果为毫秒数的差值</p>
<h5 id="Array-数组对象"><a href="#Array-数组对象" class="headerlink" title="Array 数组对象"></a>Array 数组对象</h5><ul>
<li><p>concat() 连接两个或更多的数组</p>
<p>返回一个新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArray = arr.concat(arr2, arr3)</span><br></pre></td></tr></table></figure></li>
<li><p>copyWithin() 浅复制数组的一部分到同一数组中的另一个位置</p>
<p>==会改变原数组==，但不会改变数组长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.copyWithin(target, start, end)</span><br><span class="line"><span class="comment">//[start, end)</span></span><br><span class="line"><span class="comment">//target:复制序列到该位置。如果是负数，target 将从末尾开始计算;如果 target 大于等于 arr.length，将会不发生拷贝</span></span><br><span class="line"><span class="comment">//start:可选，开始复制元素的起始位置，若为负数，将从末尾开始计算，默认从0开始</span></span><br><span class="line"><span class="comment">//end：可选，开始复制元素的结束位置(不包含),若为负数, end 将从末尾开始计算，默认复制到数组结尾</span></span><br></pre></td></tr></table></figure></li>
<li><p>every() 检测数值元素的每个元素是否都符合条件</p>
<p>注：若收到一个空数组，此方法在一切情况下都会返回 <code>true</code></p>
<p>返回布尔值。如果所有元素都通过检测返回 true，否则返回 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.every(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">el, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//el:当前元素的值</span></span><br><span class="line">  <span class="comment">//index:可选，当前元素的下标</span></span><br><span class="line">  <span class="comment">//arr:可选，调用array的当前数组</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>fill() 用一个固定值填充一个数组中从起始索引到终止索引内的全部元素</p>
<p>返回一个修改后的数组，==会改变原数组==</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.fill(value, start, end)</span><br><span class="line"><span class="comment">// [start, end)</span></span><br><span class="line"><span class="comment">// value:用来填充数组元素的值</span></span><br><span class="line"><span class="comment">// start:可选，起始索引，默认值为0</span></span><br><span class="line"><span class="comment">// end:可选，终止索引，默认值为 this.length</span></span><br><span class="line"><span class="keyword">const</span> newSkuGroup = <span class="keyword">new</span> <span class="built_in">Array</span>(totalLength).fill(&#123; <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">price</span>: <span class="number">0</span> &#125;)</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1024</span> * <span class="number">1024</span>).fill(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>filter() 检测数值元素，并返回符合条件所有元素的数组</p>
<p>返回一个新的数组，若无元素通过测试则返回空数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.filter(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">el, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//callback:测试数组每个元素的函数，返回true保留该元素，false不保留</span></span><br><span class="line">  <span class="comment">//el：数组当前正在处理的元素</span></span><br><span class="line">  <span class="comment">//index：可选，正在处理的元素的下标</span></span><br><span class="line">  <span class="comment">//arr：调用filter的数组本身</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>find() 返回数组中满足提供的测试函数的第一个元素的值,否则返回 undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.find(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">el, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//el:当前遍历到的元素</span></span><br><span class="line">  <span class="comment">//index：可选，当前元素的下标</span></span><br><span class="line">  <span class="comment">//arr：调用find()的数组本身</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>findIndex() 返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。若没有找到对应元素则返回-1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.findIndex(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">el, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//参数同上</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>forEach() 数组每个元素都执行一次回调函数</p>
<p>除了抛出异常以外，没有办法中止或跳出 <code>forEach()</code> 循环</p>
<p>forEach 不会直接改变调用它的对象，但那个对象可能会被 callback 函数改变</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">el, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//参数同上</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>from() 从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例</p>
<p>返回一个新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(object, callback)</span><br><span class="line"><span class="comment">//object:要转换为数组的对象</span></span><br><span class="line"><span class="comment">//callback：可选，数组中每个元素要调用的函数</span></span><br></pre></td></tr></table></figure></li>
<li><p>includes() 判断一个数组是否包含一个指定的值</p>
<p>如果包含则返回 true，否则返回 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.includes(value, start)</span><br><span class="line"><span class="comment">//value：需要查找的元素值</span></span><br><span class="line"><span class="comment">//start：可选，开始查找的位置，默认为0</span></span><br></pre></td></tr></table></figure></li>
<li><p>indexOf() 搜索数组中的元素，并返回它第一次出现的位置,不存在返回-1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.indexOf(el, start)</span><br><span class="line"><span class="comment">//el:要查找的元素</span></span><br><span class="line"><span class="comment">//start：可选，开始查找的下标，默认为0</span></span><br></pre></td></tr></table></figure></li>
<li><p>isArray() 判断对象是否为数组</p>
<p>值是 Array，返回 true，否则返回 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray(obj)</span><br><span class="line"><span class="comment">//obj：需要检测是否为数组的对象</span></span><br></pre></td></tr></table></figure></li>
<li><p>join() 将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。若数组只有一个项目，那么将返回该项目而不使用分隔符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.join(separator)</span><br><span class="line"><span class="comment">//separator：可选，指定一个字符串来分隔数组的每个元素，默认用逗号分割</span></span><br><span class="line"><span class="comment">//如果一个元素为 undefined 或 null，它会被转换为空字符串。</span></span><br><span class="line"><span class="comment">//若数组长度为0，则返回空字符串</span></span><br></pre></td></tr></table></figure></li>
<li><p>keys() 返回一个包含数组中每个索引键的 Array Iterator 对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> iterator = arr.keys()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key) <span class="comment">// 0 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>lastIndexOf() 搜索数组中的元素，并返回它最后出现的位置,从数组的后面向前查找</p>
<p>如果不存在则返回 -1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.lastIndexOf(el, start)</span><br><span class="line"><span class="comment">//el:被查找的元素</span></span><br><span class="line"><span class="comment">//start：可选，从此位置开始逆向查找，默认从数组最后一个开始。若为负数，如-2，从数组倒数第二个开始逆向查找，以此类推</span></span><br></pre></td></tr></table></figure></li>
<li><p>map() 通过指定函数处理数组的每个元素，并返回处理后的数组</p>
<p>返回一个新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">el, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//el：当前正在处理的元素</span></span><br><span class="line">  <span class="comment">//index：当前元素的下标</span></span><br><span class="line">  <span class="comment">//array：调用map方法的数组</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>pop() 从数组中删除最后一个元素，并返回该元素的值;数组为空时返回 undefined</p>
<p>==会改变原数组的长度==</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.pop()</span><br></pre></td></tr></table></figure></li>
<li><p>push() 将一个或多个元素添加到数组的末尾，并返回该数组的新长度</p>
<p>==会改变原数组的长度==</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.push(el1, el2, ……);</span><br></pre></td></tr></table></figure></li>
<li><p>reduce() 对数组中的每个元素执行一个由您提供的 reducer 函数(升序执行)，将其结果汇总为单个返回值</p>
<p>在没有初始值的空数组上调用 reduce 将报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">returnValue, el, index, arr</span>) </span>&#123;&#125;, initValue)</span><br><span class="line"><span class="comment">//returnValue：上一次调用会调用返回累积值或initValue</span></span><br><span class="line"><span class="comment">//el：数组中正在处理的元素</span></span><br><span class="line"><span class="comment">//index：正在处理的元素的下标</span></span><br><span class="line"><span class="comment">//arr：调用reduce的数组</span></span><br><span class="line"><span class="comment">//initValue：第一次调用callback函数时的第一个参数的值，若没有提供，则将使用数组中的第一个元素</span></span><br></pre></td></tr></table></figure></li>
<li><p>reduceRight() 接受一个函数作为累加器和数组的每个值（从右到左）将其减少为单个值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">].reduceRight(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator.concat(currentValue))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1)</span><br><span class="line"><span class="comment">// expected output: Array [4, 5, 2, 3, 0, 1]</span></span><br></pre></td></tr></table></figure></li>
<li><p>reverse() 将数组中元素的位置颠倒，并返回该数组</p>
<p>==会改变原数组==</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.reverse()</span><br></pre></td></tr></table></figure></li>
<li><p>shift() 从数组中删除第一个元素，并返回该元素的值;若为空数组返回 undefined</p>
<p>==会改变原数组的长度==</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.shift()</span><br></pre></td></tr></table></figure></li>
<li><p>slice() 返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.slice(begin, end)</span><br><span class="line"><span class="comment">// [begin, end);</span></span><br><span class="line"><span class="comment">//begin：可选，从该索引开始提取原数组元素，默认从0开始；slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）；</span></span><br><span class="line"><span class="comment">//如果 begin 超出原数组的索引范围，则会返回空数组。</span></span><br><span class="line"><span class="comment">//end：可选，提取终止处的索引，默认提取到数组结束；若为负数， 则它表示在原数组中的倒数第几个元素结束抽取</span></span><br></pre></td></tr></table></figure></li>
<li><p>some() 测试数组中是不是至少有 1 个元素通过了被提供的函数测试。它返回的是一个 Boolean 类型的值。</p>
<p>如果用一个空数组进行测试，在任何情况下它返回的都是 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.some(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">el, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//el：数组正在处理的元素</span></span><br><span class="line">  <span class="comment">//index：正在处理元素的下标</span></span><br><span class="line">  <span class="comment">//arr：调用some的数组</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>sort() 对数组的元素进行排序，并返回数组；默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的</p>
<p>==会改变原数组==</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b <span class="comment">//升序排序</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>splice() 删除、替换现有元素、原地添加新的元素,并以数组形式返回被修改的内容</p>
<p>==会改变原数组==</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.splice(start, delCount, item1, item2, ……);</span><br><span class="line"><span class="comment">//start：可选，指定修改的开始位置，默认从0开始；超出了数组的长度，则从数组末尾开始添加内容；若为负值，则表示从数组末位开始的第几位；负数的绝对值大于数组的长度，则表示开始位置为第0位</span></span><br><span class="line"><span class="comment">//delcount：要移除的数组元素的个数</span></span><br><span class="line">						<span class="comment">//0或负数，不会移除元素，至少添加一个新元素</span></span><br><span class="line">						<span class="comment">//大于start后面的元素个数，start及之后的元素都会被删除</span></span><br><span class="line">						<span class="comment">//被省略，start及之后的所有元素都会被删除</span></span><br><span class="line"><span class="comment">//item：要添加进数组的元素,从start开始。如果不指定，则 splice() 将只删除数组元素。</span></span><br></pre></td></tr></table></figure></li>
<li><p>toString() 把数组转换为字符串，并返回结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.toString()</span><br></pre></td></tr></table></figure></li>
<li><p>unshift() 将一个或多个元素添加到数组的开头，并返回该数组的新长度</p>
<p>==会改变原数组==</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.unshift(item1, item2, ……);</span><br><span class="line"><span class="comment">//item：要添加到数组开头的元素</span></span><br></pre></td></tr></table></figure></li>
<li><p>valueOf() 返回数组对象的原始值</p>
</li>
</ul>
<h5 id="Boolean-布尔对象"><a href="#Boolean-布尔对象" class="headerlink" title="Boolean 布尔对象"></a>Boolean 布尔对象</h5><ul>
<li>toString() 把布尔值转换为字符串，并返回结果</li>
<li>valueOf() 返回 Boolean 对象的原始值</li>
</ul>
<h5 id="Math-算数对象"><a href="#Math-算数对象" class="headerlink" title="Math 算数对象"></a>Math 算数对象</h5><ul>
<li><p>abs(x) 返回 x 的绝对值</p>
</li>
<li><p>ceil(x) 对数进行上舍入</p>
</li>
<li><p>floor(x) 对 x 进行下舍入</p>
</li>
<li><p>max(x,y,z,…,n) 返回 x,y,z,…,n 中的最高值</p>
</li>
<li><p>min(x,y,z,…,n) 返回 x,y,z,…,n 中的最低值</p>
</li>
<li><p>pow(x,y) 返回 x 的 y 次幂</p>
</li>
<li><p>random() 返回 0 ~ 1 之间的随机数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Matn.random() <span class="comment">// [0, 1)</span></span><br></pre></td></tr></table></figure></li>
<li><p>round(x) 四舍五入为整数</p>
</li>
<li><p>sqrt(x) 返回数的平方根</p>
</li>
</ul>
<h4 id="数据类型和判断"><a href="#数据类型和判断" class="headerlink" title="数据类型和判断"></a>数据类型和判断</h4><p><strong>数据类型</strong></p>
<p>基本数据类型：</p>
<ol>
<li>String</li>
<li>Number</li>
<li>Bigint</li>
<li>Symbol</li>
<li>Boolean</li>
<li>null</li>
<li>undefined</li>
</ol>
<p>引用类型：</p>
<ul>
<li>对象(函数、日期、几乎所有通过 new 创建的东西)</li>
</ul>
<p><strong>typeof</strong></p>
<p><code>typeof</code> 操作符的唯一目的就是检查数据类型，如果我们希望检查任何从 Object 派生出来的结构类型，使用 <code>typeof</code> 是不起作用的，因为总是会得到 <code>&quot;object&quot;</code>。检查 Object 种类的合适方式是使用 instanceof 关键字。但即使这样也存在误差。</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">undefined</td>
<td align="left">“undefined”</td>
</tr>
<tr>
<td align="center">null</td>
<td align="left">“object”</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="left">“boolean”</td>
</tr>
<tr>
<td align="center">number</td>
<td align="left">“number”</td>
</tr>
<tr>
<td align="center">bigint</td>
<td align="left">“bigint”</td>
</tr>
<tr>
<td align="center">string</td>
<td align="left">“string”</td>
</tr>
<tr>
<td align="center">symbol</td>
<td align="left">“symbol”</td>
</tr>
<tr>
<td align="center">宿主对象(由 js 环境提供)</td>
<td align="left">取决于具体实现</td>
</tr>
<tr>
<td align="center">function 对象</td>
<td align="left">“function”</td>
</tr>
<tr>
<td align="center">其它任何对象</td>
<td align="left">“object”</td>
</tr>
</tbody></table>
<p><strong>instanceof 和 in</strong></p>
<p><a href="#JS%E5%8E%9F%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%A4%E6%96%AD%E6%96%B9%E6%B3%95">面向对象：JS 原型相关判断方法</a></p>
<h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>防抖最早出现在电子元件中，节流出现在流体流动中；</p>
<p>js 是事件驱动的，大量的操作会触发事件，加入到事件队列中处理。对于某些频繁的事件处理会造成事件的损耗，可以通过防抖和节流来限制事件频繁的发生</p>
<p>==防抖==(debounce)：事件触发时，相应的函数会等待一定时间再触发；当事件密集触发时，函数的触发会被频繁的推迟，只有<strong>等待了一段时间也没有事件触发，才会真正的执行响应函数</strong></p>
<p><img src="E:\Web\studyNotes\js高级.assets\image-20220107204557058.png" alt="image-20220107204557058"></p>
<p>应用场景：</p>
<ul>
<li>输入框中频繁的输入内容，搜素或提交信息</li>
<li>频繁的点击按钮，触发某个事件</li>
<li>监听浏览器滚动事件，完成某些特定操作</li>
<li>用户缩放浏览器的 resize 事件</li>
</ul>
<p>==节流==(throttle)：当事件触发，会执行这个事件的响应函数；如果这个事件会被<strong>频繁触发</strong>，节流函数会<strong>按照固定的频率来执行</strong>函数；不管在这个中间有多少次触发这个事件，执行函数的频率总是固定的</p>
<p><img src="E:\Web\studyNotes\js高级.assets\image-20220107204617865.png" alt="image-20220107204617865"></p>
<p>应用场景：</p>
<ul>
<li>监听页面的滚动事件</li>
<li>鼠标移动事件</li>
<li>用户频繁点击按钮操作</li>
<li>游戏中的一些设计</li>
</ul>
<p>第三方库实现防抖：</p>
<ul>
<li>lodash</li>
<li><span class="exturl" data-url="aHR0cHM6Ly91bmRlcnNjb3JlanMub3JnLw==">underscore<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h4 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a><strong>防抖函数</strong></h4><p>基本实现:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> _debounce = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _debounce</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>立即执行(触发时先执行一次)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay, immediate = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> isInvoke = <span class="literal">false</span> <span class="comment">//立即执行是否执行过</span></span><br><span class="line">  <span class="keyword">const</span> _debounce = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    <span class="keyword">if</span> (immediate &amp;&amp; !isInvoke) &#123;</span><br><span class="line">      <span class="comment">//如果需要立即执行</span></span><br><span class="line">      fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">      isInvoke = <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">        isInvoke = <span class="literal">false</span></span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _debounce</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取消功能(用户触发后等待时间还未结束时，用户取消触发)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取消功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay, immediate = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> isInvoke = <span class="literal">false</span> <span class="comment">//立即执行是否执行过</span></span><br><span class="line">  <span class="keyword">const</span> _debounce = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    <span class="keyword">if</span> (immediate &amp;&amp; !isInvoke) &#123;</span><br><span class="line">      <span class="comment">//如果需要立即执行</span></span><br><span class="line">      fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">      isInvoke = <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">        isInvoke = <span class="literal">false</span></span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//增加取消执行功能</span></span><br><span class="line">  _debounce.cancel = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    isInvoke = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _debounce</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取函数的返回值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取函数返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay, immediate = <span class="literal">false</span>, resultCallback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> isInvoke = <span class="literal">false</span> <span class="comment">//立即执行是否执行过</span></span><br><span class="line">  <span class="keyword">const</span> _debounce = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">      <span class="keyword">if</span> (immediate &amp;&amp; !isInvoke) &#123;</span><br><span class="line">        <span class="comment">//如果需要立即执行</span></span><br><span class="line">        <span class="keyword">const</span> result = fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">        <span class="keyword">if</span> (resultCallback) resultCallback(result) <span class="comment">//通过回调函数拿到返回结果</span></span><br><span class="line">        resolve(result) <span class="comment">//通过返回Promise拿到返回结果</span></span><br><span class="line">        isInvoke = <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> result = fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">          <span class="keyword">if</span> (resultCallback) resultCallback(result) <span class="comment">//通过回调函数拿到返回结果</span></span><br><span class="line">          resolve(result) <span class="comment">//通过返回Promise拿到返回结果</span></span><br><span class="line">          timer = <span class="literal">null</span></span><br><span class="line">          isInvoke = <span class="literal">false</span></span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//增加取消执行功能</span></span><br><span class="line">  _debounce.cancel = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    isInvoke = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _debounce</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h4><p>基本实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _throttle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lastTime = <span class="number">0</span> <span class="comment">//上一次执行函数的时间</span></span><br><span class="line">    <span class="keyword">const</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() <span class="comment">//当前触发节流函数的时间</span></span><br><span class="line">    <span class="keyword">const</span> remainTime = interval - (nowTime - lastTime) <span class="comment">//还剩多少时间触发函数</span></span><br><span class="line">    <span class="comment">//还剩多少时间触发函数 = 间隔时间 - (当前时间 - 上次执行时间)</span></span><br><span class="line">    <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//此时函数需要开始执行</span></span><br><span class="line">      fn() <span class="comment">//触发函数</span></span><br><span class="line">      lastTime = nowTime <span class="comment">//保留上次触发的时间</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _throttle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>增加由外界决定第一次是否触发的功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外界决定第一次是否执行函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, interval, options = &#123; leading: <span class="literal">true</span>, trailing: <span class="literal">false</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; leading &#125; = options</span><br><span class="line">  <span class="keyword">const</span> _throttle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lastTime = <span class="number">0</span> <span class="comment">//上一次执行函数的时间</span></span><br><span class="line">    <span class="keyword">const</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() <span class="comment">//当前触发节流函数的时间</span></span><br><span class="line">    <span class="keyword">if</span> (!lastTime &amp;&amp; !leading) lastTime = nowTime <span class="comment">//若传进来的leading为false,并且lastTime==0，让lastTime=nowTime，让剩余时间大于0，表示第一次不执行函数</span></span><br><span class="line">    <span class="keyword">const</span> remainTime = interval - (nowTime - lastTime) <span class="comment">//还剩多少时间触发函数</span></span><br><span class="line">    <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      fn()</span><br><span class="line">      lastTime = nowTime <span class="comment">//保留上次触发的时间</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _throttle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>外界决定没到触发时间的最后一次是否执行函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外界决定第一次是否执行函数,没到触发时间的最后一次是否执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, interval, options = &#123; leading: <span class="literal">true</span>, trailing: <span class="literal">false</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; leading, trailing &#125; = options</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">//定时器，</span></span><br><span class="line">  <span class="keyword">const</span> _throttle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lastTime = <span class="number">0</span> <span class="comment">//上一次执行函数的时间</span></span><br><span class="line">    <span class="keyword">const</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() <span class="comment">//当前触发节流函数的时间</span></span><br><span class="line">    <span class="keyword">if</span> (!lastTime &amp;&amp; !leading) lastTime = nowTime <span class="comment">//若传进来的leading为false,并且lastTime==0，让lastTime=nowTime，让剩余时间大于0，表示第一次不执行函数</span></span><br><span class="line">    <span class="keyword">const</span> remainTime = interval - (nowTime - lastTime) <span class="comment">//还剩多少时间触发函数</span></span><br><span class="line">    <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      fn()</span><br><span class="line">      lastTime = nowTime <span class="comment">//保留上次触发的时间</span></span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        <span class="comment">//事件已经触发，取消定时器，防止多次执行</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="comment">//事件已经执行，不需要再加定时器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (trailing &amp;&amp; remainTime &gt; <span class="number">0</span> &amp;&amp; !timer) &#123;</span><br><span class="line">      <span class="comment">//判断有没有定时器</span></span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span> <span class="comment">//清空定时器，让下一次定时器能够开启</span></span><br><span class="line">        lastTime = leading ? <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() : <span class="number">0</span></span><br><span class="line">        <span class="comment">//如果第一次触发执行，则将上一次执行时间设置为当前时间；</span></span><br><span class="line">        <span class="comment">//如果事第一次不执行，则将上一次执行时间设置为0</span></span><br><span class="line">        fn()</span><br><span class="line">      &#125;, remainTime)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _throttle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>绑定 this 和参数和取消功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定this和参数和取消功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, interval, options = &#123; leading: <span class="literal">true</span>, trailing: <span class="literal">false</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; leading, trailing &#125; = options</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> _throttle = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lastTime = <span class="number">0</span> <span class="comment">//上一次执行函数的时间</span></span><br><span class="line">    <span class="keyword">const</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() <span class="comment">//当前触发节流函数的时间</span></span><br><span class="line">    <span class="keyword">if</span> (!lastTime &amp;&amp; !leading) lastTime = nowTime <span class="comment">//若传进来的leading为false,让lastTime=noeTime，表示第一次不执行函数</span></span><br><span class="line">    <span class="keyword">const</span> remainTime = interval - (nowTime - lastTime) <span class="comment">//还剩多少时间触发函数</span></span><br><span class="line">    <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">      lastTime = nowTime <span class="comment">//保留上次触发的时间</span></span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="comment">//事件已经执行，不需要再加定时器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (trailing &amp;&amp; remainTime &gt; <span class="number">0</span> &amp;&amp; !timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">        lastTime = leading ? <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() : <span class="number">0</span></span><br><span class="line">        fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">      &#125;, remainTime)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  _throttle.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    lastTime = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _throttle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, interval, options = &#123; leading: <span class="literal">true</span>, trailing: <span class="literal">false</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; leading, trailing, resultCallback &#125; = options</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> _throttle = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lastTime = <span class="number">0</span> <span class="comment">//上一次执行函数的时间</span></span><br><span class="line">    <span class="keyword">const</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() <span class="comment">//当前触发节流函数的时间</span></span><br><span class="line">    <span class="keyword">if</span> (!lastTime &amp;&amp; !leading) lastTime = nowTime <span class="comment">//若传进来的leading为false,让lastTime=nowTime，表示第一次不执行函数</span></span><br><span class="line">    <span class="keyword">const</span> remainTime = interval - (nowTime - lastTime) <span class="comment">//还剩多少时间触发函数</span></span><br><span class="line">    <span class="keyword">if</span> (remainTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">      <span class="keyword">if</span> (resultCallback) resultCallback(result)</span><br><span class="line">      lastTime = nowTime <span class="comment">//保留上次触发的时间</span></span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="comment">//事件已经执行，不需要再加定时器</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (trailing &amp;&amp; remainTime &gt; <span class="number">0</span> &amp;&amp; !timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">        lastTime = leading ? <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() : <span class="number">0</span></span><br><span class="line">        <span class="keyword">const</span> result = fn.apply(<span class="built_in">this</span>, args)</span><br><span class="line">        <span class="keyword">if</span> (resultCallback) resultCallback(result)</span><br><span class="line">      &#125;, remainTime)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _throttle.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    lastTime = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _throttle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>引用赋值：指向同一个对象，相互之间会影响</p>
<p>对象的浅拷贝：只是浅层的拷贝，内部引入对象时，依然会相互影响</p>
<p>对象的深拷贝：两个对象不再有任何关系，不会相互影响</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> valueType = <span class="keyword">typeof</span> value</span><br><span class="line">  <span class="comment">//传进来的值不为null，且typeof出来的类型为object或function才是一个对象</span></span><br><span class="line">  <span class="keyword">return</span> value !== <span class="literal">null</span> &amp;&amp; (valueType === <span class="string">&#x27;object&#x27;</span> || valueType === <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现基本的深拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">originValue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断传入的originValue是否是一个对象类型</span></span><br><span class="line">  <span class="keyword">if</span> (!isObject(originValue)) <span class="keyword">return</span> originValue <span class="comment">//如果不是对象，返回原始值即可</span></span><br><span class="line">  <span class="keyword">const</span> newObj = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> originValue) &#123;</span><br><span class="line">    <span class="comment">//对对象所有的key进行遍历</span></span><br><span class="line">    newObj[key] = deepClone(originValue[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特殊类型处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> valueType = <span class="keyword">typeof</span> value</span><br><span class="line">  <span class="keyword">return</span> value !== <span class="literal">null</span> &amp;&amp; (valueType === <span class="string">&#x27;object&#x27;</span> || valueType === <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊类型的处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">originValue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断是否是一个Set类型</span></span><br><span class="line">  <span class="keyword">if</span> (originValue <span class="keyword">instanceof</span> <span class="built_in">Set</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Set</span>([...originValue])</span><br><span class="line">  <span class="comment">//判断是否是一个Map类型</span></span><br><span class="line">  <span class="keyword">if</span> (originValue <span class="keyword">instanceof</span> <span class="built_in">Map</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Map</span>([...originValue])</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断如果是一个Symbol的value，则创建一个新的Symbol</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> originValue === <span class="string">&#x27;symbol&#x27;</span>) <span class="keyword">return</span> <span class="built_in">Symbol</span>(originValue.description)</span><br><span class="line">  <span class="comment">//判断传入的originValue不是对象类型或者是一个函数对象类型，返回原始值即可</span></span><br><span class="line">  <span class="keyword">if</span> (!isObject(originValue) || <span class="keyword">typeof</span> originValue === <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span> originValue</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newObj = <span class="built_in">Array</span>.isArray(originValue) ? [] : &#123;&#125; <span class="comment">//判断传入的是数组还是对象</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> originValue) &#123;</span><br><span class="line">    newObj[key] = deepClone(originValue[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如Symbol作为key，通过for循环遍历时是遍历不到的，需要特殊处理</span></span><br><span class="line">  <span class="keyword">const</span> symbolKeys = <span class="built_in">Object</span>.getOwnPropertySymbols(originValue) <span class="comment">//从原始对象中取出所有以Symbol作为key的属性</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> sKey <span class="keyword">of</span> symbolKeys) &#123;</span><br><span class="line">    <span class="comment">//使用for of遍历取出数组元素的值</span></span><br><span class="line">    newObj[sKey] = deepClone(originValue[sKey])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>循环引用拷贝处理(重点)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> valueType = <span class="keyword">typeof</span> value</span><br><span class="line">  <span class="keyword">return</span> value !== <span class="literal">null</span> &amp;&amp; (valueType === <span class="string">&#x27;object&#x27;</span> || valueType === <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决循环引用的拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">originValue, map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//使用WeakMap弱引用，使对象想要销毁时能够销毁</span></span><br><span class="line">  <span class="keyword">if</span> (originValue <span class="keyword">instanceof</span> <span class="built_in">Set</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Set</span>([...originValue])</span><br><span class="line">  <span class="keyword">if</span> (originValue <span class="keyword">instanceof</span> <span class="built_in">Map</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Map</span>([...originValue])</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> originValue === <span class="string">&#x27;symbol&#x27;</span>) <span class="keyword">return</span> <span class="built_in">Symbol</span>(originValue.description)</span><br><span class="line">  <span class="keyword">if</span> (!isObject(originValue) || <span class="keyword">typeof</span> originValue === <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span> originValue</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (map.has(originValue)) <span class="keyword">return</span> map.get(originValue) <span class="comment">//如果对象有属性又指向这个对象，直接将这个对象返回</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> newObj = <span class="built_in">Array</span>.isArray(originValue) ? [] : &#123;&#125;</span><br><span class="line">  map.set(originValue, newObj) <span class="comment">//将newObj对象暂存到map里面</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> originValue) &#123;</span><br><span class="line">    newObj[key] = deepClone(originValue[key], map) <span class="comment">//在调用第二次deepClone将map传进去，保证第二次和第一次使用的是同一个map</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> symbolKeys = <span class="built_in">Object</span>.getOwnPropertySymbols(originValue)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> sKey <span class="keyword">of</span> symbolKeys) &#123;</span><br><span class="line">    newObj[sKey] = deepClone(originValue[sKey], map) <span class="comment">//在调用第二次deepClone将map传进去</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h3><p>eventBus-Store:<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvZGVyd2h5L2h5LWV2ZW50LXN0b3Jl">https://github.com/coderwhy/hy-event-store<i class="fa fa-external-link-alt"></i></span></p>
<p>自定义事件总线属于一种观察者模式，包括三个角色：</p>
<ul>
<li>发布者(Publisher):发出事件(Event)</li>
<li>订阅者(Subscriber):订阅事件(Event),并且会进行响应(Handler)</li>
<li>事件总线(EventBus):无论是发布者还是订阅者都是通过事件总线作为中台的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.eventBus = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">on</span>(<span class="params">eventName, eventCallback, thisArg</span>)</span> &#123; <span class="comment">//监听事件</span></span><br><span class="line">    <span class="comment">//事件名称  事件回调  this参数</span></span><br><span class="line">    <span class="keyword">let</span> handlers = <span class="built_in">this</span>.eventBus[eventName]; <span class="comment">//根据事件名从对象中取要执行的函数数组(多次监听就是一个数组)</span></span><br><span class="line">    <span class="keyword">if</span> (!handlers) &#123; <span class="comment">//第一次进来时是为空的，取不到</span></span><br><span class="line">      handlers = []； <span class="comment">//赋默认值</span></span><br><span class="line">      <span class="built_in">this</span>.eventBus[eventName] = handlers; <span class="comment">//将默认值存进对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    handlers.push(&#123; <span class="comment">//将事件和this参数存进数组</span></span><br><span class="line">      eventCallback,</span><br><span class="line">      thisArg</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">off</span>(<span class="params">eventName, eventCallback</span>)</span> &#123; <span class="comment">//取消监听</span></span><br><span class="line">    <span class="keyword">const</span> handlers = <span class="built_in">this</span>.eventBus[eventName]; <span class="comment">//根据事件名取函数</span></span><br><span class="line">    <span class="keyword">if</span> (!handlers) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">const</span> newHandlers = [...handlers]; <span class="comment">//将原来的对象拷贝一份</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newHandlers.length; i++) &#123; <span class="comment">//一边遍历一边移除</span></span><br><span class="line">      <span class="keyword">const</span> handler = newHandlers[i]; <span class="comment">//取出对应的事件对象</span></span><br><span class="line">      <span class="keyword">if</span> (handler.eventCallback === eventCallback) &#123;  <span class="comment">//如果取出的对象里面的函数和传进来的函数相等</span></span><br><span class="line">        <span class="keyword">const</span> index = handlers.indexOf(handler); <span class="comment">//从原数组里面找到要删除的函数的下标</span></span><br><span class="line">        handler.splice(index, <span class="number">1</span>); <span class="comment">//从原数组中删除</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">emit</span>(<span class="params">eventName, ...payload</span>)</span> &#123; <span class="comment">//发射事件</span></span><br><span class="line">    <span class="keyword">const</span> handlers = <span class="built_in">this</span>.eventBus[eventName]; <span class="comment">//根据事件名取出要执行的函数</span></span><br><span class="line">    <span class="keyword">if</span> (!handlers) <span class="keyword">return</span>; <span class="comment">//没有值的时候不进行操作</span></span><br><span class="line">    handlers.forEach(<span class="function"><span class="params">handler</span> =&gt;</span> &#123; <span class="comment">//遍历存储的事件并一一执行</span></span><br><span class="line">      handler.eventCallback.apply(handler.thisArg, payload); <span class="comment">//执行的时候将this传进去</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> EventBus()</span><br><span class="line"></span><br><span class="line">eventBus.on(<span class="string">&quot;aaa&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">payload</span>) </span>&#123; <span class="comment">//监听</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;jianting&quot;</span>, payload);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">eventBus.emit(<span class="string">&quot;aaa&quot;</span>, <span class="number">123</span>); <span class="comment">//发射</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对应的数据解构</span></span><br><span class="line"><span class="comment">//eventBus = &#123;</span></span><br><span class="line"><span class="comment">//  aaa: [fn1, fn2, &#123;eventCallBack, this&#125;],</span></span><br><span class="line"><span class="comment">//  bbb: [fn4, fn5]</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="手写-flat"><a href="#手写-flat" class="headerlink" title="手写 flat"></a>手写 flat</h3><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NzgwOTU4NC9hcnRpY2xlL2RldGFpbHMvMTIxNzgwMDUy">https://blog.csdn.net/weixin_47809584/article/details/121780052<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="数组交并差"><a href="#数组交并差" class="headerlink" title="数组交并差"></a>数组交并差</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b])</span><br><span class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function">(<span class="params">x</span>) =&gt;</span> b.has(x)))</span><br><span class="line"><span class="comment">// set &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function">(<span class="params">x</span>) =&gt;</span> !b.has(x)))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>188-git详细介绍</title>
    <url>/20220315/188-git%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Git-介绍"><a href="#Git-介绍" class="headerlink" title="Git 介绍"></a>Git 介绍</h4><p>免费开源的分布式版本控制工具</p>
<p>版本控制：记录文件内容变化，以便将来查阅特定版本修订情况的系统(记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换)</p>
<p>三个区：</p>
<ul>
<li><p>工作区：代码存放的磁盘的目录的位置（写代码）</p>
</li>
<li><p>暂存区：增删没有记录（临时存储）</p>
</li>
<li><p>本地库：代码无法再删除（历史版本）</p>
<ul>
<li>工作区-&gt; git add -&gt; 暂存区-&gt; git commit -&gt; 本地库 -&gt; push -&gt; 远程库</li>
</ul>
</li>
<li><p>远程库：从本地将代码推送到远程库</p>
</li>
</ul>
<p>代码托管中心：基于网络服务器的远程代码仓库，简称为远程库</p>
<h4 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h4><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=">https://git-scm.com/<i class="fa fa-external-link-alt"></i></span></p>
<p>安装时全程默认即可</p>
<p>安装目录最好是非中文，目录名不带空格</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --version #查看当前安装的git版本</span><br></pre></td></tr></table></figure>

<h4 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h4><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git config –global user.name 用户名</td>
<td>设置用户签名(真实与否皆可，首次安装必须设置，否则无法提交代码)</td>
</tr>
<tr>
<td>git config –global user.email 邮箱</td>
<td>设置用户签名(和将来登陆的 github 或其它代码托管中心的账号没有任何关系，只是用来区分不同操作者的身份)</td>
</tr>
<tr>
<td>git init</td>
<td>初始化本地库</td>
</tr>
<tr>
<td>git status</td>
<td>查看本地库状态</td>
</tr>
<tr>
<td>git add 文件名</td>
<td>添加到暂存区</td>
</tr>
<tr>
<td>git commit -m “日志信息” 文件名</td>
<td>提交到本地库</td>
</tr>
<tr>
<td>git reflog</td>
<td>查看历史记录</td>
</tr>
<tr>
<td>git reset –hard 版本号</td>
<td>版本穿梭</td>
</tr>
</tbody></table>
<p>查看用户签名是否设置成功：C:\Users\ysj，打开.gitconfig</p>
<h5 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h5><p>打开项目所在目录，执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init #所在目录执行以后会出现.git的隐藏文件夹</span><br></pre></td></tr></table></figure>

<h5 id="查看本地库状态"><a href="#查看本地库状态" class="headerlink" title="查看本地库状态"></a>查看本地库状态</h5><p>打开项目所在目录，执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>执行后出现三行日志：</p>
<ul>
<li>当前本地库所在分支</li>
<li>当前是否有提交过</li>
<li>提示有未被追踪文件，需要使用 git add 命令追踪(未追踪的文件名为红色)</li>
</ul>
<h5 id="添加暂存区"><a href="#添加暂存区" class="headerlink" title="添加暂存区"></a>添加暂存区</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add hello.txt #将hello.txt添加到暂存区</span><br><span class="line">git add . #将当前工作区的所有文件都做一次add</span><br></pre></td></tr></table></figure>

<p>此时再执行 git status,已追踪的文件为绿色</p>
<p>删除暂存区文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm --cached hello.txt #只是删暂存区的文件，工作区文件还在，hello.txt变为未追踪状态</span><br></pre></td></tr></table></figure>

<h5 id="提交本地库"><a href="#提交本地库" class="headerlink" title="提交本地库"></a>提交本地库</h5><p>将暂存区的文件提交到本地库，形成历史版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;第一次提交&quot; hello.txt #-m：版本日志信息</span><br><span class="line">git reflog #查看版本日志信息</span><br><span class="line">git log #查看详细日志信息</span><br></pre></td></tr></table></figure>

<h5 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h5><p>修改文件后 git status、git add(添加暂存区)、git commit(提交本地库)即可</p>
<h5 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog #查看版本号，复制想要回退到的哪个版本的版本号</span><br><span class="line">git reset --hard 版本号 #回退到指定版本，此时再git reflog，指针已经指向回退到的版本</span><br></pre></td></tr></table></figure>

<h4 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h4><p>在版本控制过程中，同时推进多个任务，为每个任务，创建每个任务单独的分支</p>
<p>优点：</p>
<ul>
<li>同时并行推进多个功能开发，提高开发效率</li>
<li>各个分支开发过程中互不影响</li>
</ul>
<h5 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h5><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git branch 分支名</td>
<td>创建分支</td>
</tr>
<tr>
<td>git branch -v</td>
<td>查看分支</td>
</tr>
<tr>
<td>git checkout 分支名</td>
<td>切换分支</td>
</tr>
<tr>
<td>git merge 分支名</td>
<td>把指定的分支合并到当前分支上</td>
</tr>
<tr>
<td>git push 远程地址别名(或远程地址) 分支名</td>
<td>将新建的分支同步到远程仓库</td>
</tr>
</tbody></table>
<p><strong>查看分支</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -v #查看当前的分支</span><br></pre></td></tr></table></figure>

<p><strong>创建分支</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch hot-fix #hot-fix为分支名</span><br><span class="line">git branch -v #查看分支</span><br></pre></td></tr></table></figure>

<p><strong>切换分支</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout hot-fix #hot-fix为分支名</span><br><span class="line">git branch -v #查看分支,当前分支显示为绿色，括号中的即为当前所在分支</span><br><span class="line">git reflog #查看分支日志信息</span><br></pre></td></tr></table></figure>

<p><strong>合并分支(正常合并)</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master #切换回主分支</span><br><span class="line">git merge hot-fix #将hot-fix分支合并到当前所在分支(master)上面</span><br><span class="line"><span class="meta">#</span><span class="bash">合并分支只会修改当前所在分支(master)，不会修改合并过来的分支(hot-fix)</span></span><br></pre></td></tr></table></figure>

<p><strong>合并分支(冲突合并)</strong></p>
<p>两个分支进行合并，但它们含有对==同一个文件的同一个位置==有完全不同的修改，则在合并时出现冲突，git 无法决断该保留该文件哪个分支的修改。<br>这种情况下 git 会保留两个文件的内容，由自己手动修改文件，决定留哪个内容后，再重新提交</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">手动修改文件</span></span><br><span class="line">git status #查看状态，仍然是红色的，没有被追踪</span><br><span class="line">git add hello.txt #添加到暂存区</span><br><span class="line">git commit -m &quot;merge test&quot; #提交到本地库,提交时不要带文件名才能成功合并</span><br></pre></td></tr></table></figure>

<h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==">https://github.com/<i class="fa fa-external-link-alt"></i></span></p>
<h5 id="远程仓库操作常用命令"><a href="#远程仓库操作常用命令" class="headerlink" title="远程仓库操作常用命令"></a>远程仓库操作常用命令</h5><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git remote -v</td>
<td>查看当前所有远程地址别名</td>
</tr>
<tr>
<td>git remote add 别名 远程地址</td>
<td>为远程地址取别名(连接到远程地址)</td>
</tr>
<tr>
<td>git remote remove 远程地址别名</td>
<td>删除别名</td>
</tr>
<tr>
<td>git push -u 别名 分支</td>
<td>推送本地分支上的内容到远程仓库(没有别名时使用链接)</td>
</tr>
<tr>
<td>git clone 远程地址</td>
<td>将远程仓库的内容克隆到本地</td>
</tr>
<tr>
<td>git pull 远程仓库地址别名 远程分支名</td>
<td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td>
</tr>
<tr>
<td>git pull 远程仓库别名 远程分支名 –allow-unrelated-histories</td>
<td>如果直接 pull 不行可在后面加上–allow……命令</td>
</tr>
</tbody></table>
<h5 id="创建远程库"><a href="#创建远程库" class="headerlink" title="创建远程库"></a>创建远程库</h5><ol>
<li><p>打开官网</p>
</li>
<li><p>右上角登陆 sign in</p>
</li>
<li><p>点击右上角+号，New repository,创建远程仓库</p>
</li>
<li><p>输入远程仓库名字(一般与本地仓库一致),其它默认，点击下方 Create repository,创建仓库</p>
</li>
<li><p>创建成功后可看到两个链接(HTTPS、SSH),复制远程库链接(此处先复制 https)</p>
</li>
<li><p>为远程仓库创建别名(别名最好与远程仓库的名字保持一致)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add git-demo https://github.com/ysj5/git-demo.git</span><br></pre></td></tr></table></figure></li>
<li><p>git remote -v 查看别名</p>
</li>
</ol>
<h5 id="代码推送-push"><a href="#代码推送-push" class="headerlink" title="代码推送 push"></a>代码推送 push</h5><p>推动本地库到远程库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切回master分支</span></span><br><span class="line">git push git-demo master #将本地master分支推送到远程库，没有别名就使用地址</span><br><span class="line"><span class="meta">#</span><span class="bash">弹出窗口，提示登陆(一般只需第一次时登陆，登陆后账号会保存在windows凭据管理器里面)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">登陆后推送成功</span></span><br></pre></td></tr></table></figure>

<p>打开浏览器，刷新，会发现本地仓库的代码已经在远程仓库上了</p>
<h5 id="代码拉取-pull"><a href="#代码拉取-pull" class="headerlink" title="代码拉取 pull"></a>代码拉取 pull</h5><p>拉取远程库代码到本地库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull git-demo master #将远程仓库的代码拉取到本地master分支上</span><br><span class="line"><span class="meta">#</span><span class="bash">此时本地库的代码已经和远程仓库同步了</span></span><br></pre></td></tr></table></figure>

<h5 id="代码克隆-clone"><a href="#代码克隆-clone" class="headerlink" title="代码克隆 clone"></a>代码克隆 clone</h5><ol>
<li><p>新建文件夹(拉取的远程仓库代码将会放到这里)</p>
</li>
<li><p>进入新建的文件夹，打开 git 命令窗口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/ysj5/git-demo.git</span><br><span class="line"><span class="meta">#</span><span class="bash">克隆代码不需要登陆账号</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>克隆下来的代码修改后，执行 push 命令，需要先登陆账号，并且账号在团队中，才能成功 push</p>
<p>执行克隆命令后会自动做三件事情</p>
<ul>
<li>拉取代码</li>
<li>初始化本地仓库(会在当前文件夹下新建一个与远程仓库名字相同的文件夹，里面放的代码)</li>
<li>创建远程地址的别名(默认为 origin)</li>
</ul>
<h5 id="团队内协作"><a href="#团队内协作" class="headerlink" title="团队内协作"></a>团队内协作</h5><p>邀请其它成员加入团队：</p>
<ul>
<li>进入远程仓库</li>
<li>点击 settings</li>
<li>点击 Manage access</li>
<li>点击绿色按钮，Invite collaborator</li>
<li>在弹出的窗口中输入要邀请的成员的 github 账号</li>
<li>添加账号到此仓库</li>
<li>点击 Pending Invite，复制邀请函(一个链接地址)</li>
</ul>
<p>被邀请的成员</p>
<ul>
<li>登陆进 github</li>
<li>将邀请函地址粘贴到地址栏，确定</li>
<li>点击绿色按钮 Accept invitation 同意邀请,(Decline:婉拒)</li>
<li>此时就可以看到邀请人的仓库</li>
<li>已具有代码推送权限，可进行代码推送</li>
</ul>
<h5 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h5><p>其它团队被邀请人</p>
<ul>
<li>登陆进 github</li>
<li>将邀请函地址粘贴到地址栏，确定</li>
<li>点击右上角 Fork</li>
<li>此时仓库下面就有了邀请人的远程仓库</li>
</ul>
<p>修改代码后推送到邀请人仓库：</p>
<ul>
<li>进入仓库，点击 Pull requests</li>
<li>点击右边绿色按钮,New pull request</li>
<li>点击右边绿色按钮,Create pull request</li>
<li>写提交信息</li>
<li>留言</li>
<li>点击右下角绿色按钮,Create pull request</li>
<li>邀请人账号登陆进入仓库时，会看到 Pull requests 有个 1,点击</li>
<li>点击查看</li>
<li>点击 Merge pull request,同意推送请求,点击 Confirm merge,确认同意合并</li>
</ul>
<h5 id="SSH-免密登陆"><a href="#SSH-免密登陆" class="headerlink" title="SSH 免密登陆"></a>SSH 免密登陆</h5><ol>
<li><p>进入目录 C:\Users\ysj (ysj 为自己电脑的用户名)</p>
</li>
<li><p>右键,Git Bash Here,运行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 584983450@qq.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> -t rsa 指定用rsa(非对称加密协议)加密算法生成</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -C 描述</span></span><br><span class="line"><span class="meta">#</span><span class="bash">运行命令后，全部默认，直接敲回车</span></span><br></pre></td></tr></table></figure></li>
<li><p>此时会发现目录下生成了.ssh 文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd .ssh，#进入生成的.shh文件夹</span><br><span class="line">ll #查看文件(公钥和私钥)</span><br><span class="line">cat id_rsa.pub #查看公钥的内容并复制</span><br></pre></td></tr></table></figure></li>
<li><p>登陆 github，点击右上角头像，选择 Settings</p>
</li>
<li><p>选择 SSH and GPG keys</p>
</li>
<li><p>点击 New SSH key</p>
</li>
<li><p>title 自定义</p>
</li>
<li><p>key 输入刚刚复制的公钥,点击 Add SSH key</p>
</li>
<li><p>进入仓库，点 code，点击 SSH，复制链接</p>
</li>
<li><p>运行拉取命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull ssh链接 master #此时已不再需要输入密码(第一次会询问，输入yes即可)</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Idea-集成-Git"><a href="#Idea-集成-Git" class="headerlink" title="Idea 集成 Git"></a>Idea 集成 Git</h4><p>配置忽略文件：</p>
<ul>
<li>创建忽略规则文件 xxx.ignore(前缀随意，建议为 git.ignore)</li>
<li>文件模板</li>
</ul>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># Compiled <span class="keyword">class</span> file</span><br><span class="line">*.<span class="keyword">class</span> <span class="comment">//忽略class文件</span></span><br></pre></td></tr></table></figure>

<h4 id="Gitee-码云"><a href="#Gitee-码云" class="headerlink" title="Gitee 码云"></a>Gitee 码云</h4><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20v">https://gitee.com/<i class="fa fa-external-link-alt"></i></span></p>
<h5 id="删除仓库"><a href="#删除仓库" class="headerlink" title="删除仓库"></a>删除仓库</h5><p>进入仓库，点击右边管理，仓库设置，删除仓库</p>
<h5 id="创建远程库-1"><a href="#创建远程库-1" class="headerlink" title="创建远程库"></a>创建远程库</h5><p>点击右上角+号</p>
<p>码云服务器在国内，推荐使用 https</p>
<h5 id="码云连接-Github"><a href="#码云连接-Github" class="headerlink" title="码云连接 Github"></a>码云连接 Github</h5><p>进行代码的复制和迁移</p>
<p>步骤：</p>
<ul>
<li>点击新建仓库</li>
<li>拉到最底部，选择导入已有仓库</li>
<li>粘贴 github 仓库的 https 链接</li>
<li>点击创建</li>
</ul>
<p>若 github 仓库更新后，码云仓库想要同步代码</p>
<ul>
<li>进入仓库</li>
<li>点击仓库名字右边的刷新按钮即可同步</li>
</ul>
<h4 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h4><p>基于局域网的代码托管平台，使用 MIT 许可证的基于网络的 Git 仓库管理工具</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tLw==">https://about.gitlab.com/<i class="fa fa-external-link-alt"></i></span></p>
<h5 id="GitLab-服务器的搭建和部署"><a href="#GitLab-服务器的搭建和部署" class="headerlink" title="GitLab 服务器的搭建和部署"></a>GitLab 服务器的搭建和部署</h5><p>略</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="在-github-中使用"><a href="#在-github-中使用" class="headerlink" title="在 github 中使用"></a>在 github 中使用</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init #初始化一个仓库</span><br><span class="line">git add . #将当前目录所有东西添加到暂存区</span><br><span class="line">git commit -m &quot;初始化项目&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">去github新建一个远程仓库  New Repositories</span></span><br><span class="line"><span class="meta">#</span><span class="bash">填入远程仓库名字</span></span><br><span class="line"><span class="meta">#</span><span class="bash">下方的readme和开源协议先不选</span></span><br><span class="line">git remote add origin https://github.com/ysj5/LearnMiniProgram.git   #将本地仓库和远程仓库关联</span><br><span class="line">git push -u origin master #将本地代码push上去</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;知识点1&quot;</span><br><span class="line">git tag 01_知识点1</span><br><span class="line">git tag #查看tag</span><br><span class="line">git log #查看之前有哪些提交</span><br><span class="line">git reset 51f8b15 #回退到指定版本，后面为版本号，不需要全部复制</span><br><span class="line">git reset --hard 51f8b15   #强制回退</span><br><span class="line">git status</span><br><span class="line">git push --tags #本地tags push</span><br><span class="line"></span><br><span class="line">git checkout 01_知识点1</span><br></pre></td></tr></table></figure>

<h4 id="上传本地文件夹到-git-仓库"><a href="#上传本地文件夹到-git-仓库" class="headerlink" title="上传本地文件夹到 git 仓库"></a>上传本地文件夹到 git 仓库</h4><ol>
<li><p>新建仓库</p>
</li>
<li><p>右键项目文件夹，选择 Git Bash Here</p>
</li>
<li><p>输入代码，把 git 上面的仓库克隆到本地</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git colne https://gitee.com/ysj5/pet-mall.git  <span class="comment">#仓库地址</span></span><br></pre></td></tr></table></figure></li>
<li><p>克隆后本地项目文件夹会多出一个与仓库名一样的文件夹</p>
</li>
<li><p>把本地项目文件夹下的所有文件复制到新多出的文件夹下</p>
</li>
<li><p>cd pet-mall，即进入新文件夹下面</p>
</li>
<li><p>一次完成操作即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交信息&quot;</span><br><span class="line">git push -u origin master  #把本地仓库push到github上面</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="在-VScode-中"><a href="#在-VScode-中" class="headerlink" title="在 VScode 中"></a>在 VScode 中</h4><p>ctrl+shift+p,输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone #下载远程仓库的代码</span><br></pre></td></tr></table></figure>

<p>将本地文件夹与远程仓库关联</p>
<ol>
<li>git init 初始化本地仓库</li>
<li>git remoete add origin 远程仓库地址</li>
<li>git add .</li>
<li>git commit -m “”</li>
<li>git push -u origin master</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>189-微信小程序</title>
    <url>/20220315/189-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>官网：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay8=">https://developers.weixin.qq.com/miniprogram/dev/framework/<i class="fa fa-external-link-alt"></i></span></p>
<p>小程序大小不能超过 8M</p>
<p>小程序开发主要分成三部分：</p>
<ul>
<li>页面布局：WXML</li>
<li>页面样式：WXSS</li>
<li>页面脚本：JavaScript + WXS</li>
</ul>
<p>开发过程：</p>
<p>注册账号，申请 AppID</p>
<p>登录微信公众平台：<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tLw==">https://mp.weixin.qq.com/<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3d4YW1wL2RldnByb2ZpbGUvZ2V0X3Byb2ZpbGU/dG9rZW49MTkxMTkzNTUxNSZhbXA7bGFuZz16aF9DTg==">https://mp.weixin.qq.com/wxamp/devprofile/get_profile?token=1911935515&amp;lang=zh_CN<i class="fa fa-external-link-alt"></i></span></p>
<p>查看 AppID： 个人中心 -&gt; 开发 -&gt; 开发设置</p>
<p>wx7cccf9bf72cfe5b4</p>
<h4 id="第一个小程序应用"><a href="#第一个小程序应用" class="headerlink" title="第一个小程序应用"></a>第一个小程序应用</h4><p>小程序：一个大的 App，App 下面有多个 page，每个 page 多个组件</p>
<p>小程序工具栏普通编译-&gt;添加编译模式，可选择指定的页面作为启动页面</p>
<p>App -&gt; 多个界面 -&gt; 多个组件</p>
<p>文件结构：</p>
<ul>
<li>App<ul>
<li>app.js //创建 App 实例的代码以及一些全局相关的内容</li>
<li>app.json //全局的一些配置，比如 window/tabbar 等</li>
<li>app.wxss //全局的一些样式配置</li>
</ul>
</li>
<li>Page<ul>
<li>page.js //创建 page 实例的代码，以及页面相关的内容</li>
<li>page.json //业务单独的配置，比如页面对应的 window 配置,usingComponents</li>
<li>page.wxml //页面的 wxml 布局代码</li>
<li>page.wxss //页面的样式配置</li>
</ul>
</li>
<li>Component<ul>
<li>component.js //创建 component 实例的代码，以及组件内部的内容</li>
<li>component.json //组件内部的配置，比如当前组件使用了别的组件</li>
<li>component.wxml //组件的 wxml 布局代码</li>
<li>component.wxss //组件的样式配置</li>
</ul>
</li>
</ul>
<p>==小程序数组或者对象最后一项后面不能有逗号==</p>
<p>app.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;pages&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;pages/about/about&quot;</span>, <span class="comment">//页面路径</span></span><br><span class="line">    <span class="string">&quot;pages/home/home&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="项目使用-Git-管理"><a href="#项目使用-Git-管理" class="headerlink" title="项目使用 Git 管理"></a>项目使用 Git 管理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init #初始化一个仓库</span><br><span class="line">git add . #将当前目录所有东西添加到暂存区</span><br><span class="line">git commit -m &quot;初始化项目&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">去github新建一个远程仓库  New Repositories</span></span><br><span class="line"><span class="meta">#</span><span class="bash">填入远程仓库名字</span></span><br><span class="line"><span class="meta">#</span><span class="bash">下方的readme和开源协议先不选</span></span><br><span class="line">git remote add origin https://github.com/ysj5/LearnMiniProgram.git   #将本地仓库和远程仓库关联</span><br><span class="line">git push -u origin master #将本地代码push上去</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;知识点1&quot;</span><br><span class="line">git tag 01_知识点1</span><br><span class="line">git tag #查看tag</span><br><span class="line">git log #查看之前有哪些提交</span><br><span class="line">git reset 51f8b15 #回退到指定版本，后面为版本号，不需要全部复制</span><br><span class="line">git reset --hard 51f8b15   #强制回退</span><br><span class="line">git status</span><br><span class="line">git push --tags #本地tags push</span><br><span class="line"></span><br><span class="line">git checkout 01_知识点1</span><br></pre></td></tr></table></figure>

<h4 id="小程序的初步了解"><a href="#小程序的初步了解" class="headerlink" title="小程序的初步了解"></a>小程序的初步了解</h4><p>小程序不允许 DOM 操作</p>
<p>数据绑定：使用 Mustache 语法，双大括号</p>
<p>列表渲染：wx:for 循环</p>
<p>单标签需以 /&gt; 结尾</p>
<h5 id="小程序的-MVVM-架构"><a href="#小程序的-MVVM-架构" class="headerlink" title="小程序的 MVVM 架构"></a>小程序的 MVVM 架构</h5><p>M:Model V:View VM:ViewModel</p>
<p>命令式编程：原生操作 DOM</p>
<p>声明式编程：Vue/React/Angular</p>
<p>小程序很多开发需求被规定在了配置文件中</p>
<h5 id="project-和-sitemap"><a href="#project-和-sitemap" class="headerlink" title="project 和 sitemap"></a>project 和 sitemap</h5><p>app.json：全局相关配置</p>
<p>page.json：页面配置</p>
<p>sitemap.json：小程序搜索，页面收录设置，允许用户通过关键字搜索到小程序</p>
<h5 id="全局配置-App-和局部配置-page"><a href="#全局配置-App-和局部配置-page" class="headerlink" title="全局配置 App 和局部配置 page"></a>全局配置 App 和局部配置 page</h5><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9jb25maWd1cmF0aW9uL2FwcC5odG1s">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html<i class="fa fa-external-link-alt"></i></span></p>
<p>app.json</p>
<p><strong>pages</strong>：页面路径列表</p>
<ul>
<li>用于指定小程序由哪些页面组成，每一项都对应一个页面的路径信息</li>
<li>小程序中的都必须在 pages 中进行注册</li>
<li>手动写注册路径，保存之后会自动新建一个 pages</li>
</ul>
<p><strong>window</strong>：全局默认的窗口展示</p>
<ul>
<li>用户指定窗口如何展示，其中包含很多其它属性</li>
</ul>
<p><strong>tabBar</strong>：顶部 tab 栏的展示</p>
<p>编译模式：指定编译的启动页，不用每次都在首页</p>
<h5 id="小程序双线程模型"><a href="#小程序双线程模型" class="headerlink" title="小程序双线程模型"></a>小程序双线程模型</h5><p>渲染层：执行 wxml 和 wxss 文件，使用 WebView 线程渲染，一个页面使用用一个 WebView</p>
<p>逻辑层：执行 js 文件，使用 jsCore 运行 JS 脚本</p>
<h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9hcGkvQXBwLmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html<i class="fa fa-external-link-alt"></i></span></p>
<p>onLaunch：只执行一次，发送网络请求、获取用户信息</p>
<p>每个小程序都需要在 app.js 中调用 app 方法注册小程序示例</p>
<h5 id="注册-App"><a href="#注册-App" class="headerlink" title="注册 App"></a>注册 App</h5><p>小程序打开场景</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9zY2VuZS1saXN0Lmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onShow: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;	<span class="comment">//每次进入时都会执行</span></span><br><span class="line">	<span class="built_in">console</span>.log(options.scene);</span><br><span class="line">  wx.getUserInfo(&#123;</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);	<span class="comment">//用户信息</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bindtap=<span class="string">&quot;userClick&quot;</span>  监听点击事件</span><br></pre></td></tr></table></figure>

<p>获取用户信息另一种方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button bindtap=<span class="string">&quot;getUserProfile&quot;</span>&gt; 获取头像昵称 &lt;/button&gt;</span><br><span class="line"><span class="function"><span class="title">getUserProfile</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="comment">// 获取用户信息</span></span><br><span class="line">		wx.getUserProfile(&#123;</span><br><span class="line">				<span class="attr">desc</span>: <span class="string">&#x27;用于完善会员资料&#x27;</span>,</span><br><span class="line">				<span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">						<span class="built_in">console</span>.log(res.userInfo);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用组件展示用户信息</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9vcGVuLWRhdGEuaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">open-data</span> <span class="attr">type</span>=<span class="string">&quot;userNickName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取 App()产生的示例对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="attr">globalData</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;coderwhy&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//app.js里面的变量均为全局变量,可进行共享</span></span><br><span class="line"><span class="keyword">const</span> app = getApp();</span><br><span class="line"><span class="built_in">console</span>.log(app.globalData.name);</span><br><span class="line"><span class="built_in">console</span>.log(app.globalData.age);</span><br></pre></td></tr></table></figure>

<h5 id="注册-page"><a href="#注册-page" class="headerlink" title="注册 page"></a>注册 page</h5><p>每个页面对应的 js 文件调用 Page({})方法称为注册一个页面</p>
<p>页面有自己的生命周期函数</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9hcGkvUGFnZS5odG1s">https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onLoad: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="comment">// 监听页面的生命周期函数</span></span><br><span class="line"><span class="function"><span class="title">onLoad</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	wx.request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://123.207.32.32:8080/recommend&#x27;</span>,	<span class="comment">//会报警告，需配置到控制台或者 详情 -&gt; 不校验合法域名</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//监听页面滚动</span></span><br><span class="line"><span class="function"><span class="title">onPageScroll</span>(<span class="params">obj</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj.scrollTop)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//监听页面滚动到底部,上拉加载更多</span></span><br><span class="line"><span class="function"><span class="title">onReachBottom</span>(<span class="params"></span>)</span> &#123; <span class="comment">//页面滚动到底部后自动调用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;页面滚动到底部&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下拉刷新，现在json文件里配置enablePullDownRefresh=true</span></span><br><span class="line"><span class="function"><span class="title">onPullDownRefresh</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;下拉刷新的事件&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="回调函数中-this-指向"><a href="#回调函数中-this-指向" class="headerlink" title="回调函数中 this 指向"></a>回调函数中 this 指向</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">onLoad</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="built_in">this</span>;</span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setData(&#123; <span class="comment">//此处this指向为正确的</span></span><br><span class="line">        <span class="attr">list</span>: res.list</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="comment">//此处this为undefined</span></span><br><span class="line">      _this.setData(&#123; <span class="comment">//此时this指向为正确的</span></span><br><span class="line">        <span class="attr">list</span>: res.list</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h4><h5 id="text"><a href="#text" class="headerlink" title="text"></a>text</h5><p>用于显示文本，类似 span 标签，行内元素</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC90ZXh0Lmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/component/text.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/text/text.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>基本使用\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认情况下text文本长安无法选中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">user-select</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span>此处文本可以选中2222\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">user-select</span>&gt;</span>此处文本可以选中2\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- space:决定空格的大小 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ensp:半个中文字符大小 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- emsp:一个中文字符大小 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nbsp:根据字体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>Hello World\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&quot;nbsp&quot;</span>&gt;</span>Hello World\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&quot;ensp&quot;</span>&gt;</span>Hello World\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">space</span>=<span class="string">&quot;emsp&quot;</span>&gt;</span>Hello World\n<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- decode属性:是否解码文本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">decode</span>&gt;</span>5 <span class="symbol">&amp;gt;</span> 3<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="button"><a href="#button" class="headerlink" title="button"></a>button</h5><p>用于创建按钮，默认块级元素</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9idXR0b24uaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/component/button.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.size属性: mini --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.type属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;warn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4.plain:镂空效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">plain</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 5.disable:不可用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">disabled</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 6.loading --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">loading</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">loading</span>=<span class="string">&quot;&#123;&#123;isLoading&#125;&#125;&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 7.hover-class:按下时按钮背景颜色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">hover-class</span>=<span class="string">&quot;pressed&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="view"><a href="#view" class="headerlink" title="view"></a>view</h5><p>视图组件，块级元素，独占一行，通常用作容器组件，可放置文本，其它组件</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC92aWV3Lmh0bWw=">https://developers.weixin.qq.com/miniprogram/dev/component/view.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.view基本使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>hahha<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.hover-class:用户按下组件时，显示的样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;beforeAn&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;Aing&quot;</span> <span class="attr">hover-stay-time</span>=<span class="string">&quot;3000&quot;</span>&gt;</span>按下样式<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.hover-stop-propagation:阻止祖先节点的点击态 --&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="image"><a href="#image" class="headerlink" title="image"></a>image</h5><p>可以写成单标签，也可以写成双标签</p>
<p>image 默认有自己的大小：320x240</p>
<p>是一个行内块级元素</p>
<p>src 属性内写绝对路径以 / 开头</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9pbWFnZS5odG1s">https://developers.weixin.qq.com/miniprogram/dev/component/image.html<i class="fa fa-external-link-alt"></i></span></p>
<p>从本地相册选择图片或使用相机拍照</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9tZWRpYS9pbWFnZS93eC5jaG9vc2VJbWFnZS5odG1s">https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 补充：选择相册中的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;handleChooseAlbum&quot;</span>&gt;</span>选中图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;imgPath&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bindload:监听图片加载完成 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lazy-load:图片懒加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span></span></span><br><span class="line"><span class="tag">  <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;10&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://res.wx.qq.com/wxdoc/dist/assets/img/0.4cb08bb4.jpg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bindload</span>=<span class="string">&quot;handleImgLoad&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">lazy-load</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- show-menu-by-longpress：用户长按图片弹出弹窗识别小程序码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span></span></span><br><span class="line"><span class="tag">  <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;10&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://res.wx.qq.com/wxdoc/dist/assets/img/0.4cb08bb4.jpg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">show-menu-by-longpress</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mode:图片展示模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  Page(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">imgPath</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleChooseAlbum</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> _this = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">      wx.chooseImage(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//在相册中选择图片</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 1.取出路径</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> path = res.tempFilePaths[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">          <span class="comment">//2.设置imgPath</span></span></span><br><span class="line"><span class="javascript">          _this.setData(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">imgPath</span>: path,</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleImgLoad</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//监听图片加载完成</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;图片加载完成&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="input"><a href="#input" class="headerlink" title="input"></a>input</h5><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9pbnB1dC5odG1s">https://developers.weixin.qq.com/miniprogram/dev/component/input.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- type：决定弹出的键盘类型（文本输入/数字） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- password：输入密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">password</span> /&gt;</span>&lt; / input &gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- confirm-type：设置键盘右下角按钮文字(type=&quot;text&quot;时有效) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">confirm-type</span>=<span class="string">&quot;go&quot;</span> /&gt;</span>&lt; /input&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- input绑定事件，会传一个event --&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h5><p>实现局部滚动</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9zY3JvbGwtdmlldy5odG1s">https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="css">    <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.item1</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1.水平滚动 scroll-x--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;container1&quot;</span> <span class="attr">scroll-x</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;10&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.垂直滚动 scroll-y--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;container2&quot;</span> <span class="attr">scroll-y</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;10&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 其它事件补充 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;container2&quot;</span> <span class="attr">scroll-y</span> <span class="attr">bindscroll</span>=<span class="string">&quot;handleScroll&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;10&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">handleScroll</span>(<span class="params">event</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(event.detail.scrollTop);  <span class="comment">//当前已经滚动的距离</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="组件共同属性"><a href="#组件共同属性" class="headerlink" title="组件共同属性"></a>组件共同属性</h5><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay92aWV3L2NvbXBvbmVudC5odG1s">https://developers.weixin.qq.com/miniprogram/dev/framework/view/component.html<i class="fa fa-external-link-alt"></i></span></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>描述</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>id、class、style</td>
<td>string</td>
<td>唯一标识、样式类、内联样式</td>
<td></td>
</tr>
<tr>
<td>hidden</td>
<td>boolean</td>
<td>组件是否显示</td>
<td>所有组件默认显示</td>
</tr>
<tr>
<td>data-*</td>
<td>any</td>
<td>自定义属性</td>
<td>组件上触发事件时，会发送给事件处理函数</td>
</tr>
<tr>
<td>bind* / catch*</td>
<td>EventHandler</td>
<td>组件的事件</td>
<td></td>
</tr>
</tbody></table>
<h4 id="WXSS-amp-WXML-amp-WXS"><a href="#WXSS-amp-WXML-amp-WXS" class="headerlink" title="WXSS&amp;WXML&amp;WXS"></a>WXSS&amp;WXML&amp;WXS</h4><h5 id="样式的三种写法"><a href="#样式的三种写法" class="headerlink" title="样式的三种写法"></a>样式的三种写法</h5><p>行内样式、页面样式、全局样式</p>
<p>app.wxss 里面的都为全局样式</p>
<p>三种样式作用域同一个组件优先级：行内样式 &gt; 页面样式 &gt; 全局样式</p>
<p>选择器权重：!important &gt; style=”” &gt; #id &gt; .class &gt; element</p>
<h5 id="wxss-扩展"><a href="#wxss-扩展" class="headerlink" title="wxss 扩展"></a>wxss 扩展</h5><p><strong>尺寸单位</strong></p>
<p>rpx(responsive pixel)：可以根据屏幕宽度进行自适应，规定屏幕宽度为 750rpx</p>
<p>0.5px = 1rpx (iPhone6 上)</p>
<p>建议：开发微信小程序时使用==iPhone6==作为视觉稿的标准</p>
<p>前端适配：em rem vw vh</p>
<p><strong>样式导入</strong></p>
<p>样式分离之后再导入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./style/box.wxss&#x27;</span>; <span class="comment">/*在一个wxss文件里面导入另一个wxss文件*/</span></span><br></pre></td></tr></table></figure>

<p><strong>官方样式库</strong></p>
<p>小程序官方提供的 WeUI.wxss 基本样式库</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RlbmNlbnQvd2V1aS13eHNzLw==">https://github.com/Tencent/weui-wxss/<i class="fa fa-external-link-alt"></i></span></p>
<p>下载文件后，在微信开发者工具导入项目，选择 dist 文件夹即可</p>
<h5 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a>WXML</h5><p><strong>Mustache 语法</strong></p>
<p>可以写成单标签，也可以写成双标签</p>
<p>必须有严格的闭合：没有闭合会导致编译错误</p>
<p>大小写敏感:Class 与 class 不同</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box &#123;&#123;isActive ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--动态绑定属性--&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>逻辑判断</strong></p>
<p>wx:if 隐藏时，组件根本不会创建</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;isShow&#125;&#125;&quot;</span>&gt;</span>是否显示<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">&quot;&#123;&#123;score &gt;= 80&#125;&#125;&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>hidden 属性</strong></p>
<p>hidden 将组件隐藏起来时，组件依然存在，hidden 属性为 false 时组件会显示出来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span>此时隐藏<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hidden为true隐藏起来--&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示和隐藏切换的频率非常高，选择使用 hidden，切换频率低就选择 wx:if</p>
<p><strong>列表渲染-wx:for</strong></p>
<p>遍历数组/字符串/数字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[&#x27;abc&#x27;, &#x27;cba&#x27;, &#x27;nba&#x27;]&#125;&#125;&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;：&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;coderwhy&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;：&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;9&#125;&#125;&quot;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 0-8,共9次 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--给item、index起名字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;movies&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;movie&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;i&quot;</span>&gt;</span>&#123;&#123;movie&#125;&#125; &#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多层遍历时需要起名字，避免变量名重复，变量命名多个单词之间不能用-,可以用下划线_ --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--key作用：提高性能，更高效地更新虚拟DOM--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;movieArr&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--现在key不需要双大括号--&gt;</span></span><br><span class="line">[a, b, c] -&gt; [a, x, b, c] 没有key：a不变，第二个b重新装x，第三个c装b，第四个装c</span><br><span class="line">有key：会直接创建一个x，再把x插入到a和b之间</span><br></pre></td></tr></table></figure>

<p><strong>block 标签</strong></p>
<p>不是单个组件，仅仅是一个包装元素，不会在页面中做任何渲染，只接收控制属性</p>
<p>某些情况下，使用 wx:if 或者 wx:for 时，需要包 裹一组组件标签</p>
<p>希望对这一组标签进行整体的操作，此时可使用 block 标签包裹</p>
<p>作用类似于 Vue 的 template，react 的 fragement&lt;&gt;&lt;/&gt;</p>
<p><strong>模板</strong></p>
<p>template，可以在模板中定义代码片段，在不同的地方调用</p>
<p>之前小程序不支持自定义组件时，为了代码地复用而使用</p>
<p>使用==name 属性==，作为模板的名字，然后在 template 内定义代码片段</p>
<p>模板包裹的内容，在没有使用时是不会进行任何的渲染的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;contentItem&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;contentItem&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--模板内使用变量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;contentItem&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>&#123;&#123;btnText&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;contentItem&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123;btnText: &#x27;按钮1&#x27;, content: &#x27;没有内容&#x27;&#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--模板定义到单独的文件再导入--&gt;</span></span><br><span class="line">/wxml/template.wxml</span><br><span class="line"><span class="comment">&lt;!--include：主要导入template,不能进行递归导入(如a中导入b，c中导入a)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;/wxml/template.wxml&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--绝对路径和相对路径都可以--&gt;</span></span><br><span class="line"></span><br><span class="line">include引入： 将公共的wxml中的组件抽取到一个文件中 不能导入template(模板)/wxss，可以进行递归导入</span><br></pre></td></tr></table></figure>

<h5 id="WXS"><a href="#WXS" class="headerlink" title="WXS"></a>WXS</h5><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay92aWV3L3d4cy8=">https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/<i class="fa fa-external-link-alt"></i></span></p>
<p>WeiXin Script,小程序的一套脚本语言，结合 wxml，可以构建出页面的结构</p>
<ul>
<li>在 WXML 中不能直接调用 Page/Component 中定义的函数</li>
<li>WXS 中不能调用其它 JavaScript 文件中定义的函数，也不能调用小程序提供的 API</li>
<li>WXS 函数不能作为组件事件的回调</li>
<li>WXS 在 IOS 比 js 快 2~20 倍，安卓无差别</li>
</ul>
<p>wxs 定义方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在wxml中wxs的定义方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">module</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">  // 里面写js代码，不支持es6 var a = 1; var sum = function(num1, num2) &#123; return num1 + num2; &#125;</span><br><span class="line">  module.exports = &#123; //commonjs的模块化导出写法 a: a, sum: sum &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义在单独的文件中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--/wxs/info.wxs--&gt;</span></span><br><span class="line">//js代码,不支持es6 var message = &quot;Hello World&quot;; var name = &quot;coderwhy&quot;; var sum = function (num1,</span><br><span class="line">num2) &#123; return num1 + num2; &#125; //commonjs模块化导出 module.exports = &#123; message: message, name: name,</span><br><span class="line">sum: sum &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--wxml文件中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用：wxs标签进行导入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入必须使用相对路径，不能使用绝对 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">&quot;../../wxs/info.wxs&quot;</span> <span class="attr">module</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;info.message&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;info.sum(5, 2)&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><h5 id="常见事件类型"><a href="#常见事件类型" class="headerlink" title="常见事件类型"></a>常见事件类型</h5><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay92aWV3L3d4bWwvZXZlbnQuaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;handleTap&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 小程序1.5以后可在bind后加一个：号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;handleTap&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--组件都有的，常见的事件类型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--手指开始触摸时执行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:touchstart</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--手指在上面移动时(触摸后移动)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:touchmove</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--手指触摸动作被打断(如来电提醒、弹窗)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:touchcancel</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--手指结束触摸时执行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:touchend</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--手指触摸后马上离开(点击)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--手指长按时触发(手指触摸后，超过350ms再离开，若指定了事件回调函数并触发了这个事件，tap事件将不被触发)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:longpress</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">tap事件和longpress事件通常只会触发一个</span><br></pre></td></tr></table></figure>

<h5 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h5><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay92aWV3L3d4bWwvZXZlbnQuaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html<i class="fa fa-external-link-alt"></i></span></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>String</td>
<td>事件类型</td>
</tr>
<tr>
<td>timeStamp</td>
<td>Integer</td>
<td>页面打开到触发事件所经过的毫秒数</td>
</tr>
<tr>
<td>target</td>
<td>Object</td>
<td>触发事件的组件的一些属性值集合</td>
</tr>
<tr>
<td>currentTarget</td>
<td>Object</td>
<td>当前组件的一些属性值集合</td>
</tr>
<tr>
<td>detail</td>
<td>Object</td>
<td>额外的信息(鼠标点击时距离左边和上边的距离)</td>
</tr>
<tr>
<td>touches</td>
<td>Array</td>
<td>触摸事件，当前停留在屏幕中的触摸点信息的数组(记录触摸的手指数量)</td>
</tr>
<tr>
<td>changedTouches</td>
<td>Array</td>
<td>触摸事件，当前变化的触摸点信息的数组(记录触摸变化的手指数量)</td>
</tr>
</tbody></table>
<p><strong>touches 和 changedTouches 的区别</strong></p>
<p>touches：用来记录当前有几个手指在小程序中触摸以及对应的触摸点的信息</p>
<p>changedTouches：记录变化的(原来有一个，现在两个手指在触摸，数组就为 1)</p>
<ol>
<li>在 touchend 中不同</li>
<li>多手指触摸中不同</li>
</ol>
<p><strong>currentTarget 和 target 的区别</strong></p>
<p>currentTarget:记录触发事件的 view</p>
<p>target：记录产生事件的 view</p>
<h5 id="事件参数的传递"><a href="#事件参数的传递" class="headerlink" title="事件参数的传递"></a>事件参数的传递</h5><p>格式：data-属性名称</p>
<p>获取：e.currentTarget.dataset.属性的名称</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 事件的参数传递 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;titles&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;handleItemClick&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">data-index</span>=<span class="string">&quot;&#123;&#123;index&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">data-item</span>=<span class="string">&quot;&#123;&#123;item&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--js文件中--&gt;</span><br><span class="line"><span class="function"><span class="title">handleItemClick</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dataset = event.currentTarget.dataset;</span><br><span class="line">			<span class="keyword">const</span> &#123;index, item&#125; = dataset; <span class="comment">//取出传过来的index和item</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="事件冒泡和捕获"><a href="#事件冒泡和捕获" class="headerlink" title="事件冒泡和捕获"></a>事件冒泡和捕获</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--bind会一层层传递，先捕获再冒泡--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">capture-bind:tap</span>=<span class="string">&quot;handleCaptureView1&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;handleBindView1&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--事件捕获和冒泡--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--catch：阻止事件的进一步传递--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">capture-catch:tap</span>=<span class="string">&quot;handleCaptureView1&quot;</span> <span class="attr">catchtap</span>=<span class="string">&quot;handleBindView1&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--事件捕获和冒泡--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><p>自定义组件：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9jdXN0b20tY29tcG9uZW50L3d4bWwtd3hzcy5odG1s">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>因为 wxml 标签名只能是小写字母、中划线和下划线的组合，所以自定义组件的标签名只能包含这些字符</li>
<li>自定义组件也可以引用自定义组件</li>
<li>自定义组件和页面所在项目根目录名不能以 wx-为前缀</li>
<li>在 app.json 注册的组件就是全局组件，可在任意界面使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//home.json 想在哪一个页面使用自定义组件就在哪一个页面的json文件里面注册组件 &#123; &quot;usingComponents&quot;: &#123;</span><br><span class="line">//注册组件 &quot;my-cpn&quot;: &quot;/components/my-cpn/my-cpn&quot; //&quot;要使用的组件标签的名字&quot;:&quot;组件的路径&quot; &#125; &#125;</span><br><span class="line">//home.wxml使用 <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="样式影响"><a href="#样式影响" class="headerlink" title="样式影响"></a>样式影响</h5><ul>
<li>组件内或者外的 class 样式默认局部生效，不会影响到其它</li>
<li>外部使用标签选择器会对组件内产生影响，其它不会</li>
<li>组件内不能使用 id 选择器，属性选择器，标签选择器</li>
</ul>
<p>若希望页面和组件之间的样式相互影响：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在组件的js文件：</span></span><br><span class="line">Component(&#123;</span><br><span class="line">	options: &#123;</span><br><span class="line">		styleIsolation: <span class="string">&quot;apply-shared&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//apply-shared 页面影响组件</span></span><br><span class="line">  <span class="comment">//shared   自定义组件和页面相互影响</span></span><br><span class="line">  <span class="comment">//isolated 默认值，隔离的</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="组件和页面通信"><a href="#组件和页面通信" class="headerlink" title="组件和页面通信"></a>组件和页面通信</h5><p>页面给组件传：数据-&gt;properties；样式-&gt;externalClasses；标签-&gt;slot</p>
<p>组件给页面传：自定义事件</p>
<h6 id="页面给组件传递数据"><a href="#页面给组件传递数据" class="headerlink" title="页面给组件传递数据"></a>页面给组件传递数据</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//home.wxml 调用组件的地方</span></span><br><span class="line">&lt;my-prop title=<span class="string">&quot;嘿嘿嘿&quot;</span> content=<span class="string">&quot;组件的内容&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my-prop.wxml</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;!-- 传递一个数组过去 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tab-control</span> <span class="attr">titles</span>=<span class="string">&quot;&#123;&#123;[&#x27;衣服&#x27;, &#x27;裤子&#x27;, &#x27;鞋子&#x27;]&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">//my-prop.js</span></span><br><span class="line"><span class="xml">Component(&#123;</span></span><br><span class="line"><span class="xml">  properties: &#123; //接受传过来的数据</span></span><br><span class="line"><span class="xml">    title: String, //变量名为title，类型为string,此种写法无默认值</span></span><br><span class="line"><span class="xml">    content: &#123;</span></span><br><span class="line"><span class="xml">      type: String, //类型</span></span><br><span class="line"><span class="xml">      value: &quot;我是组件的默认内容&quot;, //默认值</span></span><br><span class="line"><span class="xml">      observer: function(newVal, oldVal) &#123; //监听值的改变，拿到最新传过来的值和旧的值</span></span><br><span class="line"><span class="xml">        console.log(newVal, oldVal);</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure>

<h6 id="页面给组件传递样式"><a href="#页面给组件传递样式" class="headerlink" title="页面给组件传递样式"></a>页面给组件传递样式</h6><p>样式的类名不能用大写字母</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//home.wxml</span></span><br><span class="line">&lt;my-prop title2=<span class="string">&quot;red&quot;</span>/&gt; <span class="comment">//将一个样式名为red的样式传递过去</span></span><br><span class="line"><span class="comment">// home.wxss</span></span><br><span class="line">.red &#123;</span><br><span class="line">  <span class="attr">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my-prop.js</span></span><br><span class="line">Component(&#123;</span><br><span class="line">  <span class="attr">externalClasses</span>: [<span class="string">&#x27;title2&#x27;</span>] <span class="comment">//传过来的样式是一个数组</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//my-prop.wxml</span></span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;title2&quot;</span>&gt;&#123;&#123;title&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<h6 id="组件向外传递事件-自定义事件"><a href="#组件向外传递事件-自定义事件" class="headerlink" title="组件向外传递事件-自定义事件"></a>组件向外传递事件-自定义事件</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//my-event.wxml 每点击一次组件的按钮，就将页面的counter+1</span></span><br><span class="line">&lt;button bindtap=<span class="string">&quot;handleIncrement&quot;</span>&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line"><span class="comment">//my-event.js</span></span><br><span class="line">Component(&#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;  <span class="comment">//组件里面的函数必须写到这里面</span></span><br><span class="line">    <span class="function"><span class="title">handleIncrement</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.triggerEvent(<span class="string">&#x27;increment1&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&quot;why&quot;</span>&#125;, &#123;&#125;);</span><br><span class="line">      <span class="comment">//参数一：发射出去的事件的名字 参数二：传递的参数  参数三：直接传空对象</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//home.wxml</span></span><br><span class="line">&lt;view&gt;当前计数：&#123;&#123;counter&#125;&#125;&lt;/view&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">my-event</span> <span class="attr">bind:increment1</span>=<span class="string">&quot;parentIncrement&quot;</span>/&gt;</span></span> &lt;!--监听发射出来的increment事件--&gt;</span><br><span class="line"><span class="comment">//home.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line"> <span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="function"><span class="title">parentIncrement</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(event.detail); <span class="comment">//传过来的数据放在event的detail里面</span></span><br><span class="line">   <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">     <span class="attr">counter</span>: <span class="built_in">this</span>.data.counter + <span class="number">1</span></span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>给文字加下划线时，可以个文字包裹一个行级标签，给这个标签加下划线，以使下划线比文字长</p>
<h6 id="页面直接调用组件方法-修改组件数据"><a href="#页面直接调用组件方法-修改组件数据" class="headerlink" title="页面直接调用组件方法/修改组件数据"></a>页面直接调用组件方法/修改组件数据</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改组件内数据</span></span><br><span class="line"><span class="comment">//home.wxml</span></span><br><span class="line">&lt;button bindtap=<span class="string">&quot;updateDataCpn&quot;</span>&gt;修改组件内的数据&lt;/button&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">my-sel</span> <span class="attr">class</span>=<span class="string">&quot;sel-class&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sel-id&quot;</span>/&gt;</span></span> &lt;!--给组件绑定一个<span class="class"><span class="keyword">class</span>或者<span class="title">id</span>，便于拿到组件对象--&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//<span class="title">home</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class"><span class="title">Page</span>(</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">updateDataCpn</span>(<span class="params"></span>)</span> &#123; <span class="comment">//修改my-sel组件内的数据counter</span></span><br><span class="line">    <span class="keyword">const</span> my_sel = <span class="built_in">this</span>.selectComponent(<span class="string">&#x27;#sel-id&#x27;</span>); <span class="comment">//通过绑定在组件上的id获取组件对象</span></span><br><span class="line">    <span class="comment">// my_sel.setData(&#123; //直接修改，可以但不符合规范</span></span><br><span class="line">    <span class="comment">//   counter: my_sel.data.counter + 1</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过方法对数据进行修改</span></span><br><span class="line">    my_sel.incrementCounter(); <span class="comment">//调用组件内的方法，在组件内的方法里面调用setData</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h6 id="插槽-slot"><a href="#插槽-slot" class="headerlink" title="插槽 slot"></a>插槽 slot</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单个插槽</span></span><br><span class="line"><span class="comment">//my-slot.wxml</span></span><br><span class="line">&lt;view&gt;我是组件的头部&lt;/view&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>我是组件的尾部<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//home.wxml</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">my-slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>我的插入的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">my-slot</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多个插槽时需要给每一个插槽取一个名字：name属性</span></span><br><span class="line"><span class="comment">//还需要在有插槽的Component对象中添加一个选项：options</span></span><br><span class="line"><span class="comment">// my-mslot.wxml</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>我是组件的头部<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;slot1&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;slot2&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;slot3&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>我是组件的尾部<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="comment">//my-mslot.js</span></span><br><span class="line">Component(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">multipleSlots</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//home.wxml</span></span><br><span class="line">&lt;my-mslot&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;slot2&quot;</span>&gt;</span>我的插入的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span> &lt;!--指定要替换的具体插槽--&gt;</span><br><span class="line">&lt;/my-mslot&gt;</span><br></pre></td></tr></table></figure>

<h6 id="Component-构造器"><a href="#Component-构造器" class="headerlink" title="Component 构造器"></a>Component 构造器</h6><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9jdXN0b20tY29tcG9uZW50L2NvbXBvbmVudC5odG1s">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/component.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="comment">//让使用者给组件传入数据</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="comment">//定义组件内部的初始化数据</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">//用于定义组件内部的函数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="comment">//定义组件的配置选项</span></span><br><span class="line">    <span class="attr">multipleSlots</span>: <span class="literal">true</span>, <span class="comment">//在使用多插槽时需要设置为true</span></span><br><span class="line">    <span class="attr">styleIsolation</span>: <span class="string">&#x27;isolated&#x27;</span>, <span class="comment">//设置样式的隔离方式</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">externalClasses</span>: [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>], <span class="comment">//外界给组件传入的额外的样式,是一个数组，数组里面写类名</span></span><br><span class="line">  <span class="attr">observers</span>: &#123;</span><br><span class="line">    <span class="comment">//监听properties/data的改变</span></span><br><span class="line">    <span class="attr">counter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//只有一个newValue</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">pageLifetimes</span>: &#123;</span><br><span class="line">    <span class="comment">//监听页面生命周期</span></span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;组件所在页面显示出来时&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">hide</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;组件所在页面隐藏起来时&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">resize</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">//用的很少</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;组件所在尺寸发生改变&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">lifetimes</span>: &#123;</span><br><span class="line">    <span class="comment">//监听组件生命周期</span></span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;组件被创建&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">attached</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;组件被添加到页面中&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">ready</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;组件被渲染出来&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">moved</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;组件被移动到节点树另一个位置&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">detached</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;组件被移除掉&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><p>微信小程序提供了专属的 API 接口，用于网络请求 wx.request(Object,Object)</p>
<p>注意事项：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2ZyYW1ld29yay9hYmlsaXR5L25ldHdvcmsuaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/framework/ability/network.html<i class="fa fa-external-link-alt"></i></span></p>
<p>网络请求常见参数：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9uZXR3b3JrL3JlcXVlc3Qvd3gucmVxdWVzdC5odG1s">https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html<i class="fa fa-external-link-alt"></i></span></p>
<h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单get请求</span></span><br><span class="line"><span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  wx.request(&#123; <span class="comment">//简单get请求</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;url&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.get请求携带参数</span></span><br><span class="line">wx.request(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;sell&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.post请求携带参数</span></span><br><span class="line">wx.request(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ysj&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fail</span>: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;请求出错时调用&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> baseUrl = <span class="string">&#x27;http://httpbin.org&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      <span class="attr">url</span>: baseUrl + options.url,</span><br><span class="line">      <span class="attr">method</span>: options.method || <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: options.data || &#123;&#125;,</span><br><span class="line">      <span class="attr">success</span>: resolve,</span><br><span class="line">      <span class="attr">fail</span>: reject,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// export default function request(options) &#123;</span></span><br><span class="line"><span class="comment">//   const baseUrl = &quot;http://www.baidu,com&quot;</span></span><br><span class="line"><span class="comment">//   return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     wx.request(&#123;</span></span><br><span class="line"><span class="comment">//       url: baseUrl + options.url,</span></span><br><span class="line"><span class="comment">//       method: options.method || &#x27;get&#x27;,</span></span><br><span class="line"><span class="comment">//       data: options.data || &#123;&#125;,</span></span><br><span class="line"><span class="comment">//       success: function(res) &#123;</span></span><br><span class="line"><span class="comment">//         resolve(res.data)</span></span><br><span class="line"><span class="comment">//       &#125;,</span></span><br><span class="line"><span class="comment">//       fail: function(err) &#123;</span></span><br><span class="line"><span class="comment">//         reject(err)</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../../network/network&#x27;</span></span><br><span class="line">request(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/post&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="展示弹窗"><a href="#展示弹窗" class="headerlink" title="展示弹窗"></a>展示弹窗</h4><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS91aS9pbnRlcmFjdGlvbi93eC5zaG93VG9hc3QuaHRtbA==">https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/home/home.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">bind:tap</span>=<span class="string">&quot;handleShowToast&quot;</span>&gt;</span>showToast<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">bind:tap</span>=<span class="string">&quot;handleShowModal&quot;</span>&gt;</span>showToast<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/home/home.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="function"><span class="title">handleShowToast</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;加载中&#x27;</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">3000</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;loading&#x27;</span>, <span class="comment">//图标也可以使用本地图片自定义</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">handleShowModal</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&#x27;弹窗内容&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.cancel) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;用户点击了取消&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;用户点击了确定&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>其他弹窗类似</p>
<h4 id="小程序中使用分享"><a href="#小程序中使用分享" class="headerlink" title="小程序中使用分享"></a>小程序中使用分享</h4><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L3JlZmVyZW5jZS9hcGkvUGFnZS5odG1sI29uU2hhcmVBcHBNZXNzYWdlLU9iamVjdC1vYmplY3Q=">https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShareAppMessage-Object-object<i class="fa fa-external-link-alt"></i></span></p>
<p>基本使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">onShareAppMessage</span>(<span class="params">options</span>)</span> &#123; <span class="comment">//分享</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;分享的标题&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/pages/about/about&quot;</span>, <span class="comment">//打开分享的小程序时进入哪个页面</span></span><br><span class="line">    <span class="comment">// imageUrl: &quot;&quot; //分享的封面使用的图片</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>分享按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;share&quot;</span>&gt;</span>分享按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--分享按钮，点击即可分享--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="小程序登陆"><a href="#小程序登陆" class="headerlink" title="小程序登陆"></a>小程序登陆</h4><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9vcGVuLWFwaS9sb2dpbi93eC5sb2dpbi5odG1s">https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><p>小程序界面跳转有两种方式:</p>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2NvbXBvbmVudC9uYXZpZ2F0b3IuaHRtbA==">通过 navigator 组件<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/detail/detail&quot;</span>&gt;</span>跳转至详情页<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过此种方式跳转到详情页时会左上角会自动出现返回按钮--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- navigator属性：open-type --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/detail/detail&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;redirect&quot;</span>&gt;</span>跳转至详情页<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">open-type</span>=<span class="string">&quot;navigateBack&quot;</span>&gt;</span>用户自定义返回<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">open-type</span>=<span class="string">&quot;navigateBack&quot;</span> <span class="attr">delta</span>=<span class="string">&quot;2&quot;</span>&gt;</span>用户自定义返回,并且会返回两个层级<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转时传递数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/detail/detail?name=ysj&amp;age=18&amp;height=1.80&quot;</span>&gt;</span>跳转时传递参数<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>redirect：关闭当前页面，跳转到应用内某个页面。但是不能跳转到 tabbar 页面，并且不能返回（不是一个压栈）</li>
<li>switchTab：跳转到 tabBar 页面，并关闭其他所有非 tabBar。（需要在 tabBar 中定义的）</li>
<li>reLaunch：关闭所有页面，打开应用中某个页面。（直接展示某个页面，并且可以跳转到 tabBar 页面）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//页面接收传递过来的数据</span></span><br><span class="line"><span class="comment">//page/detail/detail.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, age, height &#125; = options</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//返回时给首页传递数据</span></span><br><span class="line">  <span class="function"><span class="title">onUnload</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;页面退出时回调&#x27;</span>)</span><br><span class="line">    <span class="comment">//1.获取首页的页面对象</span></span><br><span class="line">    <span class="comment">//getCurrentPages返回当前所有活跃（栈）的页面</span></span><br><span class="line">    <span class="keyword">const</span> pages = getCurrentPages()</span><br><span class="line">    <span class="keyword">const</span> home = pages[pages.length - <span class="number">2</span>] <span class="comment">//获取首页对象,拿到数组里面最后一个值的前一个元素</span></span><br><span class="line">    <span class="comment">//2.调用页面对象的方法，修改首页title变量的值</span></span><br><span class="line">    home.setData(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;呵呵呵&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收返回时传递参数的页面(首页)</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;哈哈哈&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2FwaS9yb3V0ZS93eC5yZWRpcmVjdFRvLmh0bWw=">通过 wx 的 API 跳转<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过代码进行页面跳转--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;handlePushDetail&quot;</span>&gt;</span>跳转到详情页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handlePushDetail</span>(<span class="params"></span>)</span> &#123; <span class="comment">//代码进行跳转</span></span><br><span class="line">  wx.navigateTo(&#123; <span class="comment">//每一navigator组件的跳转方式都有对应的API</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/pages/detail/detail?name=ysj&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  wx.redirectTo(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">handleBack</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  wx.navigatBack(&#123;</span><br><span class="line">    <span class="attr">delta</span>: <span class="number">2</span> <span class="comment">//返回的层级</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="ui-组件库"><a href="#ui-组件库" class="headerlink" title="ui 组件库"></a>ui 组件库</h4><p>Vant Weapp：<span class="exturl" data-url="aHR0cHM6Ly92YW50LWNvbnRyaWIuZ2l0ZWUuaW8vdmFudC13ZWFwcC8jL2NvbmZpZy1wcm92aWRlcg==">https://vant-contrib.gitee.io/vant-weapp/#/config-provider<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>190-css零散知识</title>
    <url>/20220315/190-css%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>CSS 技巧</p>
<h4 id="Grid-布局"><a href="#Grid-布局" class="headerlink" title="Grid 布局"></a>Grid 布局</h4><p><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTkvMDMvZ3JpZC1sYXlvdXQtdHV0b3JpYWwuaHRtbA==">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html<i class="fa fa-external-link-alt"></i></span></p>
<p>二位布局方式，可以同时控制行和列的排布和对其方式</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMThwNDExQTdKQg==">https://www.bilibili.com/video/BV18p411A7JB<i class="fa fa-external-link-alt"></i></span> B 站视频教程</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="comment">/*外层容器*/</span></span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>; <span class="comment">/*给子元素设置固定宽度*/</span></span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br><span class="line">  <span class="comment">/*第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。*/</span></span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">  <span class="comment">/*单元格的大小是固定的，但是容器的大小不确定，每列宽度100px，然后自动填充，直到容器不能放置更多的列*/</span></span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">70%</span> <span class="number">30%</span>;</span><br><span class="line">  <span class="comment">/*左边栏设为70%，右边栏设为30%*/</span></span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="comment">/*列宽不小于100px，不大于1fr (fr:片段)*/</span></span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr; <span class="comment">/*给子元素设置浮动宽度,一行三列，各占1/3*/</span></span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">24px</span>; <span class="comment">/*给一行每列子元素设置列间距*/</span></span><br><span class="line">  row-gap: <span class="number">24px</span>; <span class="comment">/*设置行与行的子元素之间的行间距*/</span></span><br><span class="line">  gap: <span class="number">24px</span>; <span class="comment">/*同意设置行列间距为24px*/</span></span><br><span class="line">  <span class="comment">/*gap属性是column-gap和row-gap的合并简写形式*/</span></span><br><span class="line">  <span class="comment">/*gap: &lt;row-gap&gt; &lt;column-gap&gt;;*/</span></span><br><span class="line">  <span class="comment">/*如果gap省略了第二个值，浏览器认为第二个值等于第一个值*/</span></span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/*垂直方向对齐子元素*/</span></span><br><span class="line">  <span class="comment">/*end:靠下对齐*/</span></span><br><span class="line">  justify-items: center; <span class="comment">/*水平方向居中对齐子元素*/</span></span><br><span class="line">  <span class="comment">/*end靠右对齐  space-between两端对齐  */</span></span><br><span class="line">  <span class="comment">/*place-items属性是align-items属性和justify-items属性的合并简写形式。*/</span></span><br><span class="line">  <span class="comment">/*place-items: &lt;align-items&gt; &lt;justify-items&gt;;*/</span></span><br><span class="line">  <span class="comment">/*若行轨道和列轨道小于grid，也可对轨道整体进行对齐*/</span></span><br><span class="line">  <span class="attribute">align-content</span>: center; <span class="comment">/*轨道垂直居中对齐*/</span></span><br><span class="line">  <span class="comment">/*end靠下对齐*/</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center; <span class="comment">/*水平居中对齐*/</span></span><br><span class="line">  <span class="comment">/*end靠右对齐 space-between两端对齐*/</span></span><br><span class="line">  <span class="comment">/*place-content属性是align-content属性和justify-content属性的合并简写形式。*/</span></span><br><span class="line">  <span class="comment">/*place-content: &lt;align-content&gt; &lt;justify-content&gt;*/</span></span><br><span class="line"></span><br><span class="line">  grid-template-areas:	 /*排列元素,然后对应元素分别指定对应区域*/</span><br><span class="line">    <span class="string">&#x27;header header header&#x27;</span></span><br><span class="line">    <span class="string">&#x27;sidebar content content&#x27;</span></span><br><span class="line">    <span class="string">&#x27;footer footer footer&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  grid-area: header;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">  grid-area: slidebar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  grid-area: content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">  grid-area: footer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  * &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="css">    grid-template-areas:</span></span><br><span class="line"><span class="css">      <span class="string">&#x27;header header header header&#x27;</span></span></span><br><span class="line"><span class="css">      <span class="string">&#x27;slidebar content content content&#x27;</span></span></span><br><span class="line"><span class="css">      <span class="string">&#x27;footer footer footer footer&#x27;</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">nav</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="css">    grid-area: header;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">aside</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">    grid-area: slidebar;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: beige;</span></span><br><span class="line"><span class="css">    grid-area: content;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">footer</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: chartreuse;</span></span><br><span class="line"><span class="css">    grid-area: footer;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>主体<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h4><p>1.Flex 布局教程-语法-阮一峰</p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTUvMDcvZmxleC1ncmFtbWFyLmh0bWw=">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html<i class="fa fa-external-link-alt"></i></span></p>
<p>2.Flex 布局教程-实例-阮一峰</p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTUvMDcvZmxleC1leGFtcGxlcy5odG1s">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html<i class="fa fa-external-link-alt"></i></span></p>
<p>3.CSS 弹性盒子布局-XYQ</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWFlRLTIwODkxMC9wLzExOTA1MTA0Lmh0bWw=">https://www.cnblogs.com/XYQ-208910/p/11905104.html<i class="fa fa-external-link-alt"></i></span></p>
<ul>
<li>开启了 flex 布局的元素叫 flex container(容器)</li>
<li>flex container 里面的直接子元素叫 flex items(项目)</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*开启flex布局*/</span></span><br><span class="line"><span class="attribute">display</span>: flex; <span class="comment">/*块级元素*/</span></span><br><span class="line"><span class="attribute">display</span>: inline-flex; <span class="comment">/*行内元素*/</span></span><br></pre></td></tr></table></figure>

<p><strong>应用在 flex-container 上的 css 属性</strong></p>
<ul>
<li><p>flex-direction：决定主轴(main axis)方向，默认沿着主轴从 main start 开始往 main end 方向排布–从左往右</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row; <span class="comment">/*默认值，从左到右*/</span></span><br><span class="line"><span class="attribute">flex-direction</span>: row-reverse; <span class="comment">/*反向，从右向左*/</span></span><br><span class="line"><span class="attribute">flex-direction</span>: column; <span class="comment">/*垂直，从上往下*/</span></span><br><span class="line"><span class="attribute">flex-direction</span>: column-reverse; <span class="comment">/*垂直反转，从下往上*/</span></span><br></pre></td></tr></table></figure></li>
<li><p>justify-content：决定了 flex items 在主轴上的对齐方式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: flex-start; <span class="comment">/*默认值，与main start对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: flex-end; <span class="comment">/*与mian end对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between; <span class="comment">/*flex items之间的距离相等，与main start、main end两端对齐(挨着左右两边)*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line"><span class="comment">/*flex items之间的距离相等，flex items与main start、main end(左右两边)之间的距离等于flex items之间的距离*/</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-around;</span><br><span class="line"><span class="comment">/*flex items之间的距离相等，flex items与main start、main end(左右两边)之间的距离是flex items之间的距离的一半*/</span></span><br></pre></td></tr></table></figure></li>
<li><p>align-items：决定了 flex items 在交叉轴(cross axis)上的对齐方式(默认从上到下)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: normal; <span class="comment">/*默认，在弹性布局中，效果和stretch一样*/</span></span><br><span class="line"><span class="attribute">align-items</span>: stretch; <span class="comment">/*当flex items在交叉轴方向的size为auto时(未设置高度)，会自动拉伸至填充flex container(与父元素等高)*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-start; <span class="comment">/*与cross start对齐(顶部对齐)*/</span></span><br><span class="line"><span class="attribute">align-items</span>: flex-end; <span class="comment">/*与cross end对齐(底部对齐)*/</span></span><br><span class="line"><span class="attribute">align-items</span>: center; <span class="comment">/*居中对齐(垂直居中)*/</span></span><br><span class="line"><span class="attribute">align-items</span>: baseline; <span class="comment">/*与基准线对齐(基线，第一行文本基线)*/</span></span><br></pre></td></tr></table></figure></li>
<li><p>flex-wrap：决定了 flex container 是单行还是多行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-wrap</span>: nowrap; <span class="comment">/*默认，所有flex items单行显示*/</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap; <span class="comment">/*多行*/</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap-reverse; <span class="comment">/*多行，与wrap的cross start和cross end相反(在交叉轴上反转，第1行和n行,2和(n-1),3和(n-3)这些行交换位置)*/</span></span><br></pre></td></tr></table></figure></li>
<li><p>flex-flow：是 flex-direction || flex-wrap 的简写</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: row-reverse wrap; <span class="comment">/*可以省略，顺序任意*/</span></span><br></pre></td></tr></table></figure></li>
<li><p>align-content：决定了多行 flex items 在交叉轴(cross axis)上的对齐方式，用法与 justify-content 类似</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: stretch; <span class="comment">/*默认值，与align-items的strech类似*/</span></span><br><span class="line"><span class="attribute">align-content</span>: flex-start; <span class="comment">/*与cross start对齐(从上边开始排)*/</span></span><br><span class="line"><span class="attribute">align-content</span>: flex-end; <span class="comment">/*与cross end对齐(从底边开始排)*/</span></span><br><span class="line"><span class="attribute">align-content</span>: center; <span class="comment">/*居中对齐*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-between; <span class="comment">/*flex-items之间距离相等，与corss start、corss end两端对齐(挨着上下两边)*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-around;</span><br><span class="line"><span class="comment">/*flex-items之间距离相等,与cross start、cross end(上下两边)之间的距离是flex items之间距离的一半*/</span></span><br><span class="line"><span class="attribute">align-content</span>: space-evenly;</span><br><span class="line"><span class="comment">/*flex-items之间距离相等,与cross start、cross end(上下两边)之间的距离等于flex items之间距离*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>应用在 flex-items 上的 css 属性</strong></p>
<ul>
<li><p>order：决定 flex items 的排布顺序</p>
<ul>
<li>可以设置任意整数，值越小排在越前面</li>
<li>默认值为 0</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">order</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>align-self：可通过 align-self 覆盖 flex container 设置的 align-items</p>
<ul>
<li>auto，默认值，遵从 flex container 的 align items 设置</li>
<li>stretch、flex-start、flex-end、center、baseline，效果与 align-items 一致</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">align-self</span>: auto;</span><br></pre></td></tr></table></figure></li>
<li><p>flex-grow：当 flex container 的 size 有剩余时，items 分剩余 size</p>
<ul>
<li>可以设置任意非负数字，默认值是 0</li>
<li>当 flex container 在 main axis 方向上有剩余 size 时，此属性才会生效</li>
<li>若 flex grow 总和超过 1，每个 flex items 扩展的 size 为：flex container 的剩余 size * flex-grow / sum</li>
<li>若综合不超过 1，每个 flex items 扩展的 size 为：flex container 的剩余 size * flex-grow 的值</li>
</ul>
</li>
<li><p>flex-shrink：收缩，默认值为 1</p>
</li>
<li><p>flex-basis：用来设置 flex items 在主轴上的元素大小</p>
<ul>
<li>auto：默认值；具体的宽度数值</li>
<li>优先级<ul>
<li>max-width/height min-width/height</li>
<li>flex-basis</li>
<li>width height</li>
<li>内容本身的 size</li>
</ul>
</li>
</ul>
</li>
<li><p>flex：flex-grow flex-shrink flex-basis 的简写，flex 属性可以指定 1、2 或 3 个值</p>
</li>
</ul>
<h4 id="炫彩流光-css-特效按钮"><a href="#炫彩流光-css-特效按钮" class="headerlink" title="炫彩流光 css 特效按钮"></a>炫彩流光 css 特效按钮</h4><p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>BUTTON<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>; <span class="comment">/*外边距*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/*内边距*/</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>; <span class="comment">/*背景颜色*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute; <span class="comment">/*绝对对位*/</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>; <span class="comment">/*距上部*/</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="comment">/*向左上移动自身宽度的一半，使其垂直水平居中*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>; <span class="comment">/*宽*/</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>; <span class="comment">/*高*/</span></span><br><span class="line">  <span class="attribute">text-align</span>: center; <span class="comment">/*字体水平居中*/</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">45px</span>; <span class="comment">/*字体大小*/</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">120px</span>; <span class="comment">/*行高*/</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="comment">/*英文字母转为大写*/</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: none; <span class="comment">/*字体增加装饰：去除下划线*/</span></span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif; <span class="comment">/*非衬线体*/</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box; <span class="comment">/*盒模型大小规则*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">90deg</span>,</span><br><span class="line">    <span class="number">#03a9f4</span>,</span><br><span class="line">    <span class="number">#f441a5</span>,</span><br><span class="line">    <span class="number">#ffeb3b</span>,</span><br><span class="line">    <span class="number">#03a9f4</span>,</span><br><span class="line">    <span class="number">#f441a5</span>,</span><br><span class="line">    <span class="number">#ffeb3b</span>,</span><br><span class="line">    <span class="number">#03a9f4</span></span><br><span class="line">  ); <span class="comment">/*渐变背景*/</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">60px</span>; <span class="comment">/*边框圆角*/</span></span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">400%</span>; <span class="comment">/*背景大小*/</span></span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>; <span class="comment">/*层叠定位*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: animate <span class="number">8s</span> linear infinite alternate; <span class="comment">/*动画: 名称 时间 线性 循环 播放完回退播放*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> animate &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span>; <span class="comment">/*修改背景定位，实现渐变色炫光*/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="comment">/*之前添加*/</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>; <span class="comment">/*内容*/</span></span><br><span class="line">  <span class="attribute">position</span>: absolute; <span class="comment">/*绝对定位*/</span></span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">5px</span>; <span class="comment">/*当设置对立的2个定位属性时，元素的大小将由对立的大小决定*/</span></span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">5px</span>; <span class="comment">/*当设置对立的2个定位属性时，元素的大小将由对立的大小决定*/</span></span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#03a9f4</span>, <span class="number">#f441a5</span>, <span class="number">#ffeb3b</span>, <span class="number">#03a9f4</span>, <span class="number">#f441a5</span>, <span class="number">#ffeb3b</span>, <span class="number">#03a9f4</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">400%</span>;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>); <span class="comment">/*过渡：模糊*/</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>; <span class="comment">/*透明度*/</span></span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>; <span class="comment">/*过渡时间*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">animation</span>: animate <span class="number">8s</span> linear infinite; <span class="comment">/*注意动画名称统一*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\58498\AppData\Roaming\Typora\typora-user-images\image-20200720070555391.png" alt="image-20200720070555391"></p>
<h4 id="登录框-hover-效果"><a href="#登录框-hover-效果" class="headerlink" title="登录框 hover 效果"></a>登录框 hover 效果</h4><p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tbx&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;账号&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tbx&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;sub&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>css</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* vh相对于屏幕的可见高度 vw 相对于屏幕的可见宽度 100vh：和可见屏幕一样高,即窗口高度 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/*让登录框水平垂直居中*/</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">450px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#34495e</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">33</span>, <span class="number">45</span>, <span class="number">58</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">form</span> <span class="selector-class">.tbx</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 修改input的placeholder文字的外观 */</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">form</span> <span class="selector-class">.tbx</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">form</span> <span class="selector-class">.sub</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: none;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ecf0f1</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">33</span>, <span class="number">45</span>, <span class="number">58</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置鼠标进入的样式 */</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.in</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#3498bd</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="comment">/* 使用in动画，持续0.5s，缓出的时间函数，停留在最后一帧 */</span></span><br><span class="line">  <span class="attribute">animation</span>: in <span class="number">0.5s</span> ease-out forwards;</span><br><span class="line">  <span class="comment">/* forwards当动画完成后，保持最后一帧的状态（也就是最后一个关键帧中定义的状态） */</span></span><br><span class="line">  <span class="comment">/* backwards在animation-delay指定动画延迟的一段时间内，元素保持为第一帧中的状态（也就是第一帧中所定义的状态） */</span></span><br><span class="line">  <span class="comment">/* both	表示上面两者模式都被应用 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置鼠标离开的样式 */</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.out</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#3498bd</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">animation</span>: out <span class="number">0.5s</span> ease-out forwards;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置鼠标进入时，元素的动画 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> in &#123;</span><br><span class="line">  <span class="comment">/* 初始关键帧 */</span></span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 结尾关键帧 */</span></span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置鼠标离开时，元素的动画 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> out &#123;</span><br><span class="line">  <span class="comment">/* 初始关键帧 */</span></span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 结尾关键帧 */</span></span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> con = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.container&#x27;</span>) <span class="comment">//整个登录框</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义两个函数开关(门)</span></span><br><span class="line"><span class="keyword">let</span> isIn = <span class="literal">true</span> <span class="comment">//鼠标进去的门，默认打开</span></span><br><span class="line"><span class="keyword">let</span> isOut = <span class="literal">false</span> <span class="comment">//鼠标出去的们，默认关闭</span></span><br><span class="line"><span class="keyword">let</span> span <span class="comment">//未创建的元素</span></span><br><span class="line"><span class="comment">//监听鼠标进入的时间+进去的方法</span></span><br><span class="line">con.addEventListener(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isIn) &#123;</span><br><span class="line">    <span class="comment">//如果进去的们打开着,执行此函数</span></span><br><span class="line">    <span class="comment">//获取鼠标进入的位置</span></span><br><span class="line">    <span class="comment">//生成元素的位置 = 进入点距离窗口的距离 - 父盒子距离窗口的距离</span></span><br><span class="line">    <span class="keyword">let</span> inx = e.clientX - e.target.offsetLeft <span class="comment">//鼠标进入时，离盒子左边的距离</span></span><br><span class="line">    <span class="keyword">let</span> iny = e.clientY - e.target.offsetTop <span class="comment">//鼠标进入时，离盒子顶部的距离</span></span><br><span class="line">    <span class="comment">//创建一个span元素，并且给他对应的出生坐标</span></span><br><span class="line">    <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    el.style.left = inx + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    el.style.top = iny + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    con.appendChild(el) <span class="comment">//追加创建的元素到盒子</span></span><br><span class="line"></span><br><span class="line">    span = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.container span&#x27;</span>) <span class="comment">//获取刚创建的span元素</span></span><br><span class="line">    span.classList.remove(<span class="string">&#x27;out&#x27;</span>) <span class="comment">//移除出去的动画</span></span><br><span class="line">    span.classList.add(<span class="string">&#x27;in&#x27;</span>) <span class="comment">//添加进入的动画</span></span><br><span class="line">    isIn = <span class="literal">false</span> <span class="comment">//关闭进来的们(不能使用进入的方法)</span></span><br><span class="line">    isOut = <span class="literal">true</span> <span class="comment">//打开出去的门(可以使用出去的方法)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//监听鼠标出来的时间+出来的方法</span></span><br><span class="line">con.addEventListener(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isOut) &#123;</span><br><span class="line">    <span class="comment">//如果出去的们打开着,执行此函数</span></span><br><span class="line">    <span class="comment">//获取鼠标进入的位置</span></span><br><span class="line">    <span class="comment">//生成元素的位置 = 进入点距离窗口的距离 - 父盒子距离窗口的距离</span></span><br><span class="line">    <span class="keyword">let</span> inx = e.clientX - e.target.offsetLeft <span class="comment">//鼠标进入时，离盒子左边的距离</span></span><br><span class="line">    <span class="keyword">let</span> iny = e.clientY - e.target.offsetTop <span class="comment">//鼠标进入时，离盒子顶部的距离</span></span><br><span class="line"></span><br><span class="line">    span.classList.remove(<span class="string">&#x27;in&#x27;</span>) <span class="comment">//移除进入的动画</span></span><br><span class="line">    span.classList.add(<span class="string">&#x27;out&#x27;</span>) <span class="comment">//添加出去的动画</span></span><br><span class="line">    span.setAttribute(<span class="string">&#x27;style&#x27;</span>, <span class="string">`left: <span class="subst">$&#123;inx&#125;</span>px;top:<span class="subst">$&#123;iny&#125;</span>px;`</span>)</span><br><span class="line">    isOut = <span class="literal">false</span> <span class="comment">//关闭出去的门(不可以使用出去的方法)</span></span><br><span class="line">    <span class="comment">//动画结束后删除元素</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      con.removeChild(span) <span class="comment">//删除元素</span></span><br><span class="line">      isIn = <span class="literal">true</span> <span class="comment">//打开进来的们(能使用进入的方法)</span></span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="css-书写顺序"><a href="#css-书写顺序" class="headerlink" title="css 书写顺序"></a>css 书写顺序</h4><ol>
<li>位置属性：position、top、right、z-index、display、float 等</li>
<li>大小：width、height、padding、margin 等</li>
<li>文字系列：font、line-height、letter-spacing、color、text-align 等</li>
<li>背景：background、border 等</li>
<li>其他：animation、transition 等</li>
</ol>
<h4 id="连字符-CSS-选择器命名规范"><a href="#连字符-CSS-选择器命名规范" class="headerlink" title="连字符 CSS 选择器命名规范"></a>连字符 CSS 选择器命名规范</h4><ol>
<li>长名称或词组可以使用中横线-来为选择器命名。</li>
<li>不建议使用_下划线来命名 CSS 选择器 ，为什么呢?</li>
</ol>
<ul>
<li>输入的时候少按一个 shift 键;</li>
<li>浏览器兼容问题(此如使用_ tips 的选择器命名，在 IE6 是无效的)</li>
<li>能良好区分 JavaScript 变量命名(JS 变量命名是用_ )</li>
</ul>
<h4 id="css-常用命名规则"><a href="#css-常用命名规则" class="headerlink" title="css 常用命名规则"></a>css 常用命名规则</h4><h4 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: x轴，正值向右偏移 y轴，正值向下偏移 模糊距离 <span class="built_in">rgba</span>();</span><br></pre></td></tr></table></figure>

<h4 id="sticky-粘性定位"><a href="#sticky-粘性定位" class="headerlink" title="sticky 粘性定位"></a>sticky 粘性定位</h4><p>相当于 relative 和 fixed 的结合体，让元素在距离窗口一定位置时，变成固定在这个位置，其他情况下在正常的文档流中</p>
<p>ul&gt;li{电影$}*5</p>
<ul>

  <li>电影1</li>

  <li>电影2</li>

  <li>电影3</li>

  <li>电影4</li>

  <li>电影5</li>

 </ul>

<h4 id="vscode-代码片段制作"><a href="#vscode-代码片段制作" class="headerlink" title="vscode 代码片段制作"></a>vscode 代码片段制作</h4><p><span class="exturl" data-url="aHR0cHM6Ly9zbmlwcGV0LWdlbmVyYXRvci5hcHAv">https://snippet-generator.app/<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  writing-mode: vertical-rl; //设置文本方向为垂直方向</span><br><span class="line">  text-orientation: mixed; //字体数值或倾斜</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline line-through; //使文字中部和底部有横线</span><br><span class="line"></span><br><span class="line">  <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, sans-serif;</span><br><span class="line">  //设置字体顺序为特殊到一般，特殊字体在前，匹配不到才会使用后面的字体</span><br><span class="line">  //字体名字中间有空格时。需要加上双引号</span><br><span class="line"></span><br><span class="line">  //加载web字体</span><br><span class="line">  <span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;webfont&#x27;</span>; //定义字体名字</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;webfont.woff&#x27;</span>); //web字体url路径</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.aa</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;webfont&#x27;</span>, Arial, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">background-size</span>: contain; //图片按照原来的比例占满整个容器，但是可能会留白</span><br><span class="line">  <span class="attribute">background-size</span>: cover; //图片按照原来的比例占满整个容器,超出容器的部分会被裁剪掉</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">aa.svg</span>) <span class="number">5px</span> <span class="number">6px</span>; //自定义指针图片，并设置xy坐标确定指针区域</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: square; //设置列表前面为正方形</span><br><span class="line">  <span class="attribute">list-style</span>: <span class="built_in">url</span>(<span class="string">aa.svg</span>); //自定义图形</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="css-视差滚动"><a href="#css-视差滚动" class="headerlink" title="css 视差滚动"></a>css 视差滚动</h4><p>background</p>
<ul>
<li>background-color //背景颜色</li>
<li>background-position //背景图像的位置</li>
<li>background-size //背景图像尺寸</li>
<li>background-repeat //如何重复背景图像</li>
<li>background-origin //背景图片的定位区域</li>
<li>background-clip //背景的绘制区域</li>
<li>background-attachment //背景图像是否固定或者随着页面的其余部分滚动</li>
<li>background-image //要使用的背景图像</li>
<li>inhert //应该从父元素继承 background 属性的设置</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: color image position/size repeat origin clip attachment initial|inherit;</span><br></pre></td></tr></table></figure>

<p>user-select:用户能否选中文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user-select: none|auto|text|contain|all;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>none : 元素及其子元素的文本不可选中</p>
</li>
<li><p>text : 文本可以被选中</p>
</li>
<li><p>auto : 文本将根据浏览器的默认属性进行选择</p>
<ul>
<li>在 <code>::before</code> 和 <code>::after</code> 伪元素上，采用的属性值是 <code>none</code></li>
<li>如果元素是可编辑元素，则采用的属性值是 <code>contain</code></li>
<li>否则，如果此元素的父元素的 <code>user-select</code> 采用的属性值为 <code>all</code>，则该元素采用的属性值也为 <code>all</code></li>
<li>否则，如果此元素的父元素的 <code>user-select</code> 采用的属性值为 <code>none</code>，则该元素采用的属性值也为 <code>none</code></li>
<li>否则，采用的属性值为 <code>text</code></li>
</ul>
</li>
<li><p>all : 在一个 HTML 编辑器中，当双击子元素或者上下文时，那么包含该子元素的最顶层元素也会被选中</p>
</li>
<li><p>contain：允许在元素内选择；但是，选区将被限制在该元素的边界之内</p>
</li>
<li><p><code>element</code>（IE 专有别名）</p>
<p>与 <code>contain</code> 相同，但仅在 Internet Explorer 中受支持。</p>
</li>
</ul>
<h4 id="css-动画"><a href="#css-动画" class="headerlink" title="css 动画"></a>css 动画</h4><p>css 动画性能高于 js</p>
<h5 id="transtion-过渡"><a href="#transtion-过渡" class="headerlink" title="transtion 过渡"></a>transtion 过渡</h5><p>常用动画效果<span class="exturl" data-url="aHR0cHM6Ly9lYXNpbmdzLm5ldC9jbg==">https://easings.net/cn<i class="fa fa-external-link-alt"></i></span></p>
<p>设置多个不同属性的过渡使用逗号分割</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: background <span class="number">1s</span> linear <span class="number">0s</span>, font-size <span class="number">1.5s</span> ease-in;</span><br></pre></td></tr></table></figure>

<h5 id="keyframes-关键帧"><a href="#keyframes-关键帧" class="headerlink" title="@keyframes 关键帧"></a>@keyframes 关键帧</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="comment">/*也可用0%表示*/</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">80%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">15deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="comment">/*也可用100%表示*/</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>animationd 属性：</p>
<ul>
<li>animation-name 定义的@keyframes 的名字</li>
<li>animation-duration 动画执行时长</li>
<li>animation-timing-function 动画时间函数</li>
<li>animation-delay 动画执行延迟</li>
<li>animation-iteration-count 动画执行次数，可以为数字，或者 infinite 让他循环执行</li>
<li>animation-direction 动画执行方向，默认使开始到结束，设置 reverse 则反向执行,alternate 交替执行等</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: rotate <span class="number">2s</span> ease-in-out <span class="number">0s</span> infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>设置毛玻璃效果(高斯模糊)，使图片变量变暗等等</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1maWx0ZXIuaHRtbA==">https://www.runoob.com/cssref/css3-pr-filter.html<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="登录表单玻璃特效"><a href="#登录表单玻璃特效" class="headerlink" title="登录表单玻璃特效"></a>登录表单玻璃特效</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-form&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;PingFang SC&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;./images/1.jpg&#x27;</span>) fixed no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">background</span>: inherit;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">20px</span>);</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">20px</span>);</span><br><span class="line">  <span class="attribute">background</span>: inherit;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.25</span>);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">6px</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3d5245</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> <span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-class">.login-form</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">6px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3d5245</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3d5245</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">57</span>, <span class="number">88</span>, <span class="number">69</span>, <span class="number">0.4</span>);</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> <span class="selector-tag">button</span>::hover &#123;</span><br><span class="line">  background-color: <span class="built_in">rgba</span>(<span class="number">12</span>, <span class="number">80</span>, <span class="number">38</span>, <span class="number">0.67</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> <span class="selector-tag">button</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.login-form</span> <span class="selector-tag">button</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">179</span>, <span class="number">255</span>, <span class="number">210</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(-<span class="number">15deg</span>);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">30px</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> <span class="selector-tag">button</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">179</span>, <span class="number">255</span>, <span class="number">210</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">320px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">320px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CSS-灵感"><a href="#CSS-灵感" class="headerlink" title="CSS 灵感"></a>CSS 灵感</h4><p><span class="exturl" data-url="aHR0cHM6Ly9jaG9rY29jby5naXRodWIuaW8vQ1NTLUluc3BpcmF0aW9uLyMvLi9pbml0">https://chokcoco.github.io/CSS-Inspiration/#/./init<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="CSS-布局"><a href="#CSS-布局" class="headerlink" title="CSS 布局"></a>CSS 布局</h4><p><span class="exturl" data-url="aHR0cHM6Ly9jc3NsYXlvdXQuaW8vcGF0dGVybnM=">https://csslayout.io/patterns<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="CSS-动画"><a href="#CSS-动画" class="headerlink" title="CSS 动画"></a>CSS 动画</h4><p><span class="exturl" data-url="aHR0cHM6Ly9hbmltaXN0YS5uZXQvcGxheS9iYXNpYy9yb3RhdGU=">https://animista.net/play/basic/rotate<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="修改选中后的文字颜色和文字背景颜色"><a href="#修改选中后的文字颜色和文字背景颜色" class="headerlink" title="修改选中后的文字颜色和文字背景颜色"></a>修改选中后的文字颜色和文字背景颜色</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f90</span>;</span><br><span class="line">  <span class="attribute">color</span>: fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="首字放大"><a href="#首字放大" class="headerlink" title="首字放大"></a>首字放大</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">48px</span>; <span class="comment">/*将第一个字设置为48px*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文字渐变"><a href="#文字渐变" class="headerlink" title="文字渐变"></a>文字渐变</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#ff8a00</span>, <span class="number">#e52e71</span>); <span class="comment">/*给文字内容添加背景渐变*/</span></span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text; <span class="comment">/*对文字进行裁剪*/</span></span><br><span class="line">  -webkit-text-fill-<span class="attribute">color</span>: transparent; <span class="comment">/*将文字本身颜色改变透明色，露出文字后面的背景颜色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图片变为黑白"><a href="#图片变为黑白" class="headerlink" title="图片变为黑白"></a>图片变为黑白</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">	<span class="attribute">filter</span>:<span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="隐藏-a-标签内容"><a href="#隐藏-a-标签内容" class="headerlink" title="隐藏 a 标签内容"></a>隐藏 a 标签内容</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>: -<span class="number">9999px</span>;</span><br></pre></td></tr></table></figure>

<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJME5EUTBPRFUzTUE9PSZhbXA7bWlkPTIyNDc0OTcwNDcmYW1wO2lkeD0xJmFtcDtzbj1mZjJjYzY5ZTc4NTZiMDUxYWEzMjNhMTk1NDEzMjE5NyZhbXA7Y2hrc209ZTk1ZjE5MDJkZTI4OTAxNDFjNjAyMGZlN2MyYjA2ZWQ0ZGI3MmVkZmY3M2VjYjY1ZWM0ZmU1OWUwNzRjOWM4Yzc5ZjNjY2Q2ODk4ZSZhbXA7bXBzaGFyZT0xJmFtcDtzY2VuZT0yMyZhbXA7c3JjaWQ9MDIxNWRsZ00wREdMU1pOOWdWME85VnN0JmFtcDtzaGFyZXJfc2hhcmV0aW1lPTE2MTMzNTU4MjM3MzgmYW1wO3NoYXJlcl9zaGFyZWlkPWM1MmE4ZmNjYjk5MTExNTU3ZTM2ZTQ2MDViYWU1MTM1I3Jk">https://mp.weixin.qq.com/s?__biz=MzI0NDQ0ODU3MA==&amp;mid=2247497047&amp;idx=1&amp;sn=ff2cc69e7856b051aa323a1954132197&amp;chksm=e95f1902de2890141c6020fe7c2b06ed4db72edff73ecb65ec4fe59e074c9c8c79f3ccd6898e&amp;mpshare=1&amp;scene=23&amp;srcid=0215dlgM0DGLSZN9gV0O9Vst&amp;sharer_sharetime=1613355823738&amp;sharer_shareid=c52a8fccb99111557e36e4605bae5135#rd<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="两行显示省略号"><a href="#两行显示省略号" class="headerlink" title="两行显示省略号"></a>两行显示省略号</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>; <span class="comment">/*两行*/</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line"><span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">4em</span> + <span class="number">16px</span>); <span class="comment">/*设置高度为行高的两倍，加上16px是因为设置了padding*/</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">2em</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>; <span class="comment">/*两行*/</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">4em</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">2em</span>;</span><br></pre></td></tr></table></figure>

<h4 id="一行文字两端对齐"><a href="#一行文字两端对齐" class="headerlink" title="一行文字两端对齐"></a>一行文字两端对齐</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&amp;<span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="comment">/*两端对齐对最后一行无效，只有一行文字时，可以给文字加伪元素，使其不是最后一行*/</span></span><br><span class="line">  <span class="attribute">text-align</span>: justify;</span><br><span class="line">  &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="css-实现滚动贴合-Snap-Scroll"><a href="#css-实现滚动贴合-Snap-Scroll" class="headerlink" title="css 实现滚动贴合 Snap Scroll"></a>css 实现滚动贴合 Snap Scroll</h4><p>视频：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVIzNDExcjc5ZA==">https://www.bilibili.com/video/BV1R3411r79d<i class="fa fa-external-link-alt"></i></span></p>
<p>MDN：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL0NTU19TY3JvbGxfU25hcA==">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Scroll_Snap<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  scroll-snap-type: y mandaory; <span class="comment">/*滚动方向   滚动贴合方式 ，父元素开启*/</span></span><br><span class="line">  scroll-<span class="attribute">padding</span>: <span class="number">80px</span>; <span class="comment">/*如果想垂直滚动贴合时距离顶部有一定距离可加上此属性*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  scroll-snap-align: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>JS事件循环-eventLoop</title>
    <url>/20210627/19-JS%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-eventLoop/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="事件循环-eventloop"><a href="#事件循环-eventloop" class="headerlink" title="事件循环 eventloop"></a>事件循环 eventloop</h4><pre><code>执行一个宏任务，然后检查微任务队列有任务没有，如果有就执行微任务队列，执行完 再去执行下一个宏任务
</code></pre>
<span id="more"></span>

<h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。为了协调事件、用户交互、脚本、UI 渲染和网络处理等行为，防止主线程的不阻塞，Event Loop 的方案应用而生。Event Loop 包含两类：一类是基于 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Jyb3dzZXJzLmh0bWwlMjNicm93c2luZy1jb250ZXh0">Browsing Context<i class="fa fa-external-link-alt"></i></span>，一种是基于 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vd3d3LnczLm9yZy9UUi93b3JrZXJzLyUyM3dvcmtlcg==">Worker<i class="fa fa-external-link-alt"></i></span>。二者的运行是独立的，也就是说，每一个 JavaScript 运行的”线程环境”都有一个独立的 Event Loop，每一个 Web Worker 也有一个独立的 Event Loop。</p>
<blockquote>
<p>本文所涉及到的事件循环是基于 Browsing Context。</p>
</blockquote>
<h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>根据规范，事件循环是通过任务队列的机制来进行协调的。一个 Event Loop 中，可以有一个或者多个任务队列(task queue)，一个任务队列便是一系列有序任务(task)的集合；每个任务都有一个任务源(task source)，源自同一个任务源的 task 必须放到同一个任务队列，从不同源来的则被添加到不同队列。setTimeout/Promise 等 API 便是任务源，而进入任务队列的是他们指定的具体执行任务。</p>
<p>在事件循环中，每进行一次循环操作称为 tick，每一次 tick 的任务处理模型是比较复杂的，但关键步骤如下：</p>
<ul>
<li>在此次 tick 中选择最先进入队列的任务(oldest task)，如果有则执行(一次)</li>
<li>检查是否存在 Microtasks，如果存在则不停地执行，直至清空 Microtasks Queue</li>
<li>更新 render</li>
<li>主线程重复执行上述步骤</li>
</ul>
<p>在上诉 tick 的基础上需要了解几点：</p>
<ul>
<li>JS 分为同步任务和异步任务</li>
<li>同步任务都在主线程上执行，形成一个执行栈</li>
<li>主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li>
<li>一旦执行栈中的所有同步任务执行完毕（此时 JS 引擎空闲），系统就会读取任务队列，将可运行的异步任务添加到可执行栈中，开始执行。</li>
</ul>
<p><img src="https://pic4.zhimg.com/80/v2-d437562d6ea5874b3205701819bc1f27_720w.jpg" alt="img"></p>
<h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><p>(macro)task，可以理解是每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）。</p>
<p>浏览器为了能够使得 JS 内部(macro)task 与 DOM 任务能够有序的执行，会在一个(macro)task 执行结束后，在下一个(macro)task 执行开始前，对页面进行重新渲染，流程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(macro)task-&gt;渲染-&gt;(macro)task-&gt;...</span><br></pre></td></tr></table></figure>

<h3 id="宏任务包含："><a href="#宏任务包含：" class="headerlink" title="宏任务包含："></a>宏任务包含：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script(整体代码)</span><br><span class="line">setTimeout</span><br><span class="line">setInterval</span><br><span class="line">I/O</span><br><span class="line">UI交互事件</span><br><span class="line">postMessage</span><br><span class="line">MessageChannel</span><br><span class="line">setImmediate(Node.js 环境)</span><br></pre></td></tr></table></figure>

<h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><p>microtask,可以理解是在当前 task 执行结束后立即执行的任务。也就是说，在当前 task 任务后，下一个 task 之前，在渲染之前。</p>
<p>所以它的响应速度相比 setTimeout（setTimeout 是 task）会更快，因为无需等渲染。也就是说，在某一个 macrotask 执行完后，就会将在它执行期间产生的所有 microtask 都执行完毕（在渲染前）。</p>
<h3 id="微任务包含："><a href="#微任务包含：" class="headerlink" title="微任务包含："></a>微任务包含：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.then</span><br><span class="line">Object.observe</span><br><span class="line">MutationObserver</span><br><span class="line">process.nextTick(Node.js 环境)</span><br></pre></td></tr></table></figure>

<h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p>在事件循环中，每进行一次循环操作称为 tick，每一次 tick 的任务处理模型是比较复杂的，但关键步骤如下：</p>
<ul>
<li>执行一个宏任务（栈中没有就从事件队列中获取）</li>
<li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>
<li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>
<li>当前宏任务执行完毕，开始检查渲染，然后 GUI 线程接管渲染</li>
<li>渲染完毕后，JS 线程继续接管，开始下一个宏任务（从事件队列中获取）</li>
</ul>
<p>如图：</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>一句话概括就是入栈到出栈的循环。即：一个宏任务，所有微任务，渲染(需要渲染的话)，一个宏任务，所有微任务，渲染…..<br>循环过程：</p>
<p>所有同步任务都在主线程上依次执行，形成一个执行栈(调用栈)，异步任务则放入一个任务队列<br>当执行栈中任务执行完，再去检查微任务队列里的微任务是否为空，有就执行，如果执行微任务过程中又遇到微任务，就添加到微任务队列末尾继续执行，把微任务全部执行完<br>微任务执行完后，再到任务队列检查宏任务是否为空，有就取出最先进入队列的宏任务压入执行栈中执行其同步代码<br>然后回到第 2 步执行该宏任务中的微任务，如此反复，直到宏任务也执行完，如此循环</p>
<p><img src="https://pic2.zhimg.com/80/v2-e6dd78c74cb671dd9408c2273308a265_720w.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年，你还不知道的CSS选择器</title>
    <url>/20210628/2-2021%E5%B9%B4%EF%BC%8C%E4%BD%A0%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84CSS%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="2021-年了，你还不知道的-CSS-选择器"><a href="#2021-年了，你还不知道的-CSS-选择器" class="headerlink" title="2021 年了，你还不知道的 CSS 选择器"></a>2021 年了，你还不知道的 CSS 选择器</h4><img title="css选择器" src="https://blog.img.wy1991.cn/static/images/css/cssSelector.png-blogImg">
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>js 手写call bind apply</title>
    <url>/20210701/20-js-%E6%89%8B%E5%86%99call-bind-apply/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> objA = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;肖哥哥&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">objAFun</span>: <span class="function"><span class="keyword">function</span> (<span class="params">form, to</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">`姓名：<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>，年龄：<span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>，来自：<span class="subst">$&#123;form&#125;</span>，目的地是：<span class="subst">$&#123;to&#125;</span>。`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objB = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;七叶一枝花&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">objA.objAFun.myCall(objB, <span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;广西&#x27;</span>)</span><br><span class="line">objA.objAFun.myApply(objB, [<span class="string">&#x27;上海&#x27;</span>])</span><br><span class="line">objA.objAFun.myBind(objB, [<span class="string">&#x27;北京&#x27;</span>])()</span><br></pre></td></tr></table></figure>

<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断调用对象objAFun是否为函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;typeof error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取所有参数</span></span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">null</span></span><br><span class="line">  <span class="comment">// 判断context上下文是否传入，否则设置为对象函数</span></span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  <span class="comment">// 将调用对象设为对象函数</span></span><br><span class="line">  context.fn = <span class="built_in">this</span></span><br><span class="line">  <span class="comment">// 调用函数</span></span><br><span class="line">  result = context.fn(...args)</span><br><span class="line">  <span class="comment">// 将属性删除</span></span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">null</span></span><br><span class="line">  <span class="comment">// 如果有传入参数，则传入参数并调用函数</span></span><br><span class="line">  <span class="keyword">if</span> ([...arguments][<span class="number">1</span>]) &#123;</span><br><span class="line">    result = context.fn([...arguments][<span class="number">1</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context.fn()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;type error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 根据调用方式，传入不同绑定值</span></span><br><span class="line">    <span class="keyword">return</span> fn.apply(</span><br><span class="line">      <span class="built_in">this</span> <span class="keyword">instanceof</span> Fn ? <span class="built_in">this</span> : context,</span><br><span class="line">      args.concat(...arguments)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>apply</tag>
        <tag>bind</tag>
        <tag>call</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>js-手写面试题</title>
    <url>/20210718/21-js-%E6%89%8B%E5%86%99%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>面试题归面试题，但是还是需要仔细研究研究下面实现方式，扩展自己的思路~，提高解决问题的能力！</p>
</blockquote>
<h2 id="实现-instanceof-运算符"><a href="#实现-instanceof-运算符" class="headerlink" title="实现 instanceof 运算符"></a>实现 instanceof 运算符</h2><p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上，运算符左侧是实例对象，右侧是构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iInstanceof = <span class="function"><span class="keyword">function</span> (<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果是原始值，则始终返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (left === <span class="literal">null</span> || <span class="keyword">typeof</span> left !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">let</span> proto = <span class="built_in">Object</span>.getPrototypeOf(left);</span><br><span class="line"> 	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (proto === right.prototype) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        proto = <span class="built_in">Object</span>.getPrototypeOf(proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这是常见的实现，我们也可以用 isPrototypeOf 实现</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">const iInstanceof = <span class="keyword">function</span> <span class="title"></span>(left, right) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">right.prototype.isPrototypeOf(left)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="实现-new-操作符"><a href="#实现-new-操作符" class="headerlink" title="实现 new 操作符"></a>实现 new 操作符</h2><p>new 执行过程如下：</p>
<ul>
<li><p>创建一个新对象；</p>
</li>
<li><p>新对象的[[prototype]]特性指向构造函数的 prototype 属性；</p>
</li>
<li><p>构造函数内部的 this 指向新对象；</p>
</li>
<li><p>执行构造函数；</p>
</li>
<li><p>如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象；</p>
</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iNew = <span class="function"><span class="keyword">function</span> <span class="params">(fn, <span class="rest_arg">...rest</span>)</span> </span>&#123;</span><br><span class="line">	let instance = Object.create(fn.prototype);</span><br><span class="line">    let res = fn.apply(instance, rest);</span><br><span class="line">    <span class="keyword">return</span> res !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> res === <span class="string">&#x27;function&#x27;</span>) ? res : instance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="实现-Object-assign-方法"><a href="#实现-Object-assign-方法" class="headerlink" title="实现 Object.assign 方法"></a>实现 Object.assign 方法</h2><p>浅拷贝方法，只会拷贝源对象自身的且可枚举的属性（包括以 Symbol 为 key 的属性）到目标对象</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iAssign = <span class="function"><span class="keyword">function</span> <span class="params">(target, <span class="rest_arg">...source</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target === <span class="literal">null</span> || target === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> TypeError(<span class="string">&#x27;Cannot convert undefined or null to object&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    let res = Object(target);</span><br><span class="line">    <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; source.length; i++) &#123;</span><br><span class="line">        let src = source[i];</span><br><span class="line">        let keys = [...Object.keys(src), ...Object.getOwnPropertySymbols(src)];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> k of keys) &#123;</span><br><span class="line">            <span class="keyword">if</span> (src.propertyIsEnumerable(k)) &#123;</span><br><span class="line">                res[k] = src[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 保持 assign 的数据属性一致</span></span><br><span class="line">Object.defineProperty(Object, <span class="string">&#x27;iAssign&#x27;</span>, &#123;</span><br><span class="line">    value: iAssign,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="手写bind-方法"><a href="#手写bind-方法" class="headerlink" title="手写bind 方法"></a>手写bind 方法</h2><p>改变函数内 this 的值并且传参，返回一个函数</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iBind = <span class="function"><span class="keyword">function</span> <span class="params">(thisArg, <span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> originFunc = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> boundFunc = <span class="function"><span class="keyword">function</span> <span class="params">(<span class="rest_arg">...args1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 解决 bind 之后对返回函数 new 的问题</span></span><br><span class="line">       <span class="keyword">return</span> originFunc.apply(<span class="keyword">new</span>.target ? <span class="keyword">this</span> : thisArg, args.concat(args1));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (originFunc.prototype) &#123;</span><br><span class="line">        boundFunc.prototype = originFunc.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解决length 和 name 属性问题</span></span><br><span class="line">    <span class="keyword">const</span> desc = Object.getOwnPropertyDescriptors(originFunc);</span><br><span class="line">    Object.defineProperties(boundFunc, &#123;</span><br><span class="line">        length: Object.assign(desc.length, &#123;</span><br><span class="line">            value: desc.length.value &lt; args.length ? <span class="number">0</span> : (desc.length.value - args.length)</span><br><span class="line">        &#125;),</span><br><span class="line">        name: Object.assign(desc.name, &#123;</span><br><span class="line">            value: `bound $&#123;desc.name.value&#125;`</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> boundFunc;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 保持 bind 的数据属性一致</span></span><br><span class="line">Object.defineProperty(Function.prototype, <span class="string">&#x27;iBind&#x27;</span>, &#123;</span><br><span class="line">    value: iBind,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="手写call-方法"><a href="#手写call-方法" class="headerlink" title="手写call 方法"></a>手写call 方法</h2><p>用指定的 this 值和参数来调用函数</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iCall = <span class="function"><span class="keyword">function</span> <span class="params">(thisArg, <span class="rest_arg">...args</span>)</span> </span>&#123;</span><br><span class="line">    thisArg = (thisArg === <span class="literal">undefined</span> || thisArg === <span class="literal">null</span>) ? window : Object(thisArg);</span><br><span class="line">    let fn = Symbol(<span class="string">&#x27;fn&#x27;</span>);</span><br><span class="line">    thisArg[fn] = <span class="keyword">this</span>;</span><br><span class="line">    let res =  thisArg[fn](...args);</span><br><span class="line">    <span class="keyword">delete</span> thisArg[fn];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 保持 call 的数据属性一致</span></span><br><span class="line">Object.defineProperty(Function.prototype, <span class="string">&#x27;iCall&#x27;</span>, &#123;</span><br><span class="line">    value: iCall,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><p>将一个多参数函数转化为多个嵌套的单参数函数。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="keyword">function</span> <span class="params">(targetFn)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span> <span class="params">(<span class="rest_arg">...rest</span>)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span> (targetFn.length === rest.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> targetFn.apply(<span class="literal">null</span>, rest);</span><br><span class="line">        &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> fn.bind(<span class="literal">null</span>, ...rest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> <span class="params">(a, b, c, d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">&#125;</span><br><span class="line">console.log(<span class="string">&#x27;柯里化：&#x27;</span>, curry(add)(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)); </span><br><span class="line"><span class="comment">// 柯里化： 10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="函数防抖-debounce-方法"><a href="#函数防抖-debounce-方法" class="headerlink" title="函数防抖 debounce 方法"></a>函数防抖 debounce 方法</h2><p>leading 表示进入时是否立即执行，如果在wait 时间内触发事件，则会将上一个定时器清除，并重新再设置一个 wait 时间的定时器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> debounce = <span class="function"><span class="keyword">function</span> (<span class="params">func, wait = <span class="number">0</span>, options = &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    leading: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">let</span> res;</span><br><span class="line">    <span class="keyword">const</span> _debounce = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        options.context || (options.context = <span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">           <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.leading &amp;&amp; !timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait);</span><br><span class="line">            res = func.apply(options.context, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">               res = func.apply(options.context, args);</span><br><span class="line">               timer = <span class="literal">null</span>;</span><br><span class="line">           &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line">    _debounce.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> _debounce;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="函数节流-throttle-方法"><a href="#函数节流-throttle-方法" class="headerlink" title="函数节流 throttle 方法"></a>函数节流 throttle 方法</h2><p>函数节流就像水龙头滴水一样，间隔 wait 时间就会触发一次，这里相比函数防抖新增了 trailing 选项，表示是否在最后额外触发一次。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">const <span class="attr">throttle</span> = function (func, <span class="attr">wait</span> = <span class="number">0</span>, <span class="attr">options</span> = &#123;</span><br><span class="line">    leading: <span class="literal">true</span>,</span><br><span class="line">    trailing: <span class="literal">false</span>,</span><br><span class="line">    context: <span class="literal">null</span></span><br><span class="line">&#125;) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">let</span> res;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">previous</span> = <span class="number">0</span>;</span><br><span class="line">    const <span class="attr">_throttle</span> = function (...args) &#123;</span><br><span class="line">        options.context || (options.<span class="attr">context</span> = this);</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">now</span> = Date.now();</span><br><span class="line">        <span class="keyword">if</span> (!previous &amp;&amp; !options.leading) <span class="attr">previous</span> = now;</span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt;= wait) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">                clearTimeout(timer);</span><br><span class="line">                <span class="attr">timer</span> = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attr">res</span> = func.apply(options.context, args);</span><br><span class="line">            <span class="attr">previous</span> = now;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timer &amp;&amp; options.trailing) &#123;</span><br><span class="line">            <span class="attr">timer</span> = setTimeout(() =&gt; &#123;</span><br><span class="line">                <span class="attr">res</span> = func.apply(options.context, args);</span><br><span class="line">                <span class="attr">previous</span> = <span class="number">0</span>;</span><br><span class="line">                <span class="attr">timer</span> = <span class="literal">null</span>;</span><br><span class="line">           &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;;</span><br><span class="line">    _throttle.<span class="attr">cancel</span> = function () &#123;</span><br><span class="line">        <span class="attr">previous</span> = <span class="number">0</span>;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        <span class="attr">timer</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    return _throttle;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="事件发布订阅（EventBus-事件总线）"><a href="#事件发布订阅（EventBus-事件总线）" class="headerlink" title="事件发布订阅（EventBus 事件总线）"></a>事件发布订阅（EventBus 事件总线）</h2><p>自定义事件的时候用到，注意一些边界的检查</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, <span class="string">&#x27;handles&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">value</span>: &#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    on (eventName, listener) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;请传入正确的回调函数&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.handles[eventName]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.handles[eventName] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.handles[eventName].push(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    emit (eventName, ...args) &#123;</span><br><span class="line">        <span class="keyword">let</span> listeners = <span class="built_in">this</span>.handles[eventName];</span><br><span class="line">        <span class="keyword">if</span> (!listeners) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">`<span class="subst">$&#123;eventName&#125;</span>事件不存在`</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> listener <span class="keyword">of</span> listeners) &#123;</span><br><span class="line">            listener(...args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    off (eventName, listener) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!listener) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="built_in">this</span>.handles[eventName];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> listeners = <span class="built_in">this</span>.handles[eventName];</span><br><span class="line">        <span class="keyword">if</span> (listeners &amp;&amp; listeners.length) &#123;</span><br><span class="line">            <span class="keyword">let</span> index = listeners.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item === listener);</span><br><span class="line">            <span class="keyword">if</span> (~index) &#123;</span><br><span class="line">              listeners.splice(index, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    once (eventName, listener) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;请传入正确的回调函数&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> onceListener = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">            listener(...args);</span><br><span class="line">            <span class="built_in">this</span>.off(eventName, onceListener);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">this</span>.on(eventName, onceListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>这个是深拷贝的很基础版本，其中存在一些问题，比如循环引用，比如递归爆栈</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const deepClone = <span class="keyword">function</span> (<span class="built_in">source</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">source</span> === null || typeof <span class="built_in">source</span> !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="built_in">source</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">let</span> res = Array.isArray(<span class="built_in">source</span>) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (const key <span class="keyword">in</span> <span class="built_in">source</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Object.prototype.hasOwnProperty.call(<span class="built_in">source</span>, key)) &#123;</span><br><span class="line">            res[key] = deepClone(<span class="built_in">source</span>[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="实现-ES6-的Class"><a href="#实现-ES6-的Class" class="headerlink" title="实现 ES6 的Class"></a>实现 ES6 的Class</h2><p>用构造函数模拟，class 只能用 new 创建，不可以直接调用，另外注意一下属性的描述符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> checkNew = <span class="function"><span class="keyword">function</span> (<span class="params">instance, con</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> con)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`Class constructor <span class="subst">$&#123;con.name&#125;</span> cannot be invoked without &#x27;new&#x27;`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> defineProperties = <span class="function"><span class="keyword">function</span> (<span class="params">target, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">            <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">value</span>: obj[key],</span><br><span class="line">            <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> createClass = <span class="function"><span class="keyword">function</span> (<span class="params">con, proto, staticAttr</span>) </span>&#123;</span><br><span class="line">    proto &amp;&amp; defineProperties(con.prototype, proto);</span><br><span class="line">    staticAttr &amp;&amp; defineProperties(con, staticAttr);</span><br><span class="line">    <span class="keyword">return</span> con;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    checkNew(<span class="built_in">this</span>, Person);</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> PersonClass = createClass(Person, &#123;</span><br><span class="line">    <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="实现-ES6-的继承"><a href="#实现-ES6-的继承" class="headerlink" title="实现 ES6 的继承"></a>实现 ES6 的继承</h2><p>ES6 内部使用寄生组合式继承，首先用 Object.create 继承原型，并传递第二个参数以将父类构造函数指向自身，同时设置数据属性描述符。</p>
<p>然后用 Object.setPrototypeOf 继承静态属性和静态方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inherit = <span class="function"><span class="keyword">function</span> (<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 对 superType 进行类型判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> superType !== <span class="string">&quot;function&quot;</span> &amp;&amp; superType !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Super expression must either be null or a function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    subType.prototype = <span class="built_in">Object</span>.create(superType &amp;&amp; superType.prototype, &#123;</span><br><span class="line">        <span class="attr">constructor</span>: &#123;</span><br><span class="line">            <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">value</span>: subType,</span><br><span class="line">            <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">	<span class="comment">// 继承静态方法</span></span><br><span class="line">	superType &amp;&amp; <span class="built_in">Object</span>.setPrototypeOf(subType, superType);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">superType</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">superType.staticFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;staticFn&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">superType.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;name: &#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subType</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    superType.call(<span class="built_in">this</span>, name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">inherit(subType, superType);</span><br><span class="line"><span class="comment">// 必须在继承之后再往 subType 中添加原型方法，否则会被覆盖掉</span></span><br><span class="line">subType.prototype.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;age: &#x27;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> subTypeInstance = <span class="keyword">new</span> subType(<span class="string">&#x27;Twittytop&#x27;</span>, <span class="number">29</span>);</span><br><span class="line">subType.staticFn();</span><br><span class="line">subTypeInstance.getName();</span><br><span class="line">subTypeInstance.getAge();</span><br></pre></td></tr></table></figure>

<h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取窗口高度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWindowHeight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTop</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = e.offsetTop;</span><br><span class="line">    <span class="keyword">while</span> (e = e.offsetParent) &#123;</span><br><span class="line">        t += e.offsetTop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> delta = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyLoad</span> (<span class="params">imgs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> winH = getWindowHeight();</span><br><span class="line">    <span class="keyword">const</span> s = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = imgs.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (winH + s + delta &gt; getTop(imgs[i]) &amp;&amp; getTop(imgs[i]) + imgs[i].offsetHeight + delta &gt; s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!imgs[i].src) &#123;</span><br><span class="line">                imgs[i].src = imgs[i].getAttribute(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">            	count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count === l) &#123;</span><br><span class="line">                <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;scroll&#x27;</span>, handler);</span><br><span class="line">                <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;load&#x27;</span>, handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    lazyLoad(imgs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, handler);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, handler);</span><br></pre></td></tr></table></figure>

<p>当然你也可以用 getBoundingClientRect 方法：</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取窗口高度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWindowHeight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> delta = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyLoad</span> (<span class="params">imgs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> winH = getWindowHeight();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = imgs.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">rect</span> = imgs[i].getBoundingClientRect();</span><br><span class="line">        <span class="keyword">if</span> (winH + delta &gt; <span class="built_in">rect</span>.top &amp;&amp; <span class="built_in">rect</span>.bottom &gt; -delta) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!imgs[i].src) &#123;</span><br><span class="line">                imgs[i].src = imgs[i].getAttribute(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">            	count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count === l) &#123;</span><br><span class="line">                <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;scroll&#x27;</span>, handler);</span><br><span class="line">                <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;load&#x27;</span>, handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    lazyLoad(imgs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, handler);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, handler);</span><br></pre></td></tr></table></figure>

<p>当然你也可以用 IntersectionObserver 方法:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyLoad</span> (<span class="params">imgs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">        <span class="attr">rootMargin</span>: <span class="string">&#x27;30px&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">        entries.forEach(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.intersectionRatio &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                entry.target.src = entry.target.getAttribute(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">                count++;</span><br><span class="line">                observer.unobserve(entry.target);</span><br><span class="line">                <span class="keyword">if</span> (count === imgs.length) &#123;</span><br><span class="line">                    <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;load&#x27;</span>, handler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, options);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">        observer.observe(imgs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    lazyLoad(imgs);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, handler);</span><br></pre></td></tr></table></figure>

<h2 id="实现Object-is-方法"><a href="#实现Object-is-方法" class="headerlink" title="实现Object.is 方法"></a>实现Object.is 方法</h2><p>Object.is() 和 === 的区别是 Object.is(0, -0) 返回 false, Object.is(NaN, NaN) 返回 true。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">const iIs = <span class="keyword">function</span> <span class="title"></span>(x, y) &#123;</span><br><span class="line">    if (x === y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">x</span> !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 保持 <span class="keyword">is</span> 的数据属性一致</span><br><span class="line">Object.defineProperty(<span class="keyword">Function</span>.prototype, <span class="symbol">&#x27;iIs</span>&#x27;, &#123;</span><br><span class="line">    value: iIs,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="时间切片"><a href="#时间切片" class="headerlink" title="时间切片"></a>时间切片</h2><p>把长任务切割成多个小任务，使用场景是防止一个任务执行时间过长而阻塞线程</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ts</span> (<span class="params">gen</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> gen === <span class="string">&#x27;function&#x27;</span>) gen = gen();</span><br><span class="line">    <span class="keyword">if</span> (!gen || <span class="keyword">typeof</span> gen.next !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> start = performance.now();</span><br><span class="line">        <span class="keyword">let</span> res = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            res = gen.next();</span><br><span class="line">        &#125; <span class="keyword">while</span>(!res.done &amp;&amp; performance.now() - start &lt; <span class="number">25</span>)</span><br><span class="line">        <span class="keyword">if</span> (res.done) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(next);</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line">ts(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> start = performance.now();</span><br><span class="line">    <span class="keyword">while</span> (performance.now() - start &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;done!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="CO-（协程）实现"><a href="#CO-（协程）实现" class="headerlink" title="CO （协程）实现"></a>CO （协程）实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span> (<span class="params">gen</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> gen === <span class="string">&#x27;function&#x27;</span>) gen = gen();</span><br><span class="line">    	<span class="keyword">if</span> (!gen || <span class="keyword">typeof</span> gen.next !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span> resolve(gen);</span><br><span class="line">        onFulfilled();</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> ret;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ret = gen.next(res);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">return</span> reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">            next(ret);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">onRejected</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> ret;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ret = gen.throw(err);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">return</span> reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">            next(ret);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">next</span> (<span class="params">ret</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ret.done) <span class="keyword">return</span> resolve(ret.value);</span><br><span class="line">            <span class="keyword">let</span> val = <span class="built_in">Promise</span>.resolve(ret.value);</span><br><span class="line">            <span class="keyword">return</span> val.then(onFulfilled, onRejected);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res1 = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res1);</span><br><span class="line">    <span class="keyword">let</span> res2 = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res2);</span><br><span class="line">    <span class="keyword">let</span> res3 = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res3);</span><br><span class="line">    <span class="keyword">return</span> res1 + res2 + res3;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;add: &#x27;</span> + value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>co 接受一个生成器函数，当遇到 yield 时就暂停执行，交出控制权，当其他程序执行完毕后，将结果返回并从中断的地方继续执行，如此往复，一直到所有的任务都执行完毕，最后返回一个 Promise 并将生成器函数的返回值作为 resolve 值。<br>我们将 * 换成 async，将 yield 换成 await 时，就和我们经常用的 async/await 是一样的，所以说 async/await 是生成器函数的语法糖。</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> getSingleton = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance || (instance = <span class="keyword">new</span> (fn.bind(<span class="built_in">this</span>, ...arguments)));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> singleton = getSingleton(Person);</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> singleton(<span class="string">&#x27;Twittop1&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> singleton(<span class="string">&#x27;Twittop2&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1 === instance2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>当然你也可以用 ES6 的 Proxy 实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getSingleton = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line">    <span class="keyword">const</span> handler = &#123;</span><br><span class="line">        construct (target, argumentsList) &#123;</span><br><span class="line">           <span class="keyword">return</span> instance || (instance = <span class="built_in">Reflect</span>.construct(target, argumentsList)); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(fn, handler);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> singleton = getSingleton(Person);</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> singleton(<span class="string">&#x27;Twittop1&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> singleton(<span class="string">&#x27;Twittop2&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1 === instance2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !!(obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPromise</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> <span class="built_in">Promise</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isThenable</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (isFunction(obj) || isObject(obj)) &amp;&amp; <span class="string">&#x27;then&#x27;</span> <span class="keyword">in</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transition</span> (<span class="params">promise, state, result</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 一旦变成非 pending 状态，就不可逆</span></span><br><span class="line">    <span class="keyword">if</span> (promise.state !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">    promise.state = state;</span><br><span class="line">    promise.result = result;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> promise.callbacks.forEach(<span class="function"><span class="params">callback</span> =&gt;</span> handleCallback(callback, state, result)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span> (<span class="params">promise, result, resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (promise === result) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise&#x27;</span>));</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (isPromise(result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> result.then(resolve, reject);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (isThenable(result)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> then = result.then;</span><br><span class="line">        <span class="keyword">if</span> (isFunction(then)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(then.bind(result)).then(resolve, reject);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleCallback</span> (<span class="params">callback, state, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; onFulfilled, onRejected, resolve, reject &#125; = callback;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">            isFunction(onFulfilled) ? resolve(onFulfilled(result)) : resolve(result);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">            isFunction(onRejected) ? resolve(onRejected(result)) : reject(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params">executor</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.result = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="built_in">this</span>.callbacks = [];</span><br><span class="line">        <span class="keyword">let</span> onFulfilled = <span class="function"><span class="params">value</span> =&gt;</span> transition(<span class="built_in">this</span>, <span class="string">&#x27;fulfilled&#x27;</span>, value);</span><br><span class="line">        <span class="keyword">let</span> onRejected = <span class="function"><span class="params">reason</span> =&gt;</span> transition(<span class="built_in">this</span>, <span class="string">&#x27;rejected&#x27;</span>, reason);</span><br><span class="line">        <span class="comment">// 保证 resolve 或 reject 只有一次调用</span></span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            resolvePromise(<span class="built_in">this</span>, value, onFulfilled, onRejected);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            onRejected(reason);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           executor(resolve, reject); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    then (onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> callback = &#123; onFulfilled, onRejected, resolve, reject &#125;;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.callbacks.push(callback);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    handleCallback(callback, <span class="built_in">this</span>.state, <span class="built_in">this</span>.result);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (onRejected) &#123;</span><br><span class="line">        <span class="built_in">this</span>.then(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 无论成功还是失败都会执行，一般都会传递前一个 promise 的状态，只有在 onFinally 抛出错误（显示抛出或 reject）的时候才会返回一个 rejected 的 promise</span></span><br><span class="line">    <span class="keyword">finally</span> (onFinally) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.then(</span><br><span class="line">            <span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(onFinally()).then(<span class="function">() =&gt;</span> val),</span><br><span class="line">            <span class="function"><span class="params">rea</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(onFinally()).then(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> rea; &#125;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> resolve (value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPromise(value)) <span class="keyword">return</span> value;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> resolve(value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> reject (reason) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(reason));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当所有 promise 都返回 fulfilled 的时候，它才会返回一个 fulfilled 的 promise，里面包含了对应结果的数组，否则只要一个 promise 返回 rejected，它就会返回一个 rejected 的 promise，其中包含第一个 rejected 的 promise 抛出的错误信息</span></span><br><span class="line">    <span class="keyword">static</span> all (iterable) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> arr = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = iterable.length; i &lt; l; i ++) &#123;</span><br><span class="line">                iterable[i].then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    arr[i] = val;</span><br><span class="line">                    <span class="keyword">if</span> (count === l) &#123;</span><br><span class="line">                        reresolve(arr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, reject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只要有一个 promise 返回 fulfilled 或 rejected，它就会返回一个 fulfilled 或 rejected 的 promise</span></span><br><span class="line">    <span class="keyword">static</span> race (iterable) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">                p.then(resolve, reject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当所有 promise 都 fulfilled 或 rejected 后，返回一个包含对应结果的数组</span></span><br><span class="line">    <span class="keyword">static</span> allSettled (iterable) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> arr = [];</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">handle</span> (<span class="params">state, index, result</span>) </span>&#123;</span><br><span class="line">                arr[index] = &#123;</span><br><span class="line">                    <span class="attr">status</span>: state,</span><br><span class="line">                    [state === <span class="string">&#x27;fulfilled&#x27;</span> ? <span class="string">&#x27;value&#x27;</span> : <span class="string">&#x27;reason&#x27;</span>]: result</span><br><span class="line">                &#125;;</span><br><span class="line">                count++;</span><br><span class="line">				<span class="keyword">if</span> (count === iterable.length) &#123;</span><br><span class="line">                    resolve(arr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = iterable.length; i &lt; l; i ++) &#123;</span><br><span class="line">                iterable[i].then(<span class="function"><span class="params">val</span> =&gt;</span> handle (<span class="string">&#x27;fulfilled&#x27;</span>, i, val), <span class="function"><span class="params">rea</span> =&gt;</span> handle (<span class="string">&#x27;rejected&#x27;</span>, i, rea));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只要有一个 promise 成功，就会返回一个成功的 promise，否则返回一个 AggregateError 类型实例的失败 promise</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">any</span> (iterable) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> arr = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = iterable.length; i &lt; l; i ++) &#123;</span><br><span class="line">                iterable[i].then(resolve, <span class="function"><span class="params">rea</span> =&gt;</span> &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    arr[i] = rea;</span><br><span class="line">                    <span class="keyword">if</span> (count === l) &#123;</span><br><span class="line">                        reject(<span class="keyword">new</span> AggregateError(arr));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Promise 有三种状态 pending、fulfilled 和 rejected，pending 是最初的状态，一旦落定为 fulfilled 或 rejected 状态，就不可逆。且一旦执行 resolve 或 reject，后面的 resolve 或 reject 就不会生效。then 传入的回调函数有可能延迟执行，所以需放到 callbacks 数组中，等状态变更的时候再取出执行。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>有些代码可能需要不断消化才能理解透彻（大佬除外）。</p>
<p>更多优秀文章</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODU2NDg5MzY1NTE4I2hlYWRpbmctMzE=">一个合格的中级前端工程师需要掌握的 28 个 JavaScript 技巧<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNDk0MjU2NzA1NTQz">JavaScript 专题之函数记忆<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNDkwNzcxMjIyNTQy">JavaScript 专题之函数柯里化<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNzE3NTYxNDM0MTI2">ES6 系列之私有变量的实现<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNTAzMDk0MDg3Njg4">JavaScript专题之乱序<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js 原型与原型链</title>
    <url>/20210629/22-js-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><blockquote>
<p>总结：实例对象都有一个 <strong>proto</strong>属性 ，指向 构造函数的 prototype 构造函数有一个 prototype 下有一个 constructor 指向构造函数本身</p>
</blockquote>
<p>看代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="keyword">function</span>(name,age)&#123;</span><br><span class="line">	this.name = name</span><br><span class="line">  this.age = age</span><br><span class="line">  this.say = <span class="keyword">function</span><span class="literal">()</span>&#123;</span><br><span class="line">  	console.log(<span class="string">&quot;hello &quot;</span> + this.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="constructor">Person(&#x27;<span class="params">zhangsan</span>&#x27;,18)</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="constructor">Person(&#x27;<span class="params">lisi</span>&#x27;,20)</span></span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.eat = <span class="keyword">function</span><span class="literal">()</span>&#123;</span><br><span class="line">	console.log(<span class="string">&quot;chichichi&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p1.__proto__<span class="operator"> === </span><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototye   <span class="comment">// true  仔细理解下，实例对象的__proto__指向 构造函数的 prototype</span></span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.constructor<span class="operator"> == </span>Person <span class="comment">//true  构造函数的原型上有一个constructor 指向构造函数，形成循环引用</span></span><br><span class="line"><span class="comment">//意味这</span></span><br><span class="line">p1.__proto__constructor<span class="operator"> === </span>Person <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正常的原型链 到Object结束，Object的原形是null</span></span><br><span class="line"></span><br><span class="line">console.log(<span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.__proto__<span class="operator"> === </span><span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>prototype); <span class="comment">// true</span></span><br><span class="line">console.log(<span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.<span class="module-access"><span class="module"><span class="identifier">__proto__</span>.</span></span>constructor<span class="operator"> === </span>Object); <span class="comment">// true</span></span><br><span class="line">console.log(<span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.<span class="module-access"><span class="module"><span class="identifier">__proto__</span>.</span><span class="module"><span class="identifier">__proto__</span> </span><span class="operator">==</span></span>= null); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<img title="原型与原型链" src="https://blog.img.wy1991.cn/static/images/js/prototype.png-blogImg">

<img title="原型与原型链" src="https://blog.img.wy1991.cn/static/images/js/原型与原型链.png-blogImg">
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>原型与原型链</tag>
      </tags>
  </entry>
  <entry>
    <title>js 中的堆与栈</title>
    <url>/20210628/23-js-%E4%B8%AD%E7%9A%84%E5%A0%86%E4%B8%8E%E6%A0%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>js 分类基本类型和引用类型</p>
<p>比如 string number boolean null Undefined 属于基本类型</p>
<p>object array function 属于引用类型</p>
<p>基本类型存到栈里面，直接根据值取寻找，</p>
<p>引用类型 把内存指针放到 栈里面，然后值放到 堆里面， 查找到时候，先去栈里面找到内存地址，然后去堆里面取</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">这里先说两个概念：<span class="number">1</span>、堆（heap）<span class="number">2</span>、栈（stack）</span><br><span class="line">堆 是堆内存的简称。</span><br><span class="line">栈 是栈内存的简称。</span><br><span class="line">说到堆栈，我们讲的就是内存的使用和分配了，没有寄存器的事，也没有硬盘的事。</span><br><span class="line">各种语言在处理堆栈的原理上都大同小异。堆是动态分配内存，内存大小不一，也不会自动释放。栈是自动分配相对固定大小的内存空间，并由系统自动释放。</span><br><span class="line"></span><br><span class="line">javascript的基本类型就<span class="number">5</span>种:Undefined、Null、<span class="built_in">Boolean</span>、<span class="built_in">Number</span>和<span class="built_in">String</span>，它们都是直接按值存储在栈中的，每种类型的数据占用的内存空间的大小是确定的，并由系统自动分配和自动释放。这样带来的好处就是，内存可以及时得到回收，相对于堆来说，更加容易管理内存空间。</span><br><span class="line"></span><br><span class="line">javascript中其他类型的数据被称为引用类型的数据 : 如对象(<span class="built_in">Object</span>)、数组(<span class="built_in">Array</span>)、函数(<span class="built_in">Function</span>) …，它们是通过拷贝和<span class="keyword">new</span>出来的，这样的数据存储于堆中。其实，说存储于堆中，也不太准确，因为，引用类型的数据的地址指针是存储于栈中的，当我们想要访问引用类型的值的时候，需要先从栈中获得对象的地址指针，然后，在通过地址指针找到堆中的所需要的数据。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs 编写bash脚本</title>
    <url>/20210702/25-nodejs-%E7%BC%96%E5%86%99bash%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="👏-nodejs-写-bash-脚本终极方案！"><a href="#👏-nodejs-写-bash-脚本终极方案！" class="headerlink" title="👏 nodejs 写 bash 脚本终极方案！"></a>👏 nodejs 写 bash 脚本终极方案！</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习 bash 脚本语法，但是如果对 bash 语法不是熟手的话，感觉非常容易出错，比如说：显示未定义的变量 shell 中变量没有定义，仍然是可以使用的，但是它的结果可能不是你所预期的。举个例子：</p>
<pre><code>  #！/bin/bash

  # 这里是判断变量 var 是否等于字符串 abc，但是 var 这个变量并没有声明

  if [ &quot;$var&quot; = &quot;abc&quot; ]
  then

  # 如果 if 判断里是 true 就在控制台打印 “ not abc”

  echo &quot; not abc&quot;
  else

  # 如果 if 判断里是 false 就在控制台打印 “ abc”

  echo &quot; abc &quot;
  fi
</code></pre>
<p>结果是打印了 abc，但问题是，这个脚本应该报错啊，变量并没有赋值算是错误吧。</p>
<p>为了弥补这些错误，我们学会在脚本开头加入：<code>set -u</code> 这句命令的意思是脚本在头部加上它，遇到不存在的变量就会报错，并停止执行。</p>
<p>再次运行就会提示：test.sh: 3: test.sh: num: parameter not set</p>
<p>再想象一下，你本来想删除：<code>rm -rf $dir/*</code>然后 dir 是空的时候，变成了什么？<code>rm -rf</code>是删除命令，<code>$dir</code> 是空的话，相当于执行 <code>rm -rf /\*</code>,这是删除所有文件和文件夹。。。然后，你的系统就没了，这就是传说中的删库跑路吗~~~~</p>
<p>如果是 <code>node</code> 或者浏览器环境，我们直接 <code>var === &#39;abc&#39;</code> 肯定是会报错的,也就是说很多 <code>javascript</code> 编程经验无法复用到 bash 来，如果能复用的话，该多好啊。</p>
<p>后来就开始探索，如果用 <code>node</code> 脚本代替 <code>bash</code> 该多好啊，经过一天折腾逐渐发现一个神器，Google 旗下的 zx 库，先别着急，我先不介绍这个库，我们先看看目前主流用 node 如何编写 bash 脚本，就知道为啥它是神器了。</p>
<h2 id="node-执行-bash-脚本-勉强解决方案：child-process-API"><a href="#node-执行-bash-脚本-勉强解决方案：child-process-API" class="headerlink" title="node 执行 bash 脚本: 勉强解决方案：child_process API"></a>node 执行 bash 脚本: 勉强解决方案：child_process API</h2><p>例如 <code>child_process</code> 的 API 里面 <code>exec</code> 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const &#123; <span class="built_in">exec</span> &#125; = require(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;ls -la&#x27;</span>, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    console.log(`error: <span class="variable">$&#123;error.message&#125;</span>`)</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (stderr) &#123;</span><br><span class="line">    console.log(`stderr: <span class="variable">$&#123;stderr&#125;</span>`)</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  console.log(`stdout: <span class="variable">$&#123;stdout&#125;</span>`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里需要注意的是，首先 exec 是异步的，但是我们 bash 脚本命令很多都是同步的。</p>
<p>而且注意：error 对象不同于 stderr. error 当 <code>child_process</code> 模块无法执行命令时，该对象不为空。例如，查找一个文件找不到该文件，则 error 对象不为空。但是，如果命令成功运行并将消息写入标准错误流，则该 stderr 对象不会为空。</p>
<p>当然我们可以使用同步的 <code>exec</code> 命令，<code>execSync</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 引入 exec 命令 from child_process 模块</span><br><span class="line">const &#123; execSync &#125; = require(<span class="string">&quot;child_process&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 同步创建了一个hello的文件夹</span><br><span class="line">execSync(<span class="string">&quot;mkdir hello&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再简单介绍一下 child_process 的其它能够执行 bash 命令的 api</p>
<p>spawn： 启动一个子进程来执行命令</p>
<p>exec：启动一个子进程来执行命令，与 spawn 不同的是，它有一个回调函数能知道子进程的情况</p>
<ul>
<li><p>execFile：启动一子进程来执行可执行文件</p>
</li>
<li><p>fork：与 spawn 类似，不同点是它需要指定子进程需要需执行的 javascript 文件</p>
</li>
<li><p>exec 跟 execFile 不同的是，<code>exec</code> 适合执行命令，<code>execFile </code>适合执行文件。</p>
</li>
</ul>
<h2 id="node-执行-bash-脚本-进阶方案-shelljs"><a href="#node-执行-bash-脚本-进阶方案-shelljs" class="headerlink" title="node 执行 bash 脚本: 进阶方案 shelljs"></a>node 执行 bash 脚本: 进阶方案 shelljs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const shell = require(<span class="string">&#x27;shelljs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件命令</span></span><br><span class="line">shell.rm(<span class="string">&#x27;-rf&#x27;</span>, <span class="string">&#x27;out/Release&#x27;</span>);</span><br><span class="line">// 拷贝文件命令</span><br><span class="line">shell.cp(<span class="string">&#x27;-R&#x27;</span>, <span class="string">&#x27;stuff/&#x27;</span>, <span class="string">&#x27;out/Release&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到lib目录，并且列出目录下到.js结尾到文件，并替换文件内容（sed -i 是替换文字命令）</span></span><br><span class="line">shell.cd(<span class="string">&#x27;lib&#x27;</span>);</span><br><span class="line">shell.ls(<span class="string">&#x27;*.js&#x27;</span>).forEach(<span class="keyword">function</span> (file) &#123;</span><br><span class="line">  shell.sed(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;BUILD_VERSION&#x27;</span>, <span class="string">&#x27;v0.1.2&#x27;</span>, file);</span><br><span class="line">  shell.sed(<span class="string">&#x27;-i&#x27;</span>, /^.*REMOVE_THIS_LINE.*$/, <span class="string">&#x27;&#x27;</span>, file);</span><br><span class="line">  shell.sed(<span class="string">&#x27;-i&#x27;</span>, /.*REPLACE_LINE_WITH_MACRO.*\n/, shell.cat(<span class="string">&#x27;macro.js&#x27;</span>), file);</span><br><span class="line">&#125;);</span><br><span class="line">shell.cd(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除非另有说明，否则同步执行给定的命令。 在同步模式下，这将返回一个 ShellString</span></span><br><span class="line"><span class="comment">#（与 ShellJS v0.6.x 兼容，它返回一个形式为 &#123; code:..., stdout:..., stderr:... &#125; 的对象）。</span></span><br><span class="line"><span class="comment"># 否则，这将返回子进程对象，并且回调接收参数（代码、标准输出、标准错误）。</span></span><br><span class="line"><span class="keyword">if</span> (shell.exec(<span class="string">&#x27;git commit -am &quot;Auto-commit&quot;&#x27;</span>).code !== 0) &#123;</span><br><span class="line">  shell.echo(<span class="string">&#x27;Error: Git commit failed&#x27;</span>);</span><br><span class="line">  shell.exit(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面代码上看来，shelljs 真的已经算是非常棒的 nodejs 写 bash 脚本的方案了，如果你们那边的 node 环境不能随便升级，我觉得 shelljs 确实够用了。</p>
<p>接着我们看看今天的主角 <code>zx</code>，start 已经 17.4k 了。</p>
<h2 id="zx-库"><a href="#zx-库" class="headerlink" title="zx 库"></a>zx 库</h2><p>官方网址：<a href="www.npmjs.com/package/zx">www.npmjs.com/package/zx</a></p>
<p>我们先看看怎么用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env zx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> $<span class="string">`cat package.json | grep name`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> branch = <span class="keyword">await</span> $<span class="string">`git branch --show-current`</span></span><br><span class="line"><span class="keyword">await</span> $<span class="string">`dep deploy --branch=<span class="subst">$&#123;branch&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">  $<span class="string">`sleep 1; echo 1`</span>,</span><br><span class="line">  $<span class="string">`sleep 2; echo 2`</span>,</span><br><span class="line">  $<span class="string">`sleep 3; echo 3`</span>,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;foo bar&#x27;</span></span><br><span class="line"><span class="keyword">await</span> $<span class="string">`mkdir /tmp/<span class="subst">$&#123;name&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>各位看官觉得咋样，是不是就是在写 linux 命令而已，bash 语法可以忽略很多，直接上 js 就行，而且它的优点还不止这些，有一些特点挺有意思的：</p>
<ol>
<li><p>支持 ts，自动编译.ts 为.mjs 文件，.mjs 文件是 node 高版本自带的支持 es6 module 的文件结尾，也就是这个文件直接 import 模块就行，不用其它工具转义</p>
</li>
<li><p>自带支持管道操作 pipe 方法</p>
</li>
<li><p>自带 fetch 库，可以进行网络请求，自带 chalk 库，可以打印有颜色的字体，自带错误处理 nothrow 方法，如果 bash 命令出错，可以包裹在这个方法里忽略错误</p>
</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env zx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> $<span class="string">`cat package.json | grep name`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> branch = <span class="keyword">await</span> $<span class="string">`git branch --show-current`</span></span><br><span class="line"><span class="keyword">await</span> $<span class="string">`dep deploy --branch=<span class="subst">$&#123;branch&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">  $<span class="string">`sleep 1; echo 1`</span>,</span><br><span class="line">  $<span class="string">`sleep 2; echo 2`</span>,</span><br><span class="line">  $<span class="string">`sleep 3; echo 3`</span>,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;foo bar&#x27;</span></span><br><span class="line"><span class="keyword">await</span> $<span class="string">`mkdir /tmp/<span class="subst">$&#123;name&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>Bash 很棒，但是在编写脚本时，人们通常会选择更方便的编程语言。 JavaScript 是一个完美的选择，但标准的 Node.js 库在使用之前需要额外的做一些事情。 zx 基于 child_process ，转义参数并提供合理的默认值。</p>
<p>安装</p>
<pre><code>  npm i -g zx
</code></pre>
<p>需要的环境</p>
<pre><code>  Node.js &gt;= 14.8.0
</code></pre>
<p>复制代码<br>将脚本写入扩展名为 <code>.mjs</code> 的文件中，以便能够在顶层使用 <code>await。</code></p>
<p>将以下 shebang 添加到 zx 脚本的开头：</p>
<pre><code>  #!/usr/bin/env zx
  现在您将能够像这样运行您的脚本：

  chmod +x ./script.mjs
  ./script.mjs
  复制代码
</code></pre>
<p>或者通过 zx 可执行文件：</p>
<pre><code>  zx ./script.mjs
</code></pre>
<p>所有函数（$、cd、fetch 等）都可以直接使用，无需任何导入。</p>
<p>$<code>command</code></p>
<p>使用 <code>child_process</code> 包中的 spawn 函数执行给定的字符串, 并返回 ProcessPromise.</p>
<pre><code>let count = parseInt(await $`ls -1 | wc -l`)
console.log(`Files count: $&#123;count&#125;`)
</code></pre>
<p>例如，要并行上传文件：</p>
<p>如果执行的程序返回非零退出代码，<code>ProcessOutput</code> 将被抛出</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  await $`<span class="keyword">exit</span> <span class="number">1</span>`</span><br><span class="line">&#125; catch (p) &#123;</span><br><span class="line">  console.log(`Exit code: <span class="variable">$&#123;p.exitCode&#125;</span>`)</span><br><span class="line">  console.log(`Error: <span class="variable">$&#123;p.stderr&#125;</span>`)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ProcessPromise，以下是 promise typescript 的接口定义</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessPromise</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Promise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">readonly</span> stdin: Writable</span><br><span class="line">  <span class="keyword">readonly</span> stdout: Readable</span><br><span class="line">  <span class="keyword">readonly</span> stderr: Readable</span><br><span class="line">  <span class="keyword">readonly</span> exitCode: <span class="built_in">Promise</span>&lt;<span class="built_in">number</span>&gt;</span><br><span class="line">  pipe(dest): ProcessPromise&lt;T&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>pipe() </code>方法可用于重定向标准输出：</p>
<pre><code>await $`cat file.txt`.pipe(process.stdout)
</code></pre>
<p>ProcessOutput 的 typescript 接口定义</p>
<pre><code>  class ProcessOutput &#123;
    readonly stdout: string
    readonly stderr: string
    readonly exitCode: number
    toString(): string
  &#125;
</code></pre>
<p>函数：</p>
<h3 id="cd"><a href="#cd" class="headerlink" title="cd()"></a>cd()</h3><p>更改当前工作目录</p>
<pre><code>  cd(&#39;/tmp&#39;)
  await $`pwd` // outputs /tmp
</code></pre>
<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch()"></a>fetch()</h3><p>node-fetch 包。</p>
<pre><code>  let resp = await fetch(&#39;http://wttr.in&#39;)
  if (resp.ok) &#123;
  console.log(await resp.text())
  &#125;
</code></pre>
<p>###question()</p>
<p>readline 包</p>
<pre><code>  let bear = await question(&#39;What kind of bear is best? &#39;)
  let token = await question(&#39;Choose env variable: &#39;, &#123;
  choices: Object.keys(process.env)
  &#125;)
</code></pre>
<p>在第二个参数中，可以指定选项卡自动完成的选项数组</p>
<p>以下是接口定义</p>
<pre><code>  function question(query?: string, options?: QuestionOptions): Promise&lt;string&gt;
  type QuestionOptions = &#123; choices: string[] &#125;
</code></pre>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><p>基于 setTimeout 函数</p>
<pre><code>  await sleep(1000)
</code></pre>
<h3 id="nothrow"><a href="#nothrow" class="headerlink" title="nothrow()"></a>nothrow()</h3><p>将 $ 的行为更改, 如果退出码不是 0，不跑出异常.</p>
<p>ts 接口定义</p>
<pre><code>  function nothrow&lt;P&gt;(p: P): P

  await nothrow($`grep something from-file`)

  // 在管道内:

  await $`find ./examples -type f -print0`
    .pipe(nothrow($`xargs -0 grep something`))
  .pipe($`wc -l`)
</code></pre>
<p>以下的包，无需导入，直接使用</p>
<h3 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h3><pre><code>  console.log(chalk.blue(&#39;Hello world!&#39;))
</code></pre>
<h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h3><p>类似于如下的使用方式</p>
<pre><code>  import &#123;promises as fs&#125; from &#39;fs&#39;
  let content = await fs.readFile(&#39;./package.json&#39;)
</code></pre>
<h3 id="os"><a href="#os" class="headerlink" title="os"></a>os</h3><pre><code>  await $`cd $&#123;os.homedir()&#125; &amp;&amp; mkdir example`
</code></pre>
<p>配置：</p>
<h3 id="shell"><a href="#shell" class="headerlink" title="$.shell"></a>$.shell</h3><p>指定要用的 bash.</p>
<pre><code>  $.shell = &#39;/usr/bin/bash&#39;
</code></pre>
<h3 id="quote"><a href="#quote" class="headerlink" title="$.quote"></a>$.quote</h3><p>指定用于在命令替换期间转义特殊字符的函数</p>
<p>默认用的是 shq 包.</p>
<p>注意：</p>
<p>**filename &amp; **dirname 这两个变量是在 commonjs 中的。我们用的是.mjs 结尾的 es6 模块。</p>
<p>在 ESM 模块中，Node.js 不提供**filename 和 **dirname 全局变量。 由于此类全局变量在脚本中非常方便，因此 zx 提供了这些以在 .mjs 文件中使用（当使用 zx 可执行文件时）</p>
<p>require 也是 commonjs 中的导入模块方法， 在 ESM 模块中，没有定义 require() 函数。zx 提供了 require() 函数，因此它可以与 .mjs 文件中的导入一起使用（当使用 zx 可执行文件时）</p>
<h3 id="传递环境变量"><a href="#传递环境变量" class="headerlink" title="传递环境变量"></a>传递环境变量</h3><p>process.env.FOO = ‘bar’<br>await $<code>echo $FOO</code></p>
<h3 id="传递数组"><a href="#传递数组" class="headerlink" title="传递数组"></a>传递数组</h3><p>如果值数组作为参数传递给 $，数组的项目将被单独转义并通过空格连接 Example:</p>
<pre><code>  let files = [1,2,3]
  await $`tar cz $&#123;files&#125;`
</code></pre>
<p>可以通过显式导入来使用 $ 和其他函数</p>
<pre><code>  #!/usr/bin/env node
  import &#123;$&#125; from &#39;zx&#39;
  await $`date`
</code></pre>
<p>zx 可以将 .ts 脚本编译为 .mjs 并执行它们</p>
<pre><code>  zx examples/typescript.ts
</code></pre>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown 语法学习</title>
    <url>/20210627/24-MarkDown-%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>默认没有标题<br>正文直接深入即可。</p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="行内代码块"><a href="#行内代码块" class="headerlink" title="行内代码块"></a>行内代码块</h3><p>正文中插入代码<code>function()&#123;&#125;</code></p>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>(数字后面加点，空格，输入完成后回车)</p>
<ol>
<li>huawei</li>
<li>xiaomi</li>
<li>oppo</li>
<li>apple</li>
<li>lenevo</li>
</ol>
<hr>
<ol>
<li>系统</li>
<li>用户<ol>
<li>机器</li>
<li>测试</li>
</ol>
</li>
</ol>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul>
<li><p>huawei</p>
</li>
<li><p>lianxiang</p>
</li>
<li><p>xiaomi</p>
</li>
<li><p>apple</p>
</li>
<li><p>oppo</p>
</li>
<li><p>123</p>
<ul>
<li>4444<ul>
<li>1111<ul>
<li>5555<ul>
<li>4444</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><p><strong>我是加粗</strong></p>
<p><em>斜体</em> (* 斜体字 *)</p>
<hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>1、如果可以找到 key 对应的节点，再对比类型，如果类型不同，就删除旧节点重新创建，<br>2、类型相同，对比 lastPlacedIndex 与 oldIndex，lastPlacedIndex &lt;= oldIndex 不需要移动，否则就需要移动位置，并且更新属性</p>
</blockquote>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul>
<li>链接</li>
</ul>
<p><a href="https://blog.wy1991.cn/">官网博客</a></p>
<h2 id="删除线xx"><a href="#删除线xx" class="headerlink" title="删除线xx"></a>删除线<del>xx</del></h2><p><del>删除线</del></p>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>Markdown 语法会忽略首行开头的空格，如果要体现出首行开头空两个的效果，可以使用 全角符号下的空格 ，windows 下使用 shift+空格 切换。</p>
<h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><p><span class="exturl" data-url="bWFpbHRvOiYjOTc7JiN4NjQ7JiMxMDk7JiMxMDU7JiMxMTA7JiN4NDA7JiN4Nzc7JiN4Nzk7JiM0OTsmIzU3OyYjeDM5OyYjNDk7JiN4MmU7JiM5OTsmI3g2ZTs=">&#97;&#x64;&#109;&#105;&#110;&#x40;&#x77;&#x79;&#49;&#57;&#x39;&#49;&#x2e;&#99;&#x6e;<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>我们可以设置表格的对齐方式：</p>
<ul>
<li><p>-: 设置内容和标题栏居右对齐。</p>
</li>
<li><p>:- 设置内容和标题栏居左对齐。</p>
</li>
<li><p>:-: 设置内容和标题栏居中对齐。</p>
<pre><code>| 表头 | 表头 | 表头 |
| :--: | :--- | ---: |
| 数据 | 数据 | 数据 |
| 数据 | 数据 | 数据 |
</code></pre>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">表头</th>
<th align="left">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数数据数据据</td>
<td align="left">数数据数据数据据</td>
<td align="right">数数据数据数据数据据</td>
</tr>
<tr>
<td align="center">数数据数据数据据</td>
<td align="left">数据数据数据数据</td>
<td align="right">数数据数据数据数据据</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>postcss-px-to-viewport px转vw</title>
    <url>/20210628/27-postcss-px-to-viewport-px%E8%BD%ACvw/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoYXJpc3NhMjAxNy9hcnRpY2xlL2RldGFpbHMvMTA1NDIwOTcxLw==">原文地址<i class="fa fa-external-link-alt"></i></span></p>
<p>移动端适配方案中，可以使用 vw 作为页面中各元素的单位，以此来完成适配效果。下面我们来讲怎样在 vue-cli 项目中使用 postcss-px-to-viewport 插件。</p>
<p>前言<br>先来认识一下 postcss，postcss 是一个用 JavaScript 工具和插件转换 CSS 代码的工具。<br>postcss 的作用：</p>
<p>兼容各个内核的浏览器，增强代码的可读性。<code>autoprefixer</code> 插件可以自动获取浏览器的流行度和能够支持的属性，并根据这些数据自动为 CSS 规则添加前缀。</p>
<p>解析浏览器不兼容的 css 新语法。<code>postcss-preset-env</code> 插件可以将现代 CSS 语法转换成大多数浏览器都能理解的东西。</p>
<p>避免全局 css 样式。通过使用<code> postcss-modules</code> ，不用担心命名太大众化而造成冲突太普通，只要用最有意义的名字就行了。</p>
<p>避免 css 代码中的错误。通过使用 stylelint 插件避免样式表中的错误，stylelint 是一个现代化 CSS 代码检查工具。它支持最新的 CSS 语法，包括类似 CSS 的语法，例如 SCSS 。<br>强大的网格系统。lostgrid 插件利用 calc() 和你所定义的分割方式来创建网格系统，无需传递大量参数。</p>
<p><code>postcss-px-to-viewport</code>，可以将 px 单位自动转换成 viewport 单位（vw 表示屏幕的 1%）。</p>
<ol>
<li><p>安装</p>
<blockquote>
<p>npm install postcss-px-to-viewport –save-dev</p>
</blockquote>
<p>或者使用 yarn 安装</p>
<blockquote>
<p>yarn add postcss-px-to-viewport -D</p>
</blockquote>
</li>
<li><p>配置</p>
<p>在 vue-cli 项目根目录下新建 vue.config.js 配置文件，在该文件中写入如下内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pxtovw = <span class="built_in">require</span>(<span class="string">&#x27;postcss-px-to-viewport&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="attr">sass</span>: &#123;</span><br><span class="line">        <span class="comment">//给 sass-loader 传递选项</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">css</span>: &#123;</span><br><span class="line">        <span class="comment">//给 css-loader 传递选项</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">postcss</span>: &#123;</span><br><span class="line">        <span class="comment">//给 postcss-loader 传递选项</span></span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          <span class="keyword">new</span> pxtovw(&#123;</span><br><span class="line">            <span class="attr">unitToConvert</span>: <span class="string">&#x27;px&#x27;</span>, <span class="comment">//需要转换的单位，默认为&quot;px&quot;；</span></span><br><span class="line">            <span class="attr">viewportWidth</span>: <span class="number">375</span>, <span class="comment">//设计稿的视口宽度</span></span><br><span class="line">            <span class="attr">unitPrecision</span>: <span class="number">5</span>, <span class="comment">//单位转换后保留的小数位数</span></span><br><span class="line">            <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>], <span class="comment">//要进行转换的属性列表,\*表示匹配所有,!表示不转换</span></span><br><span class="line">            <span class="attr">viewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">//转换后的视口单位</span></span><br><span class="line">            <span class="attr">fontViewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">//转换后字体使用的视口单位</span></span><br><span class="line">            <span class="attr">selectorBlackList</span>: [], <span class="comment">//不进行转换的 css 选择器，继续使用原有单位</span></span><br><span class="line">            <span class="attr">minPixelValue</span>: <span class="number">1</span>, <span class="comment">//设置最小的转换数值</span></span><br><span class="line">            <span class="attr">mediaQuery</span>: <span class="literal">false</span>, <span class="comment">//设置媒体查询里的单位是否需要转换单位</span></span><br><span class="line">            <span class="attr">replace</span>: <span class="literal">true</span>, <span class="comment">//是否直接更换属性值，而不添加备用属性</span></span><br><span class="line">            <span class="attr">exclude</span>: [<span class="regexp">/node_modules/</span>], <span class="comment">//忽略某些文件夹下的文件</span></span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>设置配置文件后，需要重新启动项目</strong></p>
<p>可能遇到的问题：</p>
<blockquote>
<p>插件会将所有样式的 px 转换成 vw，如果引入了第三方 UI，也会被转化。可以使用 selectorBlackList 属性来进行过滤。如果个别地方不想转换为 vw，可以简单的使用大写的 PX 或者 Px 或者 pX。</p>
</blockquote>
</li>
<li><p>效果<br>使用前：<br>npm run serve 启动项目，就可以看到项目中的单位全部转换成了 vw</p>
</li>
<li><p>配置参数详解：</p>
<p><code>unitToConvert</code> (String)，需要转换的单位，默认为”px”</p>
<p><code>viewportWidth</code> (Number)，设计稿的视口宽度</p>
<p><code>unitPrecision</code> (Number)，单位转换后保留的精度</p>
<p><code>propList</code> (Array)，能转化为 vw 的属性列表</p>
<p>传入特定的 CSS 属性；</p>
<p>可以传入通配符””去匹配所有属性，例如：[’’]；</p>
<p>在属性的前或后添加”_“,可以匹配特定的属性. (例如[‘position’] 会匹配<br>background-position-y)</p>
<p>在特定属性前加 “!”，将不转换该属性的单位 . 例如: [’_’, ‘!letter-spacing’]，将不转换 letter-spacing</p>
<p>“!” 和 “”可以组合使用， 例如: [’’, ‘!font*’]，将不转换 font-size 以及 font-weight 等属性<br>viewportUnit (String)，希望使用的视口单位</p>
<p>fontViewportUnit (String)，字体使用的视口单位</p>
<p>selectorBlackList (Array)，需要忽略的 CSS 选择器，不会转为视口单位，使用原有的 px 等单位。</p>
<p>如果传入的值为字符串的话，只要选择器中含有传入值就会被匹配</p>
<p>例如 selectorBlackList 为 [‘body’] 的话， 那么 .body-class 就会被忽略</p>
<p>如果传入的值为正则表达式的话，那么就会依据 CSS 选择器是否匹配该正则</p>
<p>例如 selectorBlackList 为 [/^body$/] , 那么 body 会被忽略，而 .body 不会</p>
<p>minPixelValue (Number)，设置最小的转换数值，如果为 1 的话，只有大于 1 的值会被转换</p>
<p>mediaQuery (Boolean)，媒体查询里的单位是否需要转换单位，@keyframes 和 media 里的 px 默认是不转化的，设置该属性为 true，则媒体查询里的单位会转成 vw。</p>
<p>replace (Boolean)，是否直接更换属性值，而不添加备用属性</p>
<p>exclude (Array or Regexp)，忽略某些文件夹下的文件或特定文件，例如 ‘node_modules’ 下的文件</p>
<p>如果值是一个正则表达式，那么匹配这个正则的文件会被忽略</p>
<p>如果传入的值是一个数组，那么数组里的值必须为正则</p>
<p>landscape (Boolean) 是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)</p>
<p>landscapeUnit (String) 横屏时使用的单位</p>
<p>landscapeWidth (Number) 横屏时使用的视口宽度</p>
</li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>自适应</tag>
        <tag>vw</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 你不了解的.npmrc文件</title>
    <url>/20210711/26-npm-%E4%BD%A0%E4%B8%8D%E4%BA%86%E8%A7%A3%E7%9A%84-npmrc%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h2><blockquote>
<p>.npmrc，可以理解成 npm running cnfiguration, 即 npm 运行时配置文件。我们知道，npm 最大的作用就是帮助开发者安装需要的依赖包，但是要从哪里下载？下载哪一个版本的包，把包下载到电脑的哪个路径下？</p>
</blockquote>
<p>这些都可以在.npmrc 中进行配置。</p>
<p>在设置.npmrc 之前，我们需要知道：在你的电脑上，不止存在一个.npmrc 文件，而是有多个。在我们安装包的时候，npm 按照如下顺序读取这些配置文件：</p>
<ol>
<li><p>项目配置文件：你可以在项目的根目录下创建一个.npmrc 文件，只用于管理这个项目的 npm 安装。</p>
</li>
<li><p>用户配置文件：在你使用一个账号登陆的电脑的时候，可以为当前用户创建一个.npmrc 文件，之后用该用户登录电脑，就可以使用该配置文件。可以通过 npm config get userconfig 来获取该文件的位置。</p>
</li>
<li><p>全局配置文件： 一台电脑可能有多个用户，在这些用户之上，你可以设置一个公共的.npmrc 文件，供所有用户使用。该文件的路径为：$PREFIX/etc/npmrc，使用 npm config get prefix 获取$PREFIX。如果你不曾配置过全局文件，该文件不存在。</p>
</li>
<li><p>npm 内嵌配置文件：最后还有 npm 内置配置文件，基本上用不到，不用过度关注。</p>
</li>
</ol>
<h2 id="如何设置-npmrc"><a href="#如何设置-npmrc" class="headerlink" title="如何设置.npmrc"></a>如何设置.npmrc</h2><h3 id="1-设置项目配置文件"><a href="#1-设置项目配置文件" class="headerlink" title="1. 设置项目配置文件"></a>1. 设置项目配置文件</h3><p>在项目的根目录下新建 .npmrc 文件，在里面以 key=value 的格式进行配置。比如要把 npm 的源配置为淘宝源，可以参考一下代码：</p>
<pre><code>  registry=https://registry.npm.taobao.org
</code></pre>
<p>如果你想删除一些配置，可以直接把对应的代码行给删除。</p>
<h3 id="2-设置用户配置文件"><a href="#2-设置用户配置文件" class="headerlink" title="2. 设置用户配置文件"></a>2. 设置用户配置文件</h3><p>你可以直接通过 npm config get userconfig 命令找到该文件的路径，然后直接仿照上述方法该文件，也可以通过 npm config set 命令继续设置，命令如下：</p>
<pre><code>   config set registry https://registry.npm.taobao.org
</code></pre>
<p>最终，命令行会帮助我们修改对应的配置文件。只不过使用命令行更加快捷。</p>
<p>如果想要删除一些配置，可以直接编辑.npmrc 文件，也可以使用命令进行删除，比如：</p>
<pre><code>  npm config delete registry
</code></pre>
<h3 id="3-设置全局配置文件"><a href="#3-设置全局配置文件" class="headerlink" title="3. 设置全局配置文件"></a>3. 设置全局配置文件</h3><p>方法和设置用户配置文件如出一辙，只不过在使用命令行时需要加上 -g 参数。</p>
<pre><code>  npm config set registry https://registry.npm.taobao.org -g
</code></pre>
<p>除此之外，这里列出一些常用的 npm 设置命令，有兴趣的话，可以了解一下，挺好玩的：</p>
<pre><code>  npm config set &lt;key&gt; &lt;value&gt; [-g|--global]  //给配置参数key设置值为value；
  npm config get &lt;key&gt;          //获取配置参数key的值；
  npm config delete &lt;key&gt;       //删除置参数key及其值；
  npm config list [-l]      //显示npm的所有配置参数的信息；
  npm config edit     //编辑配置文件
  npm get &lt;key&gt;     //获取配置参数key的值；
  npm set &lt;key&gt; &lt;value&gt; [-g|--global]    //给配置参数key设置值为value；
</code></pre>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>以上就是关于.npmrc 的一些常识，其实你在开发过程中，很少会继续配置该文件。不过在你安装依赖包出错的时候，可以思考一下：是不是 npm 的配置参数有问题，这样就多一种解决问题的思路了。</p>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>TS-泛型-牛刀初试</title>
    <url>/20210701/28-TS-%E6%B3%9B%E5%9E%8B-%E7%89%9B%E5%88%80%E5%88%9D%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><p>现在有个需求：封装一个方法，接收一个参数(number 类型)，return 一个相同类型的 result。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> indentify1 = (args: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果接收的类型是 number 或者 string 呢？</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> indentify2 = (args: <span class="built_in">number</span> | <span class="built_in">string</span>): <span class="built_in">number</span> | <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果参数类型越来越多怎么处理？泛型可以解决。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> indentify3 = &lt;T&gt;(args: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> args <span class="comment">// T类似一个变量保证入参和出参类型一致。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>泛型起到约束作用。泛型不只可以提供一个。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> indentify4 = <span class="xml">&lt;T, U&gt;(args: T, mes: U): T =&gt; &#123;</span></span><br><span class="line"><span class="xml">  return args // 提供一个T和U泛型，声明入参类型，指定返回结果类型。</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>如上 indentify4 函数，若是函数返回的是多类型集合，泛型如何处理？</p>
<ol>
<li>返回类型集合</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> indentify5 = <span class="xml">&lt;T, U&gt;(args: T, mes: U): [T, U] =&gt; &#123;</span></span><br><span class="line"><span class="xml">  return [args, mes] // 约束太多，外层对泛型的约束</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>泛型接口</p>
<p>可以提供一个接口，把接口内的参数变为泛型。举个 🌰： 定义一个 person 函数，接收姓名，年龄，性别，是否结婚。最后 return。</p>
</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPersonView&lt;T, U, V&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>: T</span><br><span class="line">  <span class="attr">age</span>: U</span><br><span class="line">  <span class="attr">sex</span>: T</span><br><span class="line">  <span class="attr">isMarray</span>: V</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> per = &lt;T, U, V&gt;(</span><br><span class="line">  name: T,</span><br><span class="line">  age: U,</span><br><span class="line">  sex: T,</span><br><span class="line">  isMarray: V</span><br><span class="line">): IPersonView&lt;T, U, V&gt; =&gt; &#123;</span><br><span class="line">  let result: IPersonView&lt;T, U, V&gt; = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    sex,</span><br><span class="line">    isMarray,</span><br><span class="line">  &#125;</span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出使用泛型接口可以很友好的解决这些问题。便于维护和统一。</p>
<h2 id="常用的操作符"><a href="#常用的操作符" class="headerlink" title="常用的操作符"></a>常用的操作符</h2><p>(1): extends<br>很简单就是继承的意思，让一个类型变量继承我们定义好的类型。在泛型约束中起到了很大的作用。(之后会说到泛型约束）</p>
<p>(2): keyof<br>该操作符可以用于获取某种类型的所有键，其返回类型是联合类型。举个 🌰:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">isMarray</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> per1 = keyof Person <span class="comment">// string | number | boolean</span></span><br></pre></td></tr></table></figure>

<h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>有时我们可能希望限制每个类型变量接受的类型数量，这就是泛型约束的作用。起到对类型变量限制作用。</p>
<p>举个 🌰：处理字符串或数组时，我们会假设 length 属性是可用的。当我们使用函数并尝试输出参数的长度，会出现一些问题。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> indentify5 = &lt;T&gt;(args: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args.length) <span class="comment">// // 类型“T”上不存在属性“length&quot;</span></span><br><span class="line">  <span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>出现这个问题的原因是，因为 ts 编译器不知道，不能识别 T 上是否含有某个属性。我们可以定义一个类型，让类型变量 extends。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> ILength &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span> <span class="comment">// 定义一个接口包含length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> indentify6 = <span class="xml"><span class="tag">&lt;<span class="name">T</span> <span class="attr">extends</span> <span class="attr">ILength</span>&gt;</span>(args: T): T =&gt; &#123;</span></span><br><span class="line"><span class="xml">  console.log(args.length) // number</span></span><br><span class="line"><span class="xml">  return args</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<p>当然了：对上面这种情况我们也可以定义数组类型来解决。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> indentify7 = &lt;T&gt;(args: T[]): T[] =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args.length)</span><br><span class="line">  <span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> indentify8 = &lt;T&gt;(args: <span class="built_in">Array</span>&lt;T&gt;): <span class="built_in">Array</span>&lt;T&gt; =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args.length)</span><br><span class="line">  <span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们也可以通过 keyof 来确实对象上的键是否存在。举个 🌰：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">声明一个类型接口。</span><br><span class="line"><span class="keyword">interface</span> Ip &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过 keyof 操作符，我们就可以获取指定类型的所有键，之后我们就可以结合extends约束</span></span><br><span class="line"><span class="comment">//即限制输入的属性名包含在 keyof 返回的联合类型中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> indentify9 = <span class="xml">&lt;IPerson, K extends keyof Ip&gt;(obj: Ip , key: K): Ip[k] &#123;</span></span><br><span class="line"><span class="xml">    return obj[key];</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="泛型工具"><a href="#泛型工具" class="headerlink" title="泛型工具"></a>泛型工具</h2><p>(1): Partial</p>
<p>将某个类型里的所有属性变成非必需属性。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P] <span class="comment">// 把！变成？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个 🌰：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line">Partial&lt;IPerson&gt; ===  <span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">                          name?: <span class="built_in">string</span> | <span class="literal">undefined</span>,</span><br><span class="line">                          <span class="attr">age</span>: <span class="built_in">number</span> | <span class="literal">undefined</span></span><br><span class="line">                      &#125;</span><br></pre></td></tr></table></figure>

<p>(2): Exclude</p>
<p>将 T 中某些属于 U 的类型移除掉</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Exclude&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> T = Exclude&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&gt; <span class="comment">// &quot;b&quot; | &quot;c&quot;</span></span><br></pre></td></tr></table></figure>

<p>(3): ReturnType</p>
<p>ReturnType 的作用是用于获取函数 T 的返回类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> T1 = ReturnType&lt;<span class="function">() =&gt;</span> <span class="built_in">String</span>&gt; <span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> T2 = ReturnType&lt;<span class="function">(<span class="params">args: <span class="built_in">String</span></span>) =&gt;</span> <span class="built_in">void</span>&gt; <span class="comment">// void</span></span><br><span class="line"><span class="keyword">type</span> T3 = ReturnType&lt;&lt;T&gt;<span class="function">() =&gt;</span> T&gt; <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>以上就是一些简单的使用，有不足欢迎大家指出。</p>
]]></content>
      <categories>
        <category>TS</category>
      </categories>
      <tags>
        <tag>TS</tag>
        <tag>泛型</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp 封装请求promise</title>
    <url>/20210630/29-uniapp-%E5%B0%81%E8%A3%85%E8%AF%B7%E6%B1%82promise/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><pre><code>  项目目录下创建common/api   或者common/http 都可以，看自己

  mian.js中，import api from &#39;@/common/http/&#39;

  注意最后http/ ，如果加斜杠 就是找http/index.js 如果不加，就是找 http.js 注意

  然后挂在到vue

  Vue.prototype.$api = api;

  这样在页面中就可以用

  this.$api.goods.getGoods().then().catch()
</code></pre>
<h4 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h4><blockquote>
<p>基础封装库</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用uni-app网络请求</span></span><br><span class="line"><span class="comment"> * 基于 Promise 对象实现更简单的 request 使用方式，支持请求和响应拦截</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; baseUrl &#125; <span class="keyword">from</span> <span class="string">&#x27;../config.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">config</span>: &#123;</span><br><span class="line">    <span class="attr">baseUrl</span>: baseUrl,</span><br><span class="line">    <span class="attr">header</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span> <span class="comment">/* 如设为json，会对返回的数据做一次 JSON.parse */</span>,</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">    <span class="function"><span class="title">fail</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">    <span class="function"><span class="title">complete</span>(<span class="params"></span>)</span> &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">interceptor</span>: &#123;</span><br><span class="line">    <span class="attr">request</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">response</span>: <span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">request</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!options) &#123;</span><br><span class="line">      options = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    options.baseUrl = options.baseUrl || <span class="built_in">this</span>.config.baseUrl</span><br><span class="line">    options.dataType = options.dataType || <span class="built_in">this</span>.config.dataType</span><br><span class="line">    options.url = options.baseUrl + options.url</span><br><span class="line">    options.data = options.data || &#123;&#125;</span><br><span class="line">    options.method = options.method || <span class="built_in">this</span>.config.method</span><br><span class="line">    <span class="comment">//TODO 加密数据</span></span><br><span class="line">    <span class="keyword">let</span> _token = &#123; <span class="attr">authorization</span>: uni.getStorageSync(<span class="string">&#x27;userinfo&#x27;</span>).token || <span class="literal">null</span> &#125;</span><br><span class="line">    options.header = <span class="built_in">Object</span>.assign(&#123;&#125;, options.header, _token)</span><br><span class="line">    <span class="comment">//TODO 数据签名</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">		_token = &#123;&#x27;token&#x27;: getStorage(STOREKEY_LOGIN).token || &#x27;undefined&#x27;&#125;,</span></span><br><span class="line"><span class="comment">		_sign = &#123;&#x27;sign&#x27;: sign(JSON.stringify(options.data))&#125;</span></span><br><span class="line"><span class="comment">		options.header = Object.assign(&#123;&#125;, options.header, _token,_sign)</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> _config = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      options.complete = <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> statusCode = response.statusCode</span><br><span class="line">        response.config = _config</span><br><span class="line">        <span class="comment">// if (process.env.NODE_ENV === &#x27;development&#x27;) &#123;</span></span><br><span class="line">        <span class="comment">// 	if (statusCode === 200) &#123;</span></span><br><span class="line">        <span class="comment">// 		console.log(&quot;【&quot; + _config.requestId + &quot;】 结果：&quot; + JSON.stringify(response.data))</span></span><br><span class="line">        <span class="comment">// 	&#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.interceptor.response) &#123;</span><br><span class="line">          <span class="keyword">let</span> newResponse = <span class="built_in">this</span>.interceptor.response(response)</span><br><span class="line">          <span class="keyword">if</span> (newResponse) &#123;</span><br><span class="line">            response = newResponse</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统一的响应日志记录</span></span><br><span class="line">        _reslog(response)</span><br><span class="line">        uni.stopPullDownRefresh()</span><br><span class="line">        <span class="keyword">if</span> (statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">//成功</span></span><br><span class="line">          <span class="comment">//token 不存在</span></span><br><span class="line">          <span class="keyword">if</span> (response.data.code === <span class="string">&#x27;0x0401&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">              uni.redirectTo(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;/pages/login/index&#x27;</span>,</span><br><span class="line">                <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(err)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">complete</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(res)</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//自己定义如果返回状态码不是200 一律进入reject  token 不存在直接跳出登录</span></span><br><span class="line">          <span class="keyword">if</span> (response.data.code !== <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response)</span><br><span class="line">            <span class="keyword">let</span> title = response.data.msg</span><br><span class="line">            <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">              title += response.config.url</span><br><span class="line">            &#125;</span><br><span class="line">            uni.showToast(&#123;</span><br><span class="line">              <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">              <span class="attr">title</span>: title,</span><br><span class="line">            &#125;)</span><br><span class="line">            reject(response.data)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          resolve(response.data)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject(response.data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      _config = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="built_in">this</span>.config, options)</span><br><span class="line">      _config.requestId = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.interceptor.request) &#123;</span><br><span class="line">        <span class="built_in">this</span>.interceptor.request(_config)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 统一的请求日志记录</span></span><br><span class="line">      <span class="comment">// _reqlog(_config)</span></span><br><span class="line"></span><br><span class="line">      uni.stopPullDownRefresh()</span><br><span class="line"></span><br><span class="line">      uni.request(_config)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求接口日志记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_reqlog</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;【&#x27;</span> + req.requestId + <span class="string">&#x27;】 地址：&#x27;</span> + req.url)</span><br><span class="line">    <span class="keyword">if</span> (req.data) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;【&#x27;</span> + req.requestId + <span class="string">&#x27;】 请求参数：&#x27;</span> + <span class="built_in">JSON</span>.stringify(req.data)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//TODO 调接口异步写入日志数据库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应接口日志记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_reslog</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _statusCode = res.statusCode</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;【&#x27;</span> + res.config.requestId + <span class="string">&#x27;】 地址：&#x27;</span> + res.config.url)</span><br><span class="line">    <span class="keyword">if</span> (res.config.data) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;【&#x27;</span> +</span><br><span class="line">          res.config.requestId +</span><br><span class="line">          <span class="string">&#x27;】 请求参数：&#x27;</span> +</span><br><span class="line">          <span class="built_in">JSON</span>.stringify(res.config.data)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;【&#x27;</span> + res.config.requestId + <span class="string">&#x27;】 响应结果：&#x27;</span>) <span class="comment">//JSON.stringify(res)</span></span><br><span class="line">    <span class="built_in">console</span>.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//TODO 除了接口服务错误外，其他日志调接口异步写入日志数据库</span></span><br><span class="line">  <span class="keyword">switch</span> (_statusCode) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="common-http-index-js"><a href="#common-http-index-js" class="headerlink" title="/common/http/index.js"></a>/common/http/index.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import http from &#x27;./interface&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">&#x27;./login.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  user,</span><br><span class="line">  login,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="common-http-login-js"><a href="#common-http-login-js" class="headerlink" title="/common/http/login.js"></a>/common/http/login.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;../../util/request.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> http.request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;auth/login&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">editpassword</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> http.request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;user/password&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; login, editpassword &#125;</span><br></pre></td></tr></table></figure>

<h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><blockquote>
<p>引入 api</p>
</blockquote>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> api from &#x27;common/http/index.js&#x27;</span><br><span class="line">  <span class="type">Vue</span>.proto<span class="keyword">type</span>.$api = api</span><br></pre></td></tr></table></figure>

<h3 id="baseUrl-config-js"><a href="#baseUrl-config-js" class="headerlink" title="baseUrl(config.js)"></a>baseUrl(config.js)</h3><blockquote>
<p>这里把基础请求地址单独配置个地方，方便根据环境切换切换</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> baseUrl = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> wsUrl = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> screenWsUrl = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;开发环境&#x27;</span>)</span><br><span class="line">  baseUrl = <span class="string">&#x27;http://10.117.18.168/&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;生产环境&#x27;</span>)</span><br><span class="line">  baseUrl = <span class="string">&#x27;http://xxxxxxx/&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; baseUrl, wsUrl, screenWsUrl &#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote>
<p>总结： 项目中直接<br><code> this.$api.login.editpassword(&#123;name:&#39;sss&#39;&#125;)</code></p>
</blockquote>
]]></content>
      <categories>
        <category>uniapp</category>
      </categories>
      <tags>
        <tag>promise</tag>
        <tag>uniapp</tag>
        <tag>封装请求</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云自动同步github仓库</title>
    <url>/20210708/3-%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5github%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>原本博客是放在github page的，但是因为最近一直不稳定，和限流，所以不能忍，正好手里有闲置的阿里云服务器，直接开搞。</p>
<ol>
<li><p>先直接安装宝塔（省事，一步到”胃”）。</p>
</li>
<li><p>宝塔提供的有 宝塔WebHook，直接安装。</p>
</li>
<li><p>点击宝塔-》网站-》新建站点 比如我的博客名称：blog.wy1991.cn。</p>
</li>
<li><p>然后上宝塔软件商店安装宝塔WebHook  并添加如下代码：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#输出当前时间</span></span><br><span class="line">date --date=<span class="string">&#x27;0 days ago&#x27;</span> <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Start&quot;</span></span><br><span class="line"><span class="comment">#判断宝塔WebHook参数是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#git项目路径</span></span><br><span class="line">gitPath=<span class="string">&quot;/www/wwwroot/blog.wy1991.cn&quot;</span></span><br><span class="line"><span class="comment">#git 网址</span></span><br><span class="line">gitHttp=<span class="string">&quot;https://gitee.com/xx/xx&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Web站点路径：<span class="variable">$gitPath</span>&quot;</span></span><br><span class="line"><span class="comment">#判断项目路径是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$gitPath</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$gitPath</span></span><br><span class="line">        <span class="comment">#判断是否存在git目录</span></span><br><span class="line">        <span class="keyword">if</span> [ ! -d <span class="string">&quot;.git&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;在该目录下克隆 git&quot;</span></span><br><span class="line">                git <span class="built_in">clone</span> <span class="variable">$gitHttp</span> gittemp</span><br><span class="line">                mv gittemp/.git .</span><br><span class="line">                rm -rf gittemp</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;拉取最新的项目文件&quot;</span></span><br><span class="line">        git reset --hard origin/master</span><br><span class="line">        git pull        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;设置目录权限&quot;</span></span><br><span class="line">        chown -R www:www <span class="variable">$gitPath</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;End&quot;</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;该项目路径不存在&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;新建项目目录&quot;</span></span><br><span class="line">        mkdir <span class="variable">$gitPath</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$gitPath</span></span><br><span class="line">        <span class="comment">#判断是否存在git目录</span></span><br><span class="line">        <span class="keyword">if</span> [ ! -d <span class="string">&quot;.git&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;在该目录下克隆 git&quot;</span></span><br><span class="line">                git <span class="built_in">clone</span> <span class="variable">$gitHttp</span> gittemp</span><br><span class="line">                mv gittemp/.git .</span><br><span class="line">                rm -rf gittemp</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;拉取最新的项目文件&quot;</span></span><br><span class="line">        git reset --hard origin/master</span><br><span class="line">        git pull</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;设置目录权限&quot;</span></span><br><span class="line">        chown -R www:www <span class="variable">$gitPath</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;End&quot;</span></span><br><span class="line">        <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>


<ol start="5">
<li><p>点击查看密钥，并复制密钥。</p>
</li>
<li><p>到达 github repo，找到 settings，选择 Webhooks，点击 add Webhooks，确认密码.</p>
</li>
<li><p>在 Payload URL 中输入 http://<em>.</em>.<em>.</em>:8888/hook?access_key=(第4步中的密钥)<br>好了就这么简单！ </p>
</li>
</ol>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><blockquote>
<p>GitHub Webhook 的 Content-Type 选 application/json 即可 不然可能会出现403</p>
</blockquote>
<blockquote>
<p>可能会有0-3分钟延迟，不要着急，请耐心等待</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>V8 为何要限制堆的大小？</title>
    <url>/20210706/30-V8-%E4%B8%BA%E4%BD%95%E8%A6%81%E9%99%90%E5%88%B6%E5%A0%86%E7%9A%84%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="V8为何要限制堆的大小？"><a href="#V8为何要限制堆的大小？" class="headerlink" title="V8为何要限制堆的大小？"></a>V8为何要限制堆的大小？</h2><blockquote>
<p>在V8中，所有的JavaScript对象都是通过堆来进行分配的。Node提供了V8中内存使用量的查看方式，执行下面的代码，将得到输出的内存信息：</p>
</blockquote>
<p>process.memoryUsage();<br>{<br>  rss: 14958592,<br>  heapTotal: 7195904,<br>  heapUsed: 2821496<br>}</p>
<p> 在上述代码中，在memoryUsage()方法返回的3个属性中，heapTotal和heapUsed是V8的堆内存使用情况，前者是已申请到的堆内存，后者是当前使用的量。</p>
<img title="V8堆示意图" src="https://blog.img.wy1991.cn/static/images/node/V8dui.png-blogImg">

<p>当我们在代码中声明变量并赋值时，所使用对象的内存就分配在堆中。如果已申请的堆空闲内存不够分配新的对象，将继续申请堆内存，直到堆的大小超过V8的限制为止。</p>
<h3 id="表层原因"><a href="#表层原因" class="headerlink" title="表层原因"></a>表层原因</h3><blockquote>
<p>V8原本是为了浏览器设计的，所以不太可能遇到使用大量内存的情况。对于网页来说，V8的限制值已经绰绰有余了。</p>
</blockquote>
<h3 id="深层原因"><a href="#深层原因" class="headerlink" title="深层原因"></a>深层原因</h3><blockquote>
<p>深层原因是V8的垃圾回收机制的限制。按官方的说法，以1.5 GB的垃圾回收堆内存为例，V8做一次小的垃圾回收需要50毫秒以上，做一次非增量式的垃圾回收甚至要1秒以上。这是垃圾回收中引起JavaScript线程暂停执行的时间，在这样的时间花销下，应用的性能和响应能力都会直线下降。这样的情况不仅仅后端服务无法接受，前端浏览器也无法接受。因此，在当时的考虑下直接限制堆内存是一个好的选择。</p>
</blockquote>
<h3 id="垃圾回收机制的策略是什么吗？"><a href="#垃圾回收机制的策略是什么吗？" class="headerlink" title="垃圾回收机制的策略是什么吗？"></a>垃圾回收机制的策略是什么吗？</h3><blockquote>
<p>V8的垃圾回收策略主要基于分代式垃圾回收机制。</p>
</blockquote>
<h3 id="为什么要分代呢？"><a href="#为什么要分代呢？" class="headerlink" title="为什么要分代呢？"></a>为什么要分代呢？</h3><blockquote>
<p>因为在实际的应用中，对象的生存周期长短不一，不同的算法只能针对特定情况具有最好的效果。为此，现代的垃圾回收算法中按对象的存活时间将内存的垃圾回收进行不同的分代，然后分别对不同分代的内存施以更高效的算法。</p>
</blockquote>
<h3 id="怎么分代的？"><a href="#怎么分代的？" class="headerlink" title="怎么分代的？"></a>怎么分代的？</h3><blockquote>
<p>在V8中，主要将内存分为新生代和老生代两代。新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象。图为V8的分代示意图。</p>
</blockquote>
<img title="分代示意图" src="https://blog.img.wy1991.cn/static/images/node/v8shengdai.png-blogImg">

<h3 id="新生代是怎么回收的？"><a href="#新生代是怎么回收的？" class="headerlink" title="新生代是怎么回收的？"></a>新生代是怎么回收的？</h3><p>在分代的基础上，新生代中的对象主要通过Scavenge算法进行垃圾回收。是一种采用复制的方式实现的垃圾回收算法。</p>
<p>它将堆内存一分为二，每一部分空间称为semispace。在这两个semispace空间中，只有一个处于使用中，另一个处于闲置状态。处于使用状态的semispace空间称为From空间，处于闲置状态的空间称为To空间。当我们分配对象时，先是在From空间中进行分配。当开始进行垃圾回收时，会检查From空间中的存活对象，这些存活对象将被复制到To空间中，而非存活对象占用的空间将会被释放。完成复制后，From空间和To空间的角色发生对换。</p>
<p>简而言之，在垃圾回收的过程中，就是通过将存活对象在两个semispace空间之间进行复制。</p>
<p>Scavenge的缺点是只能使用堆内存中的一半，这是由划分空间和复制机制所决定的。但Scavenge由于只复制存活的对象，并且对于生命周期短的场景存活对象只占少部分，所以它在时间效率上有优异的表现。</p>
<p>由于Scavenge是典型的牺牲空间换取时间的算法，所以无法大规模地应用到所有的垃圾回收中。但可以发现，Scavenge非常适合应用在新生代中，因为新生代中对象的生命周期较短，恰恰适合这个算法。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>V8</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode eslint</title>
    <url>/20210628/31-vscode-eslint/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><ol>
<li>下载 eslint npm install -g eslint</li>
<li>修改配置文件: 文件&gt;首选项&gt;设置&gt; setting.json</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;minapp-vscode.disableAutoConfig&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// vscode默认启用了根据文件类型自动设置tabsize的选项</span></span><br><span class="line"><span class="string">&quot;editor.detectIndentation&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 重新设定tabsize</span></span><br><span class="line"><span class="string">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="comment">// #每次保存的时候自动格式化</span></span><br><span class="line"><span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// #每次保存的时候将代码按eslint格式进行修复</span></span><br><span class="line"><span class="string">&quot;eslint.autoFixOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 添加 vue 支持</span></span><br><span class="line"><span class="string">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">  <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;language&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;autoFix&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line"><span class="comment">// #让prettier使用eslint的代码格式进行校验</span></span><br><span class="line"><span class="string">&quot;prettier.eslintIntegration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// #去掉代码结尾的分号</span></span><br><span class="line"><span class="string">&quot;prettier.semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// #使用带引号替代双引号</span></span><br><span class="line"><span class="string">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// #让函数(名)和后面的括号之间加个空格</span></span><br><span class="line"><span class="string">&quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// #这个按用户自身习惯选择</span></span><br><span class="line"><span class="string">&quot;vetur.format.defaultFormatter.html&quot;</span>: <span class="string">&quot;js-beautify-html&quot;</span>,</span><br><span class="line"><span class="comment">// #让vue中的js按编辑器自带的ts格式进行格式化</span></span><br><span class="line"><span class="string">&quot;vetur.format.defaultFormatter.js&quot;</span>: <span class="string">&quot;vscode-typescript&quot;</span>,</span><br><span class="line"><span class="string">&quot;vetur.format.defaultFormatterOptions&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;js-beautify-html&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;wrap_attributes&quot;</span>: <span class="string">&quot;force-aligned&quot;</span></span><br><span class="line">    <span class="comment">// #vue组件中html代码格式化样式</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 格式化stylus, 需安装Manta&#x27;s Stylus Supremacy插件</span></span><br><span class="line"><span class="string">&quot;stylusSupremacy.insertColons&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否插入冒号</span></span><br><span class="line"><span class="string">&quot;stylusSupremacy.insertSemicolons&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否插入分好</span></span><br><span class="line"><span class="string">&quot;stylusSupremacy.insertBraces&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否插入大括号</span></span><br><span class="line"><span class="string">&quot;stylusSupremacy.insertNewLineAroundImports&quot;</span>: <span class="literal">false</span>, <span class="comment">// import之后是否换行</span></span><br><span class="line"><span class="string">&quot;stylusSupremacy.insertNewLineAroundBlocks&quot;</span>: <span class="literal">false</span> <span class="comment">// 两个选择器中是否换行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-2收集依赖</title>
    <url>/20210701/32-Vue-2%E6%94%B6%E9%9B%86%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><blockquote>
<p>边界未处理，主要是要理解思想</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//收集订阅者，订阅者中心，一个属性维护一个Dep</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.subscribes = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">addSub</span>(<span class="params">sub</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.subscribes.push(sub)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">notify</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.subscribes.forEach(<span class="function">(<span class="params">sub</span>) =&gt;</span> &#123;</span><br><span class="line">      sub.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//订阅者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//保存当前观察者到</span></span><br><span class="line">    Dep.target = <span class="built_in">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//订阅者收到数据更新的消息，更新视图</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;watcher视图更新&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value || <span class="keyword">typeof</span> value !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &amp;&amp; <span class="keyword">typeof</span> value[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      observer(value[key])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      defineReactive(value, key, value[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> <span class="title">getterReactive</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//收集订阅者</span></span><br><span class="line">      dep.addSub(Dep.target)</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> <span class="title">setterReactive</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (newValue === val) <span class="keyword">return</span></span><br><span class="line">      val = newValue</span><br><span class="line">      <span class="comment">//发布者发布消息到订阅者中心，订阅者中心发布消息给订阅者</span></span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.data = options.data()</span><br><span class="line">    observer(<span class="built_in">this</span>.data)</span><br><span class="line">    <span class="comment">//为当前vue实例设置一个订阅者，当前订阅者保存在Dep.target里面</span></span><br><span class="line">    <span class="keyword">new</span> Watcher()</span><br><span class="line">    <span class="comment">//把当前订阅者放到test这个属性的订阅者中心，如果有多个属性，需要存放到多个属性的订阅者中心，即有一个属性改变，就提示当前实例的订阅者要进行视图更新</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;触发getter&#x27;</span>, <span class="built_in">this</span>.data.test)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> observerVue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 setup尝尝鲜</title>
    <url>/20210705/33-Vue3-setup%E5%B0%9D%E5%B0%9D%E9%B2%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-setup函数的特性以及作用"><a href="#一-setup函数的特性以及作用" class="headerlink" title="一. setup函数的特性以及作用"></a>一. setup函数的特性以及作用</h2><p> 可以确定的是 Vue3.0 是兼容 Vue2.x 版本的 也就是说我们再日常工作中 可以在 Vue3 中使用 Vue2.x 的相关语法 但是当你真正开始使用 Vue3 写项目时 你会发现他比 Vue2.x 方便的多</p>
<p>vue 2.0 生命周期对比 3.0 生命周期</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">| <span class="number">2.0</span> 周期名称   | <span class="number">3.0</span> 周期名称     | 说明 |</span><br><span class="line">| beforeCreate  | setup          | 组件创建之前 |</span><br><span class="line">| created       | setup          | 组件创建完成 |</span><br><span class="line">| beforeMount   | onBeforeMount  | 组件挂载之前 |</span><br><span class="line">| mounted       | onMounted      | 组件挂载完成 |</span><br><span class="line">| beforeUpdate  | onBeforeUpdate | 数据更新，虚拟 DOM 打补丁之前 |</span><br><span class="line">| updated       | onUpdated      | 数据更新，虚拟 DOM 渲染完成 |</span><br><span class="line">| beforeDestroy | onBeforeUnmount| 组件销毁之前 |</span><br><span class="line">| destroyed     | onUnmounted    | 组件销毁后 |</span><br></pre></td></tr></table></figure>
<h3 id="Vue3-的一大特性函数-—-setup"><a href="#Vue3-的一大特性函数-—-setup" class="headerlink" title="Vue3 的一大特性函数 —- setup"></a>Vue3 的一大特性函数 —- setup</h3><ol>
<li><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">beforeCreate</span>：表示组件刚刚被创建出来，组件的<span class="class"><span class="keyword">data</span>和methods还没有初始化好</span></span><br><span class="line"><span class="title">setup</span></span><br><span class="line"><span class="type">Created</span>： 表示组件刚刚被创建出来，并且组件的<span class="class"><span class="keyword">data</span>和methods已经初始化好</span></span><br></pre></td></tr></table></figure></li>
<li><p>setup函数是 Composition API（组合API）的入口</p>
</li>
<li><p>在setup函数中定义的变量和方法最后都是需要 return 出去的 不然无法再模板中使用</p>
</li>
</ol>
<h2 id="二、setup函数的注意点："><a href="#二、setup函数的注意点：" class="headerlink" title="二、setup函数的注意点："></a>二、setup函数的注意点：</h2><ol>
<li>由于在执行 setup函数的时候，还没有执行 Created 生命周期方法，所以在 setup 函数中，无法使用 data 和 methods 的变量和方法</li>
<li>由于我们不能在 setup函数中使用 data 和 methods，所以 Vue 为了避免我们错误的使用，直接将 setup函数中的this修改成了 undefined</li>
<li>setup函数只能是同步的不能是异步的</li>
</ol>
<p>用法1:结合ref使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123;age&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;plusOne()&quot;&gt;+&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;app&#x27;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name:&#x27;北京&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  setup()&#123;</span><br><span class="line">    //名字</span><br><span class="line">    const name =ref(&#x27;小李&#x27;)</span><br><span class="line">    //年纪</span><br><span class="line">    const age=ref(18)</span><br><span class="line">    // 方法</span><br><span class="line">    function plusOne()&#123;</span><br><span class="line">      age.value++ //想改变值或获取值 必须.value</span><br><span class="line">    &#125;</span><br><span class="line">    //必须返回 模板中才能使用</span><br><span class="line">    return &#123;</span><br><span class="line">      name,age,plusOne</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<p>用法2：代码分割<br>Options API 和 Composition API<br>Options API 约定：<br>我们需要在 props 里面设置接收参数  在setup中没有this<br>我们需要在 data 里面设置变量<br>我们需要在 computed 里面设置计算属性<br>我们需要在 watch 里面设置监听属性<br>我们需要在 methods 里面设置事件方法<br>你会发现 Options APi 都约定了我们该在哪个位置做什么事，这反倒在一定程度上也强制我们进行了代码分割。<br>现在用 Composition API，不再这么约定了，于是乎，代码组织非常灵活，我们的控制代码写在 setup 里面即可。<br>setup函数提供了两个参数 props和context,重要的是在setup函数里没有了this,在 vue3.0 中，访问他们变成以下形式： this.xxx=》context.xxx<br>我们没有了 this 上下文，没有了 Options API 的强制代码分离。Composition API 给了我们更加广阔的天地，那么我们更加需要慎重自约起来。<br>对于复杂的逻辑代码，我们要更加重视起 Composition API 的初心，不要吝啬使用 Composition API 来分离代码，用来切割成各种模块导出。<br>我们期望是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> importuseAfrom&#x27;./a&#x27;</span><br><span class="line">importuseBfrom&#x27;./b&#x27;</span><br><span class="line">importuseCfrom&#x27;./c&#x27;</span><br><span class="line">exportdefault&#123;</span><br><span class="line">    setup (props) &#123;</span><br><span class="line">      let&#123; a, methodsA &#125; = useA()</span><br><span class="line">      let&#123; b, methodsB &#125; = useA()</span><br><span class="line">      let&#123; c, methodsC &#125; = useC()</span><br><span class="line">      return&#123; a, methodsA, b, methodsB, c, methodsC &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="data-变为-setUp"><a href="#data-变为-setUp" class="headerlink" title="data() 变为 setUp()"></a>data() 变为 setUp()</h2><ol>
<li><p>生命周期的函数只能写在setUp中</p>
</li>
<li><p>provide/inject 只能写在setUp</p>
</li>
</ol>
<p>就算 setup 内容代码量越来越大，但是始终围绕着大而不乱，代码结构清晰的路子前进。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>首先，在 vue 3.0 中，生命周期是从 vue 中导出的，我们需要用到哪些，就导出哪些。<br>vue 提供这么多的生命周期，有几个是我们常用的？  在大多数的组件中，我们用不到生命周期。即便是页面级别的应用，可能用到最多的是 onMounted 即可。<br>当然，那些绑定时间的操作会用到解绑，因此会用到 onUnmounted。其它的生命周期，正常情况下是基本用不到的。<br>所以，通过引入使用的这种设定，可以减少我们的最终编译的项目的体积。而且，这样的引入使用，更加的逻辑清晰。<br>其次，除 setup 之外，其他的生命周期函数，都是在 setup 里面直接书写函数即可。</p>
<h2 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h2><p>ref 是一个函数，它接受一个参数，返回的就是一个神奇的 响应式对象 。我们初始化的这个 0 作为参数包裹到这个对象中去，在未来可以检测到改变并作出对应的相应。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;count&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;double&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;increase&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed, ref, reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">interface DataProps &#123;</span><br><span class="line">  count: number</span><br><span class="line">  double: number</span><br><span class="line">  increase: () =&gt; void</span><br><span class="line">&#125;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const data:DataProps = reactive(&#123;</span><br><span class="line">      count: 0,</span><br><span class="line">      increase: () =&gt; &#123; data.count++ &#125;,</span><br><span class="line">      double: computed(() =&gt; data.count * 2)</span><br><span class="line">    &#125;)</span><br><span class="line">    const refData = toRefs(data)</span><br><span class="line">    return &#123;</span><br><span class="line">      ...refData</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h2 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref, computed, reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">interface DataProps &#123;</span><br><span class="line">  count: number;</span><br><span class="line">  double: number;</span><br><span class="line">  increase: () =&gt; void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setup() &#123;</span><br><span class="line">  const data: DataProps  = reactive(&#123;</span><br><span class="line">    count: 0,</span><br><span class="line">    increase: () =&gt; &#123; data.count++&#125;,</span><br><span class="line">    double: computed(() =&gt; data.count * 2)</span><br><span class="line">  &#125;)</span><br><span class="line">  const refData = toRefs(data)</span><br><span class="line">  return &#123;</span><br><span class="line">    ...refData</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 ref 还是 reactive 可以选择这样的准则</p>
</blockquote>
<blockquote>
<p>第一，就像刚才的原生 javascript 的代码一样，像你平常写普通的 js 代码选择原始类型和对象类型一样来选&gt; 择是使用 ref 还是 reactive。</p>
</blockquote>
<blockquote>
<p>第二，所有场景都使用 reactive，但是要记得使用 toRefs 保证 reactive 对象属性保持响应性。</p>
</blockquote>
<h2 id="侦测变化-watch函数"><a href="#侦测变化-watch函数" class="headerlink" title="侦测变化 - watch函数"></a>侦测变化 - watch函数</h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">	&lt;h1&gt;&#123;&#123; count &#125;&#125;&lt;/h1&gt;</span><br><span class="line">	&lt;h1&gt;&#123;&#123; double &#125;&#125;&lt;/h1&gt;</span><br><span class="line">	&lt;button @click=&quot;increase&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">	&lt;button @click=&quot;updateGreeting&quot;&gt;updateGreeting&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; computed, ref, reactive, toRefs, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">interface DataProps &#123;</span><br><span class="line">	count: number</span><br><span class="line">	double: number</span><br><span class="line">	increase: () =&gt; void</span><br><span class="line">&#125;</span><br><span class="line">export default&#123;</span><br><span class="line">	name: &#x27;app&#x27;,</span><br><span class="line">	setup() &#123;</span><br><span class="line">		const data: DataProps = reactive(&#123;</span><br><span class="line">			count: 0,</span><br><span class="line">			increase: () =&gt; &#123; data.count++ &#125;,</span><br><span class="line">			double: computed(() =&gt; data.count * 2)</span><br><span class="line">		&#125;)</span><br><span class="line">		const greetings = ref(&#x27;&#x27;)</span><br><span class="line">		const updateGreeting = () =&gt; &#123;</span><br><span class="line">			greetings.value += &#x27;Hello&#x27;</span><br><span class="line">		&#125;</span><br><span class="line">		watch([greetings, () =&gt; data.count ], ( newValue, oldValue ) =&gt; &#123;</span><br><span class="line">			console.log(newValue)</span><br><span class="line">			console.log(oldValue)</span><br><span class="line">			document.title += &#x27;updated&#x27; + greetings.value</span><br><span class="line">		&#125;)</span><br><span class="line">		const refData = toRefs(data)</span><br><span class="line">		return &#123;</span><br><span class="line">			...refData,</span><br><span class="line">			greetings,</span><br><span class="line">			updateGreeting</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="watch-简单应用"><a href="#watch-简单应用" class="headerlink" title="watch 简单应用"></a>watch 简单应用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch(data, () =&gt; &#123;</span><br><span class="line">  document.title = &#x27;updated &#x27; + data.count</span><br><span class="line">&#125;)</span><br><span class="line">// watch 的两个参数，代表新的值和旧的值</span><br><span class="line">watch(refData.count, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;old&#x27;, oldValue)</span><br><span class="line">  console.log(&#x27;new&#x27;, newValue)</span><br><span class="line">  document.title = &#x27;updated &#x27; + data.count</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// watch 多个值，返回的也是多个值的数组</span><br><span class="line">watch([greetings, data], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;old&#x27;, oldValue)</span><br><span class="line">  console.log(&#x27;new&#x27;, newValue)</span><br><span class="line">  document.title = &#x27;updated&#x27; + greetings.value + data.count</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 使用 getter 的写法 watch reactive 对象中的一项</span><br><span class="line">watch([greetings, () =&gt; data.count], (newValue, oldValue) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;old&#x27;, oldValue)</span><br><span class="line">  console.log(&#x27;new&#x27;, newValue)</span><br><span class="line">  document.title = &#x27;updated&#x27; + greetings.value + data.count</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue axios使用</title>
    <url>/20210628/34-Vue-axios%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><blockquote>
<p>npm install axios</p>
</blockquote>
<h3 id="request-ts"><a href="#request-ts" class="headerlink" title="request.ts"></a>request.ts</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//request.ts</span></span><br><span class="line"><span class="comment">//request.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios, &#123; AxiosPromise &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AxiosRequestConfig, AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; sessionCache &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/cache&#x27;</span></span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="keyword">import</span>.meta.env.VITE_SERVER_URL,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">30000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//拦截请求</span></span><br><span class="line">instance.interceptors.request.use(</span><br><span class="line">  <span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = sessionCache.getCache(<span class="string">&#x27;userinfo&#x27;</span>)?.token</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config!.headers!.authorization = token</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    writeLog(requestLog, config)</span><br><span class="line">    nprogress.start()</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//请求失败</span></span><br><span class="line">    <span class="comment">// console.log(err);</span></span><br><span class="line">    nprogress.done()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">instance.interceptors.response.use(</span><br><span class="line">  <span class="function">(<span class="params">res: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">    writeLog(responsetLog, res)</span><br><span class="line">    nprogress.done()</span><br><span class="line">    <span class="keyword">if</span> (res.data.code !== <span class="number">200</span>) &#123;</span><br><span class="line">      message.error(res.data.msg || <span class="string">&#x27;请求失败&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res.data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    nprogress.done()</span><br><span class="line">    message.error(<span class="string">&#x27;请求接口失败!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> writeLog = <span class="function">(<span class="params">cb: <span class="built_in">Function</span>, config: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span>.meta.env.VITE_APP_HTTP_LOG &amp;&amp; cb(config)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requestLog = <span class="function">(<span class="params">config: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> query = config.method === <span class="string">&#x27;get&#x27;</span> ? config.params : config.data</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;请求参数:&#x27;</span>, &#123; <span class="attr">query</span>: query, <span class="attr">url</span>: config.url &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> responsetLog = <span class="function">(<span class="params">res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;请求返回参数:&#x27;</span>, res.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure>

<h3 id="封装接口"><a href="#封装接口" class="headerlink" title="封装接口"></a>封装接口</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//network/login.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  axios 请求接口数据</span></span><br><span class="line"><span class="keyword">interface</span> ResponseData&lt;T = any&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 状态码</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type <span class="type">&#123; number &#125;</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type <span class="type">&#123; T &#125;</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: T</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 消息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type <span class="type">&#123; string &#125;</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">msg</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ILoginData &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IResponseDevice &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">status</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">create_time</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">update_time</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">address</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>params 设备id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>设备详细属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getDeviceInfo</span>(<span class="params">params: &#123; id: <span class="built_in">string</span> | <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request&lt;ResponseData&lt;IResponseDevice&gt;&gt;(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;admin/deviceInfo&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TS-类型文件"><a href="#TS-类型文件" class="headerlink" title="TS 类型文件"></a>TS 类型文件</h3><p>shims-axios.d.ts</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//shims-axios.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AxiosInstance, AxiosRequestConfig, AxiosPromise &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义扩展axios模块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author <span class="variable">Maybe</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;axios&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> AxiosRequestConfig &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>设置为true，则会在请求过程中显示loading动画，直到请求结束才消失</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    loading?: <span class="built_in">boolean</span></span><br><span class="line">    isDialog?: <span class="built_in">boolean</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> AxiosInstance &#123;</span><br><span class="line">    &lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt;</span><br><span class="line">    request&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt;</span><br><span class="line">    get&lt;T = <span class="built_in">any</span>&gt;(url: <span class="built_in">string</span>, config?: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt;</span><br><span class="line">    <span class="keyword">delete</span>&lt;T = <span class="built_in">any</span>&gt;(url: <span class="built_in">string</span>, config?: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt;</span><br><span class="line">    head&lt;T = <span class="built_in">any</span>&gt;(url: <span class="built_in">string</span>, config?: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt;</span><br><span class="line">    post&lt;T = <span class="built_in">any</span>&gt;(url: <span class="built_in">string</span>, data?: <span class="built_in">any</span>, config?: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt;</span><br><span class="line">    put&lt;T = <span class="built_in">any</span>&gt;(url: <span class="built_in">string</span>, data?: <span class="built_in">any</span>, config?: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt;</span><br><span class="line">    patch&lt;T = <span class="built_in">any</span>&gt;(url: <span class="built_in">string</span>, data?: <span class="built_in">any</span>, config?: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//view/Login.vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> form = reactive(&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">fetchLogin(form).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="TS-class-版本"><a href="#TS-class-版本" class="headerlink" title="TS class 版本"></a>TS class 版本</h2><blockquote>
<p>npm i axios -S</p>
</blockquote>
<h3 id="axios-ts"><a href="#axios-ts" class="headerlink" title="axios.ts"></a>axios.ts</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件 utils/axios.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios, &#123;AxiosInstance, AxiosRequestConfig&#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequest</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">readonly</span> baseUrl: <span class="built_in">string</span>;</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.baseUrl = <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="title">getInsideConfig</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">       <span class="keyword">const</span> config = &#123;</span><br><span class="line">           <span class="attr">baseURL</span>: <span class="built_in">this</span>.baseUrl,</span><br><span class="line">           <span class="attr">headers</span>: &#123;</span><br><span class="line">               <span class="comment">//</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> config</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截</span></span><br><span class="line">   <span class="function"><span class="title">interceptors</span>(<span class="params">instance: AxiosInstance, url: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span></span>)</span> &#123;</span><br><span class="line">       instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="comment">// 添加全局的loading..</span></span><br><span class="line">           <span class="comment">// 请求头携带token</span></span><br><span class="line">           <span class="keyword">return</span> config</span><br><span class="line">       &#125;, <span class="function">(<span class="params">error: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="comment">//响应拦截</span></span><br><span class="line">       instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="comment">//返回数据</span></span><br><span class="line">           <span class="keyword">const</span> &#123;data&#125; = res</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;返回数据处理&#x27;</span>,res)</span><br><span class="line">           <span class="keyword">return</span> data</span><br><span class="line">       &#125;, <span class="function">(<span class="params">error: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;error==&gt;&#x27;</span>,error)</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="title">request</span>(<span class="params">options: AxiosRequestConfig</span>)</span> &#123;</span><br><span class="line">       <span class="keyword">const</span> instance = axios.create()</span><br><span class="line">       options = <span class="built_in">Object</span>.assign(<span class="built_in">this</span>.getInsideConfig(), options)</span><br><span class="line">       <span class="built_in">this</span>.interceptors(instance, options.url)</span><br><span class="line">       <span class="keyword">return</span> instance(options)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="keyword">new</span> HttpRequest()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="接口方法封装"><a href="#接口方法封装" class="headerlink" title="接口方法封装"></a>接口方法封装</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="regexp">//</span> 文件api/index.ts</span><br><span class="line"><span class="keyword">import</span> http  <span class="keyword">from</span> <span class="string">&#x27;../utils/axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> const menuList =<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> http.request(&#123;</span><br><span class="line">        url: <span class="string">&#x27;/users/menuList&#x27;</span>,</span><br><span class="line">        method: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="页面使用"><a href="#页面使用" class="headerlink" title="页面使用"></a>页面使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;menuList&#125; <span class="keyword">from</span> <span class="string">&#x27;../api/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getMenuList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    menuList().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>以上两种方法只是封装的原理一样，只是一个是类实现，任选其一~</p>
]]></content>
      <categories>
        <category>axios</category>
      </categories>
      <tags>
        <tag>ts</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue filter访问data中数据</title>
    <url>/20210630/35-Vue-filter%E8%AE%BF%E9%97%AEdata%E4%B8%AD%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><blockquote>
<p>因为 this 作用域问题，直接在过滤器中访问 this.XX 是访问不到的<br>思路，可以在 data 中保存个 that，然后过滤器中第二个参数传入</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">that</span>: <span class="built_in">this</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#123;scope.row.device_type | dType(that)&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">filters</span>:&#123;</span><br><span class="line">    <span class="comment">//过滤查询类型</span></span><br><span class="line">    <span class="function"><span class="title">dType</span>(<span class="params">id,that</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> obj =  that.deviceType.find(<span class="function"><span class="params">item</span> =&gt;</span> item.type_id == id)</span><br><span class="line">      <span class="keyword">return</span> obj.type_name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>filter</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-mini版</title>
    <url>/20210630/36-Vue-mini%E7%89%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mini-Vue"><a href="#mini-Vue" class="headerlink" title="mini-Vue"></a>mini-Vue</h2><blockquote>
<p>主要几个函数 reactive, h,createApp,mount,patch,watchEffect,Dep</p>
</blockquote>
<h4 id="入口-index-html"><a href="#入口-index-html" class="headerlink" title="入口 index.html"></a>入口 index.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./renderer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./reactive.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1.创建根组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> App = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>: reactive(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">counter</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">    &#125;),</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, [</span></span><br><span class="line"><span class="javascript">        h(<span class="string">&#x27;h2&#x27;</span>, <span class="literal">null</span>, <span class="string">`当前计数: <span class="subst">$&#123;<span class="built_in">this</span>.data.counter&#125;</span>`</span>),</span></span><br><span class="line"><span class="javascript">        h(</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;button&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">onClick</span>: <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.data.counter++</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="built_in">this</span>.data.counter)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;+1&#x27;</span></span></span><br><span class="line"><span class="javascript">        ),</span></span><br><span class="line"><span class="javascript">      ])</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2.挂载根组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = createApp(App)</span></span><br><span class="line"><span class="javascript">  app.mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><blockquote>
<p>实现 createApp</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">rootComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">//为了可以链式调用，所以这里return一个对象</span></span><br><span class="line">    <span class="function"><span class="title">mount</span>(<span class="params">selector</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> container = <span class="built_in">document</span>.querySelector(selector)</span><br><span class="line">      <span class="keyword">let</span> isMounted = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">let</span> oldVNode = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 收集依赖，如果存在就更新（patch），不存在就挂载</span></span><br><span class="line"><span class="comment">       * 第一次isMounted 就挂载，如果是notify通知的话，判断如果存在就patch更新</span></span><br><span class="line"><span class="comment">       * 不明白的，可以debugger看下流程</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      watchEffect(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// debugger</span></span><br><span class="line">        <span class="keyword">if</span> (!isMounted) &#123;</span><br><span class="line">          oldVNode = rootComponent.render()</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           *注意:这里的mount是renderer.js里面的mount，并不是上面自身的mount切记()</span></span><br><span class="line"><span class="comment">           * 至于说为什么？因为这个函数的执行域不在这里，在watchEffect里面(  effect() )，</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          mount(oldVNode, container)</span><br><span class="line">          isMounted = <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> newVNode = rootComponent.render()</span><br><span class="line">          patch(oldVNode, newVNode)</span><br><span class="line">          oldVNode = newVNode</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="reactive-js"><a href="#reactive-js" class="headerlink" title="reactive.js"></a>reactive.js</h4><blockquote>
<p>响应式</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.subscribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">depend</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeEffect) &#123;</span><br><span class="line">      <span class="built_in">this</span>.subscribers.add(activeEffect)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">notify</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.subscribers.forEach(<span class="function">(<span class="params">effect</span>) =&gt;</span> &#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//收集依赖</span></span><br><span class="line"><span class="keyword">let</span> activeEffect = <span class="literal">null</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watchEffect</span>(<span class="params">effect</span>) </span>&#123;</span><br><span class="line">  activeEffect = effect</span><br><span class="line">  effect() <span class="comment">//先自己执行一下</span></span><br><span class="line">  activeEffect = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map(&#123;key: value&#125;): key是一个字符串</span></span><br><span class="line"><span class="comment">// WeakMap(&#123;key(对象): value&#125;): key是一个对象, 弱引用</span></span><br><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDep</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.根据对象(target)取出对应的Map对象</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    targetMap.set(target, depsMap)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.取出具体的dep对象</span></span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    depsMap.set(key, dep)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dep</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3对raw进行数据劫持</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">raw</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(raw, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dep = getDep(target, key)</span><br><span class="line">      dep.depend()</span><br><span class="line">      <span class="keyword">return</span> target[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, key, newValue</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dep = getDep(target, key)</span><br><span class="line">      target[key] = newValue</span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="renderer-js"><a href="#renderer-js" class="headerlink" title="renderer.js"></a>renderer.js</h4><blockquote>
<p>挂载渲染，diff</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> h = <span class="function">(<span class="params">tag, props, children</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// vnode -&gt; javascript对象 -&gt; &#123;&#125;</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    tag,</span><br><span class="line">    props,</span><br><span class="line">    children,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mount = <span class="function">(<span class="params">vnode, container</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// vnode -&gt; element</span></span><br><span class="line">  <span class="comment">// 1.创建出真实的原生, 并且在vnode上保留el</span></span><br><span class="line">  <span class="keyword">const</span> el = (vnode.el = <span class="built_in">document</span>.createElement(vnode.tag))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.处理props</span></span><br><span class="line">  <span class="keyword">if</span> (vnode.props) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> vnode.props) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = vnode.props[key]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (key.startsWith(<span class="string">&#x27;on&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 对事件监听的判断</span></span><br><span class="line">        el.addEventListener(key.slice(<span class="number">2</span>).toLowerCase(), value)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el.setAttribute(key, value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.处理children</span></span><br><span class="line">  <span class="keyword">if</span> (vnode.children) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.children === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      el.textContent = vnode.children</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vnode.children.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        mount(item, el)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4.将el挂载到container上</span></span><br><span class="line">  container.appendChild(el)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> patch = <span class="function">(<span class="params">n1, n2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n1.tag !== n2.tag) &#123;</span><br><span class="line">    <span class="keyword">const</span> n1ElParent = n1.el.parentElement</span><br><span class="line">    n1ElParent.removeChild(n1.el)</span><br><span class="line">    mount(n2, n1ElParent)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 1.取出element对象, 并且在n2中进行保存</span></span><br><span class="line">    <span class="keyword">const</span> el = (n2.el = n1.el)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.处理props</span></span><br><span class="line">    <span class="keyword">const</span> oldProps = n1.props || &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> newProps = n2.props || &#123;&#125;</span><br><span class="line">    <span class="comment">// 2.1.获取所有的newProps添加到el</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> newProps) &#123;</span><br><span class="line">      <span class="keyword">const</span> oldValue = oldProps[key]</span><br><span class="line">      <span class="keyword">const</span> newValue = newProps[key]</span><br><span class="line">      <span class="keyword">if</span> (newValue !== oldValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key.startsWith(<span class="string">&#x27;on&#x27;</span>)) &#123;</span><br><span class="line">          <span class="comment">// 对事件监听的判断</span></span><br><span class="line">          el.addEventListener(key.slice(<span class="number">2</span>).toLowerCase(), newValue)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          el.setAttribute(key, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.2.删除旧的props</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> oldProps) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key.startsWith(<span class="string">&#x27;on&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 对事件监听的判断</span></span><br><span class="line">        <span class="keyword">const</span> value = oldProps[key]</span><br><span class="line">        el.removeEventListener(key.slice(<span class="number">2</span>).toLowerCase(), value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!(key <span class="keyword">in</span> newProps)) &#123;</span><br><span class="line">        el.removeAttribute(key)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.处理children</span></span><br><span class="line">    <span class="keyword">const</span> oldChildren = n1.children || []</span><br><span class="line">    <span class="keyword">const</span> newChidlren = n2.children || []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> newChidlren === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 情况一: newChildren本身是一个string</span></span><br><span class="line">      <span class="comment">// 边界情况 (edge case)</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> oldChildren === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newChidlren !== oldChildren) &#123;</span><br><span class="line">          el.textContent = newChidlren</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el.innerHTML = newChidlren</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 情况二: newChildren本身是一个数组</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> oldChildren === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        el.innerHTML = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        newChidlren.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          mount(item, el)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// oldChildren: [v1, v2, v3, v8, v9]</span></span><br><span class="line">        <span class="comment">// newChildren: [v1, v5, v6]</span></span><br><span class="line">        <span class="comment">// 1.前面有相同节点的原生进行patch操作</span></span><br><span class="line">        <span class="keyword">const</span> commonLength = <span class="built_in">Math</span>.min(oldChildren.length, newChidlren.length)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; commonLength; i++) &#123;</span><br><span class="line">          patch(oldChildren[i], newChidlren[i])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.newChildren.length &gt; oldChildren.length</span></span><br><span class="line">        <span class="keyword">if</span> (newChidlren.length &gt; oldChildren.length) &#123;</span><br><span class="line">          newChidlren.slice(oldChildren.length).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            mount(item, el)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.newChildren.length &lt; oldChildren.length</span></span><br><span class="line">        <span class="keyword">if</span> (newChidlren.length &lt; oldChildren.length) &#123;</span><br><span class="line">          oldChildren.slice(newChidlren.length).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            el.removeChild(item.el)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：虽然好多边界问题没处理，但是最重要的是要理解思想。其中为什么用 WeakMap，最好自行 google 搞明白~</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>miniVue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue mitt</title>
    <url>/20210628/37-Vue-mitt/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mitt"><a href="#mitt" class="headerlink" title="mitt"></a>mitt</h2><blockquote>
<p>vue2 中有 @on @once @off 等方法($bus 事件总线)<br>但是 vue3 中取消了，官网推荐用 mitt</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbWl0dA==">mitt<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">npm install --save mitt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//utils/mitt.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mitt, &#123; Emitter &#125; <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> emitter: Emitter = mitt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emitter</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">A.vue</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&#x27;@/utils/mitt&#x27;</span></span><br><span class="line">emitter.emit(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;HelloWorld&#x27;</span>)</span><br><span class="line"></span><br><span class="line">b.vue</span><br><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&#x27;@/utils/mitt&#x27;</span></span><br><span class="line"></span><br><span class="line">emitter.on(<span class="string">&#x27;test&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;test&#x27;</span> + e)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//注意卸载的时候，清除掉</span></span><br><span class="line">onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  emitter.off(<span class="string">&#x27;test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;clear emit test&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>mitt</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue nextTick原理及用途</title>
    <url>/20210715/38-Vue-nextTick%E5%8E%9F%E7%90%86%E5%8F%8A%E7%94%A8%E9%80%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><blockquote>
<p>官方文档说明：</p>
</blockquote>
<ul>
<li>用法：<br>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</li>
</ul>
<blockquote>
<p>疑问：</p>
</blockquote>
<ol>
<li>DOM 更新循环是指什么？</li>
<li>下次更新循环是什么时候？</li>
<li>修改数据之后使用，是加快了数据更新进度吗？</li>
<li>在什么情况下要用到？</li>
</ol>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="异步说明"><a href="#异步说明" class="headerlink" title="异步说明"></a>异步说明</h3><blockquote>
<p>Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。</p>
</blockquote>
<p>  在 Vue 的文档中，说明 Vue 是异步执行 DOM 更新的。关于异步的解析，可以查看阮一峰老师的这篇文章。截取关键部分如下：</p>
<p>具体来说，异步执行的运行机制如下</p>
<pre><code>  （1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。
  （2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。
  （3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。
  （4）主线程不断重复上面的第三步。
</code></pre>
<p>下图就是主线程和任务队列的示意图。</p>
<img title="eventLoop.png" src="https://blog.img.wy1991.cn/static/images/vue/nextTick/eventloop.png-blogImg">


<h2 id="事件循环说明"><a href="#事件循环说明" class="headerlink" title="事件循环说明"></a>事件循环说明</h2><p>简单来说，Vue 在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。</p>
<pre><code>  //改变数据
  vm.message = &#39;changed&#39;

  //想要立即使用更新后的DOM。这样不行，因为设置message后DOM还没有更新
  console.log(vm.$el.textContent) // 并不会得到&#39;changed&#39;

  //这样可以，nextTick里面的代码会在DOM更新后执行
  Vue.nextTick(function()&#123;
      console.log(vm.$el.textContent) //可以得到&#39;changed&#39;
  &#125;)
</code></pre>
<p>图解:</p>
  <img title="nextTick.png" src="https://blog.img.wy1991.cn/static/images/vue/nextTick/nextTick.png-blogImg">


<h3 id="事件循环："><a href="#事件循环：" class="headerlink" title="事件循环："></a>事件循环：</h3><p>第一个 tick（图例中第一个步骤，即’本次更新循环’）：</p>
<ol>
<li><p>首先修改数据，这是同步任务。同一事件循环的所有的同步任务都在主线程上执行，形成一个执行栈，此时还未涉及 DOM 。</p>
</li>
<li><p>Vue 开启一个异步队列，并缓冲在此事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。</p>
</li>
</ol>
<p>第二个 tick（图例中第二个步骤，即’下次更新循环’）：</p>
<p>同步任务执行完毕，开始执行异步 watcher 队列的任务，更新 DOM 。Vue 在内部尝试对异步队列使用原生的 Promise.then 和 MessageChannel 方法，如果执行环境不支持，会采用 setTimeout(fn, 0) 代替。</p>
<p>第三个 tick（图例中第三个步骤）：</p>
<p>此时就是文档所说的</p>
<blockquote>
<p>下次 DOM 更新循环结束之后</p>
</blockquote>
<p>此时通过 Vue.nextTick 获取到改变后的 DOM 。通过 setTimeout(fn, 0) 也可以同样获取到。</p>
<p>简单总结事件循环：</p>
<p>同步代码执行 -&gt; 查找异步队列，推入执行栈，执行Vue.nextTick[事件循环1] -&gt;查找异步队列，推入执行栈，执行Vue.nextTick[事件循环2]…</p>
<p>总之，异步是单独的一个tick，不会和同步在一个 tick 里发生，也是 DOM 不会马上改变的原因。</p>
<p>具体可以看链接 <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMjgwNTUyMw==">事件循环<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><blockquote>
<p>应用场景：需要在视图更新之后，基于新的视图进行操作。</p>
</blockquote>
<h3 id="created、mounted"><a href="#created、mounted" class="headerlink" title="created、mounted"></a>created、mounted</h3><p> 需要注意的是，在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。</p>
<p>官方文档说明：</p>
<blockquote>
<p>注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted</p>
</blockquote>
<pre><code>  mounted: function () &#123;
    this.$nextTick(function () &#123;
      // Code that will run only after the
      // entire view has been rendered
    &#125;)
  &#125;
</code></pre>
<h3 id="其他应用场景"><a href="#其他应用场景" class="headerlink" title="其他应用场景"></a>其他应用场景</h3><p>其他应用场景如下三例：</p>
<p>例子1：</p>
<p>点击按钮显示原本以 v-show = false 隐藏起来的输入框，并获取焦点。</p>
<pre><code>  showsou()&#123;
    this.showit = true //修改 v-show
    document.getElementById(&quot;keywords&quot;).focus()  //在第一个 tick 里，获取不到输入框，自然也获取不到焦点
  &#125;
</code></pre>
<p>修改为：</p>
<pre><code>  showsou()&#123;
    this.showit = true
    this.$nextTick(function () &#123;
      // DOM 更新了
      document.getElementById(&quot;keywords&quot;).focus()
    &#125;)
  &#125;
</code></pre>
<p>例子2：</p>
<p>点击获取元素宽度。</p>
<pre><code>  &lt;div id=&quot;app&quot;&gt;
      &lt;p ref=&quot;myWidth&quot; v-if=&quot;showMe&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;
      &lt;button @click=&quot;getMyWidth&quot;&gt;获取p元素宽度&lt;/button&gt;
  &lt;/div&gt;

  getMyWidth() &#123;
      this.showMe = true;
      //this.message = this.$refs.myWidth.offsetWidth;
      //报错 TypeError: this.$refs.myWidth is undefined
      this.$nextTick(()=&gt;&#123;
          //dom元素更新后执行，此时能拿到p元素的属性
          this.message = this.$refs.myWidth.offsetWidth;
    &#125;)
  &#125;
</code></pre>
<p>例子3：</p>
<p>使用 swiper 插件通过 ajax 请求图片后的滑动问题。</p>
<h2 id="实例理解-nextTick-应用"><a href="#实例理解-nextTick-应用" class="headerlink" title="实例理解 nextTick 应用"></a>实例理解 nextTick 应用</h2><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list1&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list2&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list3&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list4&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list5&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">list1</span>: [],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">list2</span>: [],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">list3</span>: [],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">list4</span>: [],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">list5</span>: []</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.composeList12()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.composeList34()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.composeList5()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="comment">// DOM 更新了</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;finished test &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString(),<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.example&#x27;</span>).length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">composeList12</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> me = <span class="built_in">this</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> count = <span class="number">10000</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$set(me.list1, i, <span class="string">&#x27;I am a 测试信息～～啦啦啦&#x27;</span> + i)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;finished list1 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString(),<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.example&#x27;</span>).length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$set(me.list2, i, <span class="string">&#x27;I am a 测试信息～～啦啦啦&#x27;</span> + i)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;finished list2 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString(),<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.example&#x27;</span>).length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// DOM 更新了</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="string">&#x27;finished tick1&amp;2 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString(),<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.example&#x27;</span>).length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">composeList34</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> me = <span class="built_in">this</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> count = <span class="number">10000</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$set(me.list3, i, <span class="string">&#x27;I am a 测试信息～～啦啦啦&#x27;</span> + i)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;finished list3 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString(),<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.example&#x27;</span>).length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// DOM 更新了</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="string">&#x27;finished tick3 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString(),<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.example&#x27;</span>).length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">setTimeout</span>(me.setTimeout1, <span class="number">0</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">setTimeout1</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> me = <span class="built_in">this</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> count = <span class="number">10000</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$set(me.list4, i, <span class="string">&#x27;I am a 测试信息～～啦啦啦&#x27;</span> + i)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;finished list4 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString(),<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.example&#x27;</span>).length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            me.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// DOM 更新了</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="string">&#x27;finished tick4 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString(),<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.example&#x27;</span>).length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">composeList5</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> me = <span class="built_in">this</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> count = <span class="number">10000</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// DOM 更新了</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="string">&#x27;finished tick5-1 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString(),<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.example&#x27;</span>).length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">setTimeout</span>(me.setTimeout2, <span class="number">0</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">setTimeout2</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> me = <span class="built_in">this</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">let</span> count = <span class="number">10000</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$set(me.list5, i, <span class="string">&#x27;I am a 测试信息～～啦啦啦&#x27;</span> + i)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">console</span>.log(<span class="string">&#x27;finished list5 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString(),<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.example&#x27;</span>).length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            me.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="comment">// DOM 更新了</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="string">&#x27;finished tick5 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toString(),<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.example&#x27;</span>).length)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<p>结果：</p>
<img src="https://blog.img.wy1991.cn/static/images/vue/nextTick/result.png-blogImg">]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>nextTick</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue props传入一个函数</title>
    <url>/20210628/39-Vue-props%E4%BC%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h2><blockquote>
<p>自定义组件中，可能需要传入一个回调函数<br>注意 PropTyep apply 用法</p>
</blockquote>
<h4 id="定义-props"><a href="#定义-props" class="headerlink" title="定义 props"></a>定义 props</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, PropType, onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Book &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  desc: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="attr">auther</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</span><br><span class="line">      <span class="attr">require</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">callback</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Function</span> <span class="keyword">as</span> PropType&lt;<span class="function">() =&gt;</span> <span class="built_in">void</span>&gt;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">book</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="built_in">Object</span> <span class="keyword">as</span> PropType&lt;Book&gt;,</span><br><span class="line">      <span class="built_in">require</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> callbackFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">typeof</span> props.callback);</span><br><span class="line"></span><br><span class="line">      props.callback?.apply(<span class="literal">null</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; callbackFunc &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   &lt;wy-article :id=<span class="string">&quot;123&quot;</span></span><br><span class="line">                :callback=<span class="string">&quot;articleCallback&quot;</span></span><br><span class="line">                :book=<span class="string">&quot;book&quot;</span>&gt; &lt;/wy-article&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wyArticle, &#123; Book &#125; <span class="keyword">from</span> <span class="string">&quot;@/components/base/wyArticle.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> book = reactive(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;张三的书&quot;</span>,</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&quot;历史书籍&quot;</span>,</span><br><span class="line">    &#125; <span class="keyword">as</span> Book);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> articleCallback = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;article call back&quot;</span>);</span><br><span class="line">      ElMessage.success(<span class="string">&quot;article call back&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      book,</span><br><span class="line">      articleCallback,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS 跨域相关一套组合拳</title>
    <url>/20210713/4-CORS-%E8%B7%A8%E5%9F%9F%E7%9B%B8%E5%85%B3%E4%B8%80%E5%A5%97%E7%BB%84%E5%90%88%E6%8B%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>我们都知道由于同源策略的存在,导致我们在跨域请求数据的时候非常的麻烦。首先阻挡我们的所谓<code>同源</code>到底是什么呢?，所谓同源就是浏览器的一个安全机制,不同源的客户端脚本没有在明确授权的情况下,不能读写对方资源。由于存在同源策略的限制,而又有需要跨域的业务,所以就有了<code>CORS</code>的出现。</p>
<h3 id="我们都知道-jsonp也可以跨域-那为什么还要使用CORS呢"><a href="#我们都知道-jsonp也可以跨域-那为什么还要使用CORS呢" class="headerlink" title="我们都知道,jsonp也可以跨域,那为什么还要使用CORS呢"></a>我们都知道,jsonp也可以跨域,那为什么还要使用CORS呢</h3><ul>
<li>jsonp只可以使用 GET 方式提交</li>
<li>不好调试,在调用失败的时候不会返回任何状态码</li>
<li>安全性,万一假如提供jsonp的服务存在页面注入漏洞，即它返回的javascript的内容被人控制的。那么结果是什么？所有调用这个jsonp的网站都会存在漏洞。于是无法把危险控制在一个域名下…所以在使用jsonp的时候必须要保证使用的jsonp服务必须是安全可信的。<br>。</li>
</ul>
<h2 id="开始CORS"><a href="#开始CORS" class="headerlink" title="开始CORS"></a>开始CORS</h2><p><code>CORS</code>是一个W3C标准,全称是”跨域资源共享”（Cross-origin resource sharing），他允许浏览器向跨源服务器发送<code>XMLHttpRequest</code>请求，从而克服啦 <code>AJAX </code>只能同源使用的限制<br>CORS需要浏览器和服务器同时支持，整个 CORS通信过程，都是浏览器自动完成不需要用户参与，对于开发者来说，CORS的代码和正常的 ajax 没有什么差别，浏览器一旦发现跨域请求，就会添加一些附加的头信息，<br>CORS这么好吗，难道就没有缺点嘛？<br>答案肯定是NO，目前所有最新浏览器都支持该功能，但是万恶的<code>IE</code>不能低于10<br>简单请求和非简单请求<br>浏览器将CORS请求分成两类：简单请求和非简单请求</p>
<h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>凡是同时满足以下两种情况的就是简单请求，反之则非简单请求，浏览器对这两种请求的处理不一样</p>
<ul>
<li><p>请求方法是以下方三种方法之一</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
</li>
<li><p>HTTP的头信息不超出以下几种字段</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li>
</ul>
</li>
</ul>
<p> 对于简单请求来说，浏览器之间发送CORS请求，具体来说就是在头信息中，增加一个origin字段，来看一下例子</p>
 <figure class="highlight http"><table><tr><td class="code"><pre><span class="line"> GET /cors? HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:2333</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://localhost:2332</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost:2332/CORS.html</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">If-None-Match</span><span class="punctuation">: </span>W/&quot;1-NWoZK3kTsExUV00Ywo1G5jlUKKs&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>上面的头信息中，Origin字段用来说名本次请求来自哪个源,服务器根据这个值,决定是否同意这次请求。<br>如果Origin指定的源不在允许范围之内,服务器就会返回一个正常的HTTP回应,然后浏览器发现头信息中没有包含Access-Control-Allow-Origin 字段,就知道出错啦,然后抛出错误,反之则会出现这个字段(实例如下)</p>
 <figure class="highlight http"><table><tr><td class="code"><pre><span class="line"> Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br><span class="line"><span class="attribute">Access-Control-Expose-Headers</span><span class="punctuation">: </span>FooBar</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Access-Control-Allow-Origin 这个字段是必须的,表示接受那些域名的请求(*为所有)</li>
</ul>
<ul>
<li>Access-Control-Allow-Credentials 该字段可选, 表示是否可以发送cookie</li>
</ul>
<ul>
<li>Access-Control-Expose-Headers 该字段可选,XHMHttpRequest对象的方法只能够拿到六种字段: Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma ,如果想拿到其他的需要使用该字段指定。</li>
</ul>
<p>如果你想要连带Cookie一起发送,是需要服务端和客户端配合的</p>
 <figure class="highlight http"><table><tr><td class="code"><pre><span class="line"> // 服务端</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br><span class="line">// 客户端</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = true;</span><br><span class="line">// 但是如果省略withCredentials属性的设置,有的浏览器还是会发送cookie的</span><br><span class="line">xhr.withCredentials = false;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><p>非简单请求则是不满足上边的两种情况之一,比如请求的方式为 PUT,或者请求头包含其他的字段<br>非简单请求的<code>CORS</code>请求是会在正式通信之前进行一次预检请求<br>浏览器先询问服务器,当前网页所在的域名是否可以请求您的服务器,以及可以使用那些<code>HTTP</code>动词和头信息,只有得到正确的答复,才会进行正式的请求</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">// 前端代码</span><br><span class="line">var url = &#x27;http://localhost:2333/cors&#x27;;</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&#x27;PUT&#x27;, url, true);</span><br><span class="line">xhr.setRequestHeader(&#x27;X-Custom-Header&#x27;, &#x27;value&#x27;);</span><br><span class="line">xhr.send();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于上面的代码使用的是 <code>PUT</code> 方法,并且发送了一个自定义头信息.所以是一个非简单请求,当浏览器发现这是一个非简单请求的时候,会自动发出预检请求,看看服务器可不可以接收这种请求,下面是”预检”的 <code>HTTP</code> 头信息</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/cors</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>localhost:2333</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span><span class="punctuation">: </span>PUT // 表示使用的什么HTTP请求方法</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span><span class="punctuation">: </span>X-Custom-Header // 表示浏览器发送的自定义字段</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:2332</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0...</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>“预检”使用的请求方法是 OPTIONS , 表示这个请求使用来询问的,<br>预检请求后的回应，服务器收到”预检”请求以后，检查了<code>Origin</code>、<code>Access-Control-Request-Method</code>和<code>Access-Control-Request-Headers</code>字段以后，确认允许跨源请求，就可以做出回应。<br>预检的响应头:</p>
 <figure class="highlight http"><table><tr><td class="code"><pre><span class="line"> HTTP/1.1 200 OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache/2.0.61 (Unix)</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://localhost:2332 // 表示http://localhost:2332可以访问数据</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>GET, POST, PUT      </span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>X-Custom-Header    </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Encoding</span><span class="punctuation">: </span>gzip</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">Keep-Alive</span><span class="punctuation">: </span>timeout=2, max=100</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>如果浏览器否定了”<code>预检</code>“请求,会返回一个正常的HTTP回应,但是没有任何CORS的头相关信息,这是浏览器就认定,服务器不允许此次访问,从而抛出错误<br>预检之后的请求<br>当预检请求通过之后发出正经的HTTP请求,还有一个就是一旦通过了预检请求就会,请求的时候就会跟简单请求,会有一个Origin头信息字段。<br>通过预检之后的,浏览器发出发请求</p>
 <figure class="highlight http"><table><tr><td class="code"><pre><span class="line"> PUT /cors HTTP/1.1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://api.bob.com // 通过预检之后的请求,会自动带上Origin字段</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.alice.com</span><br><span class="line"><span class="attribute">X-Custom-Header</span><span class="punctuation">: </span>value</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0...</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>cors</category>
      </categories>
      <tags>
        <tag>cors</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue rem适配</title>
    <url>/20210628/41-Vue-rem%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><ol>
<li>安装 postcss-pxtorem<blockquote>
<p>npm install postcss-pxtorem -D</p>
</blockquote>
</li>
<li>在项目根目录创建 postcss.config.js 文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-pxtorem&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">rootValue</span>: <span class="number">10</span>, <span class="comment">//结果为：设计稿元素尺寸/10，</span></span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>动态改变根元素的 fontSize 大小（写在 main.js 中即可）</p>
<p><strong>或者用淘宝 flexible 适配方案 flexible.js</strong><br>社区有一种更暴力的，直接用 <code>font-size: calc(100vw /7.5) ;</code></p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 适配不同尺寸屏幕（动态计算根元素的大小fonSize）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> baseConstn = <span class="number">192</span> <span class="comment">// 1920的设计稿 / 基数10</span></span><br><span class="line">  <span class="keyword">const</span> nowWidth = <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">  <span class="keyword">const</span> nowCount =  nowWidth / baseConstn</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;html&#x27;</span>).style.fontSize = nowCount + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">resizeCount()</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  resizeCount()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>打开页面，查看 html 元素是否随窗口宽度变化而变化</li>
</ol>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>rem</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue provide inject使用</title>
    <url>/20210628/40-Vue-provide-inject%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide inject"></a>provide inject</h2><p>正常的父子组件传递信息 <code>props</code> 就行了</p>
<p>跨组件(子孙)需要用到 <code>provide inject</code></p>
<p>兄弟组件需要用到 <code>mitt</code>(<code>Vue</code> 推荐)</p>
<blockquote>
<p>不要在子组件修改值，可以在父组件传递一个修改方法，子组件可以调用来修改，比如 updateToken<br>下例中：readonly 就是为了防止子组件随意修改，导致不可维护（保证单一源）</p>
</blockquote>
<h3 id="provide"><a href="#provide" class="headerlink" title="provide"></a>provide</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">父组件中</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props,context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = ref(<span class="string">&#x27;abcde&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> updateToken = <span class="function">(<span class="params">val:string</span>)=&gt;</span>&#123;</span><br><span class="line">        token.value = val</span><br><span class="line">    &#125;</span><br><span class="line">    provide(<span class="string">&#x27;token&#x27;</span>,readonly(token));</span><br><span class="line">    provide(<span class="string">&#x27;updateToken&#x27;</span>,updateToken)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="inject"><a href="#inject" class="headerlink" title="inject"></a>inject</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;&#123; token &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;editToken&quot;</span>&gt;</span>更改token<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateTokenFunc(123)&quot;</span>&gt;</span>更改token123<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> token = inject(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> updateTokenFunc = inject(<span class="string">&quot;updateToken&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      token,</span><br><span class="line">      updateTokenFunc</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">editToken</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;editToken&quot;</span>);</span><br><span class="line">      <span class="built_in">this</span>.token = <span class="number">123</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue router分模块</title>
    <url>/20210628/42-Vue-router%E5%88%86%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="router"><a href="#router" class="headerlink" title="router"></a>router</h2><img title="Vue路由分类" src="https://blog.img.wy1991.cn/static/images/vue/vuerouter.png-blogImg">

<h3 id="index-ts"><a href="#index-ts" class="headerlink" title="index.ts"></a>index.ts</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">利用webapck得<span class="built_in">require</span>.context 取得所有模块，</span><br><span class="line"><span class="keyword">const</span> constantFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;./modules&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.ts$/</span>);</span><br><span class="line"><span class="keyword">let</span> constantModules: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = []</span><br><span class="line">constantFiles.keys().forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(constantFiles(key).default);</span><br><span class="line">  <span class="built_in">console</span>.log(constantFiles(key));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&#x27;./index.ts&#x27;</span>) <span class="keyword">return</span>   <span class="comment">//自行决定</span></span><br><span class="line">  constantModules = constantModules.concat(constantFiles(key).default)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Login.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  ...constantModules</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="manage-ts"><a href="#manage-ts" class="headerlink" title="manage.ts"></a>manage.ts</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//userManage.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> userManageRouter: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="keyword">import</span>(</span><br><span class="line">        <span class="comment">/* webpackChunkName: &quot;userManager&quot; */</span> <span class="string">&#x27;@/views/main/user/index.vue&#x27;</span></span><br><span class="line">      ),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/userlist&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;UserList&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="keyword">import</span>(<span class="comment">/* webpackChunRname: &quot;userManage&quot; */</span> <span class="string">&#x27;@/views/main/user/list.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> userManageRouter</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vueRouter</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Suspense 异步组件</title>
    <url>/20210628/45-Vue-Suspense-%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><p><strong>总结如下:</strong><br>async setup 是为了 解决开发中 请求服务器返回数据后在加载组件</p>
<p>之前使用 v-show v-if 判断数据加载完成然后显示组件 现在可以用 Suspense</p>
<p>defineAsyncComponent 作用是 解决单页面文件一下子加载的问题（按需加载文件），</p>
<p><strong>总结:下面 2 个案例解决的问题不一样，但是效果一样（一个是解决网络请求问题，一个是解决文件加载问题）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">asyncMethod返回个promise</span><br><span class="line"></span><br><span class="line">方法<span class="number">1</span>：（正常注册即可）</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">  &#123;&#123;data&#125;&#125;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">const</span> data = <span class="keyword">await</span> asyncMethod()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法<span class="number">2</span>：（需要注册的时候，用ddefineAsyncComponent   <span class="keyword">import</span> ）</span><br><span class="line"><span class="comment">//注册的时候，可以用</span></span><br><span class="line"><span class="keyword">const</span> home = defineAsyncComponent(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./home.vue&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    home,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Suspense&gt;</span><br><span class="line">  &lt;template #default&gt;</span><br><span class="line">  &lt;home&gt;&lt;/home&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">	&lt;template #fallback&gt;</span><br><span class="line">    loding....</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/Suspense&gt;</span><br></pre></td></tr></table></figure>

<h3 id="公用的-js"><a href="#公用的-js" class="headerlink" title="公用的 js"></a>公用的 js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncMethod</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">reject</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue setup巧用</title>
    <url>/20210628/44-Vue-setup%E5%B7%A7%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="巧用计算属性和-Vuex"><a href="#巧用计算属性和-Vuex" class="headerlink" title="巧用计算属性和 Vuex"></a>巧用计算属性和 Vuex</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;onClick&quot;</span> &gt; click &lt;/button&gt;</span><br><span class="line"></span><br><span class="line">setup()&#123;</span><br><span class="line"></span><br><span class="line">  const store = useStore();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">  	  usernames: computed(<span class="function"><span class="params">()</span> =&gt;</span> store.getters[<span class="string">&quot;user/getUserInfo&quot;</span>]),</span><br><span class="line">      changes: <span class="function"><span class="params">()</span> =&gt;</span> store.dispatch(<span class="string">&quot;user/SET_NICKNAME&quot;</span>, <span class="string">&quot;李四&quot;</span>),</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue router使用</title>
    <url>/20210702/43-Vue-router%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="VueRouter4"><a href="#VueRouter4" class="headerlink" title="VueRouter4"></a>VueRouter4</h2><blockquote>
<p>Vue3 出来好久了一直没用，最近学习学习，vueRouter 也升级到 4 了，果断上</p>
</blockquote>
<ol>
<li>老规矩先安装</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install vue-router@<span class="number">4</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>src 目录下创建 router/index.js <code>/src/router/index.js</code></li>
</ol>
<blockquote>
<p>VueRouter4 采用新 API</p>
</blockquote>
<p>路由就直接用 import 异步加载了</p>
<p><code>webpackChunName</code> webpack 的打包分包，需要按照这种格式来</p>
<p><code>beforeEach</code> 路由守卫</p>
<p><code>meta</code> 可以通过 meta 数据，做一些处理（权限，或者路由 class）</p>
<p><code>pathMatch</code> 匹配 404</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>:&#123;</span><br><span class="line">      <span class="attr">Auth</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunName: &#x27;home&#x27; */</span> <span class="string">&#x27;../pages/Home.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/About.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: User,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/profile 匹配成功</span></span><br><span class="line">        <span class="comment">// UserProfile 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/profile.vue&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/posts 匹配成功</span></span><br><span class="line">        <span class="comment">// UserPosts 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;posts&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../pages/posts.vue&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;，</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;NotFound&#x27;</span>, <span class="attr">component</span>: NotFound &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHashHistory(),</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, form, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(to)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>main.js 引入</li>
</ol>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.use(router)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>app.vue</li>
</ol>
<blockquote>
<p>active-class 路由激活时的 class</p>
</blockquote>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">             <span class="attr">active-class</span>=<span class="string">&quot;activeClass&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123; name: &#x27;user&#x27;, params: &#123; username: &#x27;erina&#x27; &#125;</span><span class="xml"><span class="tag"><span class="string">&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  User</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>总结；简单的描述下，更多更全的推荐看文档~</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>VueRouter</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue tailwind安装</title>
    <url>/20210628/46-Vue-tailwind%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="tailwindcss"><a href="#tailwindcss" class="headerlink" title="tailwindcss"></a>tailwindcss</h2><blockquote>
<p>安装 tailwindcss 最新的会报错 安装兼容版本</p>
</blockquote>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">npm install -D tailwindcss<span class="symbol">@npm</span>:<span class="symbol">@tailwindcss</span>/postcss7-compat <span class="symbol">@tailwindcss</span>/postcss7-compat postcss<span class="symbol">@^7</span> autoprefixer<span class="symbol">@^9</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npx</span> <span class="string">tailwindcss</span> <span class="string">init</span> <span class="string">-full</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="string">//</span> <span class="string">tailwind.config.js</span></span><br><span class="line">  <span class="string">module.exports</span> <span class="string">=</span> &#123;</span><br><span class="line">   <span class="attr">purge:</span> [],</span><br><span class="line">   <span class="attr">purge:</span> [<span class="string">&#x27;./index.html&#x27;</span>, <span class="string">&#x27;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&#x27;</span>],</span><br><span class="line">    <span class="attr">darkMode:</span> <span class="literal">false</span>, <span class="string">//</span> <span class="string">or</span> <span class="string">&#x27;media&#x27;</span> <span class="string">or</span> <span class="string">&#x27;class&#x27;</span></span><br><span class="line">    <span class="attr">theme:</span> &#123;</span><br><span class="line">      <span class="attr">extend:</span> &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">variants:</span> &#123;</span><br><span class="line">      <span class="attr">extend:</span> &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins:</span> [],</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tailwind</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>tailwind</tag>
      </tags>
  </entry>
  <entry>
    <title>css 文字超出指定区域隐藏</title>
    <url>/20210710/5-css-%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E6%8C%87%E5%AE%9A%E5%8C%BA%E5%9F%9F%E9%9A%90%E8%97%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="text-overflow"><a href="#text-overflow" class="headerlink" title="text-overflow"></a>text-overflow</h2><p>在显示文本的时候都会遇到文本太长导致影响盒子大小从而影响整体布局，所以下面我就展示一下几种文本过长超出指定区域隐藏的方法。</p>
<p>首先第一种是最常用的解决方案，设置盒子属性 text-overflow，这个属性可以设置文本溢出后显示为省略号，但是这个属性只能隐藏一行的文本溢出，所以我们还要让文本无法换行。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面所讲的只能显示单行隐藏无法实现多行隐藏，如果我们想要实现多行文本隐藏可以通过伪类实现。我们先限制盒子的宽度和高度内容溢出后隐藏，然后设置一个伪类的内容为省略号通过定位到盒子的右下方就可以实现文本溢出隐藏的效果，但是在文本没有这么多的情况下，就不会实现溢出的情况但是省略号仍然存在，所以我们要通过另外一个伪类在文本没有溢出的时候隐藏掉省略号。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">3.6rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.2rem</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: justify;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">11px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还可以通过 line-clamp 属性限制内容显示的行数，但是通过这个属性设置溢出隐藏可能兼容性就没有这么好，要使用这个属性就需要设置另外两个属性，否则没有效果，首先就是设置盒子的 display 为 box，然后是设置 box-orient:vertical 属性这个属性是指定内容可以以多行显示，当然设置这些属性都要带上浏览器前缀。</p>
<p>可见超出三行的文字到达三行后显示省略号，但是文本还是溢出所以我们还要设置一下 overflow 属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">   <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">   -webkit-box-orient: vertical;</span><br><span class="line">   -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">   <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue vuex分模块</title>
    <url>/20210628/48-Vue-vuex%E5%88%86%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="vuex-分模块"><a href="#vuex-分模块" class="headerlink" title="vuex 分模块"></a>vuex 分模块</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">vuex 模块分成，namespaced 防止全局污染</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//store/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> menu <span class="keyword">from</span> <span class="string">&#x27;./modules/menu&#x27;</span></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&#x27;./modules/test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    menu,</span><br><span class="line">    test</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// store/modules/menu.ts</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;hello aside&#x27;</span>,</span><br><span class="line">  <span class="attr">asideShow</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  isShow(state: <span class="built_in">any</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.asideShow</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  toggle(state: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    state.asideShow = !state.asideShow</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 commit提交修改vuex state</span></span><br><span class="line"></span><br><span class="line">store.commit(<span class="string">&quot;menu/toggle&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//demo.vue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过watch监听  注意watch的第一个函数，需要返回 return</span></span><br><span class="line"><span class="keyword">const</span> show = ref(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">watch(</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> store.getters[<span class="string">&quot;menu/isShow&quot;</span>];</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">oldVal, newVal</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(oldVal, newVal);</span></span><br><span class="line">        show.value = newVal;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex-getters传递参数</title>
    <url>/20210707/49-Vuex-getters%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h2><blockquote>
<p>实际业务中，避免不要使用Vuex对state数据进行筛选过滤，所以就用到了getters</p>
</blockquote>
<p>传统写法：</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"> getListFilter (<span class="keyword">state</span>) &#123;</span><br><span class="line">    return (age) =&gt; &#123;</span><br><span class="line">      return <span class="keyword">state</span>.<span class="keyword">user</span>List.filter(item =&gt; item.age &gt;= age)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>精简写法:</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">getTodoById: (<span class="keyword">state</span>) =&gt; (id) =&gt; &#123;</span><br><span class="line">    return <span class="keyword">state</span>.todos.find(todo =&gt; todo.id === id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>  Getter 也可以接受其他 getter 作为第二个参数：</p>
<p>  state,     // 如果在模块中定义则为模块的局部状态</p>
<p>  getters,   // 等同于 store.getters</p>
<p>  如果需要传递参数，可以用闭包处理</p>
]]></content>
      <categories>
        <category>vuex</category>
      </categories>
      <tags>
        <tag>vuex</tag>
        <tag>getters</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue v-model用法</title>
    <url>/20210628/47-Vue-v-model%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">vue3和<span class="number">2</span>的vmodel不太一样，精简了一些</span><br><span class="line">可以多个v-model,默认是modelValue</span><br><span class="line">    &lt;wy-input v-model=<span class="string">&quot;inputVal&quot;</span></span><br><span class="line">              v-model:title=<span class="string">&quot;bookTitle&quot;</span>&gt;&lt;/wy-input&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wyInput.vue</span><br><span class="line">  &lt;input <span class="keyword">type</span>=<span class="string">&quot;text&quot;</span></span><br><span class="line">           <span class="meta">@input</span>=<span class="string">&quot;inputVal&quot;</span></span><br><span class="line">           :value=<span class="string">&quot;modelValue&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">           <span class="attr">:value</span>=<span class="string">&quot;title&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">           @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;update:title&#x27;,$event.target.value)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  props: &#123;</span></span><br><span class="line"><span class="xml">    modelValue: String,</span></span><br><span class="line"><span class="xml">    title: String,</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  emits: [&quot;update:modelValue&quot;, &quot;update:title&quot;],</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  setup(props, context) &#123;</span></span><br><span class="line"><span class="xml">    const inputVal = (e: KeyboardEvent) =&gt; &#123;</span></span><br><span class="line"><span class="xml">      const targetVal = (e.target as HTMLInputElement).value;</span></span><br><span class="line"><span class="xml">      // console.log(targetVal);</span></span><br><span class="line"><span class="xml">      context.emit(&quot;update:modelValue&quot;, targetVal);</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    return &#123;</span></span><br><span class="line"><span class="xml">      inputVal,</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex mapState使用</title>
    <url>/20210708/50-vuex-mapState%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>options API中使用</p>
</blockquote>
<h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>在vue的template中可以:</p>
<pre><code>  &lt;p&gt;&#123;&#123; $store.state.name &#125;&#125;&lt;/p&gt;
</code></pre>
<p>也可以使用计算属性computed</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&#123;&#123;name&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;age&#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">computed:&#123;</span><br><span class="line">  name()&#123;</span><br><span class="line">    return this.$store.state.name</span><br><span class="line">  &#125;,</span><br><span class="line">  age()&#123;</span><br><span class="line">    return this.$store.state.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的写法但是一旦多了不容易维护,可以用mapState，至少可以少复制几次和少敲几次键盘   </p>
<h2 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h2><blockquote>
<p>mapState返回一个对象</p>
</blockquote>
<h3 id="直接用法"><a href="#直接用法" class="headerlink" title="直接用法:"></a>直接用法:</h3><pre><code>  // 映射 this.name 为 store.state.name
  computed: mapState([&quot;name&quot;, &quot;age&quot;])
</code></pre>
<h3 id="数组用法："><a href="#数组用法：" class="headerlink" title="数组用法："></a>数组用法：</h3><pre><code>  // 映射 this.name 为 store.state.name
  computed: &#123;
      ...mapState([&quot;name&quot;, &quot;age&quot;])
  &#125;
</code></pre>
<h3 id="对象用法"><a href="#对象用法" class="headerlink" title="对象用法:"></a>对象用法:</h3><p>可以起别名</p>
<pre><code>    computed: &#123;
      ...mapState(&#123;
        sname: state =&gt; state.name,
        sage: state =&gt; state.age
      &#125;)
    &#125;
</code></pre>
<p>总结: mapState算是一个便捷函数，具体好处自己体会吧，具体详情看文档<span class="exturl" data-url="aHR0cHM6Ly9uZXh0LnZ1ZXgudnVlanMub3JnL3poL2d1aWRlL3N0YXRlLmh0bWwjbWFwc3RhdGUtJUU4JUJFJTg1JUU1JThBJUE5JUU1JTg3JUJEJUU2JTk1JUIw">mapState<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Vuex</category>
      </categories>
      <tags>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex-mapState在compositionApi使用</title>
    <url>/20210709/51-Vuex-mapState%E5%9C%A8compositionApi%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>在compositionApi的setup中，我们发现mapState似乎并不好用，官网也没给出什么解决办法，今天这里分享一个小技巧~</p>
</blockquote>
<h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123; useStore, mapState &#125; from &#x27;vuex&#x27;;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">  export default&#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">      const store = useStore();</span><br><span class="line">      const name = computed(()=&gt; store.state.name )</span><br><span class="line">      const age = computed(()=&gt; store.state.age )</span><br><span class="line"></span><br><span class="line">      return&#123;</span><br><span class="line">        age</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>上面的写法，如果属性多了太麻烦了，并且不能用到mapState</p>
<h2 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h2><p> 我们要搞明白mapState返回的是函数(下例中，stateFunc是不能直接在template中使用的)，我们可以利用计算属性</p>
<p> 但是要注意mapState返回的函数其实是this.$store.state.xxx。setup中没有this，所以可以通过bind绑定一个this</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; useStore, mapState &#125; from &#x27;vuex&#x27;;</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const store = useStore();</span><br><span class="line">    const stateFunc = mapState([&#x27;name&#x27;, &#x27;age&#x27;]);</span><br><span class="line"></span><br><span class="line">    const storeState = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Object.keys(stateFunc).forEach(fnkey =&gt; &#123;</span><br><span class="line">      const fn = stateFunc[fnkey].bind(&#123; $store: store &#125;)</span><br><span class="line">      storeState[fnkey] = computed(fn)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      ...storeState</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="封装hooks"><a href="#封装hooks" class="headerlink" title="封装hooks"></a>封装hooks</h2><p>新建hooks文件夹，创建文件 useStore.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useState</span> (<span class="params">mapper</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> store = useStore();</span><br><span class="line">  <span class="keyword">const</span> stateFunc = mapState(mapper);</span><br><span class="line">  <span class="keyword">const</span> storeState = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(stateFunc).forEach(<span class="function"><span class="params">fnkey</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = stateFunc[fnkey].bind(&#123; <span class="attr">$store</span>: store &#125;)</span><br><span class="line">    storeState[fnkey] = computed(fn)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> storeState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目中直接使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import &#123; useState &#125; from &#x27;./hooks/useState.js&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    //数组用法</span><br><span class="line">    // const storeState = useState([&#x27;name&#x27;, &#x27;age&#x27;]) ;</span><br><span class="line">    //对象用法</span><br><span class="line">    const storeState = useState(&#123;</span><br><span class="line">      sName: state =&gt; state.name,</span><br><span class="line">      sAge: state =&gt; state.age</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      ...storeState</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇事不能死脑筋，要懂得变通~~~，</p>
]]></content>
      <categories>
        <category>Vuex</category>
      </categories>
      <tags>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础-Ref</title>
    <url>/20210628/53-Vue%E5%9F%BA%E7%A1%80-Ref/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">创建一个响应式数据，支持基础类型</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">ref</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">ref</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">ref</span>([])</span><br><span class="line"></span><br><span class="line">a.<span class="keyword">value</span></span><br></pre></td></tr></table></figure>

<h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = reacitve(&#123;</span><br><span class="line"><span class="built_in">	name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  age:<span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line">obj<span class="built_in">.name</span></span><br></pre></td></tr></table></figure>

<h2 id="toref"><a href="#toref" class="headerlink" title="toref"></a>toref</h2><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">state</span> = reactive(&#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">1</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">to</span>Ref(<span class="keyword">state</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">console.<span class="keyword">log</span>(foo.value);</span><br><span class="line">foo.value++;</span><br><span class="line">console.<span class="keyword">log</span>(foo.value);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="torefs"><a href="#torefs" class="headerlink" title="torefs"></a>torefs</h2><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> states = reactive(&#123;</span><br><span class="line">   foo: <span class="number">1</span>,</span><br><span class="line">   bar: <span class="number">1</span>,</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> statsrefs = <span class="keyword">to</span>Refs(states);</span><br><span class="line"> console.<span class="keyword">log</span>(statsrefs.foo);</span><br><span class="line"> console.<span class="keyword">log</span>(statsrefs.bar);</span><br></pre></td></tr></table></figure>

<h2 id="unref"><a href="#unref" class="headerlink" title="unref"></a>unref</h2><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num1</span> = ref(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span> = unref(num1)    //<span class="attr">a</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span> =unref(<span class="number">100</span>)   //<span class="attr">b</span> == <span class="number">100</span></span><br></pre></td></tr></table></figure>

<h2 id="isRef"><a href="#isRef" class="headerlink" title="isRef"></a>isRef</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="built_in">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> b = unref(num)</span><br><span class="line"></span><br><span class="line">is<span class="constructor">Ref(<span class="params">num</span>)</span>  <span class="comment">//true</span></span><br><span class="line">is<span class="constructor">Ref(<span class="params">b</span>)</span>  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>ref</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 保存vuex到sessionStorage</title>
    <url>/20210629/52-Vue-%E4%BF%9D%E5%AD%98vuex%E5%88%B0sessionStorage/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>Vuex 中刷新页面数据将丢失，所以可以在 app.vue 中搞这个</p>
</blockquote>
<h3 id="app-vue"><a href="#app-vue" class="headerlink" title="app.vue"></a>app.vue</h3><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">  //在页面加载时读取sessionStorage里的状态信息</span><br><span class="line">  if (sessionStorage.getItem(<span class="string">&quot;store&quot;</span>) ) &#123;</span><br><span class="line">    this.<span class="variable">$store</span>.replaceState(Object.assign(&#123;&#125;, this.<span class="variable">$store</span>.<span class="keyword">state</span>,JSON.parse(sessionStorage.getItem(<span class="string">&quot;store&quot;</span>))))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //在页面刷新时将vuex里的信息保存到sessionStorage里</span><br><span class="line">  window.addEventListener(<span class="string">&quot;beforeunload&quot;</span>,()=&gt;&#123;</span><br><span class="line">    sessionStorage.<span class="built_in">set</span>Item(<span class="string">&quot;store&quot;</span>,JSON.stringify(this.<span class="variable">$store</span>.<span class="keyword">state</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Vuex</tag>
        <tag>sessionStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 利用Vuex实现全局socket</title>
    <url>/20210628/54-Vue-%E5%88%A9%E7%94%A8Vuex%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80socket/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="为什么这样做？"><a href="#为什么这样做？" class="headerlink" title="为什么这样做？"></a>为什么这样做？</h2><h5 id="业务中，多个地方需要用到-websocket，重复的断开重连，有几个弊端"><a href="#业务中，多个地方需要用到-websocket，重复的断开重连，有几个弊端" class="headerlink" title="业务中，多个地方需要用到 websocket，重复的断开重连，有几个弊端"></a>业务中，多个地方需要用到 websocket，重复的断开重连，有几个弊端</h5><ol>
<li>断开重连浪费资源</li>
<li>重连期间会丢失数据</li>
<li>不能全局使用</li>
</ol>
<p><strong>为解决问题：浏览器打开多个窗口，可能会有问题，目前思路是利用 WebWork 解决</strong></p>
<blockquote>
<p>思路：组件利用 计算属性和 watch 监听 getters</p>
</blockquote>
<h3 id="vuex-socket-ts"><a href="#vuex-socket-ts" class="headerlink" title="vuex socket.ts"></a>vuex socket.ts</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Commit &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> stateProp <span class="keyword">extends</span> Commit &#123;</span><br><span class="line">  <span class="attr">websock</span>: WebSocket</span><br><span class="line">  <span class="attr">url</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">heartTime</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">object</span> | <span class="literal">null</span></span><br><span class="line">  <span class="attr">heart</span>: <span class="built_in">number</span> | <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">websock</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">heartTime</span>: <span class="number">10</span> * <span class="number">1000</span>, <span class="comment">//心跳时间</span></span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;没有消息&#x27;</span>,</span><br><span class="line">  <span class="attr">heart</span>: <span class="literal">null</span>, <span class="comment">//心跳</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="function"><span class="title">message</span>(<span class="params">state: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.message</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description </span>初始化链接</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="variable">state</span></span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="variable">url</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">WEBSOCKET_INIT</span>(<span class="params">state: stateProp, url: <span class="built_in">any</span> = state.url</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span></span><br><span class="line">    state.websock = <span class="keyword">new</span> WebSocket(url)</span><br><span class="line">    state.url = url</span><br><span class="line">    state.websock.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;链接成功&#x27;</span>)</span><br><span class="line">      state.websock.send(<span class="string">&#x27;id:123&#x27;</span>)</span><br><span class="line">      state.websock.send(<span class="string">&#x27;OpenBarScanner&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// this.commit(&#x27;socket/WEBSOCKET_HEART&#x27;)</span></span><br><span class="line">    &#125;</span><br><span class="line">    state.websock.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">callback: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(callback.data)</span><br><span class="line"></span><br><span class="line">      state.message = callback.data</span><br><span class="line">    &#125;</span><br><span class="line">    state.websock.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;onerror&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">    state.websock.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;onclose&#x27;</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description </span>心跳</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">WEBSOCKET_HEART</span>(<span class="params">state: stateProp</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;xintiao&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> that = <span class="built_in">this</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">clearInterval</span>(state.heart <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line"></span><br><span class="line">    state.heart = <span class="built_in">window</span>.setInterval(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (state.websock.readyState === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//如果连接正常</span></span><br><span class="line"></span><br><span class="line">        state.websock.send(<span class="string">&#x27;heart&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//否则重连</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// @ts-ignore: 无法被执行的代码的错误</span></span><br><span class="line">        <span class="built_in">this</span>.commit(<span class="string">&#x27;socket/WEBSOCKET_INIT&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, state.heartTime)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">WEBSOCKET_SEND</span>(<span class="params">state: stateProp, message: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    state.websock.send(message)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">WEBSOCKET_INIT</span>(<span class="params">context: &#123; commit: Commit &#125;, url: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    state.url = url</span><br><span class="line">    context.commit(<span class="string">&#x27;WEBSOCKET_INIT&#x27;</span>, url)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">WEBSOCKET_SEND</span>(<span class="params">context: &#123; commit: Commit &#125;, message: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    context.commit(<span class="string">&#x27;WEBSOCKET_SEND&#x27;</span>, message)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建链接"><a href="#创建链接" class="headerlink" title="创建链接"></a>创建链接</h3><p>app.vue (项目初始化创建链接)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    store.dispatch(<span class="string">&quot;socket/WEBSOCKET_INIT&quot;</span>, <span class="string">&quot;ws://localhost:8181&quot;</span>);</span><br><span class="line">    store.commit(<span class="string">&quot;socket/WEBSOCKET_HEART&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> click = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      i++;</span><br><span class="line">      store.dispatch(<span class="string">&quot;socket/WEBSOCKET_SEND&quot;</span>, <span class="string">&quot;新小心&quot;</span> + i);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> val = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> store.getters[<span class="string">&quot;socket/message&quot;</span>];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      click,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> socketMsg = ref(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> msg = computed(<span class="function">() =&gt;</span> store.getters[<span class="string">&#x27;socket/message&#x27;</span>])</span><br><span class="line">watch(</span><br><span class="line">  <span class="function">() =&gt;</span> msg.value,</span><br><span class="line">  <span class="function">(<span class="params">msg, prev</span>) =&gt;</span> &#123;</span><br><span class="line">    socketMsg.value = msg</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以在此基础上扩展，过滤出自己需要的数据。</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>Vue</tag>
        <tag>vuex</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 文件下载</title>
    <url>/20210628/55-Vue-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue-blog"><a href="#Vue-blog" class="headerlink" title="Vue blog"></a>Vue blog</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">const</span> msg = &#123;</span><br><span class="line">               <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">           &#125;;</span><br><span class="line">              <span class="comment">//注意要是数组</span></span><br><span class="line">           <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([<span class="built_in">JSON</span>.stringify(msg, <span class="literal">null</span>, <span class="number">2</span>)], &#123;</span><br><span class="line">               <span class="attr">type</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// link.style.display = &#x27;none&#x27;;</span></span><br><span class="line"></span><br><span class="line">           link.href = URL.createObjectURL(blob);</span><br><span class="line">           <span class="comment">//利用html5 a标签的down 属性，如果未指定后缀名则有类型决定(json)</span></span><br><span class="line">           link.download = <span class="string">&#x27;下载文件&#x27;</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="built_in">document</span>.body.appendChild(link);</span><br><span class="line">           link.click()</span><br><span class="line">           <span class="comment">//移除掉a链接</span></span><br><span class="line">           <span class="built_in">document</span>.removeChild(link)</span><br><span class="line">           <span class="comment">//不用的时候需要释放掉</span></span><br><span class="line">           URL.revokeObjectURL(link.href)</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">filename, text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pom = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  pom.setAttribute(</span><br><span class="line">    <span class="string">&#x27;href&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;data:text/plain;charset=utf-8,&#x27;</span> + <span class="built_in">encodeURIComponent</span>(text)</span><br><span class="line">  )</span><br><span class="line">  pom.setAttribute(<span class="string">&#x27;download&#x27;</span>, filename)</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.createEvent) &#123;</span><br><span class="line">    <span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">&#x27;MouseEvents&#x27;</span>)</span><br><span class="line">    event.initEvent(<span class="string">&#x27;click&#x27;</span>, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">    pom.dispatchEvent(event)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pom.click()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>文件下载</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue源码过程图解</title>
    <url>/20210628/56-Vue%E6%BA%90%E7%A0%81%E8%BF%87%E7%A8%8B%E5%9B%BE%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="需看懂此图"><a href="#需看懂此图" class="headerlink" title="需看懂此图"></a>需看懂此图</h4><img title="Vue图解" src="https://blog.img.wy1991.cn/static/images/vue/vuequanguocheng.png-blogImg">
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 自定义指令</title>
    <url>/20210628/57-Vue-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="directives"><a href="#directives" class="headerlink" title="directives"></a>directives</h2><blockquote>
<p>Vue3 得自定义指令和 2 有所不同，所以需要注意下</p>
</blockquote>
<h3 id="demo-ts"><a href="#demo-ts" class="headerlink" title="demo.ts"></a>demo.ts</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">目录结构    <span class="number">3</span>个自定义指令</span><br><span class="line"><span class="comment">//   /src/directives/index.ts</span></span><br><span class="line"><span class="comment">// /src/directives/focus/index.ts</span></span><br><span class="line"><span class="comment">// /src/directives/permission/index.ts</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//index.ts  只需要导出各个指令就行</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./focus&#x27;</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./permission&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//focus</span></span><br><span class="line"><span class="keyword">import</span> &#123; Directive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> focus: Directive = &#123;</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params">el: HTMLElement, binding</span>)</span> &#123;</span><br><span class="line">    el.focus()</span><br><span class="line">    <span class="built_in">console</span>.log(binding.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//permission</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Directive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> permission: Directive = &#123;</span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params">el: HTMLElement, binding</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = binding</span><br><span class="line">    <span class="keyword">if</span> (value &amp;&amp; value <span class="keyword">instanceof</span> <span class="built_in">Array</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> arr = [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> hasPermission = arr.some(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value.includes(item)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(hasPermission);</span><br><span class="line">      <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;没权限permission&quot;</span>);</span><br><span class="line">        el.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&#x27;this is permission [\&#x27;admin\&#x27;,\&#x27;user\&#x27;]&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="main-ts"><a href="#main-ts" class="headerlink" title="main.ts"></a>main.ts</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, Directive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ElementPlus <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/tailwind.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> directives <span class="keyword">from</span> <span class="string">&#x27;@/directives&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义指令</span></span><br><span class="line"><span class="built_in">Object</span>.keys(directives).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  app.directive(key, (directives <span class="keyword">as</span> &#123; [key: <span class="built_in">string</span>]: Directive &#125;)[key])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(store).use(ElementPlus, &#123; <span class="attr">size</span>: <span class="string">&#x27;small&#x27;</span>, <span class="attr">zIndex</span>: <span class="number">3000</span> &#125;).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack 入门到入土</title>
    <url>/20210628/58-webpack-%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mode         <span class="regexp">//</span>打包模式 production   development</span><br><span class="line">entry        <span class="regexp">//</span>入口</span><br><span class="line">output       <span class="regexp">//</span>输出</span><br><span class="line">plugin       <span class="regexp">//</span>插件</span><br><span class="line">module      <span class="regexp">//</span>第三方模块</span><br><span class="line">devtool   <span class="regexp">//m</span>ap文件，用于调试，prod环境需要关闭 准确地知道错误来自于哪个源文件</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line">npm install -D webapck webpack-cli</span><br><span class="line"></span><br><span class="line">创建webpack.config.js配置文件</span><br><span class="line"></span><br><span class="line">npm install html-webpack-plugin   <span class="regexp">//</span>可以生成html模版</span><br><span class="line"></span><br><span class="line">npm install style-loader css-loader   <span class="regexp">//</span> 安装可以解析css的模块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm install --save-dev webpack-dev-server   <span class="regexp">//</span>保存更新，</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,   <span class="comment">//production   development</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">entry 可以是字符串，也可以为数组，数组的话是多页面入口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="keyword">index</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    index2: <span class="string">&#x27;./src/index2.js&#x27;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">path <span class="regexp">//</span>利用nodejs 的path模块，resolve拼接一个路径和目录</span><br><span class="line">fileanme  <span class="regexp">//</span>文件名字，可以是[name],[hash]等</span><br><span class="line">clean <span class="regexp">//</span>每次 webpack 或者npm build 都会删除dist目录，重新生成，防止文件不覆盖</span><br></pre></td></tr></table></figure>

<h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">&#x27;./public/index.html&#x27;</span>   <span class="comment">//指定html模版</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">devtool: <span class="string">&#x27;inline-source-map&#x27;</span>,    <span class="regexp">//</span>具体其他参数可以看文档  https:<span class="regexp">//</span>webpack.docschina.org<span class="regexp">/configuration/</span>devtool/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>WebStorage缓存使用指南</title>
    <url>/20210716/59-WebStorage%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="浏览器WebStorage缓存使用指南"><a href="#浏览器WebStorage缓存使用指南" class="headerlink" title="浏览器WebStorage缓存使用指南"></a>浏览器WebStorage缓存使用指南</h2><p>在我们网页刷新的时候，页面上所有数据都会被清空。而在一些网站的搜索上，即使是你关闭了浏览器，下次打开时还是会有数据在页面上，如下图一个简单的搜索记录功能，当用户进行搜索时，所有的记录会被保存起来，不论是刷新还是重启浏览器，搜索的历史记录依旧显示在页面上。</p>
<p>具体请看来自掘金的文章分享</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTg0OTA4NzcwMTQ5MTM4NDQ2P3V0bV9zb3VyY2U9Z29sZF9icm93c2VyX2V4dGVuc2lvbg==">浏览器WebStorage缓存使用指南-掘金<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>WebStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>web多文件下载</title>
    <url>/20210629/60-web%E5%A4%9A%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="1-延迟发起多个下载请求"><a href="#1-延迟发起多个下载请求" class="headerlink" title="1. 延迟发起多个下载请求"></a>1. 延迟发起多个下载请求</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time = <span class="number">1000</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> files = [<span class="string">&#x27;1m.zip&#x27;</span>, <span class="string">&#x27;2m.zip&#x27;</span>, <span class="string">&#x27;3m.zip&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> download1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  files.forEach(<span class="keyword">async</span> (file, i) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 延迟下载</span></span><br><span class="line">    <span class="keyword">await</span> sleep(i * <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    a.href = <span class="string">`path/<span class="subst">$&#123;file&#125;</span>`</span></span><br><span class="line">    a.download = file</span><br><span class="line">    a.click()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里要着重强调下延时这个点。你可以尝试同时发起多个下载请求，最终结果却只能正确下载最后一个文件，其他文件则在 DevTools 中的 Network 中显示已取消错误。</p>
<blockquote>
<p>原因在于这种下载方式采用 a 标签多次触发下载，a 标签对于浏览器来说意味着页面跳转，无延迟多次触发跳转时，浏览器认为用户有了新的访问目标，因而取消了访问上一个页面的请求。</p>
</blockquote>
<p>缺点：</p>
<ol>
<li>浏览器会提示用户是否允许自动下载多个文件，需要用户手动确认</li>
<li>当下载文件数量过多且文件较小时，延时所用的时间占大过大</li>
</ol>
<p>还有种类似的下载方式，用 window.open(href, “_blank”)代替 a 标签，这种方式同样缺点明显。首先浏览器默认会阻止弹出多个标签页，只能成功下载第一个文件（和 a 标签正好相反）；其次用户手动授权同意打开多个浏览器标签页，当下载文件过多时，一排的页面同时打开，体检将会很差。</p>
<h3 id="2-服务端生产归档文件"><a href="#2-服务端生产归档文件" class="headerlink" title="2. 服务端生产归档文件"></a>2. 服务端生产归档文件</h3><p>当拥有服务端操作权限时，可以让服务器端进行预处理，把所有将要下载的文件归档为一个 zip 包。WEB 端按照单文件流程下载即可。由于是服务端操作，不在前端范畴内，不做讨论。</p>
<h3 id="3-客户端生成归档文件"><a href="#3-客户端生成归档文件" class="headerlink" title="3. 客户端生成归档文件"></a>3. 客户端生成归档文件</h3><p>当服务端不可控时，可以采用这种方式。<br>文件归档方面比较知名的库是：JSZip 。但是此次采用另一个库：client-zip 。相对于 JSZip 的优势在于部分逻辑由 webassembly 编写，采用流式读写，README 介绍比 JSZip 快 40 倍并且代码体积更加小，但是需要注意其兼容性问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> download3 = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> responses = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">    files.map(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 下载后可以将blob文件存在indexDB中</span></span><br><span class="line">      <span class="comment">// 下载先检测indexDB中是否已经存在这个文件，避免重复下载</span></span><br><span class="line">      <span class="keyword">return</span> fetch(<span class="string">`path/<span class="subst">$&#123;file&#125;</span>`</span>, &#123; <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// 可自定处理错误</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    responses.some(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> response.status === <span class="number">401</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;未授权的下载请求&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 归档所有下载的文件</span></span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">await</span> downloadZip(responses).blob()</span><br><span class="line">  <span class="keyword">const</span> url = URL.createObjectURL(blob)</span><br><span class="line">  <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  a.download = <span class="string">&#x27;files.zip&#x27;</span></span><br><span class="line">  a.href = url</span><br><span class="line">  a.click()</span><br><span class="line">  URL.revokeObjectURL(url)</span><br><span class="line">  <span class="comment">// 如果存储了indexDB，清理掉对应的缓存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li>下载无延迟</li>
<li>fetch 方式下载，可计算下载进度展示到 UI</li>
<li>下载过程可鉴权</li>
<li>可将已下载的文件存在 indexDB 中，防止已下载文件丢失</li>
</ol>
<p>缺点：</p>
<ol>
<li>浏览器对 blob 大小存在限制（与操作系统、磁盘和内存大小有关），可以借助 indexDB 突破这个限制（这个问题中浏览器限制 blob 为 500MB，现代浏览器远远超出了这个数值）。</li>
<li>如果用到了 indexDB，将占用额外缓存空间</li>
</ol>
<h3 id="4-file-system-access"><a href="#4-file-system-access" class="headerlink" title="4. file-system-access"></a>4. file-system-access</h3><p>使用新的原生文件 api 来处理文件，将会大大简化多文件下载流程。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> download4 = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 可以将handler存储到indexDB，避免每次都请求权限</span></span><br><span class="line">  <span class="keyword">const</span> dirHandle = <span class="keyword">await</span> <span class="built_in">window</span>.showDirectoryPicker();</span><br><span class="line">  <span class="keyword">const</span> promises = files.map(<span class="keyword">async</span> file =&gt; &#123;</span><br><span class="line">    <span class="comment">// 可以先遍历dirHandler中的文件，跳过已下载文件。也可以将已下载完成的文件储存在indexDB中，后续过滤使用。</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">`path/<span class="subst">$&#123;file&#125;</span>`</span>, &#123; <span class="attr">mode</span>: <span class="string">&quot;cors&quot;</span> &#125;);</span><br><span class="line">    <span class="comment">// 创建新文件handler</span></span><br><span class="line">    <span class="keyword">const</span> newFileHandle = <span class="keyword">await</span> dirHandle.getFileHandle(file, &#123; <span class="attr">create</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> writable = <span class="keyword">await</span> newFileHandle.createWritable();</span><br><span class="line">    <span class="comment">// 管道流式存储</span></span><br><span class="line">    <span class="keyword">await</span> res.body!.pipeTo(writable);</span><br><span class="line">    <span class="comment">// 此处可以更新下载进度，展示到UI。</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises);</span><br><span class="line">  alert(<span class="string">&quot;下载完成&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>即使关闭浏览器，这种方案的下载进度也可以做到不丢失，此外 file-system-access 在下载方面还有很多优秀的能力</p>
<ol>
<li>追加写入，指定位置写入</li>
<li>遍历下载目录，展示已下载文件</li>
<li>文件流写入，高速和低内存占用</li>
<li>下载文件状态可存储到 indexDB，进度不丢失</li>
<li>可以设置下载文件的命名建议</li>
<li>存储文件到类型默认目录<br>…</li>
</ol>
<p>在上面代码的基础上一个更加完整的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读写权限获取</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyPermission</span>(<span class="params">fileHandle, readWrite</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (readWrite) &#123;</span><br><span class="line">    options.mode = <span class="string">&#x27;readwrite&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">await</span> fileHandle.queryPermission(options)) === <span class="string">&#x27;granted&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">await</span> fileHandle.requestPermission(options)) === <span class="string">&#x27;granted&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get, set &#125; <span class="keyword">from</span> <span class="string">&#x27;idb-keyval&#x27;</span></span><br><span class="line"><span class="keyword">const</span> download4 = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 尝试从 indexDB 中获取目录 handle</span></span><br><span class="line">  <span class="keyword">let</span> dirHandle = <span class="keyword">await</span> get(<span class="string">&#x27;dirHandle&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!dirHandle) &#123;</span><br><span class="line">    dirHandle = <span class="keyword">await</span> <span class="built_in">window</span>.showDirectoryPicker()</span><br><span class="line">    <span class="comment">// 保存下载路径 handle，避免每次都让用户选择</span></span><br><span class="line">    <span class="keyword">await</span> set(<span class="string">&#x27;dirHandle&#x27;</span>, dirHandle)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> hasPermission = <span class="keyword">await</span> verifyPermission(dirHandle, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">    alert(<span class="string">&#x27;未授权读写&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 过滤已下载文件</span></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> dirHandle.values()) &#123;</span><br><span class="line">    <span class="keyword">const</span> filename = entry.name</span><br><span class="line">    <span class="keyword">let</span> index = files.indexOf(filename)</span><br><span class="line">    <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`文件<span class="subst">$&#123;filename&#125;</span>已下载`</span>)</span><br><span class="line">      files.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> promises = files.map(<span class="keyword">async</span> (file) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">`path/<span class="subst">$&#123;file&#125;</span>`</span>, &#123; <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> newFileHandle = <span class="keyword">await</span> dirHandle.getFileHandle(file, &#123; <span class="attr">create</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> writable = <span class="keyword">await</span> newFileHandle.createWritable()</span><br><span class="line">    <span class="keyword">await</span> res.body.pipeTo(writable)</span><br><span class="line">    <span class="comment">// 此处可以更新下载进度，展示到 UI。</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises)</span><br><span class="line">  alert(<span class="string">&#x27;下载完成&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li><p>其他方案的优点</p>
</li>
<li><p>性能最好</p>
</li>
<li><p>基础实现简单</p>
</li>
<li><p>不生成额外归档文件<br>缺点：</p>
</li>
<li><p>兼容性捉急</p>
</li>
</ol>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>考虑兼容性，可以选择客户端生成归档文件。如果只考虑 Chrome 浏览器，可以尝试 file-system-access，这也是未来视频剪辑，图像编辑的文件处理方向。</p>
<p>大家如果有其他方案，请多多讨论下。</p>
<p><span align="right">转载自:<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTc5MDQyNDQzMzA4MDQwMjAw">掘金<i class="fa fa-external-link-alt"></i></span></div></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>html</tag>
        <tag>多文件下载</tag>
      </tags>
  </entry>
  <entry>
    <title>大屏可视化利用scale实现自适应</title>
    <url>/20210628/61-%E5%A4%A7%E5%B1%8F%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%A9%E7%94%A8scale%E5%AE%9E%E7%8E%B0%E8%87%AA%E9%80%82%E5%BA%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在高分屏中，修改浏览器的缩放比例，其实就是修改浏览器的 DPI，即单位面积内可用的像素点数，从而在屏幕尺寸保持不变的情况下，达到了改变视窗宽高的效果(用像素计量)，简单来说，放大比例会减少 DPI，宽高变小，减少比例会增加 DPI，宽高变大。</p>
<p>总的来说，通过修改浏览器的缩放比例来适应分辨率，是一种最经济的做法(不需要编写任何代码)，唯一的缺点在于需要手动调节，导致难以找到最合适的缩放比例。</p>
<p>今天再介绍利用 CSS 的 scale 来达到同比缩放的效果，操作的步骤如下：</p>
<ol>
<li>首先将容器的比例缩小，这样容器的尺寸就会较小，内容刚好能够填满容器；</li>
<li>再内容渲染完成后，再按同比例放大，这样容器就刚好铺满整个大屏。</li>
</ol>
<span id="more"></span>

<h1 id="css3-scale"><a href="#css3-scale" class="headerlink" title="css3 scale"></a>css3 scale</h1>  <h2 align="center">利用 CSS3 的 scale 对页面整体进行缩放</h2>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> echartsSize = <span class="function"><span class="keyword">function</span> (<span class="params">size, defalteWidth = <span class="number">1920</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> docEl = <span class="built_in">document</span>.documentElement,</span><br><span class="line">    clientWidth =</span><br><span class="line">      <span class="built_in">window</span>.innerWidth ||</span><br><span class="line">      <span class="built_in">document</span>.documentElement.clientWidth ||</span><br><span class="line">      <span class="built_in">document</span>.body.clientWidth</span><br><span class="line">  <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">let</span> fontSize = clientWidth / defalteWidth</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>((size * fontSize).toFixed(<span class="number">3</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置系统缩放比，适配各分辨率</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">refreshScale</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> baseWidth = <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">  <span class="keyword">let</span> baseHeight = <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">  <span class="keyword">let</span> appStyle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>).style</span><br><span class="line">  <span class="keyword">let</span> realRatio = baseWidth / baseHeight</span><br><span class="line">  <span class="keyword">let</span> designRatio = <span class="number">16</span> / <span class="number">9</span></span><br><span class="line">  <span class="keyword">let</span> scaleRate = baseWidth / <span class="number">1920</span></span><br><span class="line">  <span class="keyword">if</span> (realRatio &gt; designRatio) &#123;</span><br><span class="line">    scaleRate = baseHeight / <span class="number">1080</span></span><br><span class="line">  &#125;</span><br><span class="line">  appStyle.transformOrigin = <span class="string">&#x27;left top&#x27;</span></span><br><span class="line">  appStyle.transform = <span class="string">`scale(<span class="subst">$&#123;scaleRate&#125;</span>) translateX(-50%)`</span></span><br><span class="line">  appStyle.width = <span class="string">`<span class="subst">$&#123;baseWidth / scaleRate&#125;</span>px`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#Vue 组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ScreenAdapter&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;style&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">//参数注入</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">width</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">default</span>: <span class="string">&#x27;1920&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">height</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">default</span>: <span class="string">&#x27;1080&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">style</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">width</span>: <span class="built_in">this</span>.width + <span class="string">&#x27;px&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">height</span>: <span class="built_in">this</span>.height + <span class="string">&#x27;px&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">transform</span>: <span class="string">&#x27;scale(1) translate(-50%, -50%)&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.setScale()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.onresize = <span class="built_in">this</span>.Debounce(<span class="built_in">this</span>.setScale, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">Debounce</span>: <span class="function">(<span class="params">fn, t</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> delay = t || <span class="number">500</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> timer</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> args = <span class="built_in">arguments</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">if</span> (timer) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">clearTimeout</span>(timer)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">const</span> context = <span class="built_in">this</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          timer = <span class="literal">null</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">          fn.apply(context, args)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;, delay)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 获取放大缩小比例</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">getScale</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> w = <span class="built_in">window</span>.innerWidth / <span class="built_in">this</span>.width</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> h = <span class="built_in">window</span>.innerHeight / <span class="built_in">this</span>.height</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> w &lt; h ? w : h</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 设置比例</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">setScale</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.style.transform =</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="string">&#x27;scale(&#x27;</span> + <span class="built_in">this</span>.getScale() + <span class="string">&#x27;) translate(-50%, -50%)&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;任你千变万化,我都不会影响性能&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.ScreenAdapter</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">left</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">top</span>: <span class="number">50%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">background</span>: red;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>可视化大屏</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>css3</tag>
        <tag>可视化</tag>
        <tag>大屏</tag>
      </tags>
  </entry>
  <entry>
    <title>css 学会这些CSS技巧让你写样式更加丝滑</title>
    <url>/20210712/6-css-%E5%AD%A6%E4%BC%9A%E8%BF%99%E4%BA%9BCSS%E6%8A%80%E5%B7%A7%E8%AE%A9%E4%BD%A0%E5%86%99%E6%A0%B7%E5%BC%8F%E6%9B%B4%E5%8A%A0%E4%B8%9D%E6%BB%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><p>calc()函数用于动态计算长度值，任何长度值都可以使用calc()函数进行计算，需要注意的是，运算符前后都需要保留一个空格，例如：</p>
<pre><code>  .box&#123;
    width: calc(100% - 10px)
    height: calc(100% - 2rem)
  &#125;
</code></pre>
<h2 id="min"><a href="#min" class="headerlink" title="min"></a>min</h2><p>min()函数允许你从逗号分隔符表达式中选择一个最小值作为css的属性值，例如：</p>
<pre><code>  .box&#123;
    width: min(1vw, 4em, 80px)
  &#125;
</code></pre>
<p>在上面的例子中，宽度最多是80px。如果视口的宽度小于800px，或者一个em的宽度小于20px，则会更窄。换句话说，最大宽度是80px。</p>
<p>当min() 用于控制文本大小时，要保证文本足够大以便于阅读。建议把 min() 方法嵌入到 max() 中</p>
<pre><code>  p&#123;
    font-size: max(min(0.5vw, 0.5em), 1rem)
  &#125;
</code></pre>
<h2 id="max"><a href="#max" class="headerlink" title="max"></a>max</h2><p>max()函数让你可以从一个逗号分隔的表达式列表中选择最大（正方向）的值作为属性的值</p>
<pre><code>.box&#123;
  width: max(10vw, 4em, 80px)
&#125;
</code></pre>
<p>在上面这个例子中，宽度最小会是80px，除非视图宽度大于800px或者是一个em比20px宽。简单来说，最小宽度是80px。你也可以认为max()的值提供了一个属性最小可能的值。</p>
<p>当max()用于控制文本大小时，确保文本总是足够大以供阅读。一个建议是使用min()嵌套在 max()中的函数，该函数的第二个值是一个相对长度单位，该单位总是足够大以读取</p>
<pre><code>  p&#123;
    font-size: max(min(0.5vw, 0.5em), 1rem)
  &#125;
</code></pre>
<p>这确保了1rem的最小大小，如果页面缩放，文本大小会缩放</p>
<h2 id="clamp"><a href="#clamp" class="headerlink" title="clamp"></a>clamp</h2><p>clamp() 函数的作用是把一个值限制在一个上限和下限之间，当这个值超过最小值和最大值的范围时，在最小值和最大值之间选择一个值使用。它接收三个参数：最小值、首选值、最大值clamp(MIN, VAL, MAX)，当首选值比最小值要小时，则使用最小值，当首选值介于最小值和最大值之间时，用首选值，当首选值比最大值要大时，则使用最大值，表达式中的每一个值都可以用不同的单位。</p>
<pre><code>  .box&#123;
    width: clamp(200px, 50vw, 600px)
  &#125;
</code></pre>
<h2 id="gap"><a href="#gap" class="headerlink" title="gap"></a>gap</h2><p>gap属性是用来设置网格行与列之间的间隙，该属性是row-gap和column-gap的简写形式，适用于Flex，Grid和multi-column布局的元素</p>
<pre><code>  #flex &#123;
    width: 300px;
    display: flex;
    gap: 20px 5px;
  &#125;
  #grid &#123;
    height: 200px;
    display: grid;
    grid-template: repeat(3, 1fr) / repeat(3, 1fr);
    gap: 20px 5px;
  &#125;
</code></pre>
<h2 id="writing-mode"><a href="#writing-mode" class="headerlink" title="writing-mode"></a>writing-mode</h2><p>writing-mode 属性定义了文本在水平或垂直方向上如何排布。</p>
<p>语法格式如下：</p>
<blockquote>
<p>writing-mode: horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr</p>
</blockquote>
<p>horizontal-tb：水平方向自上而下的书写方式。即 left-right-top-bottom</p>
<p>vertical-rl：垂直方向自右而左的书写方式。即 top-bottom-right-left</p>
<p>vertical-lr：垂直方向内内容从上到下，水平方向从左到右</p>
<p>sideways-rl：内容垂直方向从上到下排列</p>
<p>sideways-lr：内容垂直方向从下到上排列</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>防抖与节流</title>
    <url>/20210627/62-%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>总结： 防抖就是防止抖动，一直触发的时候，利用清除定时器 只执行最后一次 （scroll）</p>
<pre><code>节流就是节省流量，一定时间内只执行一次  （比如 input 远程查询等）
</code></pre>
<span id="more"></span>

<p>案例：<br>比如监听浏览器滚动条的时候，可能滚动一次，会触发几十次函数<br>这个时候就需要用到防抖函数了。</p>
<p>• 对于短时间内连续触发的事件（上面的滚动事件），防抖的含义就是让某个时间期限（如上面的 1000 毫秒）内，事件处理函数只执行一次。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">  <span class="string">&#x27;scroll&#x27;</span>,</span><br><span class="line">  debounce(<span class="function">() =&gt;</span> &#123;&#125;, <span class="number">2000</span>),</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="built_in">this</span>)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">      <span class="comment">//休息时间 暂不接客</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">    valid = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn()</span><br><span class="line">      valid = <span class="literal">true</span></span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意，节流函数并不止上面这种实现方案,<br>例如可以完全不借助 setTimeout，可以把状态位换成时间戳，然后利用时间戳差值是否大于指定间隔时间来做判定。<br>也可以直接将 setTimeout 的返回的标记当做判断条件-判断当前定时器是否存在，如果存在表示还在冷却，并且在执行 fn 之后消除定时器表示激活，原理都一样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;滚动条位置：&#x27;</span> + scrollTop)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onscroll = throttle(showTop, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>箭头函数的this</title>
    <url>/20210627/63-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84this/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="箭头函数的-this"><a href="#箭头函数的-this" class="headerlink" title="箭头函数的 this"></a>箭头函数的 this</h3><p>1：箭头函数中 this 是在定义函数时候绑定的，而不是在执行的时候绑定</p>
<p>2：箭头函数没有自己的 this，，，导致内部 this 就是外部代码块的 this,this 指向是很固定化的。</p>
<span id="more"></span>

<p>2-1：所以，箭头函数不能用来构造函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">11</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.x) <span class="comment">//11</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// say中箭头函数和say是兄弟，和x：22;是兄弟，所以，外部代码块指的是x=11，在此可看作window.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数所在的大括号是个窝，与这个窝平级的就是上层代码块</span></span><br></pre></td></tr></table></figure>

<p>再来谈一个例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">birth</span>: <span class="number">1996</span>, <span class="comment">//1996</span></span><br><span class="line">  <span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">this</span>.birth <span class="comment">//这个var b。。没啥用，迷惑人用的，底下的箭头函数的this和这个this指向的一毛一样</span></span><br><span class="line">    <span class="keyword">var</span> fn = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="built_in">this</span>.birth <span class="comment">//this指向obj的对象</span></span><br><span class="line">    <span class="keyword">return</span> fn()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.getAge()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>进程和线程的简单理解</title>
    <url>/20210714/64-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="进程和线程的简单理解"><a href="#进程和线程的简单理解" class="headerlink" title="进程和线程的简单理解"></a>进程和线程的简单理解</h2><p>进程，是指在系统中正在运行的一个应用程序，程序一旦运行就是进程。比如打开一个QQ音乐就是启动了一个QQ音乐进程，打开一个 Word 就启动了一个 Word 进程。进程是操作系统分配资源的最小单位。如下图，每一个进程都拥有独立的内存单元。</p>
<img src="https://blog.img.wy1991.cn/static/images/js/neicun.png-blogImg"> 


<p>在一个进程内部，可以同时运行多个“子任务”，也就是多个线程。如上所示，在一个进程中，而多个线程共享内存。线程是进程之内程序执行的最小单位。</p>
<p>可以将进程理解为工厂中的一条流水线，其中的线程就是这个流水线上的工人。</p>
<img src="https://blog.img.wy1991.cn/static/images/js/liushuixian.png-blogImg"> 


<p>假如我们需要完成一批药品出厂前的一系列的认证检验，我们就可以开启一条流水线（进程），并分配需要的资源，如工作台、检验工具、药品等等，有了这些资源，就可以安排工人（线程），工人拿着这些资源进行产品检验，也就相当于线程执行程序。</p>
<p>如上图所示，完成检验需要四个步骤：原料检验、生产过程检验、GMP认证、药品监督管理。当需要检验的药品数量较少时，可以由一个工人完成这四个步骤，也就是单线程处理。</p>
<p>而当药品数量变得很多时，一个工人就太慢了，这时，可以为每一种检验安排一个工人，这四个工人在同一条生产线工作，共享工作台等资源，并行处理各自的任务，这就相当于多线程处理。</p>
<p>简而言之，进程和线程之间的关系有以下几个特点：</p>
<ol>
<li>线程必须存在于进程中，一个进程至少有一个线程 —- 工人需要在流水线上处理工作，完成检验至少需要一个工人。</li>
</ol>
<ol start="2">
<li>进程中的任意一线程执行出错，都会导致整个进程的崩溃 —- 流水线中任何一处电路短路，整个流水线就会停电。</li>
</ol>
<ol start="3">
<li>线程之间共享进程中的数据 —- 工人共享流水线上的工具、资源等。</li>
</ol>
<ol start="4">
<li>当一个进程关闭之后，操作系统会回收进程所占用的内存 —- 一次检验完成，工厂可以关闭这条流水线，将流水线的资源收回分配给其他流水线。</li>
</ol>
<ol start="5">
<li>进程之间的内容相互隔离 —- 两条流水线的资源和任务是相互独立的。</li>
</ol>
]]></content>
      <categories>
        <category>进程和线程</category>
      </categories>
      <tags>
        <tag>进程和线程</tag>
      </tags>
  </entry>
  <entry>
    <title>利用require.context批量导入</title>
    <url>/20210706/66-%E5%88%A9%E7%94%A8require-context%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="require-context"><a href="#require-context" class="headerlink" title="require.context"></a>require.context</h2><blockquote>
<p>在我们项目开发中，经常需要import或者export各种模块，那么有没有什么办法可以简化这种引入或者导出操作呢？答案是肯定的，下面就为大家介绍一下require.context</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> constantFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;./modules&#x27;</span>,<span class="literal">true</span>,<span class="regexp">/\.js$/</span>);</span><br><span class="line"><span class="keyword">let</span> constModules = [];</span><br><span class="line">constantFiles.keys().forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( key === <span class="string">&#x27;./base.js&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">  constModules = constModules.concat(constantFiles(key).default)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>代码很简单，require.context执行后，返回一个方法webpackContext，这个方法又返回一个__webpack_require__，这个__webpack_require__就相当于require或者import。同时webpackContext还有二个静态方法keys与resolve，一个id属性。</p>
<p>keys: 返回匹配成功模块的名字组成的数组<br>resolve: 接受一个参数request，request为test文件夹下面匹配文件的相对路径，返回这个匹配文件相对于整个工程的相对路径<br>id: 执行环境的id，返回的是一个字符串，主要用在module.hot.accept，应该是热加载</p>
<p>总结:<br>  在VueRouter和Vuex分模块中都可以用到，自动加载省事，另外自己写的库中零散文件太多也可以用</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>webpack</tag>
        <tag>require.context</tag>
      </tags>
  </entry>
  <entry>
    <title>理解和使用Promise.all和Promise.race</title>
    <url>/20210717/65-%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8Promise-all%E5%92%8CPromise-race/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Pomise-all的使用"><a href="#Pomise-all的使用" class="headerlink" title="Pomise.all的使用"></a>Pomise.all的使用</h2><p> Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</p>
<p>具体代码如下：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let p3 = Promse.reject(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2]).<span class="keyword">then</span>(<span class="function"><span class="params">(result)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)               <span class="regexp">//</span>[<span class="string">&#x27;成功了&#x27;</span>, <span class="string">&#x27;success&#x27;</span>]</span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1,p3,p2]).<span class="keyword">then</span>(<span class="function"><span class="params">(result)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)      <span class="regexp">//</span> 失败了，打出 <span class="string">&#x27;失败&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Promse.all在处理多个异步处理时非常有用，比如说一个页面上需要等两个或多个ajax的数据回来以后才正常显示，在此之前只显示loading图标。</p>
<p>代码模拟：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let wake = <span class="function"><span class="params">(time)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(`<span class="javascript">$&#123;time / <span class="number">1000</span>&#125;秒后醒来</span>`)</span><br><span class="line">    &#125;, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p1 = wake(<span class="number">3000</span>)</span><br><span class="line">let p2 = wake(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2]).<span class="keyword">then</span>(<span class="function"><span class="params">(result)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)       <span class="regexp">//</span> [ <span class="string">&#x27;3秒后醒来&#x27;</span>, <span class="string">&#x27;2秒后醒来&#x27;</span> ]</span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>需要特别注意的是，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，即p1的结果在前，即便p1的结果获取的比p2要晚。这带来了一个绝大的好处：在前端开发请求数据的过程中，偶尔会遇到发送多个请求并根据请求顺序获取和使用数据的场景，使用Promise.all毫无疑问可以解决这个问题。</p>
<h2 id="二、Promise-race的使用"><a href="#二、Promise-race的使用" class="headerlink" title="二、Promise.race的使用"></a>二、Promise.race的使用</h2><p>顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2]).<span class="keyword">then</span>(<span class="function"><span class="params">(result)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="params">(error)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)  <span class="regexp">//</span> 打开的是 <span class="string">&#x27;failed&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>race的使用场景是，多台服务器部署了同样的服务端代码，假如我要获取一个商品列表接口，我可以在 race 中写上所有服务器中的查询商品列表的接口地址，哪个服务器响应快，就从哪个服务器拿数据。</p>
]]></content>
      <categories>
        <category>Promise</category>
      </categories>
      <tags>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>最终能用CSS实现的就不用麻烦JavaScript</title>
    <url>/20210719/67-%E8%83%BD%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B0%B1%E4%B8%8D%E7%94%A8%E9%BA%BB%E7%83%A6JavaScript/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>凡是可以用 JavaScript 来写的应用，最终都会用 JavaScript 来写。——真香定律</p>
<p>虽然万物都可以是 JavaScript，但某种程度 css 的运行效率会比 JavaScript 高，所以笔者认为:能用 CSS 实现的就不用麻烦 JavaScript。</p>
<p>两种语言都有不同的用途随着浏览器版本特性和属性的增加，CSS 正成为一种功能强大的语言，能够处理我们以前依赖 JavaScript 实现的功能。</p>
<h3 id="平滑滚动"><a href="#平滑滚动" class="headerlink" title="平滑滚动"></a>平滑滚动</h3><p>曾经有一段时间，我们不得不依靠 JavaScript 的 window.scrollY 来实现来执行此操作，如果想平滑滚动还要依赖定时器增加一个动画。 随着 scroll-behavior 属性的新增，我们可以使用一行 CSS 代码来处理网站上的平滑滚动！浏览器支持约为 75％，兼容性还是挺不错的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  scroll-behavior: smooth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img title="behavior.image" src="https://blog.img.wy1991.cn/static/images/css/1.image-blogImg">

<h3 id="滚动捕抓"><a href="#滚动捕抓" class="headerlink" title="滚动捕抓"></a>滚动捕抓</h3><p>幻灯片、图片库这些也是前端高频使用功能，上一代 CSS 能力有限，我们不得不依赖 JavaScript 来完成这功能。现在只要几行代码就可以实现此功能。<br>从某种意义上说，它与 Flexbox 或 CSS Grid 的工作原理类似，即您需要一个容器元素，在该容器元素上设置 scrolln-snap-type 和多个为其设置了 scroll-snap-align 的子元素，如下所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;main <span class="keyword">class</span>=”<span class="symbol">parent</span>”&gt;</span><br><span class="line"> &lt;<span class="symbol">section</span> <span class="symbol">class</span>=”<span class="symbol">child</span>”&gt;&lt;/<span class="symbol">section</span>&gt;</span><br><span class="line"> &lt;<span class="symbol">section</span> <span class="symbol">class</span>=”<span class="symbol">child</span>”&gt;&lt;/<span class="symbol">section</span>&gt;</span><br><span class="line"> &lt;<span class="symbol">section</span> <span class="symbol">class</span>=”<span class="symbol">child</span>”&gt;&lt;/<span class="symbol">section</span>&gt;</span><br><span class="line">&lt;/<span class="symbol">main</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight puppet"><table><tr><td class="code"><pre><span class="line">.<span class="keyword">parent</span> &#123;</span><br><span class="line">  scroll-snap-<span class="built_in">type</span>: x mandatory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="keyword">child</span> &#123;</span><br><span class="line">  scroll-snap-align: <span class="literal">start</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://blog.img.wy1991.cn/static/images/css/2.image-blogImg">

<h3 id="css-动画"><a href="#css-动画" class="headerlink" title="css 动画"></a>css 动画</h3><p>曾经某个时期，大多数开发者使用 JavaScript(或者 jQuery) 给浏览器中的元素添加动画。让这个淡化，让那个扩大，很简单。随着互动的项目越来越复杂，移动设备的大量增加，表现性能变得越来越重要。Flash 被抛弃，有天赋的动画开发者使用 HTML5 去实现过去从未实现的效果。他们需要更好的工具去开发复杂的动画序列并获得最好的性能。JavaScript(或者 jQuery) 并不能够做到。浏览器日渐成熟的同时也开始提供了一些解决方案。最被广泛接受的方案是使用 CSS 动画。</p>
<img src="https://blog.img.wy1991.cn/static/images/css/3.image-blogImg">

<h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><p>html5  丰富了表单元素，提供了类似  required , email , tel  等表单元素属性。同样的，我们可以利用  :valid  和  :invalid  来做针对 html5 表单属性的校验。</p>
<ul>
<li>:required   伪类指定具有 required 属性的表单元素</li>
<li>:valid   伪类指定一个通过匹配正确的所要求的表单元素</li>
<li>:invalid   伪类指定一个不匹配指定要求的表单元素</li>
</ul>
<img src="https://blog.img.wy1991.cn/static/images/css/4.image-blogImg">

<h3 id="利用-CSS-的-content-属性-attr-抓取资料"><a href="#利用-CSS-的-content-属性-attr-抓取资料" class="headerlink" title="利用 CSS 的 content 属性 attr 抓取资料"></a>利用 CSS 的 content 属性 attr 抓取资料</h3><p>想必大家都想到了伪元素 after ，但是文字怎么获得呢，又不能用 JavaScript 。</p>
<p>CSS 的伪元素是个很強大的东西，我们可以利用他做很多运用，通常为了做一些效果， content:” “ 多半会留空，但其实可以在里面写上 attr 抓资料哦！</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> data-msg=<span class="string">&quot;这里是获取content的内容&quot;</span>&gt;</span><br><span class="line">hover</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line"><span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>:after&#123;</span><br><span class="line">content:<span class="built_in">attr</span>(data-msg);</span><br><span class="line"><span class="attribute">position</span>:absolute;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">200%</span>;</span><br><span class="line"><span class="attribute">line-height</span>:<span class="number">30px</span>;</span><br><span class="line"><span class="attribute">text-align</span>:center;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">25px</span>;</span><br><span class="line"><span class="attribute">border</span>:<span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://blog.img.wy1991.cn/static/images/css/5.image-blogImg">

<h3 id="鼠标悬浮时显示"><a href="#鼠标悬浮时显示" class="headerlink" title="鼠标悬浮时显示"></a>鼠标悬浮时显示</h3><p>鼠标悬浮的场景十分常见，例如导航的菜单：</p>
<img src="https://blog.img.wy1991.cn/static/images/css/6.image-blogImg">

<p>一般要把隐藏的东西如菜单作为 hover 目标的子元素或者相邻元素，才方便用 css 控制，例如上面的菜单，是把 menu 当作导航的一个相邻元素：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--menu为相邻的li--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>账户设置<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>menu 在正常态下是隐藏的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.menu</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而当导航 hover 时显示：</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">/*使用相邻选择器和<span class="string">hover</span>*/</span><br><span class="line">.<span class="string">user:hover </span>+ .<span class="string">menu</span>&#123;</span><br><span class="line">  <span class="string">display</span>: <span class="built_in">list-item;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意这里使用了一个相邻选择器，这也是上面说的为什么要写成相邻的元素。menu 的位置可以用 absolute 定位。</p>
<p>同时 menu 自已本身 hover 的时候也要显示，否则鼠标一离开导航的时候，菜单就消失了：</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">.<span class="string">menu:hover&#123;</span></span><br><span class="line">    <span class="string">display</span>: <span class="built_in">list-item;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里会有一个小问题，即 menu 和导航需要挨着一起，否则中间有空隙的话，上面添加的菜单 hover 就不能发挥作用了，但是实际情况下从美观的角度，两者是要有点距离的。这个其实也好解决，只要在 menu 上面再画一个透明的区域就好了，如下蓝色的方块：</p>
<p>可以用 before/after 伪类用 absoute 定位实现：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-class">.menu</span>:before&#123;</span><br><span class="line">   content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">top</span>: -<span class="number">20px</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">   <span class="comment">/*background-color: rgba(0,0,0,0.2);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我既写了 css 的 hover，又监听了 mouse 事件，用 mouse 控制显示隐藏，双重效果会有什么情况发生，如果按正常套路，在 mouse 事件里面 hover 的时候，添加了一个 display: block 的 style，会覆盖掉 CSS 的设置。也就是说，只要 hover 一次，css 的代码就不管用了，因为内联样式的优先级会高于外链的。但是实际情况下会有意外发生，那就是在移动端 iphone 上面，触摸会触发 CSS 的 hover，并且这个的触发会很高概率地先于 touchstart 事件，在这个事件里面会判断当前是显示还是隐藏的状态，由于 css 的 hover 发挥了作用，所以判断为显示，然后又把它隐藏了。也就是说，点一次不出来，要点两次。所以最好别两个同时写。<br>第二种场景，使用子元素，这个更简单。把 hover 的目标和隐藏的对象当作同一个父容器的子元素，然后 hover 写在这个父容器上面就可以了，不用像上面那样，隐藏元素也要写个 hover：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">.marker-<span class="built_in">container</span> .detail-info&#123;</span><br><span class="line">   <span class="keyword">display</span>: none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.marker-container</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.detail-info</span>&#123;</span><br><span class="line">   <span class="attribute">display</span>: block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里展示也只是一些常用的功能，其实还有很多可以通过 CSS 实现的功能，有兴趣的同学继续研究一下更多不依赖 JavaScript 完成的 CSS 功能。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你制作一个Vue插件</title>
    <url>/20210628/68-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAVue%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue-插件"><a href="#Vue-插件" class="headerlink" title="Vue 插件"></a>Vue 插件</h2><p>制作一个 Vue 插件非常简单，只需要包含一个 install 函数或者方法即可</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugin/index.js</span><br><span class="line"><span class="comment">//app是Vue实例，options是传递得参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(app, options);</span><br><span class="line">    app.directive(<span class="string">&#x27;print&#x27;</span>, &#123;</span><br><span class="line">      mounted (el, binding) &#123;</span><br><span class="line">        el.innerHTML = <span class="string">&quot;我是Vue插件修改的&quot;</span> + <span class="built_in">JSON</span>.stringify(options)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    app.config.globalProperties.$show = <span class="function"><span class="keyword">function</span> (<span class="params">msg = <span class="string">&quot;hello&quot;</span></span>) </span>&#123;</span><br><span class="line">      alert(msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> TestPlugin <span class="keyword">from</span> <span class="string">&#x27;./plugin/index&#x27;</span>;</span><br><span class="line"><span class="comment">//要在createApp之后</span></span><br><span class="line">app.use(TestPlugin, &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//App.vue</span></span><br><span class="line"><span class="comment">//可以使用自定义指令，也可以调用全局方法</span></span><br><span class="line"><span class="comment">//setup中没有this，所以需要通过getCurrentInstance获取当前实例</span></span><br><span class="line">&lt;div v-print&gt;我是原始值&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">  setup (props, context) &#123;</span><br><span class="line">    <span class="comment">//打包后有可能获取不到，这里需要谨慎</span></span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = getCurrentInstance()</span><br><span class="line">    ctx.$show(<span class="string">&quot;我擦，这么牛皮&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      clickHandle</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数方式"><a href="#函数方式" class="headerlink" title="函数方式"></a>函数方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">app, options</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(app, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>瞬间感触~</title>
    <url>/20210707/69-%E7%9E%AC%E9%97%B4%E6%84%9F%E8%A7%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="活到老学到老"><a href="#活到老学到老" class="headerlink" title="活到老学到老"></a>活到老学到老</h2><p>对于做技术的人来说，一定要树立终身学习的理念，技术更新很快，不多学习些新东西，很快会被淘汰。 另外做技术的人一般是能坐得住的人，如果你不太喜欢学习新东西，建议趁着年轻改行，总好过老了身不由己。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>git 命令大全</title>
    <url>/20210706/7-git-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><pre><code>  # 在当前目录新建一个Git代码库
  $ git init

  # 新建一个目录，将其初始化为Git代码库
  $ git init [project-name]

  # 下载一个项目和它的整个代码历史
  $ git clone [url]
</code></pre>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code>  # 显示当前的Git配置
  $ git config --list

  # 编辑Git配置文件
  $ git config -e [--global]

  # 设置提交代码时的用户信息
  $ git config [--global] user.name &quot;[name]&quot;
  $ git config [--global] user.email &quot;[email address]&quot;
</code></pre>
<h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h3><pre><code>  # 添加指定文件到暂存区
  $ git add [file1] [file2] ...

  # 添加指定目录到暂存区，包括子目录
  $ git add [dir]

  # 添加当前目录的所有文件到暂存区
  $ git add .

  # 添加每个变化前，都会要求确认
  # 对于同一个文件的多处变化，可以实现分次提交
  $ git add -p

  # 删除工作区文件，并且将这次删除放入暂存区
  $ git rm [file1] [file2] ...

  # 停止追踪指定文件，但该文件会保留在工作区
  $ git rm --cached [file]

  # 改名文件，并且将这个改名放入暂存区
  $ git mv [file-original] [file-renamed]
</code></pre>
<h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><pre><code># 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
</code></pre>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><pre><code>  # 列出所有本地分支
  $ git branch

  # 列出所有远程分支
  $ git branch -r

  # 列出所有本地分支和远程分支
  $ git branch -a

  # 新建一个分支，但依然停留在当前分支
  $ git branch [branch-name]

  # 新建一个分支，并切换到该分支
  $ git checkout -b [branch]

  # 新建一个分支，指向指定commit
  $ git branch [branch] [commit]

  # 新建一个分支，与指定的远程分支建立追踪关系
  $ git branch --track [branch] [remote-branch]

  # 切换到指定分支，并更新工作区
  $ git checkout [branch-name]

  # 切换到上一个分支
  $ git checkout -

  # 建立追踪关系，在现有分支与指定的远程分支之间
  $ git branch --set-upstream [branch] [remote-branch]

  # 合并指定分支到当前分支
  $ git merge [branch]

  # 选择一个commit，合并进当前分支
  $ git cherry-pick [commit]

  # 删除分支
  $ git branch -d [branch-name]

  # 删除远程分支
  $ git push origin --delete [branch-name]
  $ git branch -dr [remote/branch]
</code></pre>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><pre><code>  # 列出所有tag
  $ git tag

  # 新建一个tag在当前commit
  $ git tag [tag]

  # 新建一个tag在指定commit
  $ git tag [tag] [commit]

  # 删除本地tag
  $ git tag -d [tag]

  # 删除远程tag
  $ git push origin :refs/tags/[tagName]

  # 查看tag信息
  $ git show [tag]

  # 提交指定tag
  $ git push [remote] [tag]

  # 提交所有tag
  $ git push [remote] --tags

  # 新建一个分支，指向某个tag
  $ git checkout -b [branch] [tag]
</code></pre>
<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示有变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的版本历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，其<span class="string">&quot;提交说明&quot;</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示过去5次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git shortlog -sn</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和工作区的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示两次提交之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure>

<h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line"><span class="variable">$ </span>git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line"><span class="variable">$ </span>git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="variable">$ </span>git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="variable">$ </span>git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --all</span><br></pre></td></tr></table></figure>

<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="variable">$ </span>git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line"><span class="variable">$ </span>git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line"><span class="variable">$ </span>git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line"><span class="variable">$ </span>git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line"><span class="variable">$ </span>git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="variable">$ </span>git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line"><span class="variable">$ </span>git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="variable">$ </span>git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="variable">$ </span>git revert [commit]</span><br><span class="line"></span><br><span class="line">暂时将未提交的变化移除，稍后再移入</span><br><span class="line"><span class="variable">$ </span>git stash</span><br><span class="line"><span class="variable">$ </span>git stash pop</span><br></pre></td></tr></table></figure>

<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="variable">$ </span>git archive</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序登录的坑</title>
    <url>/20210718/70-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前情概要"><a href="#前情概要" class="headerlink" title="前情概要"></a>前情概要</h2><ol>
<li>小程序端有 wx.login 获取 code，然后后端通过 code 换取 session_key；</li>
<li>小程序端有 wx.getUserInfo 获取用户信息</li>
</ol>
<p>一开始处理登录的时候，前端通过 wx.login 获取到 code，然后通过 wx.getUserInfo 获取用户相关的信息，一起传递给后端，后端进行 sha1 验证，但是每次登录的时候，第一次验证不通过，导致登录不成功，需要第二次进行登录。</p>
<p>本身接口的设计就是通过 code 获取到 session_key 和 unionid 进行验证，如果数据库存在就直接进行当前用户登录，不存在通过 sha1 验证用户信息成功后，解密用户信息获取用户数据并进行自动注册后登录。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>小程序的文档，我仔细看了下，没发现有说明这两个接口调用的先后顺序，多次测试不成功之后才发现：</p>
<ol>
<li>小程序调用 wx.login 的时候，并不会在微信小程序自己的服务器上生成 session_key；</li>
<li>session_key 有过期时间，具体过期时间小程序文档的说明是，使用小程序越频繁过期时间越久；</li>
<li>code 有过期时间，过期时间 5 分钟；</li>
<li>每次调用 wx.login 获取到的 code 不一样，但是如果 session_key 没有过期，那么后端通过接口取到的 session_key 和上一次 code 取到的 session_key 一致；</li>
<li>小程序端通过 wx.getUserInfo 获取到的信息，相关的 signature 依赖于 wx.login 所产生的 session_key 进行加密；</li>
</ol>
<p>以上是小程序的机制，从这里来看，按理来说，调用 wx.login 然后再调用 wx.getUserInfo 接口获取用户数据，传递到后端，再请求 session_key 然后验证用户数据进行自动注册应该来说是可行的，但实际上坑就再第一点。</p>
<p>也就是说，小程序端调用 wx.getUserInfo 获取用户信息的时候，使用的是上一次服务端请求产生的 session_key，当数据一起传送到后端的时候，通过 code 获取数据，但是此时上次的 session_key 已经过期了，会返回新的 session_key，然后就会导致验证不通过。</p>
<p>所以整体上来说，后端应该先通过 wx.login 接口的 code 在后端获取到 session_key 以及 unionid，如果 unionid 检测当前用户不存在，缓存 session_key 和 unionid，再告知前端通过 wx.getUserInfo 接口向后端请求并进行注册绑定。</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>项目-那些年做过的项目</title>
    <url>/20210708/71-%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%81%9A%E8%BF%87%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="智慧消防"><a href="#智慧消防" class="headerlink" title="智慧消防"></a>智慧消防</h2><p>结合物联网网关开发的一套后台，搭配 app 使用。PC 端 Vue+element 移动端 uniapp + uview，给小区，学校，单位，管理部门提供一体化服务。包含（消防设备，灭火器，烟感，用电，积水，液位，监控，闸机，水压，燃气，地图报警，应急广播（实时喊话,FM,音乐播放,定时任务）,设备档案，隐患管理，安全巡检，通知公告，安全课堂(阿里云视频直传),车牌识别，环境监测，实时推送等。大数据中心，可视化大屏等</p>
<blockquote>
<p>自己一个人做 PC 和移动端，后端搭配 php，算下来项目做了大半年，因为没有设计，所以好多业务模块都是推到重做了好几次，时间耽搁了不少，这里记录下项目部分截图吧~。</p>
</blockquote>
<h3 id="pc"><a href="#pc" class="headerlink" title="pc"></a>pc</h3><img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/1.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/2.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/3.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/4.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/5.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/6.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/7.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/8.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/9.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/10.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/11.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/12.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/13.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/14.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/15.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/16.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/17.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/18.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/19.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/20.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/21.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/22.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/23.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/24.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/25.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/26.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/pc/27.png-blogImg">

<h3 id="app"><a href="#app" class="headerlink" title="app"></a>app</h3><img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/1.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/2.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/3.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/4.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/5.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/6.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/7.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/8.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/9.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/10.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/11.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/12.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/13.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/14.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/15.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/16.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/17.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/18.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/19.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/20.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/21.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/22.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/23.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/24.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/25.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/zhxf/app/26.jpg-blogImg">

<h2 id="智慧电流监测系统"><a href="#智慧电流监测系统" class="headerlink" title="智慧电流监测系统"></a>智慧电流监测系统</h2><p>2021 年初，朋友接了一个活，给客户做一个电流监测系统，如果电流高或者低 触发报警，客户为了节省成本，<br>不用显示屏，用 app 界面来代替显示屏，用来设置界面，报警，查看参数等~~</p>
<p>app 不用多说 ，必须 uniapp 一把梭。因为项目不大，后端我用 nodejs 的 egg 框架写，因为没多少个接口，业务也不复杂<br>用 eggjs 是最好的选择~。</p>
<h3 id="界面部分截图"><a href="#界面部分截图" class="headerlink" title="界面部分截图"></a>界面部分截图</h3><img src="https://blog.img.wy1991.cn/static/images/project/power/1.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/power/2.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/power/3.jpg-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/power/4.jpg-blogImg">

<h2 id="烟气排放检测物联网项目"><a href="#烟气排放检测物联网项目" class="headerlink" title="烟气排放检测物联网项目"></a>烟气排放检测物联网项目</h2><blockquote>
<p>使用 electron + vue3 + ts + tailwindcss + mysql + socket 的一个 PC 端项目</p>
</blockquote>
<ol>
<li>Vue3 全家桶</li>
<li>typescript</li>
<li>electron</li>
<li>tailwindcss</li>
<li>mysql</li>
<li>socket</li>
<li>mitt</li>
<li>md5</li>
<li>electron-log</li>
<li>element-plus</li>
<li>ejsexcel</li>
<li>docxtemplater</li>
<li>dayjs</li>
<li>axios</li>
</ol>
<blockquote>
<p>因为没有微软证书，所以暂时无法自动升级</p>
</blockquote>
<p>主要是跟下位机进行对接，监测设备的信息，提供设置，查询，导出等，因为 electron 可以直连数据库，所以数据都是自己写 sql 语句查。。</p>
<p>需要跟下位机发送实时命令，用到了 socket 发送消息</p>
<p>其中比较复杂的还是各种 sql 语句查询 统计 合并等……</p>
<img src="https://blog.img.wy1991.cn/static/images/project/electron/electron1.png-blogImg">
<img src="https://blog.img.wy1991.cn/static/images/project/electron/electron2.png-blogImg">

<h2 id="黄金屋"><a href="#黄金屋" class="headerlink" title="黄金屋"></a>黄金屋</h2><p>自己在学习和工作中，遇到和封装了一些简单的 Vue 常用库</p>
<p><span class="exturl" data-url="aHR0cDovL3Byb2plY3Qud3kxOTkxLmNuLw==">http://project.wy1991.cn/<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>那些年做过的项目</category>
      </categories>
      <tags>
        <tag>那些年做过的项目</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序 API集中管理</title>
    <url>/20210701/73-%E5%B0%8F%E7%A8%8B%E5%BA%8F-API%E9%9B%86%E4%B8%AD%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><blockquote>
<p>因为小程序好像不支持 es6 的 export 所以导出用 es5 的 cmd 的 module.exports</p>
</blockquote>
<ol>
<li>根目录下创建文件夹 http</li>
<li>创建基础请求文件 request.js</li>
<li>创建集中导出接口 api.js</li>
<li>创建测试接口模块 login.js goods.js</li>
</ol>
<h3 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(app)</span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">&#x27;https://www.wy1991.cn/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建统一调用函数</span></span><br><span class="line"><span class="comment">// lodingTime 请求时间超过后显示 loding</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="function">(<span class="params">&#123; url, data = &#123;&#125;, method = <span class="string">&#x27;get&#x27;</span>, loadingTime = <span class="number">500</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;请求中...&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, loadingTime)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      <span class="attr">url</span>: baseUrl + url,</span><br><span class="line">      data,</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">        <span class="attr">authorization</span>: app?.globalData.token ?? <span class="string">&#x27;token&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">timeout</span>: <span class="number">15000</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//在这里写自己的逻辑，比如code 401 代表需要重新登录</span></span><br><span class="line">        <span class="comment">//演示代码</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.code === <span class="number">401</span>) &#123;</span><br><span class="line">          wx.redirectTo(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/pages/logs/logs&#x27;</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        resolve(res.data)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//失败的时候，可以</span></span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">complete</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">        wx.hideLoading(&#123;&#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = request</span><br></pre></td></tr></table></figure>

<h3 id="api-js"><a href="#api-js" class="headerlink" title="api.js"></a>api.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> login = <span class="built_in">require</span>(<span class="string">&#x27;./login&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> goods = <span class="built_in">require</span>(<span class="string">&#x27;./goods&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  login,</span><br><span class="line">  goods,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="goods-js"><a href="#goods-js" class="headerlink" title="goods.js"></a>goods.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;./request&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGoodsList</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/index/index&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGoodsInfo</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/index/sleep3&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getGoodsList,</span><br><span class="line">  getGoodsInfo,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="login-js"><a href="#login-js" class="headerlink" title="login.js"></a>login.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;./request.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">userlogin</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/index/index&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usersleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/index/sleep3&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  userlogin,</span><br><span class="line">  usersleep,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="试用方法"><a href="#试用方法" class="headerlink" title="试用方法:"></a>试用方法:</h3><p>可以挂载到 app.js globalData 中了，当然你可以不挂载直接引用</p>
<p>例如：pages/index/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $api = <span class="built_in">require</span>(<span class="string">&#x27;../../http/api&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="function"><span class="title">onLoad</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//例子1:</span></span><br><span class="line">    $api.login</span><br><span class="line">      .userlogin(&#123; <span class="attr">name</span>: <span class="string">&#x27;123&#x27;</span> &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 也可以用async await</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">click</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> $api.login()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>统一请求处理，可以在 request 中写一个函数，请求 api 接口报错可以给远程日志服务器发数据<br>具体好处自己摸索。也可以根据环境动态请求 baseUrl,还可以接口高度复用,还封装了一个请求 1 秒后加载 loding</p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>reuqest</tag>
        <tag>api集中管理</tag>
      </tags>
  </entry>
  <entry>
    <title>一句话解释闭包</title>
    <url>/20210628/74-%E4%B8%80%E5%8F%A5%E8%AF%9D%E8%A7%A3%E9%87%8A%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一句话闭包"><a href="#一句话闭包" class="headerlink" title="一句话闭包"></a>一句话闭包</h2><p>当函数可以记住并且访问到所在的词法作用域，即使函数在词法作用域外执行<br>不一定非要 retrun 才叫闭包，那样太片面了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">awit</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  	<span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;,<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">awit(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇搞定【web打印】知识点</title>
    <url>/20210717/75-%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9A%E3%80%90web%E6%89%93%E5%8D%B0%E3%80%91%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一篇搞定【web打印】知识点"><a href="#一篇搞定【web打印】知识点" class="headerlink" title="一篇搞定【web打印】知识点"></a>一篇搞定【web打印】知识点</h2><p>日常开发中，避免不了各种前端打印，调用打印机等，具体可以查看下面文章</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTg1MDMwMTE4NzU4NDE2MzkxI2hlYWRpbmctMA==">一篇搞定【web打印】知识点<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>print</tag>
        <tag>web打印</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端常见问题</title>
    <url>/20210704/76-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="移动端问题"><a href="#移动端问题" class="headerlink" title="移动端问题"></a>移动端问题</h1><h2 id="移动端使用-rem-小图片变形"><a href="#移动端使用-rem-小图片变形" class="headerlink" title="移动端使用 rem 小图片变形"></a>移动端使用 rem 小图片变形</h2><blockquote>
<p>如 12px*12px 圆形图片,安卓手机显示变形了</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0.24rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>  方案：使用 px
</code></pre>
<h2 id="border-radius-50-不圆"><a href="#border-radius-50-不圆" class="headerlink" title="border-radius 50% 不圆"></a>border-radius 50% 不圆</h2><pre><code>  使用px
</code></pre>
<h2 id="1px-问题"><a href="#1px-问题" class="headerlink" title="1px 问题"></a>1px 问题</h2><ul>
<li>解决:伪元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  -webkit-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#2f6cfe</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多倍屏图片"><a href="#多倍屏图片" class="headerlink" title="多倍屏图片"></a>多倍屏图片</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;mdn-logo-sm.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;MDN&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;mdn-logo-HD.png 2x&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;assets_1x.png&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;assets_2x.png 2x, assets_3x.png 3x&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">在支持 srcset 的用户代理中，当使用 &#x27;w&#x27; 描述符时，src</span><br><span class="line">属性会被忽略。当匹配了媒体条件 (min-width: 600px) 时，图像将宽 200px，否则宽</span><br><span class="line">50vw（视图宽度的50%）。</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;clock-demo-thumb-200.png&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">&quot;Clock&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">srcset</span>=<span class="string">&quot;clock-demo-thumb-200.png 200w, clock-demo-thumb-400.png 400w&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">&quot;(min-width: 600px) 200px, 50vw&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="点击事件无效"><a href="#点击事件无效" class="headerlink" title="点击事件无效"></a>点击事件无效</h2><blockquote>
<p>在苹果系统上有些情况下非可点击元素监听 click 事件可能会无效，针对该情况只需对不触发 click 事件的元素声明 cursor:pointer 就能解决。</p>
</blockquote>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">.elem &#123;</span><br><span class="line">    <span class="attr">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">有时候需要设置块级元素</span><br><span class="line"></span><br><span class="line">ios曾经使用jQuery时代遇到需要点击<span class="number">2</span>次才能跳转</span><br><span class="line">使用js 添加 click touchend</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;a&#x27;</span>).on(<span class="string">&#x27;click touchend&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="事件穿透"><a href="#事件穿透" class="headerlink" title="事件穿透"></a>事件穿透</h2><pre><code>  #原生js
  e.stopPropagation();

  # vue
  @click.stop=&quot;&quot;
</code></pre>
<ul>
<li><p>滚动穿透</p>
<pre><code># vue
@touchmove.prevent

# 小程序
catchtouchmove
</code></pre>
</li>
</ul>
<h2 id="设置光标后某些手机错位问题"><a href="#设置光标后某些手机错位问题" class="headerlink" title="设置光标后某些手机错位问题"></a>设置光标后某些手机错位问题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input ref=<span class="string">&quot;numCode&quot;</span> type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;cardValue&quot;</span> maxlength=<span class="string">&quot;19&quot;</span> placeholder=<span class="string">&quot;请输入&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;van-field__control&quot;</span> @input=<span class="string">&quot;formatCardNumber&quot;</span> &gt;</span><br><span class="line"></span><br><span class="line">formatCardNumber (e) &#123;</span><br><span class="line">    <span class="keyword">const</span> input = e.target;</span><br><span class="line">    <span class="comment">// 获取当前光标的位置</span></span><br><span class="line">    <span class="keyword">const</span> cursorIndex = input.selectionStart;</span><br><span class="line">    <span class="comment">// 字符串中光标之前空格的个数</span></span><br><span class="line">    <span class="keyword">const</span> lineNumOfCursorLeft = (e.target.value.slice(<span class="number">0</span>, cursorIndex).match(<span class="regexp">/\s/g</span>) || []).length;</span><br><span class="line">    <span class="comment">// 去掉所有空格的字符串</span></span><br><span class="line">    <span class="keyword">const</span> noLine = e.target.value.replace(<span class="regexp">/\s/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 去除格式不对的字符并重新插入空格的字符串</span></span><br><span class="line">    <span class="keyword">const</span> newCardNum = noLine.replace(<span class="regexp">/(.&#123;4&#125;)/g</span>, <span class="string">&#x27;$1 &#x27;</span>).replace(<span class="regexp">/\s$/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 改后字符串中原光标之前空格的个数</span></span><br><span class="line">    <span class="keyword">const</span> newLineNumOfCursorLeft = (newCardNum.slice(<span class="number">0</span>, cursorIndex).match(<span class="regexp">/\s/g</span>) || []).length;</span><br><span class="line">    <span class="comment">// 光标在改后字符串中应在的位置</span></span><br><span class="line">    <span class="keyword">let</span> newCursorIndex = cursorIndex + newLineNumOfCursorLeft - lineNumOfCursorLeft;</span><br><span class="line">    <span class="comment">// 赋新值，nextTick保证空格不能手动输入或删除，只能按照规则自动填入</span></span><br><span class="line">    <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.cardValue = newCardNum;</span><br><span class="line">    <span class="comment">// 修正光标位置，保证在渲染新值后定位光标，解决某些手机光标会前移问题，在加空格时候（1234 5），输入5，光标会在5前</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        input.selectionStart = newCursorIndex;</span><br><span class="line">        input.selectionEnd = newCursorIndex;</span><br><span class="line">        &#125;,<span class="number">0</span>)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="滑动卡顿"><a href="#滑动卡顿" class="headerlink" title="滑动卡顿"></a>滑动卡顿</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">-webkit-<span class="attribute">overflow</span>-scroll: touch;</span><br><span class="line"><span class="attribute">overflow</span>-scroll: touch;</span><br></pre></td></tr></table></figure>

<h2 id="安卓-line-height-不居中-问题"><a href="#安卓-line-height-不居中-问题" class="headerlink" title="安卓 line-height 不居中 问题"></a>安卓 line-height 不居中 问题</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">如果写 <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">15px</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line"></span><br><span class="line">      ios 表现正常居中,android 位置偏了</span><br><span class="line"></span><br><span class="line">改为 <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">     <span class="attribute">line-height</span>: <span class="number">16px</span>;</span><br><span class="line">    ,android 正常</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说是 <span class="attribute">font-size</span> 字数大小不要用奇数</span><br><span class="line"></span><br><span class="line">或换用<span class="attribute">padding</span></span><br><span class="line">或换一种布局方式</span><br></pre></td></tr></table></figure>

<h2 id="设置文本可编辑"><a href="#设置文本可编辑" class="headerlink" title="设置文本可编辑"></a>设置文本可编辑</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>设置可编辑。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="flex-wrap-不兼容解决方案"><a href="#flex-wrap-不兼容解决方案" class="headerlink" title="flex-wrap 不兼容解决方案"></a>flex-wrap 不兼容解决方案</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">前在 <span class="string">`ios 10.2`</span> 以下版本会有问题，不会换行</span><br><span class="line"></span><br><span class="line">最后使用 <span class="string">`float`</span> 或者 <span class="string">`display: inline-block`</span> 替代</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="适配-iPhoneX"><a href="#适配-iPhoneX" class="headerlink" title="适配 iPhoneX"></a>适配 iPhoneX</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, viewport-fit=cover&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">padding-<span class="keyword">bottom: </span>constant(safe-area-<span class="keyword">inset-bottom); </span><span class="comment">/* 兼容 iOS &lt; 11.2 */</span></span><br><span class="line">padding-<span class="keyword">bottom: </span>env(safe-area-<span class="keyword">inset-bottom); </span><span class="comment">/* 兼容 iOS &gt;= 11.2 */</span></span><br><span class="line">注意：constant() 跟 env() 需要同时存在，而且顺序不能换。</span><br></pre></td></tr></table></figure>

<h2 id="设置-APP-内嵌-H5-标题"><a href="#设置-APP-内嵌-H5-标题" class="headerlink" title="设置 APP 内嵌 H5 标题"></a>设置 APP 内嵌 H5 标题</h2><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">document.<span class="meta">title</span> = res.result.<span class="meta">title</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">使用 document.<span class="meta">title</span>  在iOS中不能监听变化，还需要使用 jsbridge 方法</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="css-底部-fixed，margin-或-padding-bottom-不起作用"><a href="#css-底部-fixed，margin-或-padding-bottom-不起作用" class="headerlink" title="css 底部 fixed，margin 或 padding-bottom 不起作用"></a>css 底部 fixed，margin 或 padding-bottom 不起作用</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">由于设置：iPhoneX适配加了</span><br><span class="line"><span class="attribute">padding-bottom</span>: constant(safe-area-inset-bottom);</span><br><span class="line"><span class="attribute">padding-bottom</span>: env(safe-area-inset-bottom);</span><br><span class="line"></span><br><span class="line">css 函数 env() 和 constant():</span><br><span class="line">上面两个函数可以直接使用变量函数，只有在 webkit 内核下才支持</span><br><span class="line"><span class="function"><span class="title">env</span><span class="params">()</span></span> 必须在 ios &gt;= <span class="number">11.2</span> 才支持</span><br><span class="line"><span class="function"><span class="title">constant</span><span class="params">()</span></span> 必须 ios &lt; <span class="number">11.2</span> 支持</span><br><span class="line"></span><br><span class="line">网页中<span class="attribute">padding-bottom</span>不起作用；</span><br><span class="line"></span><br><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;width=device-width,initial-scale=1,viewport-fit=cover&quot;</span>&gt;</span><br><span class="line">viewport-fit：</span><br><span class="line">　　　　　　　　contain: 可视化窗口完全包含网页内容</span><br><span class="line">　　　　　　　　cover: 网页内容完全覆盖</span><br><span class="line">　　　　　　　　<span class="attribute">auto</span>: 默认值和 contain 一样</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">device-width</span>: <span class="number">375px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">812px</span>) <span class="keyword">and</span> (-webkit-device-pixel-ratio: <span class="number">3</span>)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="wx-chooseImage-出现-permission-denied"><a href="#wx-chooseImage-出现-permission-denied" class="headerlink" title="wx.chooseImage 出现 permission denied"></a>wx.chooseImage 出现 permission denied</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.chooseImage(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">sizeType</span>: [<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;compressed&#x27;</span>],</span><br><span class="line">  <span class="attr">sourceType</span>: [<span class="string">&#x27;album&#x27;</span>, <span class="string">&#x27;camera&#x27;</span>],</span><br><span class="line">  <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wxres:&#x27;</span>, res)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wx:error&#x27;</span>, err)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">判定返回fail就直接刷新</span><br></pre></td></tr></table></figure>

<h2 id="html2canvas-在-IOS13-无法截图"><a href="#html2canvas-在-IOS13-无法截图" class="headerlink" title="html2canvas 在 IOS13 无法截图"></a>html2canvas 在 IOS13 无法截图</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">html2canvas</span> 版本降低为【<span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span>-rc.<span class="number">4</span>】</span><br></pre></td></tr></table></figure>

<h2 id="微信小程序-web-view-拍照会刷新页面"><a href="#微信小程序-web-view-拍照会刷新页面" class="headerlink" title="微信小程序 web-view 拍照会刷新页面"></a>微信小程序 web-view 拍照会刷新页面</h2><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">微信调起拍照的时候,页面会触发<span class="keyword">on</span>Show生命周期,很多人将方法放到<span class="keyword">on</span>Show里就会导致出现页面刷新等问题，</span><br><span class="line"></span><br><span class="line">将web-view的入口放到<span class="keyword">on</span>Load的即可解决</span><br></pre></td></tr></table></figure>

<h2 id="new-Date-“2018-12-12-00-00-01”-getTime-获取时间戳的时候在-ios-下面为-NaN"><a href="#new-Date-“2018-12-12-00-00-01”-getTime-获取时间戳的时候在-ios-下面为-NaN" class="headerlink" title="new Date(“2018-12-12 00:00:01”).getTime()获取时间戳的时候在 ios 下面为 NaN."></a>new Date(“2018-12-12 00:00:01”).getTime()获取时间戳的时候在 ios 下面为 NaN.</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(data.replace(<span class="regexp">/-/g</span>, <span class="string">&#x27;/&#x27;</span>)).getTime()</span><br></pre></td></tr></table></figure>

<h2 id="ios-系统-history-back-返回却不刷新页面-安卓会重新刷新"><a href="#ios-系统-history-back-返回却不刷新页面-安卓会重新刷新" class="headerlink" title="ios 系统 history.back()返回却不刷新页面,安卓会重新刷新"></a>ios 系统 history.back()返回却不刷新页面,安卓会重新刷新</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isPageHide = <span class="literal">false</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pageshow&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isPageHide) &#123;</span><br><span class="line">      <span class="built_in">window</span>.location.reload()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pagehide&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    isPageHide = <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h2 id="小程序中-pdf-预览"><a href="#小程序中-pdf-预览" class="headerlink" title="小程序中 pdf 预览"></a>小程序中 pdf 预览</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">第一种：用微信自带的方法 wx.downloadFile(&#123; &#125;) + wx.openDocument(&#123; &#125;)</span><br><span class="line">第二种：使用 web-view，uni-app 中 web-view 可以直接加载 pdf 文件</span><br><span class="line">第三种：可以使用pdf.js 来实现</span><br><span class="line"></span><br><span class="line">微信原生方法： 安卓好用， ios 不好用</span><br><span class="line">web-view： 安卓不好用，ios 好用</span><br></pre></td></tr></table></figure>

<h2 id="iOS-返回问题，安卓"><a href="#iOS-返回问题，安卓" class="headerlink" title="iOS 返回问题，安卓"></a>iOS 返回问题，安卓</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">问题：</span><br><span class="line">A 页面跳转 B页面， B页面跳转 C页面，C页面 返回直接到了A页面</span><br><span class="line"></span><br><span class="line">href 跳转，B页面用过一次 replace,用过刷新</span><br><span class="line"></span><br><span class="line">正常流程：</span><br><span class="line">A 页面跳转 B页面， B页面跳转 C页面，C页面 返回B页面，刷新，切换的tab参数是最后一次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新页面，ios中会监听到，安卓不会监听</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> isPageHide = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pageshow&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isPageHide) &#123;</span><br><span class="line">      Lib.device.android ? <span class="string">&#x27;&#x27;</span> : <span class="built_in">window</span>.location.reload;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pagehide&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    isPageHide = <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// a.html 设置刷新 检测缓存是否有标志 要是有就说明数据有变化  a.html跳转到b.html页面</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;pageshow&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sessionStorage.getItem(<span class="string">&quot;need-refresh&quot;</span>))&#123;</span><br><span class="line">        location.reload();</span><br><span class="line">        sessionStorage.removeItem(<span class="string">&quot;need-refresh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.html 如果是数据变化了就写一条缓存   b.html返回到a.html页面</span></span><br><span class="line">sessionStorage.setItem(<span class="string">&quot;need-refresh&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">- https:<span class="comment">//juejin.cn/post/6844904002103033870</span></span><br><span class="line">- https:<span class="comment">//stackoverflow.com/questions/17432899/javascript-bfcache-pageshow-event-event-persisted-always-set-to-false</span></span><br><span class="line"></span><br><span class="line">- <span class="comment">// 刷新当前页面</span></span><br><span class="line"><span class="built_in">window</span>.location.Reload();</span><br><span class="line">self.location.reload();</span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="built_in">window</span>.location.href;</span><br><span class="line"></span><br><span class="line">- 移动端 location.href 无法成功跳转页面</span><br><span class="line">最近做的移动端页面在请求成功后要跳转页面，通过location.href实现的跳转。但同事在测试时，安卓机可以成功跳转，苹果IOS却无法成功跳转。</span><br><span class="line"></span><br><span class="line">解决办法：在链接后面加一个随机参数，这样就可以跳转了</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.location.href = <span class="string">&#x27;doctor_step4.html?timestamp=&#x27;</span> + <span class="built_in">Math</span>.random();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- meta 标签设置强制不缓存</span><br><span class="line"></span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Pragma&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- document.referrer</span><br></pre></td></tr></table></figure>

<h2 id="uniapp-开发小程序-scroll-view-滚动条"><a href="#uniapp-开发小程序-scroll-view-滚动条" class="headerlink" title="uniapp 开发小程序 scroll-view 滚动条"></a>uniapp 开发小程序 scroll-view 滚动条</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style &gt; 中不能加 scoped ::-webkit-scrollbar &#123;</span><br><span class="line">  display: none;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  -webkit-appearance: none;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line">scroll-view::-webkit-scrollbar &#123;</span><br><span class="line">  display: none;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  -webkit-appearance: none;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小程序中-onPageScroll-卡顿"><a href="#小程序中-onPageScroll-卡顿" class="headerlink" title="小程序中 onPageScroll 卡顿"></a>小程序中 onPageScroll 卡顿</h2><blockquote>
<p>遇到一个需求，在页面进行滚动操作的时候，当页面其中的某个元素滚动到某个位置，我们就让该元素固定顶部位置。等到滚动小于某个值的时候，再让该元素继续随着页面滚动。这就是我们平时说的吸顶效果。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">uniapp中</span><br><span class="line"></span><br><span class="line"><span class="attr">onPageScroll</span> : <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">//nvue暂不支持滚动监听，可用bindingx代替</span></span><br><span class="line">  <span class="comment">// console.log(&quot;滚动距离为：&quot; + e.scrollTop);</span></span><br><span class="line">  <span class="comment">// 判断滚动距离和元素距离顶部距离</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">uni</span><br><span class="line">  .createSelectorQuery()</span><br><span class="line">  .in(<span class="built_in">this</span>)</span><br><span class="line">  .select(<span class="string">&quot;#wiki&quot;</span>)</span><br><span class="line">  .boundingClientRect(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;顶部距离:&#x27;</span>,data.top)</span><br><span class="line">  &#125;)</span><br><span class="line">  .exec();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端常见问题</tag>
      </tags>
  </entry>
  <entry>
    <title>js 获取本周开始结束时间，本月开始结束时间等....</title>
    <url>/20210720/77-js-%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%91%A8%E5%BC%80%E5%A7%8B%E7%BB%93%E6%9D%9F%E6%97%B6%E9%97%B4%EF%BC%8C%E6%9C%AC%E6%9C%88%E5%BC%80%E5%A7%8B%E7%BB%93%E6%9D%9F%E6%97%B6%E9%97%B4%E7%AD%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="获取周，月开始结束时间"><a href="#获取周，月开始结束时间" class="headerlink" title="获取周，月开始结束时间"></a>获取周，月开始结束时间</h2> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 当前日期</span></span><br><span class="line"><span class="keyword">var</span> nowDayOfWeek = now.getDay(); <span class="comment">// 今天本周的第几天</span></span><br><span class="line"><span class="keyword">var</span> nowDay = now.getDate(); <span class="comment">// 当前日</span></span><br><span class="line"><span class="keyword">var</span> nowMonth = now.getMonth(); <span class="comment">// 当前月</span></span><br><span class="line"><span class="keyword">var</span> nowYear = now.getYear(); <span class="comment">// 当前年</span></span><br><span class="line">nowYear += (nowYear &lt; <span class="number">2000</span>) ? <span class="number">1900</span> : <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> DateUtil = &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得当前日期</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">getNowDay</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得本周的开始时间</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">getStartDayOfWeek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> day = nowDayOfWeek || <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(now.getFullYear(), nowMonth, nowDay + <span class="number">1</span> - day));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得本周的结束时间</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">getEndDayOfWeek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> day = nowDayOfWeek || <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.formatDate(<span class="keyword">new</span> <span class="built_in">Date</span>(now.getFullYear(), nowMonth, nowDay + <span class="number">7</span> - day));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得本月的开始时间</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">getStartDayOfMonth</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> monthStartDate = <span class="keyword">new</span> <span class="built_in">Date</span>(nowYear, nowMonth, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.formatDate(monthStartDate);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得本月的结束时间</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">getEndDayOfMonth</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> monthEndDate = <span class="keyword">new</span> <span class="built_in">Date</span>(nowYear, nowMonth, <span class="built_in">this</span>.getMonthDays());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.formatDate(monthEndDate);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得本月天数</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">getMonthDays</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> monthStartDate = <span class="keyword">new</span> <span class="built_in">Date</span>(nowYear, nowMonth, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> monthEndDate = <span class="keyword">new</span> <span class="built_in">Date</span>(nowYear, nowMonth + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> days = (monthEndDate - monthStartDate) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);</span><br><span class="line">        <span class="keyword">return</span> days;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>日期格式化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns <span class="type">&#123;String&#125;</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="title">formatDate</span>(<span class="params">date</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> myyear = date.getFullYear();</span><br><span class="line">        <span class="keyword">var</span> mymonth = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> myweekday = date.getDate();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (mymonth &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            mymonth = <span class="string">&quot;0&quot;</span> + mymonth;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (myweekday &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            myweekday = <span class="string">&quot;0&quot;</span> + myweekday;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (myyear + <span class="string">&quot;-&quot;</span> + mymonth + <span class="string">&quot;-&quot;</span> + myweekday);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    DateUtil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="获取最近7天"><a href="#获取最近7天" class="headerlink" title="获取最近7天"></a>获取最近7天</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回最近七天的日期   0当前日期，7 最近7天</span></span><br><span class="line"><span class="keyword">function</span> getday<span class="constructor">List(<span class="params">day</span> = 0)</span> &#123;</span><br><span class="line">	var today = <span class="keyword">new</span> <span class="constructor">Date()</span>;</span><br><span class="line">	var targetday_milliseconds = today.get<span class="constructor">Time()</span> + <span class="number">1000</span><span class="operator"> * </span><span class="number">60</span><span class="operator"> * </span><span class="number">60</span><span class="operator"> * </span><span class="number">24</span><span class="operator"> * </span>day;</span><br><span class="line">	today.set<span class="constructor">Time(<span class="params">targetday_milliseconds</span>)</span>; <span class="comment">//注意，这行是关键代码</span></span><br><span class="line">	var tYear = today.get<span class="constructor">FullYear()</span>;</span><br><span class="line">	var tMonth = today.get<span class="constructor">Month()</span>;</span><br><span class="line">	var tDate = today.get<span class="constructor">Date()</span>;</span><br><span class="line">	tMonth = <span class="keyword">do</span><span class="constructor">HandleMonth(<span class="params">tMonth</span> + 1)</span>;</span><br><span class="line">	tDate = <span class="keyword">do</span><span class="constructor">HandleMonth(<span class="params">tDate</span>)</span>;</span><br><span class="line">	return tYear + <span class="string">&quot;-&quot;</span> + tMonth + <span class="string">&quot;-&quot;</span> + tDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="keyword">do</span><span class="constructor">HandleMonth(<span class="params">month</span>)</span> &#123;</span><br><span class="line">	var m = month;</span><br><span class="line">	<span class="keyword">if</span> (month.<span class="keyword">to</span><span class="constructor">String()</span>.length<span class="operator"> == </span><span class="number">1</span>) &#123;</span><br><span class="line">		m = <span class="string">&quot;0&quot;</span> + month;</span><br><span class="line">	&#125;</span><br><span class="line">	return m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="根据两个日期获取天数差"><a href="#根据两个日期获取天数差" class="headerlink" title="根据两个日期获取天数差"></a>根据两个日期获取天数差</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="constructor">GetNumberOfDays(<span class="params">date1</span>, <span class="params">date2</span>)</span> &#123; <span class="comment">//获得天数</span></span><br><span class="line">	<span class="comment">//date1：开始日期，date2结束日期</span></span><br><span class="line">	var a1 = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>parse(<span class="keyword">new</span> <span class="constructor">Date(<span class="params">date1</span>)</span>);</span><br><span class="line">	var a2 = <span class="module-access"><span class="module"><span class="identifier">Date</span>.</span></span>parse(<span class="keyword">new</span> <span class="constructor">Date(<span class="params">date2</span>)</span>);</span><br><span class="line">	var day = parse<span class="constructor">Int((<span class="params">a2</span> - <span class="params">a1</span>)</span><span class="operator"> / </span>(<span class="number">1000</span><span class="operator"> * </span><span class="number">60</span><span class="operator"> * </span><span class="number">60</span><span class="operator"> * </span><span class="number">24</span>)); <span class="comment">//核心：时间戳相减，然后除以天数</span></span><br><span class="line">	return day</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="时间戳转换对象"><a href="#时间戳转换对象" class="headerlink" title="时间戳转换对象"></a>时间戳转换对象</h2><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayStrToArray</span>(<span class="params">dateStr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="built_in">date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>(dateStr)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> formatObj = &#123;</span><br><span class="line">		<span class="attribute">y</span>: <span class="built_in">date</span>.getFullYear(),</span><br><span class="line">		<span class="attribute">m</span>: <span class="built_in">date</span>.getMonth() + <span class="number">1</span>,</span><br><span class="line">		<span class="attribute">d</span>: <span class="built_in">date</span>.getDate(),</span><br><span class="line">		<span class="attribute">h</span>: <span class="built_in">date</span>.getHours(),</span><br><span class="line">		<span class="attribute">i</span>: <span class="built_in">date</span>.getMinutes(),</span><br><span class="line">		<span class="attribute">s</span>: <span class="built_in">date</span>.getSeconds(),</span><br><span class="line">		<span class="attribute">a</span>: <span class="built_in">date</span>.getDay()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> formatObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="时间戳转换时间格式"><a href="#时间戳转换时间格式" class="headerlink" title="时间戳转换时间格式"></a>时间戳转换时间格式</h2><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">function getTimeStampToDate(second_time) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">var</span> <span class="built_in">time</span> = parseInt(second_time) + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line">	<span class="built_in">if</span> (parseInt(second_time) &gt; <span class="number">60</span>) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">var</span> <span class="built_in">second</span> = parseInt(second_time) % <span class="number">60</span>;</span><br><span class="line">		<span class="built_in">var</span> <span class="built_in">min</span> = parseInt(second_time / <span class="number">60</span>);</span><br><span class="line">		<span class="built_in">time</span> = <span class="built_in">min</span> + <span class="string">&quot;分&quot;</span> + <span class="built_in">second</span> + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">if</span> (<span class="built_in">min</span> &gt; <span class="number">60</span>) &#123;</span><br><span class="line">			<span class="built_in">min</span> = parseInt(second_time / <span class="number">60</span>) % <span class="number">60</span>;</span><br><span class="line">			<span class="built_in">var</span> <span class="built_in">hour</span> = parseInt(parseInt(second_time / <span class="number">60</span>) / <span class="number">60</span>);</span><br><span class="line">			<span class="built_in">time</span> = <span class="built_in">hour</span> + <span class="string">&quot;小时&quot;</span> + <span class="built_in">min</span> + <span class="string">&quot;分&quot;</span> + <span class="built_in">second</span> + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">if</span> (<span class="built_in">hour</span> &gt; <span class="number">24</span>) &#123;</span><br><span class="line">				<span class="built_in">hour</span> = parseInt(parseInt(second_time / <span class="number">60</span>) / <span class="number">60</span>) % <span class="number">24</span>;</span><br><span class="line">				<span class="built_in">var</span> <span class="built_in">day</span> = parseInt(parseInt(parseInt(second_time / <span class="number">60</span>) / <span class="number">60</span>) / <span class="number">24</span>);</span><br><span class="line">				<span class="built_in">time</span> = <span class="built_in">day</span> + <span class="string">&quot;天&quot;</span> + <span class="built_in">hour</span> + <span class="string">&quot;小时&quot;</span> + <span class="built_in">min</span> + <span class="string">&quot;分&quot;</span> + <span class="built_in">second</span> + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return <span class="built_in">time</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>web worker实测</title>
    <url>/20210720/78-web-worker%E5%AE%9E%E6%B5%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="web-worker的好处"><a href="#web-worker的好处" class="headerlink" title="web worker的好处"></a>web worker的好处</h2><blockquote>
<p>比如一些计算量大的，耗时的，任务，可以用web worker单独开线程去跑，不会影响到主线程的运行这样主线程（ui交互渲染等）就不会被阻塞，页面流畅,为js创造多线程环境</p>
</blockquote>
<h2 id="实际如何使用呢？"><a href="#实际如何使用呢？" class="headerlink" title="实际如何使用呢？"></a>实际如何使用呢？</h2><p>首先要理解一个区别，主线程和子线程是分别独立，不要混在一起去理解</p>
<img src="https://blog.img.wy1991.cn/static/images/js/worker.png-blogImg">


<p>上一段代码，方便理解：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件的目录结构：</span></span><br><span class="line">├── index<span class="selector-class">.html</span></span><br><span class="line">└── poorWorker<span class="selector-class">.js</span> （穷人打工仔，worker，干活的人）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="这是主线程：index-html"><a href="#这是主线程：index-html" class="headerlink" title="这是主线程：index.html"></a>这是主线程：index.html</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> worker = <span class="keyword">new</span> Worker(<span class="string">&#x27;./poorWorker.js&#x27;</span>);</span></span><br><span class="line"><span class="javascript">worker.postMessage(<span class="string">&quot;我是主进程， 我是boss，我传给worker线程消息： 赶紧干活！！&quot;</span>);</span></span><br><span class="line"><span class="javascript">worker.onmessage = <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(msg)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">&quot;我是主进程，我是boss，接收的子线程的数据：&quot;</span>, msg.data);</span></span><br><span class="line"><span class="javascript">  worker.terminate(); <span class="comment">// 关闭主线程</span></span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript">worker.onerror = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(e)</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="这是子线程：poorWorker-js"><a href="#这是子线程：poorWorker-js" class="headerlink" title="这是子线程：poorWorker.js"></a>这是子线程：poorWorker.js</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> importScripts(<span class="string">&#x27;./hello2.js&#x27;</span>, <span class="string">&#x27;http://xxx/a.js&#x27;</span>); <span class="regexp">//</span> 此处可以指出多脚本， 加载的脚本不支持跨域!!</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> self 代表子线程自身，即子线程的全局对象。</span><br><span class="line"><span class="regexp">//</span> self可以换成this或不写，也可以实现执行。此处用self用于区分子线程worker</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 监听主线程传过来的信息</span><br><span class="line">self.onmessage = e =&gt; &#123;</span><br><span class="line">  console.log(e)</span><br><span class="line">  console.log(<span class="string">&#x27;我是子线程， 我在工作， 我是worker， 我收到主线程传来的信息：&#x27;</span>, e.data)</span><br><span class="line">  <span class="regexp">//</span> <span class="keyword">do</span> something</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> setTimeout非必须，此处模拟，worker干了个耗时的活，<span class="number">2</span>s后告诉主线程（老板）活已经干完ok了。</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  <span class="regexp">//</span> 发送信息给主线程</span><br><span class="line">  self.postMessage(<span class="string">&#x27;我是子线程， 我在工作， 我是worker， 工作已经完成 ok&#x27;</span>)</span><br><span class="line">  closeSon()</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 关闭worker线程</span><br><span class="line"><span class="keyword">function</span> closeSon () &#123;</span><br><span class="line">  return self.close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="打印效果如下："><a href="#打印效果如下：" class="headerlink" title="打印效果如下："></a>打印效果如下：</h3><img src="https://blog.img.wy1991.cn/static/images/js/worker1.png-blogImg">


<h2 id="骚操作写法介绍（更推荐上面的写法）"><a href="#骚操作写法介绍（更推荐上面的写法）" class="headerlink" title="骚操作写法介绍（更推荐上面的写法）"></a>骚操作写法介绍（更推荐上面的写法）</h2><p>正常情况，推荐上面的写法：把worker部分，单独分离成一个.js文件。</p>
<p>但强行把worker部分，不分离成.js，强行写在index.html内，也可以做到</p>
<p>这是 index.html</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="regexp">//</span> 此处把上面的poorWorker.js放到data中</span><br><span class="line">const data = `</span><br><span class="line">  <span class="regexp">//</span> importScripts(<span class="string">&#x27;./hello2.js&#x27;</span>, <span class="string">&#x27;http://xxx/a.js&#x27;</span>); <span class="regexp">//</span> 此处可以指出多脚本， 加载的脚本不支持跨域!!</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> self 代表子线程自身，即子线程的全局对象。</span><br><span class="line">  <span class="regexp">//</span> self可以换成this或不写，也可以实现执行。此处用self用于区分子线程worker</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> 监听主线程传过来的信息</span><br><span class="line">  self.onmessage = e =&gt; &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">    console.log(<span class="string">&#x27;我是子线程， 我在工作， 我是worker， 我收到主线程传来的信息：&#x27;</span>, e.data)</span><br><span class="line">    <span class="regexp">//</span> <span class="keyword">do</span> something</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> setTimeout非必须，此处模拟，worker干了个耗时的活，<span class="number">2</span>s后告诉主线程（老板）活已经干完ok了。</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    <span class="regexp">//</span> 发送信息给主线程</span><br><span class="line">    self.postMessage(<span class="string">&#x27;我是子线程， 我在工作， 我是worker， 工作已经完成 ok&#x27;</span>)</span><br><span class="line">    closeSon()</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> 关闭worker线程</span><br><span class="line">  <span class="keyword">function</span> closeSon () &#123;</span><br><span class="line">    return self.close()</span><br><span class="line">  &#125;</span><br><span class="line">`;</span><br><span class="line">const blob = new Blob([data]); <span class="regexp">//</span> 把poorWorker.js的内容转成二进制</span><br><span class="line">const url = window.URL.createObjectURL(blob); <span class="regexp">//</span> 把二进制转成一个本地链接</span><br><span class="line">const worker = new Worker(url); <span class="regexp">//</span> 利用了new Worker()只接受url的特点</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> ... 后面的代码同上</span><br><span class="line">worker.postMessage(<span class="string">&quot;我是主进程， 我是boss，我传给worker线程消息： 赶紧干活！！&quot;</span>); </span><br><span class="line">worker.onmessage = msg =&gt; &#123; </span><br><span class="line">    console.log(msg) </span><br><span class="line">    console.log(<span class="string">&quot;我是主进程，我是boss，接收的子线程的数据：&quot;</span>, msg.data); </span><br><span class="line">    worker.terminate(); <span class="regexp">//</span> 关闭主线程</span><br><span class="line">&#125;; </span><br><span class="line">worker.onerror = e =&gt; &#123; </span><br><span class="line">    console.log(e) </span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="最后（断开）"><a href="#最后（断开）" class="headerlink" title="最后（断开）"></a>最后（断开）</h2><p>Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。这样有利于随时响应主线程的通信。</p>
<p>但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>worker</tag>
      </tags>
  </entry>
  <entry>
    <title>Node性能如何进行监控以及优化？</title>
    <url>/20210721/79-Node-%E6%80%A7%E8%83%BD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%9B%91%E6%8E%A7%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96%EF%BC%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p>Node作为一门服务端语言，性能方面尤为重要，其衡量指标一般有如下：</p>
<ul>
<li>CPU</li>
<li>内存</li>
<li>I/O</li>
<li>网络</li>
</ul>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>主要分成了两部分：</p>
<ul>
<li>CPU负载：在某个时间段内，占用以及等待CPU的进程总数</li>
<li>CPU使用率：CPU时间占用状况，等于 1 - 空闲CPU时间(idle time) / CPU总时间</li>
</ul>
<p>这两个指标都是用来评估系统当前CPU的繁忙程度的量化指标</p>
<p>Node应用一般不会消耗很多的CPU，如果CPU占用率高，则表明应用存在很多同步操作，导致异步任务回调被阻塞</p>
<h3 id="内存指标"><a href="#内存指标" class="headerlink" title="内存指标"></a>内存指标</h3><p>内存是一个非常容易量化的指标。内存占用率是评判一个系统的内存瓶颈的常见指标。对于Node来说，内部内存堆栈的使用状态也是一个可以量化的指标</p>
<pre><code>  // /app/lib/memory.js
  const os = require(&#39;os&#39;);
  // 获取当前Node内存堆栈情况
  const &#123; rss, heapUsed, heapTotal &#125; = process.memoryUsage();
  // 获取系统空闲内存
  const sysFree = os.freemem();
  // 获取系统总内存
  const sysTotal = os.totalmem();

  module.exports = &#123;
    memory: () =&gt; &#123;
      return &#123;
        sys: 1 - sysFree / sysTotal,  // 系统内存占用率
        heap: heapUsed / headTotal,   // Node堆内存占用率
        node: rss / sysTotal,         // Node占用系统内存的比例
      &#125;
    &#125;
  &#125;
</code></pre>
<ul>
<li>rss：表示node进程占用的内存总量。</li>
<li>heapTotal：表示堆内存的总量。</li>
<li>heapUsed：实际堆内存的使用量。</li>
<li>external ：外部程序的内存使用量，包含Node核心的C++程序的内存使用量</li>
</ul>
<p>在Node中，一个进程的最大内存容量为1.5GB。因此我们需要减少内存泄露</p>
<h3 id="磁盘-I-O"><a href="#磁盘-I-O" class="headerlink" title="磁盘 I/O"></a>磁盘 I/O</h3><p>硬盘的IO 开销是非常昂贵的，硬盘 IO 花费的 CPU 时钟周期是内存的 164000 倍</p>
<p>内存 IO比磁盘IO 快非常多，所以使用内存缓存数据是有效的优化方法。常用的工具如 redis、memcached等</p>
<p>并不是所有数据都需要缓存，访问频率高，生成代价比较高的才考虑是否缓存，也就是说影响你性能瓶颈的考虑去缓存，并且而且缓存还有缓存雪崩、缓存穿透等问题要解决</p>
<h2 id="如何监控"><a href="#如何监控" class="headerlink" title="如何监控"></a>如何监控</h2><p>关于性能方面的监控，一般情况都需要借助工具来实现</p>
<p>这里采用Easy-Monitor 2.0，其是轻量级的 Node.js 项目内核性能监控 + 分析工具，在默认模式下，只需要在项目入口文件 require 一次，无需改动任何业务代码即可开启内核级别的性能监控分析</p>
<p>使用方法如下：</p>
<p>在你的项目入口文件中按照如下方式引入，当然请传入你的项目名称：</p>
<pre><code>  const easyMonitor = require(&#39;easy-monitor&#39;);
  easyMonitor(&#39;你的项目名称&#39;);
</code></pre>
<p>打开你的浏览器，访问 <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDoxMjMzMy8=">http://localhost:12333<i class="fa fa-external-link-alt"></i></span> ，即可看到进程界面</p>
<p>关于定制化开发、通用配置项以及如何动态更新配置项详见官方文档</p>
<h2 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h2><p>关于Node的性能优化的方式有：</p>
<ul>
<li>使用最新版本Node.js</li>
<li>正确使用流 Stream</li>
<li>代码层面优化</li>
<li>内存管理优化</li>
</ul>
<h3 id="使用最新版本Node-js"><a href="#使用最新版本Node-js" class="headerlink" title="使用最新版本Node.js"></a>使用最新版本Node.js</h3><p>每个版本的性能提升主要来自于两个方面：</p>
<ul>
<li>V8 的版本更新</li>
<li>Node.js 内部代码的更新优化</li>
</ul>
<h3 id="正确使用流-Stream"><a href="#正确使用流-Stream" class="headerlink" title="正确使用流 Stream"></a>正确使用流 Stream</h3><p>在Node中，很多对象都实现了流，对于一个大文件可以通过流的形式发送，不需要将其完全读入内存</p>
<pre><code>  const http = require(&#39;http&#39;);
  const fs = require(&#39;fs&#39;);

  // bad
  http.createServer(function (req, res) &#123;
      fs.readFile(__dirname + &#39;/data.txt&#39;, function (err, data) &#123;
          res.end(data);
      &#125;);
  &#125;);

  // good
  http.createServer(function (req, res) &#123;
      const stream = fs.createReadStream(__dirname + &#39;/data.txt&#39;);
      stream.pipe(res);
  &#125;);
</code></pre>
<h3 id="代码层面优化"><a href="#代码层面优化" class="headerlink" title="代码层面优化"></a>代码层面优化</h3><p>合并查询，将多次查询合并一次，减少数据库的查询次数</p>
<pre><code>  // bad
  for user_id in userIds 
      let account = user_account.findOne(user_id)

  // good
  const user_account_map = &#123;&#125;   // 注意这个对象将会消耗大量内存。
  user_account.find(user_id in user_ids).forEach(account)&#123;
      user_account_map[account.user_id] =  account
  &#125;
  for user_id in userIds 
      var account = user_account_map[user_id]
</code></pre>
<h3 id="内存管理优化"><a href="#内存管理优化" class="headerlink" title="内存管理优化"></a>内存管理优化</h3><p> 在 V8 中，主要将内存分为新生代和老生代两代：</p>
<ul>
<li>新生代：对象的存活时间较短。新生对象或只经过一次垃圾回收的对象</li>
<li>老生代：对象存活时间较长。经历过一次或多次垃圾回收的对象</li>
</ul>
<p>若新生代内存空间不够，直接分配到老生代</p>
<p>通过减少内存占用，可以提高服务器的性能。如果有内存泄露，也会导致大量的对象存储到老生代中，服务器性能会大大降低</p>
<p>如下面情况：</p>
<pre><code>  const buffer = fs.readFileSync(__dirname + &#39;/source/index.htm&#39;);

  app.use(
      mount(&#39;/&#39;, async (ctx) =&gt; &#123;
          ctx.status = 200;
          ctx.type = &#39;html&#39;;
          ctx.body = buffer;
          leak.push(fs.readFileSync(__dirname + &#39;/source/index.htm&#39;));
      &#125;)
  );

  const leak = [];
</code></pre>
<p>leak的内存非常大，造成内存泄露，应当避免这样的操作，通过减少内存使用，是提高服务性能的手段之一</p>
<p>而节省内存最好的方式是使用池，其将频用、可复用对象存储起来，减少创建和销毁操作</p>
<p>例如有个图片请求接口，每次请求，都需要用到类。若每次都需要重新new这些类，并不是很合适，在大量请求时，频繁创建和销毁这些类，造成内存抖动</p>
<p>使用对象池的机制，对这种频繁需要创建和销毁的对象保存在一个对象池中。每次用到该对象时，就取对象池空闲的对象，并对它进行初始化操作，从而提高框架的性能</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>性能监控</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5 drag拖拽</title>
    <url>/20210630/8-HTML5-drag%E6%8B%96%E6%8B%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTML5-Drag-amp-Drop"><a href="#HTML5-Drag-amp-Drop" class="headerlink" title="HTML5 : Drag &amp; Drop"></a>HTML5 : Drag &amp; Drop</h2><blockquote>
<p>Drag &amp; Drop 是 HTML5 中的拖放，即抓取对象后拖放到指定的位置。</p>
</blockquote>
<h5 id="设置元素为可拖放-draggables"><a href="#设置元素为可拖放-draggables" class="headerlink" title="设置元素为可拖放 draggables"></a>设置元素为可拖放 draggables</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=&quot;<span class="symbol">drag</span>&quot; <span class="symbol">draggable</span>=&quot;<span class="symbol">true</span>&quot;&gt;&lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">&lt;<span class="symbol">div</span> <span class="symbol">class</span>=&quot;<span class="symbol">wrapper</span>&quot;&gt;&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure>

<h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p><code>dragstart</code> <code>dragend</code> <code>dragenter</code> <code>dragover</code> <code>drop</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oDrag = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;drag&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">    oWrapper = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;wrapper&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//当【元素】被抓取时</span></span><br><span class="line">oDrag.addEventListener(<span class="string">&#x27;dragstart&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;dragstart&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//当【元素】被放开时</span></span><br><span class="line">oDrag.addEventListener(<span class="string">&#x27;dragend&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;dragend&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//当鼠标进入【放置框】内（由鼠标位置决定）</span></span><br><span class="line">oWrapper.addEventListener(<span class="string">&#x27;dragenter&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;dragenter&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//当元素在【放置框】上方移动时</span></span><br><span class="line">oWrapper.addEventListener(<span class="string">&#x27;dragover&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//触发 drop 事件必须先在 dragover 里面取消默认事件</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;dragover&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//当元素被拖入【放置框】内时</span></span><br><span class="line">oWrapper.addEventListener(<span class="string">&#x27;drop&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//避免将文件拖入时，文件做为链接打开了</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;drop&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//dragstart</span></span><br><span class="line"><span class="comment">//dragenter</span></span><br><span class="line"><span class="comment">//dragover</span></span><br><span class="line"><span class="comment">//drop</span></span><br><span class="line"><span class="comment">//dragend</span></span><br></pre></td></tr></table></figure>

<h5 id="设置数据-e-dataTransfer-setData"><a href="#设置数据-e-dataTransfer-setData" class="headerlink" title="设置数据 e.dataTransfer.setData()"></a>设置数据 e.dataTransfer.setData()</h5><h3 id="1-实战—将【1】和【2】放到【放置框】内"><a href="#1-实战—将【1】和【2】放到【放置框】内" class="headerlink" title="1.实战—将【1】和【2】放到【放置框】内"></a>1.实战—将【1】和【2】放到【放置框】内</h3><img title="html5拖拽效果" src="https://blog.img.wy1991.cn/static/images/js/drag.png-blogImg">

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;drag1&quot;</span> draggable=<span class="string">&quot;true&quot;</span>&gt;<span class="number">1</span>&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;drag2&quot;</span> draggable=<span class="string">&quot;true&quot;</span>&gt;<span class="number">2</span>&lt;/div&gt;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;放置框&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var oDrag1 = document.get<span class="constructor">ElementById(&#x27;<span class="params">drag1</span>&#x27;)</span>,</span><br><span class="line">    oDrag2 = document.get<span class="constructor">ElementById(&#x27;<span class="params">drag2</span>&#x27;)</span>,</span><br><span class="line">    oWrapper = document.get<span class="constructor">ElementsByClassName(&#x27;<span class="params">wrapper</span>&#x27;)</span><span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">var child = oWrapper.childNodes;</span><br><span class="line">oDrag1.add<span class="constructor">EventListener(&#x27;<span class="params">dragstart</span>&#x27;,<span class="params">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//设置 数据</span></span><br><span class="line">    e.dataTransfer.set<span class="constructor">Data(&#x27;<span class="params">data</span>&#x27;,<span class="params">this</span>.<span class="params">id</span>)</span>;</span><br><span class="line">&#125;)</span><br><span class="line">oDrag2.add<span class="constructor">EventListener(&#x27;<span class="params">dragstart</span>&#x27;,<span class="params">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.dataTransfer.set<span class="constructor">Data(&#x27;<span class="params">data</span>&#x27;,<span class="params">this</span>.<span class="params">id</span>)</span>;</span><br><span class="line">&#125;)</span><br><span class="line">oWrapper.add<span class="constructor">EventListener(&#x27;<span class="params">dragenter</span>&#x27;,<span class="params">function</span>()</span>&#123;</span><br><span class="line">    <span class="comment">//删除文本节点&#x27;放置框&#x27;</span></span><br><span class="line">    <span class="keyword">for</span>(var i = <span class="number">0</span>; i &lt; child.length; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(child<span class="literal">[<span class="identifier">i</span>]</span>.nodeType<span class="operator"> === </span><span class="number">3</span>)&#123;</span><br><span class="line">            console.log(child<span class="literal">[<span class="identifier">i</span>]</span>);</span><br><span class="line">            oWrapper.remove<span class="constructor">Child(<span class="params">child</span>[<span class="params">i</span>])</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">oWrapper.add<span class="constructor">EventListener(&#x27;<span class="params">dragover</span>&#x27;,<span class="params">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//触发 drop 事件必须先在 dragover 里面取消默认事件</span></span><br><span class="line">    e.prevent<span class="constructor">Default()</span>;</span><br><span class="line">&#125;)</span><br><span class="line">oWrapper.add<span class="constructor">EventListener(&#x27;<span class="params">drop</span>&#x27;,<span class="params">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(e.dataTransfer);</span></span><br><span class="line">    <span class="comment">//获取 数据</span></span><br><span class="line">    var data = e.dataTransfer.get<span class="constructor">Data(&#x27;<span class="params">data</span>&#x27;)</span>;</span><br><span class="line">    oWrapper.append<span class="constructor">Child(<span class="params">document</span>.<span class="params">getElementById</span>(<span class="params">data</span>)</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-实战—拖住排序加拖拽删除"><a href="#2-实战—拖住排序加拖拽删除" class="headerlink" title="2.实战—拖住排序加拖拽删除"></a>2.实战—拖住排序加拖拽删除</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>垃圾桶<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">    oBox = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">    oLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>),</span><br><span class="line">    len = oLi.length;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindLiEvent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++)&#123;</span><br><span class="line">        oLi[i].addEventListener(<span class="string">&#x27;dragstart&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> index = getIndex(<span class="built_in">this</span>);</span><br><span class="line">            e.dataTransfer.setData(<span class="string">&#x27;data&#x27;</span>, index);</span><br><span class="line">        &#125;);</span><br><span class="line">        oLi[i].addEventListener(<span class="string">&#x27;dragover&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;);</span><br><span class="line">        oLi[i].addEventListener(<span class="string">&#x27;drop&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> i = e.dataTransfer.getData(<span class="string">&#x27;data&#x27;</span>);</span><br><span class="line">            oUl.insertBefore(oLi[i], <span class="built_in">this</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取列表最新的索引值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIndex</span>(<span class="params">dom</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(oLi[i] === dom)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeLi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    oBox.addEventListener(<span class="string">&#x27;dragover&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;)</span><br><span class="line">    oBox.addEventListener(<span class="string">&#x27;drop&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">var</span> index = e.dataTransfer.getData(<span class="string">&#x27;data&#x27;</span>);</span><br><span class="line">        oLi[index].remove();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">bindLiEvent();</span><br><span class="line">removeLi ();</span><br></pre></td></tr></table></figure>

<h3 id="dataTransfer-有常用的属性"><a href="#dataTransfer-有常用的属性" class="headerlink" title="dataTransfer 有常用的属性:"></a>dataTransfer 有常用的属性:</h3><pre><code>  方法    含义
  setData    设置字符串，并设置数据类型
  getData    获取对应数据类型的字符串

  （2）属性

  在 dataTransfer对象 上还有两个比较常用的属性，如下表所示
  属性    含义
  dropEffect    被拖放元素的放置行为
  effectAllowed    目标元素支持的放置行为

  首先说一下，这个两个属性需要搭配使用，它们决定了被拖放元素 和 目标元素 之间的关系的，当设定好两者的关系后，在进行拖动操作的时候，鼠标会根据不同的关系显示不同的样式，除此之外，没有别的特别的作用。
  dropEffect 可以设置以下几个属性
  值    含义
  none    默认值。不能把拖动的元素放在这里
  move    应该把拖动的元素移动到该目标元素
  copy    应该把拖动元素复制到该目标元素
  link    表示目标元素会打开被拖放进来的元素对应的链接
  【注意】：dropEffect 属性必须在 dragenter事件 中设置，否则无效
  effectAllowed 可以设置以下几个属性
  值    含义
  uninitialized    被拖放元素没有设置放置性为
  none    被拖放元素不能有放置性为
  copy    只允许值为 &#39;copy&#39; 的 dropEffect 目标元素
  link    只允许值为 &#39;link&#39; 的 dropEffect 目标元素
  move    只允许值为 &#39;move&#39; 的 dropEffect 目标元素
  copyLink    只允许值为 &#39;copy&#39; 和 &#39;link&#39; 的 dropEffect 目标元素
  copymove    只允许值为 &#39;copy&#39; 和 &#39;move&#39; 的 dropEffect 目标元素
  linkMove    只允许值为 &#39;link&#39; 和 &#39;move&#39; 的 dropEffect 目标元素
  all    只允许任意值的 dropEffect 目标元素
  【注意】：effectAllowed 属性必须在 dragstart事件 中设置，否则无效
  上面也说了，这两个属性基本上只是用来改变鼠标样式的，所以如果想实现特定的功能还得我们自己来重写事件的处理函数。
  下面来看一个拖放实例：
  需求： 将一段文本拖放到一个元素中
  因为文本是默认支持的拖放元素，所以我们可以不对其做任何的事件绑定。
</code></pre>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.location</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是一段测试文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;location&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> located = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.location&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      located.addEventListener(<span class="string">&#x27;dragenter&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        e.dataTransfer.dropEffect = <span class="string">&#x27;copy&#x27;</span></span></span><br><span class="line"><span class="javascript">        e.preventDefault()</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">      located.addEventListener(<span class="string">&#x27;dragover&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        e.preventDefault()</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">      located.addEventListener(<span class="string">&#x27;drop&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        e.target.innerHTML = e.dataTransfer.getData(<span class="string">&#x27;text/plain&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>html5</tag>
        <tag>drag</tag>
        <tag>拖拽</tag>
      </tags>
  </entry>
  <entry>
    <title>TS-基础看这就够了</title>
    <url>/20210722/80-TS-%E5%9F%BA%E7%A1%80%E7%9C%8B%E8%BF%99%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="typescirpt"><a href="#typescirpt" class="headerlink" title="typescirpt"></a>typescirpt</h1><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><pre><code>  let name: string = &quot;zhangsan&quot;

  let age: number = 18

  let empty: boolean = true
</code></pre>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><pre><code>  let likes: string[] = [&#39;php&#39;, &#39;js&#39;, &#39;html&#39;]
  let nums: any[] = [1, &quot;2&quot;]
</code></pre>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><pre><code>  let love: [string, number, boolean] = [&#39;zhangsna&#39;, 18, true];
</code></pre>
<h3 id="总结：大多数情况下，都可以实现类型推断，简单的不需要写类型"><a href="#总结：大多数情况下，都可以实现类型推断，简单的不需要写类型" class="headerlink" title="总结：大多数情况下，都可以实现类型推断，简单的不需要写类型"></a>总结：大多数情况下，都可以实现类型推断，简单的不需要写类型</h3><pre><code>  let name1 = &quot;zhangsna&quot;   //可以推断出来是string
</code></pre>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><pre><code>  type GreetFunction = (a: string) =&gt; void;
  function greeter(fn: GreetFunction) &#123;
    // ...
  &#125;

  function sum(n1: number, n2: number): number &#123;
    return n1 + n2
  &#125;

  sum(1, 3)
  //函数表达式()=&gt; 注意这是函数的类型声明 不是es6的箭头函数
  const sum1: (n1: number, n2: number) =&gt; number = (n1, n2) =&gt; &#123;
    return n1 + n2
  &#125;

  sum1(2, 3)



  function greeter(fn: (a: string) =&gt; void) &#123;
    fn(&quot;Hello, World&quot;);
  &#125;

  function printToConsole(s: string) &#123;
    console.log(s);
  &#125;

  greeter(printToConsole);

  type GreetFunction = (a: string) =&gt; void;
  function greeter(fn: GreetFunction) &#123;
    // ...
  &#125;
</code></pre>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><blockquote>
<p>自动推断上下文类型</p>
</blockquote>
<pre><code>  const names = [&#39;php&#39;, &#39;java&#39;, &#39;go&#39;];

  names.forEach(function (s) &#123;
    s.toUpperCase()
  &#125;);

  names.forEach((s) =&gt; &#123;
    s.toUpperCase()
  &#125;)


  
</code></pre>
<h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><pre><code>  function printCoord(pt: &#123; x: number; y: number &#125;) &#123;
    console.log(pt.x, pt.y);

  &#125;

  printCoord(&#123; x: 1, y: 2 &#125;)
</code></pre>
<h2 id="可选类型-与undefined-判断"><a href="#可选类型-与undefined-判断" class="headerlink" title="可选类型 与undefined 判断"></a>可选类型 与undefined 判断</h2><pre><code>  function printName(obj: &#123; first: string; last?: string &#125;) &#123;

    console.log(obj.first.toUpperCase());

    //因为last是可选属性，所以需要判断下是否是undefined
    if (obj.last !== undefined) &#123;
      console.log(obj.last.toUpperCase());

    &#125;

  &#125;

  printName(&#123; first: &#39;li&#39; &#125;)
  printName(&#123; first: &#39;zhang&#39;, last: &#39;lisi&#39; &#125;)
</code></pre>
<h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><pre><code>  function printId(id: number | string) &#123;
    console.log(id);
    //可以用typeof判断类型
    if (typeof id === &quot;string&quot;) &#123;
      console.log(id.toUpperCase());
    &#125;

  &#125;

  printId(1)
  printId(&quot;2&quot;)
</code></pre>
<h2 id="typeof类型"><a href="#typeof类型" class="headerlink" title="typeof类型"></a>typeof类型</h2><ul>
<li>“string”</li>
<li>“number”</li>
<li>“bigint”</li>
<li>“boolean”</li>
<li>“symbol”</li>
<li>“undefined”</li>
<li>“object”</li>
<li>“function”</li>
</ul>
<h2 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h2><pre><code>  function welcomePeople(x: string[] | string) &#123;
    if (Array.isArray(x)) &#123;
      console.log(&quot;hello&quot; + x.join(&#39; and &#39;));

    &#125; else &#123;
      console.log(&quot;welcome&quot; + x);

    &#125;

  &#125;
</code></pre>
<h2 id="类型别名-type"><a href="#类型别名-type" class="headerlink" title="类型别名 type"></a>类型别名 type</h2><pre><code>  type Point = &#123;
    x: number,
    y: number
  &#125;
  function printCoord1(pt: Point) &#123;
    console.log(pt.x, pt.y);

  &#125;
  printCoord1(&#123; x: 1, y: 2 &#125;)

  //类型别名 联合类型
  type ID = number | string
</code></pre>
<h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><pre><code>  interface point &#123;
    x: number,
    y: number
  &#125;

  function printCoord2(pt: Point) &#123;
    console.log(pt.x);
    console.log(pt.y);
  &#125;

  printCoord2(&#123; x: 100, y: 100 &#125;);
</code></pre>
<p>类型别名和接口之间的差异</p>
<p>类型别名和接口非常相似，在很多情况下你可以自由选择它们。几乎所有的功能都在interface中可用type，关键区别在于不能重新打开类型以添加​​新属性与始终可扩展的接口。</p>
<h2 id="type-和interface区别"><a href="#type-和interface区别" class="headerlink" title="type 和interface区别"></a>type 和interface区别</h2><h3 id="interface-扩展接口"><a href="#interface-扩展接口" class="headerlink" title="interface 扩展接口"></a>interface 扩展接口</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="symbol">Animal</span> &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="symbol">Bear</span> <span class="symbol">extends</span> <span class="symbol">Animal</span> &#123;</span><br><span class="line">  honey: <span class="built_in">bool</span>ean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bear = getBear() </span><br><span class="line">bear.name</span><br><span class="line">bear.honey</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="type-扩展接口"><a href="#type-扩展接口" class="headerlink" title="type 扩展接口"></a>type 扩展接口</h3><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Animal</span> = &#123;</span></span><br><span class="line"><span class="class">  <span class="title">name</span>: <span class="title">string</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Bear</span> = <span class="type">Animal</span> &amp; &#123; </span></span><br><span class="line"><span class="class">  <span class="title">honey</span>: <span class="title">boolean</span> </span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="title">const</span> bear = getBear();</span><br><span class="line"><span class="title">bear</span>.name;</span><br><span class="line"><span class="title">bear</span>.honey;</span><br></pre></td></tr></table></figure>

<h3 id="interface添加新字段"><a href="#interface添加新字段" class="headerlink" title="interface添加新字段"></a>interface添加新字段</h3><figure class="highlight capnproto"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Window</span> </span>&#123;</span><br><span class="line">  title: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Window</span> </span>&#123;</span><br><span class="line">  ts: TypeScriptAPI</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> src = &#x27;<span class="keyword">const</span> a = <span class="string">&quot;Hello World&quot;</span>&#x27;;</span><br><span class="line">window.ts.transpileModule(src, &#123;&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="type-创建后不可以修改"><a href="#type-创建后不可以修改" class="headerlink" title="type 创建后不可以修改"></a>type 创建后不可以修改</h3><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Window</span> = &#123;</span></span><br><span class="line"><span class="class">  <span class="title">title</span>: <span class="title">string</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Window</span> = &#123;</span></span><br><span class="line"><span class="class">  <span class="title">ts</span>: <span class="type">TypeScriptAPI</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"></span><br><span class="line"> // <span class="type">Error</span>: <span class="type">Duplicate</span> identifier &#x27;<span class="type">Window&#x27;</span>.</span><br></pre></td></tr></table></figure>

<h2 id="类型断言-as-或者-lt-gt"><a href="#类型断言-as-或者-lt-gt" class="headerlink" title="类型断言 as 或者&lt;&gt;"></a>类型断言 as 或者&lt;&gt;</h2><h3 id="as"><a href="#as" class="headerlink" title="as"></a>as</h3><pre><code>  const myDom = document.getElementByid(&#39;app&#39;) as HTMLElement;

  const a = &quot;hello&quot; as any
  const a = (expr as any) as T;
</code></pre>
<h3 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;&gt;"></a>&lt;&gt;</h3><blockquote>
<p>注意，在jsx中&lt;&gt;可能冲突，所以推荐as语法</p>
</blockquote>
<pre><code>  const myDom&lt;HTMLelement&gt; = document.getElementByid(&#39;app&#39;);
</code></pre>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p><a href="https://blog.wy1991.cn/20210701/28-TS-%E6%B3%9B%E5%9E%8B-%E7%89%9B%E5%88%80%E5%88%9D%E8%AF%95/">泛型看这</a></p>
<h2 id="never用处"><a href="#never用处" class="headerlink" title="never用处"></a>never用处</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svMi9uYXJyb3dpbmcuaHRtbA==">文档出处<i class="fa fa-external-link-alt"></i></span></p>
<blockquote>
<p>返回never的函数必须存在无法达到的终点</p>
</blockquote>
<p>举例：</p>
<pre><code>  interface Foo &#123;
    type: &#39;foo&#39;
  &#125;

  interface Bar &#123;
    type: &#39;bar&#39;
  &#125;

  type All = Foo | Bar
</code></pre>
<p>在 switch 当中判断 type，TS 是可以收窄类型的 (discriminated union)：</p>
<pre><code>  function handleValue(val: All) &#123;
    switch (val.type) &#123;
      case &#39;foo&#39;:
        // 这里 val 被收窄为 Foo
        break
      case &#39;bar&#39;:
        // val 在这里是 Bar
        break
      default:
        // val 在这里是 never
        const exhaustiveCheck: never = val
        break
    &#125;
  &#125;
</code></pre>
<p> 注意在 default 里面我们把被收窄为 never 的 val 赋值给一个显式声明为 never 的变量。如果一切逻辑正确，那么这里应该能够编译通过。但是假如后来有一天你的同事改了 All 的类型：</p>
<p> type All = Foo | Bar | Baz</p>
<p> 然而他忘记了在 handleValue 里面加上针对 Baz 的处理逻辑，这个时候在 default branch 里面 val 会被收窄为 Baz，导致无法赋值给 never，产生一个编译错误。所以通过这个办法，你可以确保 handleValue 总是穷尽 (exhaust) 了所有 All 的可能类型。</p>
<h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><blockquote>
<p>注意，没有函数体~</p>
</blockquote>
<pre><code>  function markDate(timestrap: number): Date;

  function markDate(m: number, d: number, y: number): Date;
  function markDate(mOrTimestrap: number, d?: number, y?: number): Date &#123;
    if (d !== undefined &amp;&amp; y !== undefined) &#123;
      return new Date(y, mOrTimestrap, d)
    &#125; else &#123;
      return new Date(mOrTimestrap)
    &#125;
  &#125;


  let timestrap = new Date().getTime()
  console.log(markDate(timestrap));  //function markDate(timestrap: number): Date (+1 overload)
  console.log(markDate(5, 5, 5));    //function markDate(m: number, d: number, y: number): Date (+1 overload)



  function fn1(x: string): string;
  // Return type isn&#39;t right
  function fn1(x: number): string | number;

  function fn1(x: string | number) &#123;
    return &quot;oops&quot;;
  &#125;
  fn1(&#39;1&#39;)
  fn1(2)
</code></pre>
<h2 id="索引签名"><a href="#索引签名" class="headerlink" title="索引签名"></a>索引签名</h2><blockquote>
<p>有些时候并不知道类型属性的名称</p>
</blockquote>
<pre><code>  interface StringArray &#123;
    [index:number]:string
  &#125;
  const myArray:StringArray = getStringArray();
  const secondItem = myArray[1]
</code></pre>
<h2 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h2><blockquote>
<p>使用readonly修饰符并不一定意味着一个值是完全不可变的——或者换句话说，它的内部内容不能改变。这只是意味着属性本身不能被重写。</p>
</blockquote>
<p>通俗的讲，对象的属性可以修改，但是不能直接重新赋值整个对象</p>
<pre><code>  interface Home &#123;
    readonly resident: &#123; name: string, age: number &#125;
  &#125;

  function changeHome(home: Home) &#123;
    home.resident.name = &#39;123&#39;
  &#125;
  //下面是不可以的
  function changeHome1(home: Home) &#123;
    home.resident = &#123;
      name: &#39;ddd&#39;,
      age: &#39;222&#39;
    &#125;
  &#125;
</code></pre>
<h2 id="接口继承-interface-extends"><a href="#接口继承-interface-extends" class="headerlink" title="接口继承 interface extends"></a>接口继承 interface extends</h2><blockquote>
<p>某些情况下，接口有才重复的类型，可以利用继承少些点属性，可以继承多个</p>
</blockquote>
<pre><code>  interface BasicAddress &#123;
    name: string,
    city: string,
    phone: number
  &#125;

  interface newAddress extends BasicAddress &#123;
    unit: string
  &#125;


  const add = (address: newAddress) =&gt; &#123;
    console.log(address);

  &#125;


  add(&#123; name: &#39;sss&#39;, city: &#39;zhongguo&#39;, phone: 111, unit: &#39;sss&#39; &#125;)
</code></pre>
<h2 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h2><blockquote>
<p>keyof运算符采用对象类型并生成其键的字符串或数字文字联合：<br>通俗的讲，获取下标生成类型</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">type Point = &#123; <span class="attr">x</span>: number, <span class="attr">y</span>: string &#125;</span><br><span class="line"></span><br><span class="line">type P = keyof Point</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> val1: P = <span class="string">&quot;y&quot;</span></span><br><span class="line"></span><br><span class="line">interface Point1 &#123;</span><br><span class="line">  <span class="attr">name</span>: string,</span><br><span class="line">  <span class="attr">num</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type P1 = keyof Point1</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> val2: P1 = <span class="string">&quot;name&quot;</span>    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">type Person = &#123; <span class="attr">age</span>: number; name: string; alive: boolean &#125;;</span><br><span class="line">type Age = Person[<span class="string">&quot;age&quot;</span>];          <span class="comment">//type Age = number</span></span><br><span class="line">type I1 = Person[<span class="string">&quot;age&quot;</span> | <span class="string">&quot;name&quot;</span>]; <span class="comment">//type I1 = string | number</span></span><br><span class="line">type I2 = Person[keyof Person];   <span class="comment">//type I2 = string | number | boolean</span></span><br><span class="line"></span><br><span class="line">type AliveOrName = <span class="string">&quot;alive&quot;</span> | <span class="string">&quot;name&quot;</span>;</span><br><span class="line">type I3 = Person[AliveOrName];     <span class="comment">//type I3 = string | boolean</span></span><br></pre></td></tr></table></figure>


<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p> <span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svMi9jbGFzc2VzLmh0bWw=">官网文档<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">readonly</span> id: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> boyfriend: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">  age!: <span class="built_in">number</span>;  <span class="comment">//如果不断言（！）则必须指定默认值或者在constructor中赋值</span></span><br><span class="line">  <span class="keyword">static</span> classType: <span class="built_in">string</span> = <span class="string">&quot;人类&quot;</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">id: <span class="built_in">number</span>, name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">userName</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;获取name了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">userName</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;重新赋值name了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>: &quot;hello&quot;`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">sayGoodBye</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;good bye&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="number">999</span>, <span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person.userName);</span><br><span class="line"><span class="built_in">console</span>.log(person.id);</span><br><span class="line">person.sayHello()</span><br><span class="line">Person.sayGoodBye()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xiaoli</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">id: <span class="built_in">number</span>, name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(id, name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意这里，toFiexd后变成字符串，不能直接传承number 必须要先到any</span></span><br><span class="line"><span class="keyword">let</span> lx = <span class="keyword">new</span> xiaoli((<span class="built_in">Math</span>.random() * <span class="number">100</span>).toFixed(<span class="number">0</span>) <span class="keyword">as</span> <span class="built_in">any</span> <span class="keyword">as</span> <span class="built_in">number</span>, <span class="string">&#x27;小丽&#x27;</span>)</span><br><span class="line">lx.sayHello()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(xiaoli.classType);</span><br><span class="line"></span><br><span class="line">lx.userName = <span class="string">&quot;测试员小张&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lx.userName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thing</span> </span>&#123;</span><br><span class="line">  <span class="attr">private</span>: <span class="built_in">string</span> = <span class="string">&quot;names&quot;</span></span><br><span class="line">  <span class="attr">_size</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._size = <span class="number">222</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">size</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._size</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">size</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> num = <span class="built_in">Number</span>(value)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Number</span>.isFinite(num)) &#123;</span><br><span class="line">      <span class="built_in">this</span>._size = <span class="number">0</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>._size = num</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> Thing()</span><br><span class="line">t.size = <span class="number">99</span></span><br><span class="line"><span class="built_in">console</span>.log(t.size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> calcFunc &#123;</span><br><span class="line">  (num1: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span>, calcFunc: calcFunc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> calcFunc(num1, num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum1 = calc(<span class="number">2</span>, <span class="number">3</span>, <span class="function"><span class="keyword">function</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum1);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h3><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Pingable</span> </span>&#123;</span><br><span class="line">  ping(): <span class="type">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Pingable</span></span> </span>&#123;</span><br><span class="line">  ping() &#123;</span><br><span class="line">    console.log(<span class="string">&quot;ping&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下类有问题，没有实现接口的ping</span></span><br><span class="line"><span class="comment">//@ts-ignore </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball1</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Pingable</span></span> </span>&#123;</span><br><span class="line">  pong() &#123;</span><br><span class="line">    console.log(<span class="string">&quot;pong&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="enum-枚举"><a href="#enum-枚举" class="headerlink" title="enum 枚举"></a>enum 枚举</h2><blockquote>
<p>使用枚举，可以定义一些带名字的常量。用于清晰地表达意图或创建一组有区别的用例。</p>
</blockquote>
<pre><code>  //数字类型枚举：默认情况下，第一个枚举值是0，后续至依次增1
  enum Direction &#123;
    LEFT,
    RIGHT,
    TOP,
    BOTTOM
  &#125;

  function controlDirecton(direction: Direction) &#123;
    switch (direction) &#123;
      case Direction.LEFT:
        console.log(&quot;left&quot;);

        break;
      case Direction.BOTTOM:
        console.log(&quot;bottom&quot;);
        break;
      case Direction.RIGHT:
        console.log(&quot;right&quot;);
        break;
      case Direction.TOP:
        console.log(&quot;top&quot;);
        break;
      default:
        let direc: never = direction
        break;
    &#125;
  &#125;

  controlDirecton(Direction.TOP)


  字符串枚举：

  enum ProName &#123;
      SUCCESS = &#39;ok&#39;,
      ERROR = &#39;error&#39;
  &#125;

  alert(ProName.ERROR);
  // &quot;error&quot;
</code></pre>
<h2 id="类的泛型"><a href="#类的泛型" class="headerlink" title="类的泛型"></a>类的泛型</h2><pre><code>  class Point11&lt;T&gt;&#123;
    n1: T;
    n2: T
    constructor(n1: T, n2: T) &#123;
      this.n1 = n1
      this.n2 = n2
    &#125;
  &#125;

  new Point11&lt;string&gt;(&#39;12&#39;, &#39;22&#39;)


  let p = new Point11(2, 3)

  let p: Point11&lt;string&gt; = new Point11(&#39;2&#39;, &#39;3&#39;)
</code></pre>
<h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><pre><code>  function getLength&lt;T extends &#123; length: number &#125;&gt;(args: T) &#123;
    console.log(args.length);

  &#125;

  getLength(&#39;123&#39;)
  // getLength(123) number没有length
  getLength([2, 3,])
  getLength(&#123; name: &quot;a&quot;, length: 1 &#125;)
</code></pre>
<h2 id="声明文件-d-ts"><a href="#声明文件-d-ts" class="headerlink" title="声明文件 .d.ts"></a>声明文件 .d.ts</h2><blockquote>
<p>例如: index.t.ts  axios.d.ts</p>
</blockquote>
<h3 id="声明模块"><a href="#声明模块" class="headerlink" title="声明模块"></a>声明模块</h3><pre><code>  declare module &#39;loadsh&#39; &#123;
    export function join(params: any[]): void
  &#125;
</code></pre>
<h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><pre><code>  declare let Token: string
  declare let userName: string
</code></pre>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><pre><code>  declare function check(): void
</code></pre>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><pre><code>  declare class Person &#123;
    name: string
    age: number
    constructor(name: string, age: number)
  &#125;
</code></pre>
<h3 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h3><pre><code>  declare module &#39;*.jpg&#39;
  declare module &#39;*.jpeg&#39;
  declare module &#39;*.mp3&#39;
  declare module &#39;*.json&#39;
  declare module &#39;*.text&#39;
</code></pre>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><pre><code>  declare namespace $ &#123;
    export function ajax(params: any): any
  &#125;
</code></pre>
]]></content>
      <categories>
        <category>TS</category>
      </categories>
      <tags>
        <tag>TS</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员们，还在挣扎着上不了github吗</title>
    <url>/20210724/81-%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BB%AC%EF%BC%8C%E8%BF%98%E5%9C%A8%E6%8C%A3%E6%89%8E%E7%9D%80%E4%B8%8A%E4%B8%8D%E4%BA%86github%E5%90%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="程序员们，还在挣扎着上不了github吗"><a href="#程序员们，还在挣扎着上不了github吗" class="headerlink" title="程序员们，还在挣扎着上不了github吗"></a>程序员们，还在挣扎着上不了github吗</h2><blockquote>
<p>无兄弟，不篮球；无github，不代码。github和stackoverflow是程序员们的最爱，哪怕是github总是在抽疯，虐了程序员们千百遍，但他们还是想各种办法艰难地在github分享他们优秀的代码，进行pull push操作,下面分享程序员小Code的故事。</p>
</blockquote>
<h2 id="小Code发明了hosts大法"><a href="#小Code发明了hosts大法" class="headerlink" title="小Code发明了hosts大法"></a>小Code发明了hosts大法</h2><p>小Code是学习能力很强的同学，他通过网上搜索github抽疯缘由，得到的结论是dns解析的github时，返回了不理想的ip甚至是假ip，所以他决定用靠谱的平台来检索github的ip，然后写入hosts文件。</p>
<pre><code>  140.82.114.3    github.com
  185.199.109.153    assets-cdn.github.com
  185.199.110.153    documentcloud.github.com
  140.82.114.4    gist.github.com
  185.199.110.133    gist.githubusercontent.com
  185.199.108.154    github.githubassets.com
  185.199.111.154    help.github.com
  140.82.113.9    nodeload.github.com
  185.199.109.133    raw.github.com
  140.82.114.17    status.github.com
  185.199.108.153    training.github.com
  140.82.113.10    codeload.github.com
</code></pre>
<p>小Code发现这样子之后，感觉改善了一些，还来不及沉浸在喜悦中，他将自己的hosts文件分享给了千千万万个需要的其他程序员同伴，于是他的hosts大法成为了普及率最高的办法。</p>
<h2 id="小Code杀死了hosts大法"><a href="#小Code杀死了hosts大法" class="headerlink" title="小Code杀死了hosts大法"></a>小Code杀死了hosts大法</h2><p>小code发现，hosts文件里面的ip要经常更新，有时一天不更新，第二天就不能用了。更可怕的发现是，明明他用的hosts是可以的，可其他同伴用了他的成果之后，反馈说没有效果，每天都有无数个同伴，质问小code，你的大法不行啊！！小code一直觉得不可思议，为什么一样的配置就不行。直到有一天，小code出差了，来到了某省的某个酒店，小code拿出他心爱的笔记本电脑，准备打开每天都要上的github，这时小code傻眼了，浏览器小转圈圈，然后显示“连接已重置”，无论小Code怎么挣扎，还是无法上github。</p>
<p>小Code来不及多想，他觉得他的发明不不但没有解决千千万万个同伴的问题，而且带了深深的互相伤害，于是他决定放弃hosts大法。可难的是，还有是有很多在网上搜索到了他的hosts大法，继续被伤害的路上。</p>
<h2 id="小Code发明了镜像大法"><a href="#小Code发明了镜像大法" class="headerlink" title="小Code发明了镜像大法"></a>小Code发明了镜像大法</h2><p>出来回来之后，小Code不吃不喝，寻找新的解决方案。小Code远程到在某省的一个朋友电脑，使用浏览器f12来分析github访问资源的加载情况，最后总结到：github.com这个域名一般能访问，虽然偶尔中断那么几分钟；而github的css、js、用户头像、releases下的附件，都无法加载。于是小Code定使用github镜像网站，来给替代github的资源的下传，为此小Code开发了浏览器插件，当github不抽疯的那些时间缝隙里，让用户可以刷新github，然后他的插件修改github页面，多显示了一个“加速Pull”的按钮，点击这个按钮，就是用镜像网站来拉取。</p>
<p>小Code明白，他的这套发明，只能解决一点点问题，解决了下传，但像小Code这种牛逼程序员，更多的时候，是把自己牛逼的代码分享给别人，还不是在享用别人的代码。但他自己的发明，却不能解决自己遇到的问题，庆幸的是小Code工作地，还能push代码到github，还不然他的这个镜像大法浏览器插件的代码，都不知道怎么提交到github了。</p>
<h2 id="小Code请大Code帮忙"><a href="#小Code请大Code帮忙" class="headerlink" title="小Code请大Code帮忙"></a>小Code请大Code帮忙</h2><p>小Code想到了他的师傅大Code，师傅多年一直在网络编程里耕耘，说不定他有好办法。大Code决定为小Code写一个工具，解决小Code和千千万万个同伴的问题，同时把代码分享，让小Code来学习和提高水平。</p>
<p>大Code使用PostMan和Wireshark两个工具结合，开始忙碌的分析了数据，从DNS解析数据包开始，到TCP握手，到TLS握手，他发现了两个主要问题：DNS响应问题和TLS握手问题。问题找到后，他点了一支烟，抽完接着又点了半支，这是他准备要露手的前奏。</p>
<h2 id="大Code祭出了他的工具"><a href="#大Code祭出了他的工具" class="headerlink" title="大Code祭出了他的工具"></a>大Code祭出了他的工具</h2><p>大Code不喜欢吹牛，也不喜欢讨论非技术问题。只知道他的工具，100%解决小Code的问题，把他的工具分享了出来，下面是他的工具一些介绍：</p>
<h2 id="加速原理"><a href="#加速原理" class="headerlink" title="加速原理"></a>加速原理</h2><ul>
<li><p>修改本机的dns服务指向FastGithub自身</p>
</li>
<li><p>解析匹配的域名为FastGithub自身的ip</p>
</li>
<li><p>请求不受污染的dns服务(dnscrypt-proxy)获取域名的ip</p>
</li>
<li><p>使用得到的ip进行无或有SNI的https反向代理</p>
<h2 id="加速站点"><a href="#加速站点" class="headerlink" title="加速站点"></a>加速站点</h2><pre><code>github

github.com
githubstatus.com
*.github.com
*.github.io
*.githubapp.com
*.githubassets.com
*.githubusercontent.com
*github*.s3.amazonaws.com

stackoverflow
ajax.googleapis.com -&gt; gapis.geekzu.org/ajax
fonts.googleapis.com -&gt; fonts.geekzu.org
themes.googleusercontent.com -&gt; gapis.geekzu.org/g-themes
fonts.gstatic.com -&gt; gapis.geekzu.org/g-fonts
secure.gravatar.com -&gt; sdn.geekzu.org
*.gravatar.com -&gt; fdn.geekzu.org
i.stack.imgur.com =&gt; 404
lh*.googleusercontent.com =&gt; 404
www.google.com =&gt; 404
</code></pre>
</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2V3ZWkvcC8xNTA0Nzc1OS5odG1sP3V0bV9zb3VyY2U9Z29sZF9icm93c2VyX2V4dGVuc2lvbg==">来自CSDN<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>stackoverflow</tag>
        <tag>github</tag>
        <tag>host</tag>
      </tags>
  </entry>
  <entry>
    <title>分库分表的那些事</title>
    <url>/20210724/82-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="分库分表的那些事"><a href="#分库分表的那些事" class="headerlink" title="分库分表的那些事"></a>分库分表的那些事</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在互联网公司中，上至大厂，下到普通的公司企业，随着业务的发展，数据量的日积月累，对于数据库和表的设计和优化，显得尤为重要。其中关于分表分库的问题，在实际场景或者是面试中，亦是老生常谈。当我们明白了来龙去脉时，也就没那么复杂。</p>
<h2 id="为什么需要分库分表"><a href="#为什么需要分库分表" class="headerlink" title="为什么需要分库分表"></a>为什么需要分库分表</h2><p>最为直接便是机器性能的问题。性能的考虑都来源于数据量。当数据量大的时候，随着而来便是高性能，可拓展，稳定性。当是业务刚开始，数据量小，为了控制成本，单机器是足够用的。但是随着业务的发展。在单台机器中无论是CPU、IO等资源，都是极为有限的。正所谓人多势众，双拳难敌四手，都是围绕强调不要孤军作战。所以，分表分库，亦或是读写分离都是为了更好的提高性能，提供更为稳定的服务。对于分表分库。主要是围绕这垂直和水平的二种拆分相结合的方式。</p>
<h2 id="垂直拆分"><a href="#垂直拆分" class="headerlink" title="垂直拆分"></a>垂直拆分</h2><h3 id="1、库的垂直拆分："><a href="#1、库的垂直拆分：" class="headerlink" title="1、库的垂直拆分："></a>1、库的垂直拆分：</h3><p>库的垂直拆分主要是针对系统的一些数据量较为大的业务进行分解。如常见业务的：用户数据（注册，登录的信息等），商品信息，订单等等，这些相对而言数据量和读写次数都是较多的。最好是进行分库，部署在不同的机器上面，突破单机器的限制。</p>
<h3 id="2、表的垂直拆分："><a href="#2、表的垂直拆分：" class="headerlink" title="2、表的垂直拆分："></a>2、表的垂直拆分：</h3><p>也就是针对表的字段进行拆分，将一个大表拆分为多个小表，也就是数据库中的范式原则。也可以将字段按属性或使用频繁程度分类,拆分为多个表，比如一个主要的信息表和一个拓展信息表等等</p>
<p>只采用垂直拆分的话，依旧会存在单表数据量过大的问题。所以需要结合水平拆分的方法。</p>
<h2 id="水平拆分"><a href="#水平拆分" class="headerlink" title="水平拆分"></a>水平拆分</h2><h3 id="1、只水平分表"><a href="#1、只水平分表" class="headerlink" title="1、只水平分表"></a>1、只水平分表</h3><p>针对数据量巨大的单张表（比如用户表，订单表），按照某种规则（RANGE,HASH取模等），切分到多张表里面去，可以有效的解决了单一表数据量过大的问题。 但是这些表还是在同一个库中，所以库级别的数据库操作还是有IO瓶颈。例如：</p>
<p>原本一千万的user表数据，可以拆分为（user_1,user_2,user_3,user_4）这样的话，数据就分摊到不同的表中</p>
<h3 id="2、水平分库分表"><a href="#2、水平分库分表" class="headerlink" title="2、水平分库分表"></a>2、水平分库分表</h3><p>将单张表的数据切分到多个服务器上去，每个服务器具有相应的库与表，只是表中数据集合不同。 水平分库分表能够有效的缓解单机和单库的性能瓶颈和压力，突破IO、连接数、硬件资源等的瓶颈。但是随着而来的事务也就成了分布式事务了,联合查询的效率也会下降。</p>
<h2 id="常见水平分表拆分手段"><a href="#常见水平分表拆分手段" class="headerlink" title="常见水平分表拆分手段"></a>常见水平分表拆分手段</h2><ol>
<li>RANGE:从0到100一个表，101到200一个表；</li>
<li>HASH取模：用户注册的时候，可以根据用户的名称，会在用户的id 进行hash取模，分配到不同的表上</li>
<li>时间维度：比如用户的登录记录信息，可以安装年+月的结构分摊数据，如 login_202107、login_202103</li>
</ol>
<h2 id="分库分表产品"><a href="#分库分表产品" class="headerlink" title="分库分表产品"></a>分库分表产品</h2><p>如果不想自己实现分表分库的的问题，现在市场上也有一些比较成熟的产品可以使用，如360的（Atlas）、阿里的（TDDL）
 </p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>分库分表</tag>
      </tags>
  </entry>
  <entry>
    <title>package最全解析</title>
    <url>/20210726/83-package%E6%9C%80%E5%85%A8%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你真的了解package.json吗？来看看吧，这可能是最全的package解析</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>从我们接触前端开始，每个项目的根目录下一般都会有一个package.json文件，这个文件定义了当前项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等）。<br>当运行npm install命令的时候，会根据package.json文件中的配置自动下载所需的模块，也就是配置项目所需的运行和开发环境。</p>
<p>比如下面这个文件，只存在简单的项目名称和版本号。</p>
<pre><code>  &#123;
    &quot;name&quot; : &quot;yindong&quot;,
    &quot;version&quot; : &quot;1.0.0&quot;,
  &#125;
</code></pre>
<p>package.json文件是一个JSON对象，这从他的后缀名.json就可以看出来，该对象的每一个成员就是当前项目的一项设置。比如name就是项目名称，version是版本号。</p>
<p>当然很多人其实并不关心package.json的配置，他们应用的更多的是dependencies或devDependencies配置。</p>
<p>下面是一个更完整的package.json文件，详细解释一下每个字段的真实含义。</p>
<pre><code>  &#123;
      &quot;name&quot;: &quot;yindong&quot;,
      &quot;version&quot;:&quot;0.0.1&quot;,
      &quot;description&quot;: &quot;antd-theme&quot;,
      &quot;keywords&quot;:[&quot;node.js&quot;,&quot;antd&quot;, &quot;theme&quot;],
      &quot;homepage&quot;: &quot;https://zhiqianduan.com&quot;,
      &quot;bugs&quot;:&#123;&quot;url&quot;:&quot;http://path/to/bug&quot;,&quot;email&quot;:&quot;yindong@xxxx.com&quot;&#125;,
      &quot;license&quot;: &quot;ISC&quot;,
      &quot;author&quot;: &quot;yindong&quot;,
      &quot;contributors&quot;:[&#123;&quot;name&quot;:&quot;yindong&quot;,&quot;email&quot;:&quot;yindong@xxxx.com&quot;&#125;],
      &quot;files&quot;: &quot;&quot;,
      &quot;main&quot;: &quot;./dist/default.js&quot;,
      &quot;bin&quot;: &quot;&quot;,
      &quot;man&quot;: &quot;&quot;,
      &quot;directories&quot;: &quot;&quot;,
      &quot;repository&quot;: &#123;
      &quot;type&quot;: &quot;git&quot;,
      &quot;url&quot;: &quot;https://path/to/url&quot;
    &#125;,
      &quot;scripts&quot;: &#123;
        &quot;start&quot;: &quot;webpack serve --config webpack.config.dev.js --progress&quot;
      &#125;,
      &quot;config&quot;: &#123; &quot;port&quot; : &quot;8080&quot; &#125;,
      &quot;dependencies&quot;: &#123;&#125;,
      &quot;devDependencies&quot;: &#123;
          &quot;@babel/core&quot;: &quot;^7.14.3&quot;,
          &quot;@babel/preset-env&quot;: &quot;^7.14.4&quot;,
          &quot;@babel/preset-react&quot;: &quot;^7.13.13&quot;,
          &quot;babel-loader&quot;: &quot;^8.2.2&quot;,
          &quot;babel-plugin-import&quot;: &quot;^1.13.3&quot;,
          &quot;glob&quot;: &quot;^7.1.7&quot;,
          &quot;less&quot;: &quot;^3.9.0&quot;,
          &quot;less-loader&quot;: &quot;^9.0.0&quot;,
          &quot;style-loader&quot;: &quot;^2.0.0&quot;,
          &quot;webpack&quot;: &quot;^5.38.1&quot;,
          &quot;webpack-cli&quot;: &quot;^4.7.0&quot;,
          &quot;webpack-dev-server&quot;: &quot;^3.11.2&quot;
      &#125;,
      &quot;peerDependencies&quot;: &#123;
          &quot;tea&quot;: &quot;2.x&quot;
      &#125;,
      &quot;bundledDependencies&quot;: [
          &quot;renderized&quot;, &quot;super-streams&quot;
      ],
      &quot;engines&quot;: &#123;&quot;node&quot;: &quot;0.10.x&quot;&#125;,
      &quot;os&quot; : [ &quot;win32&quot;, &quot;darwin&quot;, &quot;linux&quot; ],
      &quot;cpu&quot; : [ &quot;x64&quot;, &quot;ia32&quot; ],
      &quot;private&quot;: false,
      &quot;publishConfig&quot;: &#123;&#125;
    &#125;
    
</code></pre>
<h2 id="name字段"><a href="#name字段" class="headerlink" title="name字段"></a>name字段</h2><p>package.json文件中最重要的就是name和version字段，这两项是必填的。名称和版本一起构成一个标识符，该标识符被认为是完全唯一的。对包的更改应该与对版本的更改一起进行。<br>name必须小于等于214个字符，不能以.或_开头，不能有大写字母，因为名称最终成为URL的一部分因此不能包含任何非URL安全字符。</p>
<p>npm官方建议我们不要使用与核心节点模块相同的名称。不要在名称中加js或node。如果需要可以使用engines来指定运行环境。</p>
<p>该名称会作为参数传递给require，因此它应该是简短的，但也需要具有合理的描述性。</p>
<h2 id="version字段"><a href="#version字段" class="headerlink" title="version字段"></a>version字段</h2><p>version一般的格式是x.x.x, 并且需要遵循该规则。</p>
<p>package.json文件中最重要的就是name和version字段，这两项是必填的。名称和版本一起构成一个标识符，该标识符被认为是完全唯一的。每次发布时version不能与已存在的一致。</p>
<h2 id="description字段"><a href="#description字段" class="headerlink" title="description字段"></a>description字段</h2><p>description是一个字符串，用于编写描述信息。有助于人们在npm库中搜索的时候发现你的模块。</p>
<h2 id="keywords字段"><a href="#keywords字段" class="headerlink" title="keywords字段"></a>keywords字段</h2><p>keywords是一个字符串组成的数组，有助于人们在npm库中搜索的时候发现你的模块。</p>
<h2 id="homepage字段"><a href="#homepage字段" class="headerlink" title="homepage字段"></a>homepage字段</h2><p>homepage项目的主页地址。</p>
<h2 id="bugs字段"><a href="#bugs字段" class="headerlink" title="bugs字段"></a>bugs字段</h2><p>bugs用于项目问题的反馈issue地址或者一个邮箱。</p>
<pre><code>  &quot;bugs&quot;: &#123; 
    &quot;url&quot; : &quot;https://github.com/owner/project/issues&quot;,
    &quot;email&quot; : &quot;project@hostname.com&quot;
  &#125;
</code></pre>
<h2 id="license字段"><a href="#license字段" class="headerlink" title="license字段"></a>license字段</h2><p>license是当前项目的协议，让用户知道他们有何权限来使用你的模块，以及使用该模块有哪些限制。</p>
<pre><code>  &quot;license&quot; : &quot;BSD-3-Clause&quot;
</code></pre>
<h2 id="author字段-contributors字段"><a href="#author字段-contributors字段" class="headerlink" title="author字段 contributors字段"></a>author字段 contributors字段</h2><p>author是具体一个人，contributors表示一群人，他们都表示当前项目的共享者。同时每个人都是一个对象。具有name字段和可选的url及email字段。<br>      “author”: {<br>        “name” : “yindong”,<br>        “email” : “<span class="exturl" data-url="bWFpbHRvOiYjeDc5OyYjMTA1OyYjMTEwOyYjeDY0OyYjeDZmOyYjeDZlOyYjeDY3OyYjNjQ7JiMxMjA7JiN4Nzg7JiN4MmU7JiN4NjM7JiMxMTE7JiMxMDk7">&#x79;&#105;&#110;&#x64;&#x6f;&#x6e;&#x67;&#64;&#120;&#x78;&#x2e;&#x63;&#111;&#109;<i class="fa fa-external-link-alt"></i></span>“,<br>        “url” : “<span class="exturl" data-url="aHR0cHM6Ly96aGlxaWFuZHVhbi5jb20vJnF1b3Q7">https://zhiqianduan.com/&quot;<i class="fa fa-external-link-alt"></i></span><br>      }</p>
<p>也可以写成一个字符串<br>      “author”: “yindong <span class="exturl" data-url="bWFpbHRvOiYjMTIxOyYjeDY5OyYjMTEwOyYjeDY0OyYjeDZmOyYjeDZlOyYjeDY3OyYjeDQwOyYjMTIwOyYjMTIwOyYjeDJlOyYjOTk7JiMxMTE7JiMxMDk7">&#121;&#x69;&#110;&#x64;&#x6f;&#x6e;&#x67;&#x40;&#120;&#120;&#x2e;&#99;&#111;&#109;<i class="fa fa-external-link-alt"></i></span> (<span class="exturl" data-url="aHR0cHM6Ly96aGlxaWFuZHVhbi5jb20vKSZxdW90Ow==">https://zhiqianduan.com/)&quot;<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="files字段"><a href="#files字段" class="headerlink" title="files字段"></a>files字段</h2><p>files属性的值是一个数组，内容是模块下文件名或者文件夹名，如果是文件夹名，则文件夹下所有的文件也会被包含进来（除非文件被另一些配置排除了）</p>
<p>可以在模块根目录下创建一个.npmignore文件，写在这个文件里边的文件即便被写在files属性里边也会被排除在外，这个文件的写法与.gitignore类似。</p>
<h2 id="main字段"><a href="#main字段" class="headerlink" title="main字段"></a>main字段</h2><p>main字段指定了加载的入口文件，require导入的时候就会加载这个文件。这个字段的默认值是模块根目录下面的index.js。</p>
<h2 id="bin字段"><a href="#bin字段" class="headerlink" title="bin字段"></a>bin字段</h2><p>bin项用来指定每个内部命令对应的可执行文件的位置。如果你编写的是一个node工具的时候一定会用到bin字段。</p>
<p>当我们编写一个cli工具的时候，需要指定工具的运行命令，比如常用的webpack模块，他的运行命令就是webpack。</p>
<pre><code>  &quot;bin&quot;: &#123;
    &quot;webpack&quot;: &quot;bin/index.js&quot;,
  &#125;
</code></pre>
<p>当我们执行webpack命令的时候就会执行bin/index.js文件中的代码。</p>
<p>在模块以依赖的方式被安装，如果存在bin选项。在node_modules/.bin/生成对应的文件，<br>Npm会寻找这个文件，在node_modules/.bin/目录下建立符号链接。由于node_modules/.bin/目录会在运行时加入系统的PATH变量，因此在运行npm时，就可以不带路径，直接通过命令来调用这些脚本。</p>
<p>所有node_modules/.bin/目录下的命令，都可以用npm run [命令]的格式运行。在命令行下，键入npm run，然后按tab键，就会显示所有可以使用的命令。</p>
<h2 id="man字段"><a href="#man字段" class="headerlink" title="man字段"></a>man字段</h2><p>man用来指定当前模块的man文档的位置。</p>
<pre><code>  &quot;man&quot; :[ &quot;./doc/calc.1&quot; ]
</code></pre>
<h2 id="directories字段"><a href="#directories字段" class="headerlink" title="directories字段"></a>directories字段</h2><p>directories制定一些方法来描述模块的结构, 用于告诉用户每个目录在什么位置。</p>
<h2 id="repository字段"><a href="#repository字段" class="headerlink" title="repository字段"></a>repository字段</h2><p>指定一个代码存放地址，对想要为你的项目贡献代码的人有帮助</p>
<pre><code>  &quot;repository&quot; : &#123;
    &quot;type&quot; : &quot;git&quot;, 
    &quot;url&quot; : &quot;https://github.com/npm/npm.git&quot;
  &#125;
</code></pre>
<h2 id="scripts字段"><a href="#scripts字段" class="headerlink" title="scripts字段"></a>scripts字段</h2><p>scripts指定了运行脚本命令的npm命令行缩写，比如start指定了运行npm run start时，所要执行的命令。</p>
<pre><code>  &quot;scripts&quot;: &#123;
    &quot;start&quot;: &quot;node ./start.js&quot;
  &#125;
</code></pre>
<p>使用scripts字段可以快速的执行shell命令，可以理解为alias。</p>
<p>scripts可以直接使用node_modules中安装的模块，这区别于直接运行需要使用npx命令。</p>
<pre><code>  &quot;scripts&quot;: &#123;
    &quot;build&quot;: &quot;webpack&quot;
  &#125;

  // npm run build
  // npx webpack
</code></pre>
<h2 id="config字段"><a href="#config字段" class="headerlink" title="config字段"></a>config字段</h2><p>config字段用于添加命令行的环境变量。</p>
<pre><code>  &#123;
    &quot;name&quot; : &quot;yindong&quot;,
    &quot;config&quot; : &#123; &quot;port&quot; : &quot;8080&quot; &#125;,
    &quot;scripts&quot; : &#123; &quot;start&quot; : &quot;node server.js&quot; &#125;
  &#125;
</code></pre>
<p>然后，在server.js脚本就可以引用config字段的值。</p>
<pre><code>  console.log(process.env.npm_package_config_port); // 8080
</code></pre>
<p>用户可以通过npm config set来修改这个值。</p>
<pre><code>  npm config set yindong:port 8000
</code></pre>
<h2 id="dependencies字段-devDependencies字段"><a href="#dependencies字段-devDependencies字段" class="headerlink" title="dependencies字段, devDependencies字段"></a>dependencies字段, devDependencies字段</h2><p>dependencies字段指定了项目运行所依赖的模块，devDependencies指定项目开发所需要的模块。</p>
<p>它们的值都是一个对象。该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。</p>
<p>当安装依赖的时候使用–save参数表示将该模块写入dependencies属性，–save-dev表示将该模块写入devDependencies属性。</p>
<pre><code>  &quot;devDependencies&quot;: &#123;
          &quot;webpack&quot;: &quot;^5.38.1&quot;,
  &#125;
</code></pre>
<p>对象的每一项通过一个键值对表示，前面是模块名称，后面是对应模块的版本号。版本号遵循“大版本.次要版本.小版本”的格式规定。</p>
<p>版本说明</p>
<p>固定版本: 比如5.38.1，安装时只安装指定版本。</p>
<p>波浪号: 比如~5.38.1, 表示安装5.38.x的最新版本（不低于5.38.1），但是不安装5.39.x，也就是说安装时不改变大版本号和次要版本号。</p>
<p>插入号: 比如ˆ5.38.1, ，表示安装5.x.x的最新版本（不低于5.38.1），但是不安装6.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</p>
<p>latest: 安装最新版本。</p>
<h2 id="peerDependencies字段"><a href="#peerDependencies字段" class="headerlink" title="peerDependencies字段"></a>peerDependencies字段</h2><p>当我们开发一个模块的时候，如果当前模块与所依赖的模块同时依赖一个第三方模块，并且依赖的是两个不兼容的版本时就会出现问题。</p>
<p>比如，你的项目依赖A模块和B模块的1.0版，而A模块本身又依赖B模块的2.0版。</p>
<p>大多数情况下，这不构成问题，B模块的两个版本可以并存，同时运行。但是，有一种情况，会出现问题，就是这种依赖关系将暴露给用户。</p>
<p>最典型的场景就是插件，比如A模块是B模块的插件。用户安装的B模块是1.0版本，但是A插件只能和2.0版本的B模块一起使用。这时，用户要是将1.0版本的B的实例传给A，就会出现问题。因此，需要一种机制，在模板安装的时候提醒用户，如果A和B一起安装，那么B必须是2.0模块。</p>
<p>peerDependencies字段，就是用来供插件指定其所需要的主工具的版本。可以通过peerDependencies字段来限制，使用myless模块必须依赖less模块的3.9.x版本.</p>
<pre><code>  &#123;
    &quot;name&quot;: &quot;myless&quot;,
    &quot;peerDependencies&quot;: &#123;
      &quot;less&quot;: &quot;3.9.x&quot;
    &#125;
  &#125;
</code></pre>
<p>注意，从npm 3.0版开始，peerDependencies不再会默认安装了。<br>就是初始化的时候不会默认带出。</p>
<h2 id="bundledDependencies字段"><a href="#bundledDependencies字段" class="headerlink" title="bundledDependencies字段"></a>bundledDependencies字段</h2><p>bundledDependencies指定发布的时候会被一起打包的模块.</p>
<h2 id="optionalDependencies字段"><a href="#optionalDependencies字段" class="headerlink" title="optionalDependencies字段"></a>optionalDependencies字段</h2><p>如果一个依赖模块可以被使用， 同时你也希望在该模块找不到或无法获取时npm继续运行，你可以把这个模块依赖放到optionalDependencies配置中。</p>
<p>这个配置的写法和dependencies的写法一样，不同的是这里边写的模块安装失败不会导致npm install失败。</p>
<h2 id="engines字段"><a href="#engines字段" class="headerlink" title="engines字段"></a>engines字段</h2><p>engines字段指明了该模块运行的平台，比如Node或者npm的某个版本或者浏览器。</p>
<pre><code>  &#123; &quot;engines&quot; : &#123; &quot;node&quot; : &quot;&gt;=0.10.3 &lt;0.12&quot;, &quot;npm&quot; : &quot;~1.0.20&quot; &#125; &#125;
</code></pre>
<h2 id="os字段"><a href="#os字段" class="headerlink" title="os字段"></a>os字段</h2><p>可以指定你的模块只能在哪个操作系统上运行<br>      “os” : [ “darwin”, “linux”, “win32” ]</p>
<h2 id="cpu字段"><a href="#cpu字段" class="headerlink" title="cpu字段"></a>cpu字段</h2><p>限制模块只能在某种架构的cpu下运行<br>      “cpu” : [ “x64”, “ia32” ]</p>
<h2 id="private字段"><a href="#private字段" class="headerlink" title="private字段"></a>private字段</h2><p>如果这个属性被设置为true，npm将拒绝发布它，这是为了防止一个私有模块被无意间发布出去。<br>      “private”: true</p>
<h2 id="publishConfig字段"><a href="#publishConfig字段" class="headerlink" title="publishConfig字段"></a>publishConfig字段</h2><p>这个配置是会在模块发布时生效，用于设置发布用到的一些值的集合。如果你不想模块被默认标记为最新的，或者默认发布到公共仓库，可以在这里配置tag或仓库地址。</p>
<p>通常publishConfig会配合private来使用，如果你只想让模块被发布到一个特定的npm仓库，如一个内部的仓库。</p>
<pre><code>  &quot;private&quot;: true,
  &quot;publishConfig&quot;: &#123;
    &quot;tag&quot;: &quot;1.0.0&quot;,
    &quot;registry&quot;: &quot;https://registry.npmjs.org/&quot;,
    &quot;access&quot;: &quot;public&quot;
  &#125;
</code></pre>
<h2 id="preferGlobal字段"><a href="#preferGlobal字段" class="headerlink" title="preferGlobal字段"></a>preferGlobal字段</h2><p>preferGlobal的值是布尔值，表示当用户不将该模块安装为全局模块时（即不用–global参数），要不要显示警告，表示该模块的本意就是安装为全局模块。</p>
<pre><code>  &quot;preferGlobal&quot;: false
</code></pre>
<h2 id="browser字段"><a href="#browser字段" class="headerlink" title="browser字段"></a>browser字段</h2><p>browser指定该模板供浏览器使用的版本。Browserify这样的浏览器打包工具，通过它就知道该打包那个文件。</p>
<pre><code>  &quot;browser&quot;: &#123;
    &quot;tipso&quot;: &quot;./node_modules/tipso/src/tipso.js&quot;
  &#125;,
</code></pre>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTg3MTc5Mzk1NzE0NjQ2MDI0">转载自掘金(隐冬)<i class="fa fa-external-link-alt"></i></span>
 </p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你创建Vue3项目开发环境</title>
    <url>/20210726/84-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAVue3%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="项目搭建规范"><a href="#项目搭建规范" class="headerlink" title="项目搭建规范"></a>项目搭建规范</h1><h2 id="一-代码规范"><a href="#一-代码规范" class="headerlink" title="一. 代码规范"></a>一. 代码规范</h2><h3 id="1-1-集成-editorconfig-配置"><a href="#1-1-集成-editorconfig-配置" class="headerlink" title="1.1. 集成 editorconfig 配置"></a>1.1. 集成 editorconfig 配置</h3><p>EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。</p>
<p>项目跟目录创建 .editorconfig</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># http://editorconfig.org</span></span><br><span class="line"></span><br><span class="line"><span class="string">root</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[<span class="string">*</span>] <span class="comment"># 表示所有文件适用</span></span><br><span class="line"><span class="string">charset</span> <span class="string">=</span> <span class="string">utf-8</span> <span class="comment"># 设置文件字符集为 utf-8</span></span><br><span class="line"><span class="string">indent_style</span> <span class="string">=</span> <span class="string">space</span> <span class="comment"># 缩进风格（tab | space）</span></span><br><span class="line"><span class="string">indent_size</span> <span class="string">=</span> <span class="number">2</span> <span class="comment"># 缩进大小</span></span><br><span class="line"><span class="string">end_of_line</span> <span class="string">=</span> <span class="string">lf</span> <span class="comment"># 控制换行类型(lf | cr | crlf)</span></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment"># 去除行首的任意空白字符</span></span><br><span class="line"><span class="string">insert_final_newline</span> <span class="string">=</span> <span class="literal">true</span> <span class="comment"># 始终在文件末尾插入一个新行</span></span><br><span class="line"></span><br><span class="line">[<span class="string">*.md</span>] <span class="comment"># 表示仅 md 文件适用以下规则</span></span><br><span class="line"><span class="string">max_line_length</span> <span class="string">=</span> <span class="string">off</span></span><br><span class="line"><span class="string">trim_trailing_whitespace</span> <span class="string">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>VSCode 需要安装一个插件：EditorConfig for VS Code</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2gh989yj30pj05ggmb.jpg" alt="image-20210722215138665"></p>
<h3 id="1-2-使用-prettier-工具"><a href="#1-2-使用-prettier-工具" class="headerlink" title="1.2. 使用 prettier 工具"></a>1.2. 使用 prettier 工具</h3><p>Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。</p>
<p>1.安装 prettier</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install prettier -D</span><br></pre></td></tr></table></figure>

<p>2.配置.prettierrc 文件：</p>
<ul>
<li>useTabs：使用 tab 缩进还是空格缩进，选择 false；</li>
<li>tabWidth：tab 是空格的情况下，是几个空格，选择 2 个；</li>
<li>printWidth：当行字符的长度，推荐 80，也有人喜欢 100 或者 120；</li>
<li>singleQuote：使用单引号还是双引号，选择 true，使用单引号；</li>
<li>trailingComma：在多行输入的尾逗号是否添加，设置为 <code>none</code>；</li>
<li>semi：语句末尾是否要加分号，默认值 true，选择 false 表示不加；</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;useTabs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.创建.prettierignore 忽略文件</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/dist/</span>*</span><br><span class="line">.local</span><br><span class="line">.output.js</span><br><span class="line"><span class="regexp">/node_modules/</span>**</span><br><span class="line"></span><br><span class="line">**<span class="comment">/*.svg</span></span><br><span class="line"><span class="comment">**/</span>*.sh</span><br><span class="line"></span><br><span class="line"><span class="regexp">/public/</span>*</span><br></pre></td></tr></table></figure>

<p>4.VSCode 需要安装 prettier 的插件</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2acx21rj30ow057mxp.jpg" alt="image-20210722214543454"></p>
<p>5.测试 prettier 是否生效</p>
<ul>
<li>测试一：在代码中保存代码；</li>
<li>测试二：配置一次性修改的命令；</li>
</ul>
<p>在 package.json 中配置一个 scripts：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;prettier&quot;</span>: <span class="string">&quot;prettier --write .&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-使用-ESLint-检测"><a href="#1-3-使用-ESLint-检测" class="headerlink" title="1.3. 使用 ESLint 检测"></a>1.3. 使用 ESLint 检测</h3><p>1.在前面创建项目的时候，我们就选择了 ESLint，所以 Vue 会默认帮助我们配置需要的 ESLint 环境。</p>
<p>2.VSCode 需要安装 ESLint 插件：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsq2oq26odj30pw05faaq.jpg" alt="image-20210722215933360"></p>
<p>3.解决 eslint 和 prettier 冲突的问题：</p>
<p>安装插件：（vue 在创建项目时，如果选择 prettier，那么这两个插件会自动安装）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i eslint-plugin-prettier eslint-config-prettier -D</span><br></pre></td></tr></table></figure>

<p>添加 prettier 插件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">extends: [</span><br><span class="line">  <span class="string">&quot;plugin:vue/vue3-essential&quot;</span>,</span><br><span class="line">  <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@vue/typescript/recommended&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@vue/prettier&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@vue/prettier/@typescript-eslint&quot;</span>,</span><br><span class="line">  &#x27;plugin:prettier/recommended&#x27;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h3 id="1-4-git-Husky-和-eslint"><a href="#1-4-git-Husky-和-eslint" class="headerlink" title="1.4. git Husky 和 eslint"></a>1.4. git Husky 和 eslint</h3><p>虽然我们已经要求项目使用 eslint 了，但是不能保证组员提交代码之前都将 eslint 中的问题解决掉了：</p>
<ul>
<li><p>也就是我们希望保证代码仓库中的代码都是符合 eslint 规范的；</p>
</li>
<li><p>那么我们需要在组员执行 <code>git commit </code> 命令的时候对其进行校验，如果不符合 eslint 规范，那么自动通过规范进行修复；</p>
</li>
</ul>
<p>那么如何做到这一点呢？可以通过 Husky 工具：</p>
<ul>
<li>husky 是一个 git hook 工具，可以帮助我们触发 git 提交的各个阶段：pre-commit、commit-msg、pre-push</li>
</ul>
<p>如何使用 husky 呢？</p>
<p>这里我们可以使用自动配置命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx husky-init &amp;&amp; npm install</span><br></pre></td></tr></table></figure>

<p>这里会做三件事：</p>
<p>1.安装 husky 相关的依赖：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq0o5jxmj30bb04qwen.jpg" alt="image-20210723112648927"></p>
<p>2.在项目目录下创建 <code>.husky</code> 文件夹：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq16zo75j307703mt8m.jpg" alt="image-20210723112719634"></p>
<p>3.在 package.json 中添加一个脚本：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq26phpxj30dj06fgm3.jpg" alt="image-20210723112817691"></p>
<p>接下来，我们需要去完成一个操作：在进行 commit 时，执行 lint 脚本：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqq3hn229j30nf04z74q.jpg" alt="image-20210723112932943"></p>
<p>这个时候我们执行 git commit 的时候会自动对代码进行 lint 校验。</p>
<h3 id="1-5-git-commit-规范"><a href="#1-5-git-commit-规范" class="headerlink" title="1.5. git commit 规范"></a>1.5. git commit 规范</h3><h4 id="1-5-1-代码提交风格"><a href="#1-5-1-代码提交风格" class="headerlink" title="1.5.1. 代码提交风格"></a>1.5.1. 代码提交风格</h4><p>通常我们的 git commit 会按照统一的风格来提交，这样可以快速定位每次提交的内容，方便之后对版本进行控制。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw17gaqjj30to0cj3zp.jpg"></p>
<p>但是如果每次手动来编写这些是比较麻烦的事情，我们可以使用一个工具：Commitizen</p>
<ul>
<li><p>Commitizen 是一个帮助我们编写规范 commit message 的工具；</p>
<p>1.安装 Commitizen</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install commitizen -D</span><br></pre></td></tr></table></figure>

<p>2.安装 cz-conventional-changelog，并且初始化 cz-conventional-changelog：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx commitizen init cz-conventional-changelog --save-dev --save-exact</span><br></pre></td></tr></table></figure>

<p>这个命令会帮助我们安装 cz-conventional-changelog：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqvz2odi4j30ek00zmx2.jpg" alt="image-20210723145249096"></p>
<p>并且在 package.json 中进行配置：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqvzftay5j30iu04k74d.jpg"></p>
<p>这个时候我们提交代码需要使用 <code>npx cz</code>：</p>
<ul>
<li>第一步是选择 type，本次更新的类型</li>
</ul>
<table>
<thead>
<tr>
<th>Type</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>feat</td>
<td>新增特性 (feature)</td>
</tr>
<tr>
<td>fix</td>
<td>修复 Bug(bug fix)</td>
</tr>
<tr>
<td>docs</td>
<td>修改文档 (documentation)</td>
</tr>
<tr>
<td>style</td>
<td>代码格式修改(white-space, formatting, missing semi colons, etc)</td>
</tr>
<tr>
<td>refactor</td>
<td>代码重构(refactor)</td>
</tr>
<tr>
<td>perf</td>
<td>改善性能(A code change that improves performance)</td>
</tr>
<tr>
<td>test</td>
<td>测试(when adding missing tests)</td>
</tr>
<tr>
<td>build</td>
<td>变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）</td>
</tr>
<tr>
<td>ci</td>
<td>更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等</td>
</tr>
<tr>
<td>chore</td>
<td>变更构建流程或辅助工具(比如更改测试环境)</td>
</tr>
<tr>
<td>revert</td>
<td>代码回退</td>
</tr>
</tbody></table>
<ul>
<li>第二步选择本次修改的范围（作用域）</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8ca15oj30r600wmx4.jpg" alt="image-20210723150147510"></p>
<ul>
<li>第三步选择提交的信息</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8mq3zlj60ni01hmx402.jpg" alt="image-20210723150204780"></p>
<ul>
<li>第四步提交详细的描述信息</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw8y05bjj30kt01fjrb.jpg" alt="image-20210723150223287"></p>
<ul>
<li>第五步是否是一次重大的更改</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqw9z5vbij30bm00q744.jpg" alt="image-20210723150322122"></p>
<ul>
<li>第六步是否影响某个 open issue</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqwar8xp1j30fq00ya9x.jpg" alt="image-20210723150407822"></p>
<p>我们也可以在 scripts 中构建一个命令来执行 cz：</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsqwc4gtkxj30e207174t.jpg" alt="image-20210723150526211"></p>
<h4 id="1-5-2-代码提交验证"><a href="#1-5-2-代码提交验证" class="headerlink" title="1.5.2. 代码提交验证"></a>1.5.2. 代码提交验证</h4><p>如果我们按照 cz 来规范了提交风格，但是依然有同事通过 <code>git commit</code> 按照不规范的格式提交应该怎么办呢？</p>
<ul>
<li><p>我们可以通过 commitlint 来限制提交；</p>
<p>1.安装 @commitlint/config-conventional 和 @commitlint/cli</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i @commitlint/config-conventional @commitlint/cli -D</span><br></pre></td></tr></table></figure>

<p>2.在根目录创建 commitlint.config.js 文件，配置 commitlint</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.使用 husky 生成 commit-msg 文件，验证提交信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx husky add .husky/commit-msg &quot;npx --no-install commitlint --edit $1&quot;</span><br></pre></td></tr></table></figure>

<h2 id="二-第三方库集成"><a href="#二-第三方库集成" class="headerlink" title="二. 第三方库集成"></a>二. 第三方库集成</h2><h3 id="2-1-vue-config-js-配置"><a href="#2-1-vue-config-js-配置" class="headerlink" title="2.1. vue.config.js 配置"></a>2.1. vue.config.js 配置</h3><p>vue.config.js 有三种配置方式：</p>
<ul>
<li>方式一：直接通过 CLI 提供给我们的选项来配置：<ul>
<li>比如 publicPath：配置应用程序部署的子目录（默认是 <code>/</code>，相当于部署在 <code>https://www.my-app.com/</code>）；</li>
<li>比如 outputDir：修改输出的文件夹；</li>
</ul>
</li>
<li>方式二：通过 configureWebpack 修改 webpack 的配置：<ul>
<li>可以是一个对象，直接会被合并；</li>
<li>可以是一个函数，会接收一个 config，可以通过 config 来修改配置；</li>
</ul>
</li>
<li>方式三：通过 chainWebpack 修改 webpack 的配置：<ul>
<li>是一个函数，会接收一个基于 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEtbmV1dHJpbm8vd2VicGFjay1jaGFpbg==">webpack-chain<i class="fa fa-external-link-alt"></i></span> 的 config 对象，可以对配置进行修改；</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;./build&#x27;</span>,</span><br><span class="line">  <span class="comment">// configureWebpack: &#123;</span></span><br><span class="line">  <span class="comment">//   resolve: &#123;</span></span><br><span class="line">  <span class="comment">//     alias: &#123;</span></span><br><span class="line">  <span class="comment">//       views: &#x27;@/views&#x27;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// configureWebpack: (config) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   config.resolve.alias = &#123;</span></span><br><span class="line">  <span class="comment">//     &#x27;@&#x27;: path.resolve(__dirname, &#x27;src&#x27;),</span></span><br><span class="line">  <span class="comment">//     views: &#x27;@/views&#x27;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">&#x27;@&#x27;</span>, path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;@/views&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-vue-router-集成"><a href="#2-2-vue-router-集成" class="headerlink" title="2.2. vue-router 集成"></a>2.2. vue-router 集成</h3><p>安装 vue-router 的最新版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue-router@next</span><br></pre></td></tr></table></figure>

<p>创建 router 对象：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: RouteRecordRaw[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/main/main.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/login/login.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">history</span>: createWebHashHistory(),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<p>安装 router：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(router).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在 App.vue 中配置跳转：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/main&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-vuex-集成"><a href="#2-3-vuex-集成" class="headerlink" title="2.3. vuex 集成"></a>2.3. vuex 集成</h3><p>安装 vuex：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vuex@next</span><br></pre></td></tr></table></figure>

<p>创建 store 对象：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(&#123;</span><br><span class="line">  <span class="function"><span class="title">state</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;coderwhy&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<p>安装 store：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">createApp(App).use(router).use(store).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在 App.vue 中使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; $store.state.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-element-plus-集成"><a href="#2-4-element-plus-集成" class="headerlink" title="2.4. element-plus 集成"></a>2.4. element-plus 集成</h3><p>Element Plus，一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库：</p>
<ul>
<li>相信很多同学在 Vue2 中都使用过 element-ui，而 element-plus 正是 element-ui 针对于 vue3 开发的一个 UI 组件库；</li>
<li>它的使用方式和很多其他的组件库是一样的，所以学会 element-plus，其他类似于 ant-design-vue、NaiveUI、VantUI 都是差不多的；</li>
</ul>
<p>安装 element-plus</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure>

<h4 id="2-4-1-全局引入"><a href="#2-4-1-全局引入" class="headerlink" title="2.4.1. 全局引入"></a>2.4.1. 全局引入</h4><p>一种引入 element-plus 的方式是全局引入，代表的含义是所有的组件和插件都会被自动注册：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementPlus <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(router).use(store).use(ElementPlus).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-4-2-局部引入"><a href="#2-4-2-局部引入" class="headerlink" title="2.4.2. 局部引入"></a>2.4.2. 局部引入</h4><p>也就是在开发中用到某个组件对某个组件进行引入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/main&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;&#123;&#123; $store.state.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-button&gt;默认按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">import &#123; ElButton &#125; from &#x27;element-plus&#x27;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ElButton,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>但是我们会发现是没有对应的样式的，引入样式有两种方式：</p>
<ul>
<li><p>全局引用样式（像之前做的那样）；</p>
</li>
<li><p>局部引用样式（通过 babel 的插件）；</p>
<p>1.安装 babel 的插件：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install babel-plugin-import -D</span><br></pre></td></tr></table></figure>

<p>2.配置 babel.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">libraryName</span>: <span class="string">&#x27;element-plus&#x27;</span>,</span><br><span class="line">        <span class="attr">customStyleName</span>: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">`element-plus/lib/theme-chalk/<span class="subst">$&#123;name&#125;</span>.css`</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这里依然有个弊端：</p>
<ul>
<li>这些组件我们在多个页面或者组件中使用的时候，都需要导入并且在 components 中进行注册；</li>
<li>所以我们可以将它们在全局注册一次；</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ElButton,</span><br><span class="line">  ElTable,</span><br><span class="line">  ElAlert,</span><br><span class="line">  ElAside,</span><br><span class="line">  ElAutocomplete,</span><br><span class="line">  ElAvatar,</span><br><span class="line">  ElBacktop,</span><br><span class="line">  ElBadge,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">  ElButton,</span><br><span class="line">  ElTable,</span><br><span class="line">  ElAlert,</span><br><span class="line">  ElAside,</span><br><span class="line">  ElAutocomplete,</span><br><span class="line">  ElAvatar,</span><br><span class="line">  ElBacktop,</span><br><span class="line">  ElBadge,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> cpn <span class="keyword">of</span> components) &#123;</span><br><span class="line">  app.component(cpn.name, cpn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-axios-集成"><a href="#2-5-axios-集成" class="headerlink" title="2.5. axios 集成"></a>2.5. axios 集成</h3><p>安装 axios：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<p>封装 axios：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123; AxiosInstance, AxiosRequestConfig, AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Result &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;/@/store/modules/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HYRequest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> instance: AxiosInstance</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> options: AxiosRequestConfig</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options: AxiosRequestConfig</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.options = options</span><br><span class="line">    <span class="built_in">this</span>.instance = axios.create(options)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.instance.interceptors.request.use(</span><br><span class="line">      <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> token = useUserStore().getToken</span><br><span class="line">        <span class="keyword">if</span> (token) &#123;</span><br><span class="line">          config.headers.Authorization = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.instance.interceptors.response.use(</span><br><span class="line">      <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 拦截响应的数据</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.code === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.data.data</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.data</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  request&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.instance</span><br><span class="line">        .request&lt;<span class="built_in">any</span>, AxiosResponse&lt;Result&lt;T&gt;&gt;&gt;(config)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          resolve(res <span class="keyword">as</span> unknown <span class="keyword">as</span> <span class="built_in">Promise</span>&lt;T&gt;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  post&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  patch&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&#x27;PATCH&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>&lt;T = <span class="built_in">any</span>&gt;(config: AxiosRequestConfig): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; ...config, <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HYRequest</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>TS</tag>
        <tag>vue</tag>
        <tag>脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>Node-UDP一试</title>
    <url>/20210729/87-Node-UDP%E4%B8%80%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>玩过 node 的同学并不陌生，可以直接用 <code>dgram</code> 模块 ，直接开搞</p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dgram = <span class="built_in">require</span>(<span class="string">&quot;dgram&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> udp_client = dgram.createSocket(<span class="string">&quot;udp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">udp_client.on(<span class="string">&quot;close&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;udp client closed.&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误处理</span></span><br><span class="line">udp_client.on(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;some error on udp client.&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息</span></span><br><span class="line">udp_client.on(<span class="string">&quot;message&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg, rinfo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">`receive message from <span class="subst">$&#123;rinfo.address&#125;</span>:<span class="subst">$&#123;rinfo.port&#125;</span>：<span class="subst">$&#123;msg&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时向服务器发送消息</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> SendBuff = <span class="string">&quot;hello 123.&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> SendLen = SendBuff.length;</span><br><span class="line">  udp_client.send(SendBuff, <span class="number">0</span>, SendLen, <span class="number">5678</span>, <span class="string">&quot;255.255.255.255&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;send msg&quot;</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dgram = <span class="built_in">require</span>(<span class="string">&#x27;dgram&#x27;</span>);</span><br><span class="line"><span class="comment">//创建 udp server</span></span><br><span class="line"><span class="keyword">var</span> udp_server = dgram.createSocket(<span class="string">&#x27;udp4&#x27;</span>);</span><br><span class="line">udp_server.bind(<span class="number">5678</span>); <span class="comment">// 绑定端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">udp_server.on(<span class="string">&#x27;listening&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;udp server linstening 5678.&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收消息</span></span><br><span class="line">udp_server.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg, rinfo</span>) </span>&#123;</span><br><span class="line">  strmsg = msg.toString();</span><br><span class="line">  udp_server.send(strmsg, <span class="number">0</span>, strmsg.length, rinfo.port, rinfo.address); <span class="comment">//将接收到的消息返回给客户端</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`udp server received data: <span class="subst">$&#123;strmsg&#125;</span> from <span class="subst">$&#123;rinfo.address&#125;</span>:<span class="subst">$&#123;rinfo.port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//错误处理</span></span><br><span class="line">udp_server.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;some error on udp server.&#x27;</span>)</span><br><span class="line">  udp_server.close();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>总结</p>
<p>nodejs 还是挺好玩的，对于前端同学来说，可以学一学，尝试尝试~~~</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS居中对齐终极指南</title>
    <url>/20210727/85-CSS%E5%B1%85%E4%B8%AD%E5%AF%B9%E9%BD%90%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS-居中对齐终极指南"><a href="#CSS-居中对齐终极指南" class="headerlink" title="CSS 居中对齐终极指南"></a>CSS 居中对齐终极指南</h1><p>本文将讨论可用于居中对齐元素的 6 种 CSS 技术（按照最佳实践排序），以及每一种技术最适合应用的场景。这里，居中对齐指的是将元素放置在其父元素的水平和垂直中心。</p>
<blockquote>
<p>.center 类代表要居中对齐的元素</p>
<p>.parent 类代表其父元素。</p>
</blockquote>
<h2 id="使用变换（Transform）"><a href="#使用变换（Transform）" class="headerlink" title="使用变换（Transform）"></a>使用变换（Transform）</h2><p>什么时候用：</p>
<ul>
<li><p>当元素的宽度和高度未知时；</p>
</li>
<li><p>卡片式弹出框中有多个子元素，其中一个焦点元素位于中心。</p>
</li>
</ul>
<p>这个思路是使用绝对定位——top 和 left 50％，然后应用负变换。top 和 left 中使用的值根据父元素的尺寸解析，而 translate 方法中的值根据元素本身的尺寸解析。</p>
<pre><code>  .center &#123;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  &#125;
</code></pre>
<h2 id="使用-Flex"><a href="#使用-Flex" class="headerlink" title="使用 Flex"></a>使用 Flex</h2><p>什么时候用：</p>
<ul>
<li>当有一个或多个元素要居中时；</li>
<li>当子元素是动态的并且大小未知时；</li>
<li>当有一行项目需要像页脚一样居中时。</li>
</ul>
<p>这个思路是使父容器成为 flexbox 并使用 flex 属性将元素沿水平和垂直方向居中，如下所示。</p>
<pre><code>  .parent &#123;
      display: flex;
      justify-content: center;
      align-items: center;
  &#125;
</code></pre>
<p>当有多个元素需要一个在另一个元素上方堆叠，并使该元素堆叠在其中心时，我们只需添加以下代码行：</p>
<pre><code>  flex-direction: column;
</code></pre>
<h2 id="使用负边距"><a href="#使用负边距" class="headerlink" title="使用负边距"></a>使用负边距</h2><p>什么时候用：</p>
<ul>
<li>当元素的高度和宽度已知时。</li>
</ul>
<p>这个思路是再次使用类似于变换技术的绝对定位，但应用的是元素宽度和高度一半的负边距而不是平移。</p>
<pre><code>  $w: 200px; /* SCSS 变量 */
  $h: 100px; /* SCSS 变量 */
  .center &#123;
    position: absolute;
    top: 50%;
    left: 50%;
    margin: -50px -100px; /* Negative margin of half the
                            width and heigh */t

  &#125;
</code></pre>
<p>为了使这段代码更通用，我们使用 calc()属性，如下所示：</p>
<blockquote>
<p>(#{$h} / 2) - 一半高度</p>
<p>(#{$h} / 2) * -1) - 一半高度的负值</p>
</blockquote>
<p>这样就可以：</p>
<pre><code>  margin: calc((#&#123;$h&#125; / 2) * -1) calc((#&#123;$w&#125; / 2) * -1);
</code></pre>
<h2 id="使用网格（Grid）"><a href="#使用网格（Grid）" class="headerlink" title="使用网格（Grid）"></a>使用网格（Grid）</h2><p>什么时候用：</p>
<ul>
<li>当只有一个子元素需要居中时。</li>
</ul>
<p>这个思路是创建一个网格容器并将边距设置为 auto。在非网格容器中，当 margin 设置为 auto 时，margin-top 和 bottom 取值为 0。</p>
<p>但是，在网格容器中，margin-top 和 bottom 平均分配可用空间，从而使元素居中。</p>
<pre><code>  .parent &#123;
    display: grid;
  &#125;
  .center &#123;
    margin: auto;
  &#125;
</code></pre>
<p>另一种使用网格来实现居中的方法是：</p>
<pre><code>  .parent &#123;
    display: grid;
    place-items: center;
  &#125;
</code></pre>
<h2 id="使用填充（Padding）"><a href="#使用填充（Padding）" class="headerlink" title="使用填充（Padding）"></a>使用填充（Padding）</h2><p>不建议将此技术用于中心对齐，但它也是可行的。</p>
<p>什么时候用：</p>
<ul>
<li>当父元素的高度已知或者固定时；</li>
<li>当中心元素的高度为弹性可变时。</li>
</ul>
<p>这个思路是为已知固定高度的容器设置固定的垂直填充，并允许子元素占据最大高度和自动边距。</p>
<pre><code>  .parent &#123;
    height: 600px; //Fixed height
    padding: 200px 0; //Fixed vertical padding
  &#125;
  .center&#123;
    margin: 0 auto;
    height: 100%; // Child takes max height
  &#125;
</code></pre>
<h2 id="使用表格单元格"><a href="#使用表格单元格" class="headerlink" title="使用表格单元格"></a>使用表格单元格</h2><p>这个技术现在用得比较少，但是也值得借鉴。并且，它确实也是可行的。</p>
<p>这个思路是使用 display 强制父级表现得像一个表格单元格。然后使用 vertical align 属性进行垂直居中，使用 margin auto 进行水平居中。</p>
<pre><code>  .parent &#123;
    display: table-cell;
    vertical-align: middle;
  &#125;
  .center&#123;
    margin: auto;
  &#125;
</code></pre>
<p>以上总结了居中对齐元素的 6 种方法。</p>
<h2 id="另外我们再讲一讲——水平居中"><a href="#另外我们再讲一讲——水平居中" class="headerlink" title="另外我们再讲一讲——水平居中"></a>另外我们再讲一讲——水平居中</h2><p>水平居中通常用于标题样式和页脚，并结合均匀的填充或边距。</p>
<h2 id="使用文本对齐"><a href="#使用文本对齐" class="headerlink" title="使用文本对齐"></a>使用文本对齐</h2><p>什么时候用：</p>
<ul>
<li><p>当中心元素为文本内容或者 inline-*类型元素时；</p>
</li>
<li><p>linline-*包括 inline、inline-block、inline-flex、inline-table 等。</p>
<pre><code>.parent &#123;
  text-align: center;
&#125;
</code></pre>
</li>
</ul>
<p>它还可以居中块类型子元素，但我们不推荐这么做。</p>
<h2 id="使用边距"><a href="#使用边距" class="headerlink" title="使用边距"></a>使用边距</h2><p>什么时候用：</p>
<ul>
<li><p>当中心元素是块元素时</p>
<pre><code>.center &#123;
    margin: 0 auto;
&#125;
</code></pre>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>css 的世界太过于复杂，最近张大佬的 <code>css 新世界</code>上新了，推荐有时间的小伙伴可以去阅读下，刷新自己对 css 的认知~~</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>居中对齐</tag>
      </tags>
  </entry>
  <entry>
    <title>js解决超出精度数字问题</title>
    <url>/20210728/86-js-%E8%A7%A3%E5%86%B3%E8%B6%85%E5%87%BA%E7%B2%BE%E5%BA%A6%E6%95%B0%E5%AD%97%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JS-解决超出精度数字问题"><a href="#JS-解决超出精度数字问题" class="headerlink" title="JS 解决超出精度数字问题"></a>JS 解决超出精度数字问题</h1><ol>
<li>js 最大安全数字是 Math.pow(2,53) - 1，超出这个数字相加会出现精度丢失问题，可通过将数字转换为字符串操作的思路处理，如下：</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js 最大安全数字： Math.pow(2, 53)-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = &#x27;<span class="number">123456444565456.889</span>&#x27;</span><br><span class="line"><span class="keyword">let</span> b =       &#x27;<span class="number">121231456.32</span>&#x27;</span><br><span class="line"><span class="comment">// a + b = &#x27;123456565796913.209&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> add<span class="constructor">Two(<span class="params">a</span>, <span class="params">b</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//1.比较两个数长度  然后短的一方前面补0</span></span><br><span class="line">    <span class="keyword">if</span> (a.length &gt; b.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> arr = <span class="constructor">Array(<span class="params">a</span>.<span class="params">length</span> - <span class="params">b</span>.<span class="params">length</span>)</span>.fill(<span class="number">0</span>);</span><br><span class="line">        b = arr.join(&#x27;&#x27;) + b</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.length &lt; b.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> arr = <span class="constructor">Array(<span class="params">b</span>.<span class="params">length</span> - <span class="params">a</span>.<span class="params">length</span>)</span>.fill(<span class="number">0</span>);</span><br><span class="line">        a = arr.join(&#x27;&#x27;) + a</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.反转两个数 （这里是因为人习惯从左往右加 而数字相加是从右到左 因此反转一下比较好理解）</span></span><br><span class="line">    a = a.split(&#x27;&#x27;).reverse<span class="literal">()</span>;</span><br><span class="line">    b = b.split(&#x27;&#x27;).reverse<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.循环两个数组  并进行相加  如果和大于10 则 sign = 1,当前位置的值为(和%10)</span></span><br><span class="line">    <span class="keyword">let</span> sign = <span class="number">0</span>;<span class="comment">//标记 是否进位</span></span><br><span class="line">    <span class="keyword">let</span> newVal = <span class="literal">[]</span>;<span class="comment">//用于存储最后的结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">val</span> = a<span class="literal">[<span class="identifier">j</span>]</span><span class="operator"> / </span><span class="number">1</span> + b<span class="literal">[<span class="identifier">j</span>]</span><span class="operator"> / </span><span class="number">1</span> + sign; <span class="comment">//除1是保证都为数字 这里也可以用Number()</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">val</span> &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">            newVal.unshift(<span class="keyword">val</span> % <span class="number">10</span>) <span class="comment">//这里用unshift而不是push是因为可以省了使用reverse</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sign = <span class="number">0</span>;</span><br><span class="line">            newVal.unshift(<span class="keyword">val</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一次相加需要向前补充一位数字 ‘1’</span></span><br><span class="line">    return sign<span class="operator"> &amp;&amp; </span>newVal.unshift(sign)<span class="operator"> &amp;&amp; </span>newVal.join(&#x27;&#x27;)<span class="operator"> || </span>newVal.join(&#x27;&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// 参考其他朋友的精简写法</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwo</span><span class="params">(a,b)</span> &#123;</span></span><br><span class="line">    <span class="keyword">let</span> temp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">res</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">a</span> = <span class="keyword">a</span>.<span class="keyword">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">b</span> = <span class="keyword">b</span>.<span class="keyword">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">a</span>.length || <span class="keyword">b</span>.length || temp) &#123;</span><br><span class="line">        temp += Number(<span class="keyword">a</span>.<span class="keyword">pop</span>() || <span class="number">0</span>) + Number(<span class="keyword">b</span>.<span class="keyword">pop</span>() || <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">res</span> = (temp%<span class="number">10</span>) + <span class="keyword">res</span></span><br><span class="line">        temp = temp &gt; <span class="number">9</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">res</span>.replace(/^<span class="number">0</span>+/g, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>当涉及到带有小数部分相加时，对上面方法进行一次封装，完整实现如下：</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#x27;<span class="number">123456444565456.889</span>&#x27;</span><br><span class="line"><span class="keyword">let</span> b =       &#x27;<span class="number">121231456.32</span>&#x27;</span><br><span class="line"><span class="comment">// a + b = &#x27;123456565796913.209&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> add<span class="constructor">Two(<span class="params">a</span> = &#x27;0&#x27;,<span class="params">b</span> = &#x27;0&#x27;, <span class="params">isHasDecimal</span>=<span class="params">false</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//1.比较两个数长度  然后短的一方前面补0</span></span><br><span class="line">    <span class="keyword">if</span> (a.length &gt; b.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> arr = <span class="constructor">Array(<span class="params">a</span>.<span class="params">length</span> - <span class="params">b</span>.<span class="params">length</span>)</span>.fill(<span class="number">0</span>);</span><br><span class="line">        b = isHasDecimal<span class="operator"> &amp;&amp; </span>(b + arr.join(&#x27;&#x27;))<span class="operator"> || </span>arr.join(&#x27;&#x27;) + b</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.length &lt; b.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> arr = <span class="constructor">Array(<span class="params">b</span>.<span class="params">length</span> - <span class="params">a</span>.<span class="params">length</span>)</span>.fill(<span class="number">0</span>);</span><br><span class="line">        a = isHasDecimal<span class="operator"> &amp;&amp; </span>(a + arr.join(&#x27;&#x27;))<span class="operator"> || </span>arr.join(&#x27;&#x27;) + a</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.反转两个数 （这里是因为人习惯从左往右加 而数字相加是从右到左 因此反转一下比较好理解）</span></span><br><span class="line">    a = a.split(&#x27;&#x27;).reverse<span class="literal">()</span>;</span><br><span class="line">    b = b.split(&#x27;&#x27;).reverse<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.循环两个数组  并进行相加  如果和大于10 则 sign = 1,当前位置的值为(和%10)</span></span><br><span class="line">    <span class="keyword">let</span> sign = <span class="number">0</span>;<span class="comment">//标记 是否进位</span></span><br><span class="line">    <span class="keyword">let</span> newVal = <span class="literal">[]</span>;<span class="comment">//用于存储最后的结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">val</span> = a<span class="literal">[<span class="identifier">j</span>]</span><span class="operator"> / </span><span class="number">1</span> + b<span class="literal">[<span class="identifier">j</span>]</span><span class="operator"> / </span><span class="number">1</span> + sign; <span class="comment">//除1是保证都为数字 这里也可以用Number()</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">val</span> &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            sign = <span class="number">1</span>;</span><br><span class="line">            newVal.unshift(<span class="keyword">val</span> % <span class="number">10</span>) <span class="comment">//这里用unshift而不是push是因为可以省了使用reverse</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sign = <span class="number">0</span>;</span><br><span class="line">            newVal.unshift(<span class="keyword">val</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一次相加需要向前补充一位数字 ‘1’</span></span><br><span class="line">    return sign<span class="operator"> &amp;&amp; </span>newVal.unshift(sign)<span class="operator"> &amp;&amp; </span>newVal.join(&#x27;&#x27;)<span class="operator"> || </span>newVal.join(&#x27;&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> add(a,b) &#123;</span><br><span class="line">    <span class="keyword">let</span> num1 = <span class="constructor">String(<span class="params">a</span>)</span>.split(<span class="character">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> num2 = <span class="constructor">String(<span class="params">b</span>)</span>.split(<span class="character">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> intSum = add<span class="constructor">Two(<span class="params">num1</span>[0], <span class="params">num2</span>[0])</span></span><br><span class="line">    <span class="keyword">let</span> res = intSum</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num1.length&gt;<span class="number">1</span><span class="operator"> || </span>num2.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> decimalSum = add<span class="constructor">Two(<span class="params">num1</span>[1], <span class="params">num2</span>[1], <span class="params">true</span>)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (decimalSum.length &gt; (num1<span class="literal">[<span class="number">1</span>]</span><span class="pattern-match"><span class="operator">||</span>&#x27;0&#x27;).length <span class="operator">&amp;&amp;</span> decimal<span class="constructor">Sum</span>.length &gt; (num2[1]<span class="operator">||</span>&#x27;0&#x27;).length) &#123;</span></span><br><span class="line"><span class="pattern-match">            <span class="built_in">int</span><span class="constructor">Sum</span> = add<span class="constructor">Two(<span class="params">intSum</span>, <span class="params">decimalSum</span>[0])</span></span></span><br><span class="line"><span class="pattern-match">            decimal<span class="constructor">Sum</span> = decimal<span class="constructor">Sum</span>.slice(1)</span></span><br><span class="line"><span class="pattern-match">            res = <span class="constructor">`$</span>&#123;<span class="built_in">int</span><span class="constructor">Sum</span>&#125;.<span class="constructor">$</span>&#123;decimal<span class="constructor">Sum</span>&#125;`</span></span><br><span class="line"><span class="pattern-match">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="pattern-match">            res = <span class="constructor">`$</span>&#123;<span class="built_in">int</span><span class="constructor">Sum</span>&#125;.<span class="constructor">$</span>&#123;decimal<span class="constructor">Sum</span>&#125;`</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match">    return res</span></span><br><span class="line"><span class="pattern-match">&#125;</span></span><br><span class="line"><span class="pattern-match">console.log(add(a, b)) <span class="operator">/</span><span class="operator">/</span> 123456565796913.209</span></span><br><span class="line"><span class="pattern-match"><span class="operator">/</span><span class="operator">/</span> console.log(add(&#x27;325&#x27;, &#x27;988&#x27;)) <span class="operator">/</span><span class="operator">/</span> 1313</span></span><br><span class="line"><span class="pattern-match"></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>electron 遇见Vue3 爬坑指南</title>
    <url>/20210729/88-electron-%E9%81%87%E8%A7%81Vue3-%E7%88%AC%E5%9D%91%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="election"><a href="#election" class="headerlink" title="election"></a>election</h1><p>一直想做一个桌面软件，最后决定用了 election + vue3 + ts + tailwind 目标是做一个私有聊天软件</p>
<h2 id="tray"><a href="#tray" class="headerlink" title="tray"></a>tray</h2><p>第一设置 tray 托盘图标就难住我了，调试可以，打包后不行，搜索了半天，给出的结论是调试和打包后路径不一样，所以需要加入判断，</p>
<blockquote>
<p>如果运行后图片自动消失，可能是垃圾回收了，把对象设置到外面</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @param win win对象</span><br><span class="line"> * @method 设置托盘图标</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>设置到外面防止垃圾回收！！！</span><br><span class="line">let appTray = null;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> setTrayIco(win: any) &#123;</span><br><span class="line">  <span class="regexp">//</span>系统托盘右键菜单</span><br><span class="line">  var trayMenuTemplate = [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">&#x27;设置&#x27;</span>,</span><br><span class="line">      click: () =&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125; <span class="regexp">//</span>打开相应页面</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">&#x27;帮助&#x27;</span>,</span><br><span class="line">      click: <span class="keyword">function</span> () &#123; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">&#x27;关于&#x27;</span>,</span><br><span class="line">      click: <span class="keyword">function</span> () &#123; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">&#x27;退出&#x27;</span>,</span><br><span class="line">      click: <span class="keyword">function</span> () &#123;</span><br><span class="line">        app.quit();</span><br><span class="line">        app.quit();<span class="regexp">//</span>因为程序设定关闭为最小化，所以调用两次关闭，防止最大化时一次不能关闭的情况</span><br><span class="line">        app.<span class="keyword">exit</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>系统托盘图标目录</span><br><span class="line">  <span class="regexp">//</span> 判断环境</span><br><span class="line">  <span class="keyword">if</span> (process.env.WEBPACK_DEV_SERVER_URL) &#123;</span><br><span class="line">    <span class="regexp">//</span> 开发</span><br><span class="line">    appTray = new Tray(path.join(__dirname, <span class="string">&#x27;../public/img/gril48.ico&#x27;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="regexp">//</span> 生产</span><br><span class="line">    appTray = new Tray(path.join(__dirname, <span class="string">&#x27;img/gril48.ico&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>图标的上下文菜单</span><br><span class="line">  const contextMenu = Menu.buildFromTemplate(trayMenuTemplate);</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>设置此托盘图标的悬停提示内容</span><br><span class="line">  appTray.setToolTip(<span class="string">&#x27;我的托盘图标&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>设置此图标的上下文菜单</span><br><span class="line">  appTray.setContextMenu(contextMenu);</span><br><span class="line">  <span class="regexp">//</span>单击右下角小图标显示应用</span><br><span class="line">  appTray.on(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> () &#123;</span><br><span class="line">    win.show();</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>因为Vue会有一个编译的过程，也可以</span><br><span class="line">electron-vue的项目，根目录下面的static文件夹，是会被全部复制过去的。而且在electron-vue的项目中，存在着一个变量，叫做__static，就时刻指向这个根目录下面的static文件夹。那么，代码上就可以这么写：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tray = new Tray(path.join(__static,<span class="string">&quot;favicon.png&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="调用原生组件"><a href="#调用原生组件" class="headerlink" title="调用原生组件"></a>调用原生组件</h2><h3 id="串口通讯-serialport"><a href="#串口通讯-serialport" class="headerlink" title="串口通讯 serialport"></a>串口通讯 serialport</h3><p>可以编译为 electron 模块</p>
<pre><code>    npm install serialport --save-dev

    npm install --save-dev electron-rebuild

    //编译
  .\node_modules\.bin\electron-rebuild.cmd

  这个时候可能会失败，可能没有python2.7合node-gyp 和vsc++工具
  可以尝试安装 npm install --global --production windows-build-tools


  npm config set msvs_version 2017
</code></pre>
<p>也可以通过通过 npm 安装</p>
<pre><code>  // Electron 的版本。

  set npm_config_target=1.2.3

  // Electron 的目标架构, 可用的架构列表请参见

  // https://electronjs.org/docs/tutorial/support#supported-platforms

  set npm_config_arch=x64
  set npm_config_target_arch=x64

  // 下载 Electron 的 headers。

  set npm_config_disturl=https://electronjs.org/headers

  // 告诉 node-pre-gyp 我们是在为 Electron 生成模块。

  set npm_config_runtime=electron

  // 告诉 node-pre-gyp 从源代码构建模块。

  set npm_config_build_from_source=true

  // 安装所有依赖，并缓存到 ~/.electron-gyp。

  HOME=~/.electron-gyp npm install //这个暂时还不知道怎么弄.....
</code></pre>
<p>serialport 安装完毕后调用报错</p>
<pre><code>  vue-router.esm.js?8c4f:2171 TypeError: Cannot read property &#39;indexOf&#39; of undefined
  at Function.getFileName (bindings.js?dfc1:178)
  at bindings (bindings.js?dfc1:82)
  at eval (win32.js?7cf7:1)
  at Object../node_modules/@serialport/bindings/lib/win32.js (about.js:120)
  at webpack_require (index.js:854)
  at fn (index.js:151)
  at eval (index.js?c888:6)
  at Object../node_modules/@serialport/bindings/lib/index.js (about.js:32)
  at webpack_require (index.js:854)
  at fn (index.js:151)
</code></pre>
<ol>
<li>vue.config.js</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">module<span class="selector-class">.export</span> = &#123;</span><br><span class="line">    pluginOptions: &#123;</span><br><span class="line">        electronBuilder: &#123;</span><br><span class="line">            externals: <span class="selector-attr">[<span class="string">&#x27;serialport&#x27;</span>]</span>,</span><br><span class="line">            nodeModulesPath: <span class="selector-attr">[<span class="string">&#x27;../../node_modules&#x27;</span>, <span class="string">&#x27;./node_modules&#x27;</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li> main.js 或 background.js</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> set nodeIntegration: true</span><br><span class="line"><span class="keyword">function</span> createWindow() &#123;</span><br><span class="line">  <span class="regexp">//</span> Create the browser window.</span><br><span class="line">  win = new BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">1200</span>,</span><br><span class="line">    height: <span class="number">800</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      <span class="regexp">//</span> Use pluginOptions.nodeIntegration, leave this alone</span><br><span class="line">      <span class="regexp">//</span> See nklayman.github.io<span class="regexp">/vue-cli-plugin-electron-builder/gui</span>de/security.html<span class="comment">#node-integration for more info</span></span><br><span class="line">      <span class="regexp">//</span> nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION</span><br><span class="line">      nodeIntegration: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最小化"><a href="#最小化" class="headerlink" title="最小化"></a>最小化</h2><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最小化</span></span><br><span class="line">win.<span class="keyword">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="function">  e.preventDefault();</span></span></span><br><span class="line"><span class="comment"><span class="function">  win.hide();</span></span></span><br><span class="line"><span class="comment"><span class="function">&#125;</span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>防止重复打开多个窗口 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcvZG9jcy9hcGkvYXBwI2FwcHJlcXVlc3RzaW5nbGVpbnN0YW5jZWxvY2s=">requestSingleInstanceLock<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">app</span>.<span class="keyword">on</span>(&#x27;ready&#x27;, async () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (isDevelopment &amp;&amp; !process.env.IS_TEST) &#123;</span><br><span class="line">    <span class="comment">// Install Vue Devtools</span></span><br><span class="line">    try &#123;</span><br><span class="line">      await installExtension(VUEJS3_DEVTOOLS)</span><br><span class="line">    &#125; catch (<span class="keyword">e</span>) &#123;</span><br><span class="line">      console.<span class="keyword">error</span>(&#x27;Vue Devtools failed to install:&#x27;, <span class="keyword">e</span>.<span class="keyword">toString</span>())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  useInsertLogToDb(&#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">&quot;软件启动&quot;</span>,</span><br><span class="line">    user: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">    context: <span class="string">&quot;软件启动&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> gotTheLock = <span class="keyword">app</span>.requestSingleInstanceLock()</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&quot;gotTheLock&quot;</span>, gotTheLock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!gotTheLock) &#123;</span><br><span class="line">    <span class="keyword">app</span>.quit()</span><br><span class="line">    <span class="keyword">app</span>.quit()</span><br><span class="line">    <span class="keyword">app</span>.<span class="keyword">exit</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">app</span>.<span class="keyword">on</span>(&#x27;second-instance&#x27;, (event, commandLine, workingDirectory) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 当运行第二个实例时,将会聚焦到myWindow这个窗口</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">win</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">win</span>.isMinimized()) <span class="keyword">win</span>.<span class="keyword">restore</span>()</span><br><span class="line">        <span class="keyword">win</span>.show()</span><br><span class="line">        <span class="keyword">win</span>.focus()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>这可能是目前最好用的开源可视化拖拽框架</title>
    <url>/20210731/89-%E8%BF%99%E5%8F%AF%E8%83%BD%E6%98%AF%E7%9B%AE%E5%89%8D%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E5%BC%80%E6%BA%90%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8B%96%E6%8B%BD%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="可视化拖拽框架"><a href="#可视化拖拽框架" class="headerlink" title="可视化拖拽框架"></a>可视化拖拽框架</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkwMDAwMzIwODIyNjU3MDMx">链接<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkwMDAwMzIwODIyNjU3MDMx">https://juejin.cn/post/6990000320822657031<i class="fa fa-external-link-alt"></i></span></p>
<p>感觉很不错，可以看看</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML media 媒体查询</title>
    <url>/20210630/9-HTML-media-%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="media"><a href="#media" class="headerlink" title="media"></a>media</h3><ol>
<li>最大宽度 max-width</li>
<li>最小宽度 min-width</li>
<li>多个媒体特性使用(and)</li>
<li>设备屏幕的输出宽度 Device Width</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">299px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: turquoise;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">300px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: tomato;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最大"><a href="#最大" class="headerlink" title="最大"></a>最大</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.ads</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="根据不同得设备宽度引入不同的-css"><a href="#根据不同得设备宽度引入不同的-css" class="headerlink" title="根据不同得设备宽度引入不同的 css"></a>根据不同得设备宽度引入不同的 css</h3><blockquote>
<p>在智能设备上，例如 iPhone、iPad 等，还可以根据屏幕设备的尺寸来设置相应的样式（或者调用相应的样式文件）。同样的，对于屏幕设备同样可以使用“min/max”对应参数，如“min-device-width”或者“max-device-width”。</p>
</blockquote>
<p>下面的代码指的是“iphone.css”样式适用于最大设备宽度为 480px，比如说 iPhone 上的显示，这里的“max-device-width”所指的是设备的实际分辨率，也就是指可视面积分辨率。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-device-<span class="attribute">width</span>:<span class="number">480px</span>)<span class="string">&quot; href=&quot;</span>iphone.css<span class="string">&quot; /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="not-关键词"><a href="#not-关键词" class="headerlink" title="not 关键词"></a>not 关键词</h3><blockquote>
<p>使用关键词“not”是用来排除某种制定的媒体类型，也就是用来排除符合表达式的设备。换句话说，not 关键词表示对后面的表达式执行取反操作，如</p>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@<span class="function">media <span class="keyword">not</span> print <span class="title">and</span> <span class="params">(max-width: <span class="number">1200</span>px)</span></span>&#123;样式代码&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-only-关键词"><a href="#6-only-关键词" class="headerlink" title="6.only 关键词"></a>6.only 关键词</h3><blockquote>
<p>only 用来指定某种特定的媒体类型，可以用来排除不支持媒体查询的浏览器。其实 only 很多时候是用来对那些不支持 Media Query 但却支持 Media Type 的设备隐藏样式表的。其主要有：支持媒体特性的设备，正常调用样式，此时就当 only 不存在；表示不支持媒体特性但又支持媒体类型的设备，这样就会不读样式，因为其先会读取 only 而不是 screen；另外不支持 Media Queries 的浏览器，不论是否支持 only，样式都不会被采用。如</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">media</span>=<span class="string">&quot;only screen and (max-device-width:240px)&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;android240.css&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>在 Media Query 中如果没有明确指定 Media Type，那么其默认为 all，如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;(min-width:701px) and (max-width:900px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mediu.css&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>media</tag>
        <tag>媒体查询</tag>
      </tags>
  </entry>
  <entry>
    <title>stream API详解</title>
    <url>/20210804/90-stream-API%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="stream-API-详解"><a href="#stream-API-详解" class="headerlink" title="stream API 详解"></a>stream API 详解</h1><p>Streams API 能够让我们直接处理通过网络接收的数据流或通过本地任何方式创建的数据流。以往我们请求媒体资源的时候，得到的都是二进制流，浏览器会自动转换成相应的编码格式然后再呈现出来，如果要处理它的话一般使用 Blob 对象包装后再进行操作。现在使用 Streams API 我们可以直接处理它，下面列举了一些可以实现的功能：</p>
<p>视频特效：读取视频流，然后通过管道与转换流连接起来，逐帧进行转换处理，实现诸如水印、剪辑、添加音轨等功能。<br>数据解压缩：压缩包、视频、图片解压缩等。<br>图像转码：流处理可以是基于字节的，因此可以逐个字节地处理请求到图片资源，来对它进行转码。例如 JPG 转 PNG 等格式转换。</p>
<p>上述功能以往需要服务端配合才能实现，现在网页也能轻松搞定。<br>Stream 在 nodejs 中应用非常广泛，服务器的请求和响应分别就是可读流和可写流，熟悉 node 开发的朋友更容易理解本篇文章所讲的概念，即使未曾用过 node 或使用过其中的流操作，阅读本篇文章后，相信上手也会非常容易,毕竟理念是相通的。</p>
<p>具体看文章分享，掘金地址~</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyMDA3MTU2MzIwOTYwNTQyP3V0bV9zb3VyY2U9Z29sZF9icm93c2VyX2V4dGVuc2lvbg==">掘金链接<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>ts中在Vue3父组建调用子组件方法</title>
    <url>/20210806/91-%E5%9C%A8Vue3%E7%88%B6%E7%BB%84%E5%BB%BA%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>在 Vue 中，如果想调用子组件中的方法或者属性，可以用 ref</p>
<p>InstanceType 搭配 typeof 推断出来组建 return 的属性类型</p>
<pre><code>    &lt;template&gt;
    &lt;Helloworld ref=&quot;helloRef&quot; /&gt;
    &lt;/template&gt;

    import Helloworld from &#39;./Helloworld.vue&#39;

    &lt;script&gt;
      setup()&#123;
        const helloRef = ref&lt;InstanceType&lt;typeof Helloworld&gt;()


        //const ruleForm = ref&lt;InstanceType&lt;typeof ElForm&gt;&gt;();  或者element from可以这样用

        const click1  = ()=&gt;&#123;
          helloRef.value?.check()   //vscode有代码提示
        &#125;

        return&#123; helloRef &#125;
      &#125;

      &lt;/script&gt;
</code></pre>
<p>子组件组件 hello world</p>
<pre><code>  &lt;script&gt;
    setup()&#123;
        const check = ()=&gt;&#123; &#125;
            return &#123; check &#125;
    &#125;

    &lt;/scirpt&gt;
</code></pre>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>TS</tag>
      </tags>
  </entry>
  <entry>
    <title>92-postman小技巧</title>
    <url>/20210806/92-postman%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h2><p>在登录接口后有个 Tests 模块</p>
<pre><code>  const res = pm.response.json();
  pm.globals.set(&#39;token&#39;,res.data.token)
</code></pre>
<p>然后在需要加 token 的地方用 </p>
<h2 id="baseURL"><a href="#baseURL" class="headerlink" title="baseURL"></a>baseURL</h2><p>可以在右上角 设置图标添加 环境 设置 baseURL,方便根据环境切换请求地址</p>


<img title="postman1.png" src="https://blog.img.wy1991.cn/static/images/js/postman1-blogImg">
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>css-filter生成不规则边框</title>
    <url>/20210810/93-css-filter%E7%94%9F%E6%88%90%E4%B8%8D%E8%A7%84%E5%88%99%E8%BE%B9%E6%A1%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="css-filter"><a href="#css-filter" class="headerlink" title="css filter"></a>css filter</h1><p>之前一直做的都是这一种 如下:</p>
<img src="https://blog.img.wy1991.cn/static/images/css/filter/filter1.png-blogImg">

<p>但是一直有一个痛点就是：无法给这些图形加上边框</p>
<img src="https://blog.img.wy1991.cn/static/images/css/filter/filter2.png-blogImg">

<p>今天带来一个小技巧：利用 drop-shadow 一行代码搞定所有不规则边框</p>
<h2 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h2><p>这里需要利用投影 drop-shadow</p>
<p>语法其实很简单</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">filter</span>: <span class="keyword">drop</span>-shadow(<span class="keyword">offset</span>-x <span class="keyword">offset</span>-y blur-radius color)</span><br></pre></td></tr></table></figure>

<pre><code>  并不是一个单独的属性，而是 filter 滤镜下的一个方法
</code></pre>
<p>这里 offset-x、offset-y 为偏移量，blur-radius 为模糊半径，color 为投影颜色。实际作用就是可以模拟真实世界的投影（透明的部分不会投影），区别如下</p>
<img src="https://blog.img.wy1991.cn/static/images/css/filter/filter3.png-blogImg">

<p>可惜的是，虽然和 box-shadow 比较类似，但是少了扩展半径。试想一下，如果支持了扩展半径，那不规则边框是不是很容易了（应该不会支持了，因为真实世界的投影也没有扩展半径）？</p>
<p>那么，drop-shadow 如何生成边框呢？</p>
<h3 id="多重投影"><a href="#多重投影" class="headerlink" title="多重投影"></a>多重投影</h3><p>box-shadow 可以很轻易的实现多重阴影</p>
<pre><code>  box-shadow: 0 0 3px #333, 1px 1px 5px #666, ...
</code></pre>
<p>可以无限叠加下去。</p>
<p>但是，drop-shadow 可就不行了，比如</p>
<pre><code>  filter: drop-shadow(0 0 3px #333, 1px 1px 5px #666, ...)
</code></pre>
<p>可以看到浏览器直接认为非法了</p>
<img src="https://blog.img.wy1991.cn/static/images/css/filter/filter4.png-blogImg">

<p>不过可以换一种思路，虽然 drop-shadow 不支持，但是 filter 支持多种滤镜，所以可以这样来实现</p>
<pre><code>  filter: drop-shadow(0 0 3px #333) drop-shadow(0 0 3px #333) drop-shadow(0 0 3px #333)...
</code></pre>
<p>这样就可以生效了</p>
<img src="https://blog.img.wy1991.cn/static/images/css/filter/filter5.png-blogImg">

<p>是不是有点像边框了？如果只设置 0.5px 的模糊，多叠加几次，模糊的部分会变清晰，这个就有点像一个比较软的笔触，多画几笔就变清晰了，于是可以得到这样的效果</p>
<img src="https://blog.img.wy1991.cn/static/images/css/filter/filter6.png-blogImg">

<p>这样就更加接近了，实践下来，可能需要微调，这里给出一个比较完美的方案（重点来了~ ）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">0px</span> <span class="number">0px</span> <span class="number">0.5px</span> <span class="number">#333</span>) <span class="built_in">drop-shadow</span>(<span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">#333</span>) <span class="built_in">drop-shadow</span>(<span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">#333</span>) <span class="built_in">drop-shadow</span>(<span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">#333</span>) <span class="built_in">drop-shadow</span>(<span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">#333</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://blog.img.wy1991.cn/static/images/css/filter/filter7.png-blogImg">

<p>这样实现的边框已经足够清晰，基本可以日常使用了</p>
<p>这段代码中颜色比较多，可以优化一下，投影的颜色默认是跟随当前文字颜色的，所以可以简化为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0.5px</span>)<span class="built_in">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>)<span class="built_in">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>)<span class="built_in">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>)<span class="built_in">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用和局限"><a href="#使用和局限" class="headerlink" title="使用和局限"></a>使用和局限</h3><p>使用方式简单，在容器的最外层加上这一行 CSS 就行了，比如之前的优惠券例子，得到的边框效果这样的</p>
<img src="https://blog.img.wy1991.cn/static/images/css/filter/filter8.png-blogImg">

<p>还有这样的</p>
<img src="https://blog.img.wy1991.cn/static/images/css/filter/filter9.png-blogImg">

<p>边框还算不错，几乎看不出投影</p>
<p>不过这里需要注意的是，经过 mask 裁剪的图形需要在外层嵌套一层父级，不然投影会被 mask 直接裁剪掉</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;coupon&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--优惠券--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://blog.img.wy1991.cn/static/images/css/filter/filter10.png-blogImg">

<p>这些就需要自行取舍了（一般情况下不会有太粗的边框）</p>
<h3 id="总结和说明"><a href="#总结和说明" class="headerlink" title="总结和说明"></a>总结和说明</h3><p>本文介绍了一个实现不规则边框的通用方案，成本非常低，效果也非常不错，这里总结一下：</p>
<ul>
<li>drop-shadow 只会对不透明部分生成投影，符合真实物理世界</li>
<li>drop-shadow 不支持多重投影，filter 支持多重滤镜，可以间接实现多重投影</li>
<li>边框的实现原理是投影的多重叠加</li>
<li>有些通过 mask 裁剪生成的图形，需要在外包裹一层容器，再生成边框</li>
<li>适合比较小的边框，过大的边框不太理想</li>
<li>滤镜其实是一个比较耗费性能的属性，不适合太范围使用</li>
</ul>
<p>可能大部分同学最后可能还是会选择 “切图.png”，不过这也算是一个解决方案 ，多一种方案总是没错的。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>94-css轻松实现优惠券效果</title>
    <url>/20210810/94-css%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E4%BC%98%E6%83%A0%E5%88%B8%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="css-优惠券"><a href="#css-优惠券" class="headerlink" title="css 优惠券"></a>css 优惠券</h2><p>一共介绍了 12 种绘制优惠券的案例，应该可以解决掉绝大部分这类布局的问题，这里总结以下几点</p>
<ul>
<li>CSS mask 一定是这类布局最完美的实现方式</li>
<li>需要 CSS radial-gradient 绘制图形的技巧</li>
<li>尽可能采用 repeat 来重复相同的元素</li>
<li>多种形状叠加时需要灵活运用 mask-composite</li>
<li>也可以采用图片来代替 CSS 渐变，需要使用 mask-border</li>
</ul>
<p>关于兼容性，其实不考虑 IE 都没有什么大问题，最后的 mask-border 目前只兼容 chrome 内核，移动端可放心使用</p>
<p>好好看看掘金文章</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTQ1MDIzOTg5NTU1MTM0NDk0">地址<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>95-理解异步</title>
    <url>/20210813/95-%E7%90%86%E8%A7%A3%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>理解异步</p>
<h2 id="什么是同步"><a href="#什么是同步" class="headerlink" title="什么是同步"></a>什么是同步</h2><blockquote>
<p>我们都要知道 JavaScript 是单线程时间循环模型，同步就相当于一条流水线，比如加工产品，我们得先采购原材料，再运输到加工厂，然后再加工，最后变成产品出售或者使用。在代码中，同步就是按照顺序执行我们所输入的指令，每条指令都会按照我们编写的先后顺序执行。</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> i = <span class="number">1</span>;</span><br><span class="line">i++;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="什么是异步"><a href="#什么是异步" class="headerlink" title="什么是异步"></a>什么是异步</h2><blockquote>
<p>相对于上面的同步，我们可以明显感觉到同步在一些地方是不合适的，比如我们加载页面，如果我们需要获取后台数据来渲染到页面上，但是下面还有好多要执行的操作，也许网络延迟，我们这个没获取到，后面的代码是执行不了的，那么页面就会白屏，非常影响用户体验。我们来写一个简单的异步操作小栗子（设置定时器）。</p>
</blockquote>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"> const i = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;jack ma&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br></pre></td></tr></table></figure>

<p>大家可以复制代码或者控制台测试一下，这里会先输出 i 的值，也就是 1，然后才输出我的英文名 Jackma</p>
<p>异步操作不容易推断，虽然这个小栗子我们肉眼可见它的执行。它相当于设置了一个子线程，因为子线程独立于主线程，所以即使出现阻塞也不会影响主线程的运行。但是子线程有一个局限：一旦发射了以后就会与主线程失去同步，我们没有办法确定这个子线程多会儿执行结束，一般来说我们会设置一个异步回调来实现异步操作返回的结果。</p>
<p>回调函数就是上面我们用 settimeout 设定让它 2 秒后执行输出我的名字。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>96-说一说glTF文件压缩</title>
    <url>/20210813/96-%E8%AF%B4%E4%B8%80%E8%AF%B4glTF%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="glTF-文件"><a href="#glTF-文件" class="headerlink" title="glTF 文件"></a>glTF 文件</h1><p>最近做 T 级互动，需要使用到 3D 模型。相信大家和我一样，在开始着手的时候，一定会有这么些问题：</p>
<ol>
<li>如何选择 3D 模型的导出格式</li>
<li>如何对模型文件进行优化</li>
<li>在大流量的项目中兼容性怎么样</li>
</ol>
<p>让我们通过这篇文章，进行细致的探索、调研与沉淀。</p>
<p>glTF 全称 Graphics Language Transmission Format，是三维场景和模型的标准文件格式。</p>
<p>glTF 核心是 JSON 文件，描述了 3D 场景的整个内容。它由场景结构本身的描述组成，其由定义场景图的节点的层次提供。</p>
<p>场景中出现的 3D 对象是使用连接到节点的 meshes(网格)定义的。Materials(材料)定义对象的外观。Animations(动画)描述 3D 对象如何随着时间的推移转换 3D 对象，并且 Skins(蒙皮)定义了对物体的几何形状的方式基于骨架姿势变形。Cameras(相机)描述了渲染器的视图配置。</p>
<p>详情请看原文~👇</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk1NDg0MDg5MjMwODM1NzI2">原文链接<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>three</category>
      </categories>
      <tags>
        <tag>three</tag>
      </tags>
  </entry>
  <entry>
    <title>97-10进制与16进制互相转换</title>
    <url>/20210813/97-10%E8%BF%9B%E5%88%B6%E4%B8%8E16%E8%BF%9B%E5%88%B6%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><pre><code>  var a=&#39;1110&#39;;
  a.toString(16)
</code></pre>
<h2 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h2><pre><code>  parseInt(res,x);
  将任意进制字符串转换为十进制，x为如二进制，八进制，十六进制, 第二数数不写即为最常用的转换为整型十进制；
  var res=10001;
  parseInt(res,2);//res为二进制，将res转换成十进制进制
  parseInr(res,16)//res为十六进制，将res转换成十进制进制
</code></pre>
<h2 id="转换成’0x00d5’"><a href="#转换成’0x00d5’" class="headerlink" title="转换成’0x00d5’"></a>转换成’0x00d5’</h2><pre><code>  var num = 444;
  var hex_num = num.toString(16);
  function str_pad(hex)&#123;
      var zero = &#39;0000&#39;;
      var tmp  = 4-hex.length;
      return &#39;0x&#39; + zero.substr(0,tmp) + hex;
  &#125;
  //str_pad(hex_num) = 0x01bc;
</code></pre>
<h2 id="10-进制转换成-16"><a href="#10-进制转换成-16" class="headerlink" title="10 进制转换成 16"></a>10 进制转换成 16</h2><pre><code>  //num数值，width长度
  function int2hex(num, width) &#123;
    var hex = &quot;0123456789abcdef&quot;;
    var s = &quot;&quot;;
    while (num) &#123;
      s = hex.charAt(num % 16) + s;
      num = Math.floor(num / 16);
    &#125;
    if (typeof width === &quot;undefined&quot; || width &lt;= s.length) &#123;
      return &quot;0x&quot; + s;
    &#125;
    var delta = width - s.length;
    var padding = &quot;&quot;;
    while(delta-- &gt; 0) &#123;
      padding += &quot;0&quot;;
    &#125;
    return &quot;0x&quot; + padding + s;
  &#125;


  console.log(int2hex(479, 8));
  0x000001df
</code></pre>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出 Commonjs 和 Es Module</title>
    <url>/20210816/98-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-Commonjs-%E5%92%8C-Es-Module/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天我们来深度分析一下 Commonjs 和 Es Module，希望通过本文的学习，能够让大家彻底明白 Commonjs 和 Es Module 原理，能够一次性搞定面试中遇到的大部分有关 Commonjs 和 Es Module 的问题。<br>老规矩我们带上疑问开始今天的分析 🤔🤔🤔：</p>
<ol>
<li>Commonjs 和 Es Module 有什么区别 ？</li>
<li>Commonjs 如何解决的循环引用问题 ？</li>
<li>既然有了 exports，为何又出了 module.exports ? 既生瑜，何生亮 ？</li>
<li>require 模块查找机制 ？</li>
<li>Es Module 如何解决循环引用问题 ？</li>
<li>exports = {} 这种写法为何无效 ？</li>
<li>关于 import() 的动态引入 ？</li>
<li>Es Module 如何改变模块下的私有变量 ？</li>
<li>…</li>
</ol>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>早期 JavaScript 开发很容易存在全局污染和依赖管理混乱问题。这些问题在多人开发前端应用的情况下变得更加棘手。我这里例举一个很常见的场景：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./home.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./list.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上在没有模块化的前提下，如果在 html 中这么写，那么就会暴露一系列问题。</p>
<p>建议好好看看原文，👇</p>
<p>高赞文章(链接)[<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk0MjI0NTQxMzEyNDgzMzM2P3V0bV9zb3VyY2U9Z29sZF9icm93c2VyX2V4dGVuc2lvbiU1RA==">https://juejin.cn/post/6994224541312483336?utm_source=gold_browser_extension]<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解js引擎</title>
    <url>/20210817/99-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3js%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="宏观视角看-V8"><a href="#宏观视角看-V8" class="headerlink" title="宏观视角看 V8"></a>宏观视角看 V8</h2><p>具体看掘金文章 👇</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk2ODI1MDA5MjgwNzc4MjUz">教女朋友学前端之深入理解 JS 引擎<i class="fa fa-external-link-alt"></i></span></p>
<p>V8 是我们前端届的网红，它用 C++ 编写，是谷歌开源的高性能 JavaScript 和 WebAssembly 引擎，主要用在 Chrome、Node.js、Electron…中。<br>在开始讲我们的主角 V8 引擎之前，先来从宏观视角展开谈谈 V8 所处的位置，建立一个世界观。<br>在信息科技高速发展的今天，这个疯狂的大世界充斥着各种电子设备，我们每天都用的手机、电脑、电子手表、智能音箱以及现在马路上跑的越来越多的电动汽车。<br>作为软件工程师，我们可以将它们统一理解为“电脑”，它们都是由中央处理器(CPU)、存储以及输入、输出设备构成。CPU 就像厨师，负责按照菜谱执行命令烧菜。存储如同冰箱，负责保存数据以及要执行的命令(食材)。<br>当电脑接通电源，CPU 便开始从存储的某个位置读取指令，按照指令一条一条的执行命令，开始工作。电脑还可以接入各种外部设备，比如：鼠标、键盘、屏幕、发动机等等。CPU 不需要全部搞清楚这些设备的能力，它只负责和这些设备的端口进行数据交换就好。设备厂商也会在提供设备时，附带与硬件匹配的软件，来配合 CPU 一起工作。说到这里，我们便得到了最基础的计算机，也是计算机之父冯·诺伊曼在 1945 年提出的体系结构。<br>不过由于机器指令人类读起来非常不友好，难以阅读和记忆，所以人们发明了编程语言和编译器。编译器可以把人类更容易理解的语言转换为机器指令。除此之外，我们还需要操作系统，来帮我们解决软件治理的问题。我们知道操作系统有很多，如 Windows、Mac、Linux、Android、iOS、鸿蒙等，使用这些操作系统的设备更是数不胜数。为了消除客户端的多样性，实现跨平台并提供统一的编程接口，浏览器便诞生了。<br>所以，我们可以将浏览器看作操作系统之上的操作系统，而对于我们前端工程师最熟悉的 JavaScript 代码来说，浏览器引擎(如：V8)就是它的整个世界。</p>
<h2 id="星球最强-JavaScript-引擎"><a href="#星球最强-JavaScript-引擎" class="headerlink" title="星球最强 JavaScript 引擎"></a>星球最强 JavaScript 引擎</h2><p>毫无疑问，V8 是最流行、最强的 JavaScript 引擎，V8 这个名字的灵感来源于 50 年代经典的“肌肉车”的引擎。</p>
<p>Programming Languages Software Award</p>
<p>V8 也曾获得了学术界的肯定，拿到了 ACM SIGPLAN 的 Programming Languages Software Award。</p>
<p>主流 JS 引擎<br>JavaScript 的主流引擎如下所示：</p>
<ul>
<li>V8 (Google)</li>
<li>SpiderMonkey (Mozilla)</li>
<li>JavaScriptCore (Apple)</li>
<li>Chakra (Microsoft)</li>
<li>duktape(IOT)</li>
<li>JerryScript(IOT)</li>
<li>QuickJS</li>
<li>Hermes(Facebook-React Native)</li>
</ul>
<p>2008 年 9 月 2 日，V8 与 Chrome 在同一天开源，最初的代码提交日期可追溯到 2008 年 6 月 30 日，你可以通过下面的链接查看 V8 代码库的可视化演化进程。</p>
<p>CPU 的指令集就是机器语言，CPU 只能识别二进制的指令。但是对人类来说，二进制难以阅读和记忆，所以人们将二进制转换为可以识别、记忆的语言，也就是汇编语言，通过汇编编译器可以将汇编指令转换为机器指令。<br>不同的 CPU 有不同的指令集，使用汇编语言编程需要兼容不同的 CPU 架构，如 ARM、MIPS 等，学习成本比较高。汇编语言这层抽象还远远不够，所以高级语言应运而生，高级语言屏蔽了计算机架构的细节，兼容多种不同的 CPU 架构。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>131-2021高频面试题</title>
    <url>/20211110/999-2021%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="javascript-基础部分"><a href="#javascript-基础部分" class="headerlink" title="javascript 基础部分"></a>javascript 基础部分</h1><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><pre><code>typeof 能够快速区分数据基本结构，缺点就是 不能将 Object, Array,null 区分，都是返回 object
</code></pre>
<ol>
<li><p>typeof 的作用?</p>
<p>区分数据类型，可以返回 7 种数据类型: number,string,boolean,undefined,object,function 以及 es6 新增的 symbol</p>
</li>
<li><p>typeof 能正确区分数据类型吗？</p>
<p>不能。对于基本（原始）类型，除 null 都可以正确判断；对于引用类型，除 function 外，都会返回 object</p>
</li>
<li><p>typeof 注意事项</p>
<ul>
<li>typeof 返回值为 string 格式</li>
<li>typeof 未定义的变量不会报错，返回<code>undefined</code></li>
<li>typeof(null) === “object” 历史遗留的 bug</li>
<li>tyoeof 无法区分数组和对象 typeof([] === ‘object’)</li>
<li>tyoeof(NaN) === “number”</li>
</ul>
</li>
</ol>
<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><pre><code>优点：能够区分Array、Object和Function，适合用于判断自定义的类实例对象 缺点：Number，Boolean，String基本数据类型不能判断
</code></pre>
<ol>
<li>instanceof 判断对象的原型链上是否存在构造函数的原型。只能判断引用类型。</li>
<li>instanceof 常用来判断 A 是否为 B 的实例</li>
</ol>
<h2 id="typeof-是操作符还是函数"><a href="#typeof-是操作符还是函数" class="headerlink" title="typeof 是操作符还是函数?"></a>typeof 是操作符还是函数?</h2><p>分析: function 是 typeof 返回值之一，如果我们 typeof(typeof) 结果是报错 说明 typeof 并非函数</p>
<p>既然不是函数，那括号是什么意思？</p>
<blockquote>
<p>括号的作用是进行分组而非函数的调用。—— 《javascript 高级程序设计》</p>
</blockquote>
<h2 id="typeof-和-instanceof-区别"><a href="#typeof-和-instanceof-区别" class="headerlink" title="typeof 和 instanceof 区别"></a>typeof 和 instanceof 区别</h2><p>typeof 与 instanceof 都是判断数据类型的方法，区别如下：</p>
<ul>
<li>typeof 会返回一个变量的基本类型，instanceof 返回的是一个布尔值</li>
<li>instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li>
<li>而 typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了 function 类型以外，其他的也无法判断</li>
</ul>
<p>通用检测数据类型，可以采用 Object.prototype.toString，调用该方法，统一返回格式“[object Xxx]” 的字符串</p>
<h2 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h2><pre><code>优点：精准判断数据类型 缺点：写法繁琐不容易记，推荐进行封装后使用

  toString.call(()=&gt;&#123;&#125;)       // [object Function]
  toString.call(&#123;&#125;)           // [object Object]
  toString.call([])           // [object Array]
  toString.call(&#39;&#39;)           // [object String]
  toString.call(22)           // [object Number]
  toString.call(undefined)    // [object undefined]
  toString.call(null)         // [object null]
  toString.call(new Date)     // [object Date]
  toString.call(Math)         // [object Math]
  toString.call(window)       // [object Window]
</code></pre>
<h2 id="javascript-数据类型"><a href="#javascript-数据类型" class="headerlink" title="javascript 数据类型"></a>javascript 数据类型</h2><blockquote>
<p>基本数据类型：总共 7 种</p>
</blockquote>
<ul>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>undefined</li>
<li>null</li>
<li>bigInt</li>
<li>symbol</li>
</ul>
<blockquote>
<p>引用类型</p>
</blockquote>
<p>Object 对象(包括普通 Object、Function、Array、Date、RegExp、Math)</p>
<h2 id="的隐式转换规则"><a href="#的隐式转换规则" class="headerlink" title="== 的隐式转换规则"></a>== 的隐式转换规则</h2><ul>
<li>==: 只需要值相等，无需类型相等；null, undefined 在 == 下互相等且自身等</li>
<li>== 的转换规则:</li>
</ul>
<p>尽量避免使用 ==</p>
<h2 id="“1”-”2”-”3”-map-parseInt-的输出结果是多少"><a href="#“1”-”2”-”3”-map-parseInt-的输出结果是多少" class="headerlink" title="[“1”,”2”,”3”].map(parseInt)的输出结果是多少"></a>[“1”,”2”,”3”].map(parseInt)的输出结果是多少</h2><p>这个网红题考察的就是 parseInt 有两个参数。 map 传入的函数可执行三个参数：</p>
<pre><code>  // ele   遍历的元素
  // index 遍历的元素索引
  // arr   数组
  arr.map(function(ele, index, arr)&#123;&#125;)
</code></pre>
<p>[‘1’,’2’,’3’].map(parseInt)相当于执行了以下三次过程：</p>
<pre><code>  parseInt(&#39;1&#39;, 0, [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;])
  parseInt(&#39;2&#39;, 1, [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;])
  parseInt(&#39;3&#39;, 2, [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;])
</code></pre>
<ul>
<li>parseInt(‘1’, 0, [‘1’,’2’,’3’]): radix 为 0 时，默认取 10，最后返回 1</li>
<li>parseInt(‘2’, 1, [‘1’,’2’,’3’]): radix 取值为 2~36，返回 NaN</li>
<li>parseInt(‘3’, 2, [‘1’,’2’,’3’]): radix 取值为 2，二进制只包括 0，1，返回 NaN</li>
</ul>
<p>如何让上述代码返回[1,2,3]，使用你能想到的最简单的方案(要求使用[].map())</p>
<pre><code>  [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;].map(Number)
</code></pre>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvcGFyc2VJbnQ=">具体看 parseInt 用法<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="如何判断数组"><a href="#如何判断数组" class="headerlink" title="如何判断数组"></a>如何判断数组</h2><p>最简单的使用 es6 的 <code>Array.isArray</code></p>
<p>判断方式</p>
<pre><code>  // 如果为true，则arr为数组
  arr instanceof Array
</code></pre>
<p>instanceof 判断数组类型如此之简单，为何不推荐使用那？</p>
<p>instanceof 操作符的问题在于，如果网页中存在多个 iframe ，那便会存在多个 Array 构造函数，此时判断是否是数组会存在问题。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQ2NzcwOS9hcnRpY2xlL2RldGFpbHMvMTA1MzAyODUy">参考文章<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="number-能表示的整数的最大范围"><a href="#number-能表示的整数的最大范围" class="headerlink" title="number 能表示的整数的最大范围"></a>number 能表示的整数的最大范围</h2><ul>
<li><p>安全的整数范围：15 位数以下</p>
</li>
<li><p>JavaScript 并不能表示任意位的整数，最大的整数是 Number.MAX_SAFE_INTEGER(9007199254740991)，最小的整数是 Number.MIN_SAFE_INTEGER(-9007199254740991)</p>
</li>
<li><p>特别注意，很多 ID 是超出这个范围的，所以 ID 最好是用 string，当 ID 超出 15 位数的话，就肯定要用字符串类型了。</p>
</li>
<li><p>超出会失准</p>
<pre><code>var a = 9007199254740995
a; // 9007199254740996
</code></pre>
</li>
</ul>
<h2 id="2-toFixed-会输出什么结果"><a href="#2-toFixed-会输出什么结果" class="headerlink" title="2.toFixed() 会输出什么结果"></a>2.toFixed() 会输出什么结果</h2><p>会报错 <code>Uncaught SyntaxError: Invalid or unexpected token</code>，<code>.</code> 会被看做小数点，正确调用方式<code> (2).toFixed()</code></p>
<h2 id="查询某个对象是否有某个属性的方法"><a href="#查询某个对象是否有某个属性的方法" class="headerlink" title="查询某个对象是否有某个属性的方法"></a>查询某个对象是否有某个属性的方法</h2><p>使用 in 关键字,该方法可以判断对象的自有属性和继承来的属性是否存在。</p>
<h2 id="splice-和-slice-你能说说有啥用和区别吗"><a href="#splice-和-slice-你能说说有啥用和区别吗" class="headerlink" title="splice 和 slice 你能说说有啥用和区别吗"></a>splice 和 slice 你能说说有啥用和区别吗</h2><p>slice：截取功能</p>
<ul>
<li>截取数组为主，也可以截取字符串</li>
<li>返回新的数组，包含截取的元素</li>
<li>不改变原数组</li>
</ul>
<p>splice()：数组增删查改</p>
<ul>
<li>只能对数组增删查改，字符串无效</li>
<li>返回新的数组，内容是被删除的元素</li>
<li>会改变原数组</li>
</ul>
<h2 id="和-区别"><a href="#和-区别" class="headerlink" title="==和===区别"></a>==和===区别</h2><ul>
<li>=== 是严格相等，要求数据类型和值都要相等；== 只需要值相等。</li>
<li>== 会发生隐式类型转换，=== 不会发生隐式类型转换。</li>
</ul>
<h2 id="JS-中构造函数与普通函数的区别"><a href="#JS-中构造函数与普通函数的区别" class="headerlink" title="JS 中构造函数与普通函数的区别"></a>JS 中构造函数与普通函数的区别</h2><ol>
<li><p>调用方式不一样</p>
<p>//构造函数也是一个普通函数，创建方式和普通函数一样。<br>function Foo(){}<br>Foo();//普通函数调用方式<br>var f = new Foo();//构造函数调用方式</p>
</li>
</ol>
<ul>
<li>普通函数调用方式：直接调用 person();</li>
<li>构造函数调用方式：需要使用 new 关键字来调用 new person();</li>
</ul>
<ol start="2">
<li><p>作用也不一样（构造函数用来新建实例对象）</p>
</li>
<li><p>首字母大小写习惯</p>
</li>
</ol>
<ul>
<li>一般构造函数的函数名称会用大写</li>
<li>普通函数用小写</li>
</ul>
<ol start="4">
<li>函数中 this 的指向不同</li>
</ol>
<ul>
<li>普通函数中的 this，在严格模式下指向 undefined，非严格模式下指向 window 对象。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span>===<span class="built_in">window</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"><span class="comment">//代码运行结果：true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>构造函数的 this 则是指向它创建的对象实例。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name = <span class="string">&quot;令狐冲&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(f.name);</span><br><span class="line"><span class="comment">//代码运行结果：令狐冲</span></span><br><span class="line"><span class="comment">//补充：构造函数的函数名和类名相同：Foo()这个构造函数，Foo是函数名，也是这个对象的类名。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>写法的不同</li>
</ol>
<p>构造函数：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> Person(<span class="type">name</span>)&#123;</span><br><span class="line">	this.name = <span class="type">name</span>;</span><br><span class="line">&#125;</span><br><span class="line">var p = <span class="built_in">new</span> Person(<span class="string">&#x27;John&#x27;</span>);//使用<span class="built_in">new</span>关键字，不使用<span class="keyword">return</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>普通函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">	obj.name = name;</span><br><span class="line">	<span class="keyword">return</span> obj;<span class="comment">//使用return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = person(<span class="string">&#x27;john&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">function person(name)&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;<span class="comment">//使用return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = person(<span class="string">&#x27;john&#x27;</span>),</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="类数组与数组区别，为什么要设置类数组"><a href="#类数组与数组区别，为什么要设置类数组" class="headerlink" title="类数组与数组区别，为什么要设置类数组"></a>类数组与数组区别，为什么要设置类数组</h2><p>类数组</p>
<ul>
<li>所谓类数组对象，就是指可以通过索引属性访问元素并且拥有 length 属性的对象。</li>
</ul>
<p>类数组与数组区别</p>
<ul>
<li>类数组不具备数组的方法(splice，split，push..)</li>
<li>类数组是一个普通对象，数组类型是 Array<br>为什么设置类数组</li>
<li>类数组对象的设计目的更多是只让你遍历和访问下标,而不是去添加或删除元素</li>
</ul>
<h2 id="null-与-undefined-的区别"><a href="#null-与-undefined-的区别" class="headerlink" title="null 与 undefined 的区别"></a>null 与 undefined 的区别</h2><ul>
<li>null 表示一个”无”的对象，也就是该处不应该有值；而 undefined 表示未定义。</li>
<li>在转换为数字时结果不同，Number(null)为 0，而 undefined 为 NaN。</li>
</ul>
<p>使用场景上：</p>
<ol>
<li>null：</li>
</ol>
<ul>
<li>作为函数的参数，表示该函数的参数不是对象</li>
<li>作为对象原型链的终点</li>
</ul>
<ol start="2">
<li>undefined:</li>
</ol>
<ul>
<li>变量声明未赋值，等于 undefined</li>
<li>调用函数时，未提供参数值，该参数等于 undefined</li>
<li>对象没有赋值属性，该属性的值为 undefined</li>
<li>函数没有返回值时，默认返回 undefined</li>
</ul>
<h1 id="JavaScript-深入部分"><a href="#JavaScript-深入部分" class="headerlink" title="JavaScript 深入部分"></a>JavaScript 深入部分</h1><h2 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h2><ul>
<li><p>默认绑定: 非严格模式下 this 指向全局对象，严格模式下 this 会绑定为 undefined</p>
</li>
<li><p>隐式绑定: 满足 XXX.fn() 格式，fn 的 this 指向 XXX。如果存在链式调用， this 永远指向最后调用它的那个对象 隐式绑定丢失：起函数别名，通过别名运行；函数作为参数会造成隐式绑定丢失。</p>
</li>
<li><p>显式绑定: 通过 call/apply/bind 修改 this 指向</p>
</li>
<li><p>new 绑定: 通过 new 来调用构造函数，会生成一个新对象，并且把这个新对象绑定为调用函数的 this 。</p>
</li>
<li><p>箭头函数绑定: 箭头函数没有 this ，它的 this 是通过作用域链查到外层作用域的 this ，且指向函数定义时的 this 而非执行时<br>优先级</p>
</li>
</ul>
<h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><p><a href="https://blog.wy1991.cn/20210629/22-js-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/">原型与原型链</a></p>
<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><ol>
<li><p>代码开始执行，创建一个全局调用栈，script 作为宏任务执行</p>
</li>
<li><p>执行过程过同步任务立即执行，异步任务根据异步任务类型分别注册到微任务队列和宏任务队列</p>
</li>
<li><p>同步任务执行完毕，查看微任务队列</p>
<ul>
<li>若存在微任务，将微任务队列全部执行(包括执行微任务过程中产生的新微任务)</li>
<li>若无微任务，查看宏任务队列，执行第一个宏任务，宏任务执行完毕，查看微任务队列，重复上述操作，直至宏任务队列为空</li>
</ul>
</li>
</ol>
<p><a href="https://blog.wy1991.cn/20210627/19-JS%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-eventLoop/">参考链接</a></p>
<h2 id="谈谈对作用域链的理解"><a href="#谈谈对作用域链的理解" class="headerlink" title="谈谈对作用域链的理解"></a>谈谈对作用域链的理解</h2><p>词法作用域与动态作用域等名词，以及对 this 的理解。可以去阅读<code>你不知道的 JavaScript（上卷）</code></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyMDM2MDkxL2FydGljbGUvZGV0YWlscy8xMjA0NDE5ODI=">参考链接<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="谈谈你对闭包的理解"><a href="#谈谈你对闭包的理解" class="headerlink" title="谈谈你对闭包的理解"></a>谈谈你对闭包的理解</h2><p><a href="https://blog.wy1991.cn/20210628/74-%E4%B8%80%E5%8F%A5%E8%AF%9D%E8%A7%A3%E9%87%8A%E9%97%AD%E5%8C%85/">参考链接</a></p>
<h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><blockquote>
<p><code>JavaScript</code>是解释性语言，也就是说，编译一行，执行一行，但<code>js</code>并非上来就进入编译环节，它在编译之前存在预编译过程。</p>
</blockquote>
<p><code>js</code>中预编译一般有两种：全局的预编译和函数的预编译，分别发生在<code>script</code>内代码执行前和函数的执行前。</p>
<p>在学习<code>JavaScript</code>预编译之前，先了解一下<code>JavaScript</code>从编译到执行的过程，大致可分为四步：</p>
<ol>
<li>词法分析</li>
<li>语法分析：检查代码是否存在错误，若有错误，引擎会抛出语法错误。同时会构建一颗抽象语法树(<code>AST</code>)。</li>
<li>预编译</li>
<li>解释执行</li>
</ol>
<h3 id="函数预编译"><a href="#函数预编译" class="headerlink" title="函数预编译"></a>函数预编译</h3><p>首先来看一个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>就以上述例子中的<code>a</code>为例，有形参<code>a</code>，变量<code>a</code>，函数<code>a</code>，那<code>test</code>函数执行时，此时的<code>a</code>到底是什么呢？</p>
<p>输出结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ <span class="function"><span class="title">a</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">ƒ () &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>要想弄明白最终的输出结果，就不得不好好学习一下预编译的详细过程。</p>
<p>在预编译学习中，经常听到一句话：<strong>函数声明整体提升，变量声明提升</strong>。</p>
<p>这句话可以解决大多数场景下的预编译面试题，但光凭这句话无法吃透预编译的，因此接下来我们来一起捋一下函数预编译的详细流程。</p>
<h4 id="函数预编译四部曲"><a href="#函数预编译四部曲" class="headerlink" title="函数预编译四部曲"></a>函数预编译四部曲</h4><ol>
<li>预编译开始，会建立<code>AO(Activation Object)</code>对象</li>
<li>找形参和变量声明，使其作为<code>AO</code>的属性名，值赋予<code>undefined</code></li>
<li>实参和形参相统一(将实参值赋值给形参)</li>
<li>找函数声明，函数名作为<code>AO</code>属性名，值赋予函数体</li>
</ol>
<h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><p>学习了函数的预编译过程，就可以回头细细的品味一下上面的案例：</p>
<ol>
<li>先建立<code>AO</code>，并找形参和变量声明，值赋予<code>undefined</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">AO :&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>形参实参相统一<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">AO :&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>找函数声明，值赋予函数体<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">AO :&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="attr">b</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>预编译过程结束，挨着分析一下<code>console</code>的打印结果：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">第一个<span class="built_in">console</span>.log(a); <span class="comment">// 此时AO中a的值为function a() &#123;&#125;</span></span><br><span class="line">执行赋值操作：</span><br><span class="line">    a = <span class="number">123</span> <span class="comment">// AO中的a值修改为123</span></span><br><span class="line">    第二个<span class="built_in">console</span>.log(a) <span class="comment">// 123</span></span><br><span class="line">    第三个<span class="built_in">console</span>.log(a) <span class="comment">// 123</span></span><br><span class="line">    b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// AO中的b值修改为function b()&#123;&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(b) <span class="comment">// function b()&#123;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="全局预编译"><a href="#全局预编译" class="headerlink" title="全局预编译"></a>全局预编译</h3><p>全局中不存在形参和实参，所以全局预编译只需处理变量声明和函数声明。</p>
<h4 id="全局预编译三部曲"><a href="#全局预编译三部曲" class="headerlink" title="全局预编译三部曲"></a>全局预编译三部曲</h4><ol>
<li>生成<code>GO(Global Object)</code></li>
<li>找变量声明，由于全局变量默认挂载在<code>window</code>之上，若<code>window</code>当前已存在当前属性，忽略当前操作，若没有，变量作为属性名，值赋予<code>undefined</code>。</li>
<li>找函数声明，函数与变量类似，先去<code>window</code>上查看，不存在，函数作为函数名，值为函数体</li>
</ol>
<h4 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h4><p>将函数预编译案例稍微修改，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test部分的结果与函数部分相同，再次只分析全局部分</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">  <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>生成<code>GO</code>，变量提升，函数提升，得到<code>GO</code>如下:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GO/<span class="built_in">window</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">test</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>因此第一个<code>a</code>的值为<code>undefined</code>，随后<code>a</code>赋值为<code>1</code>，所以第二个<code>a</code>的值为<code>1</code></li>
</ol>
<blockquote>
<p>test 中定义了变量 a，因此打印的 a 为自身 AO 中的值。如果 test 中没有定义 a，就会沿着作用域链，当 GO 中查找 a。</p>
</blockquote>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>1. 当函数中出现同样名称的函数名和变量名，编译器真的会先做变量提升再去函数提升吗？这个问题暂时无法验证，如果有大佬知道，希望可以评论告诉一下，谢谢</strong></p>
<p><strong>2. let/const 声明的变量应当同样进行了变量提升，只不过它与 var 声明的变量做了一定的区分</strong></p>
<h3 id="常见面试题分析"><a href="#常见面试题分析" class="headerlink" title="常见面试题分析"></a>常见面试题分析</h3><h4 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">  <span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(b)</span><br><span class="line">  c = <span class="number">234</span></span><br><span class="line">  <span class="built_in">console</span>.log(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line">test()</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(c)</span><br></pre></td></tr></table></figure>

<ol>
<li><p>生成<code>GO</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GO: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">test</span>: <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="attr">c</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JavaScript 中变量如果未经声明就赋值，会默认将变量挂载到 window 对象上，这也就是所谓的<code>imply global</code>。<code>c</code>就是<code>imply global</code>。</p>
</blockquote>
</li>
<li><p><code>test</code>执行，生成<code>test</code>的<code>AO</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AO还会存储[[scope]]属性，存储AO的作用域链</span></span><br><span class="line"></span><br><span class="line"><span class="attr">AO</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="literal">undefined</span>,</span><br><span class="line">    [[scope]]: [TestAO, GO]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有同学会问，<code>if(a)</code>为 false，if 内部不会执行，那 test 的 AO 中为什么还会有 b 啊？预编译并不是执行，它只不过把变量、函数等进行提升，只有在执行时，才会设计代码逻辑的判断。</p>
</blockquote>
</li>
<li><p>分析<code>test</code>函数执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// AO中b为undefined</span></span><br><span class="line"><span class="keyword">if</span> (a)</span><br><span class="line">  <span class="comment">// AO中无a，沿[[scope]]找到GO中的a，值为undefined</span></span><br><span class="line">  b = <span class="number">100</span> <span class="comment">// 不执行</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// undefined</span></span><br><span class="line">c = <span class="number">234</span> <span class="comment">// AO中没有c属性，沿[[scope]]找到GO中的c修改为234</span></span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// 打印的是GO中的c，234</span></span><br><span class="line"><span class="comment">// test执行完毕，AO销毁</span></span><br></pre></td></tr></table></figure></li>
<li><p>分析剩余代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span> <span class="comment">// GO中的a修改为10</span></span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// GO中c值为234，234</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo)</span><br><span class="line">  <span class="keyword">if</span> (!foo) &#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(foo)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar()</span><br></pre></td></tr></table></figure>

<h5 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  a = <span class="number">10</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">b()</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>

<p><strong>return; 与上面案例的 if 一样，预编译环节不会处理</strong></p>
<h5 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="题目四"><a href="#题目四" class="headerlink" title="题目四"></a>题目四</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line">foo()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<h5 id="答案-2"><a href="#答案-2" class="headerlink" title="答案"></a>答案</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">A</span><br><span class="line">ƒ () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">B</span><br><span class="line">ƒ () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">B</span><br></pre></td></tr></table></figure>

<h4 id="题目五"><a href="#题目五" class="headerlink" title="题目五"></a>题目五</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a1 = a</span><br><span class="line">  <span class="keyword">var</span> a = foo</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">  &#125;</span><br><span class="line">  a1()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h5 id="答案-3"><a href="#答案-3" class="headerlink" title="答案"></a>答案</h5><p><code>1</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>预编译的题目多数情况下就可以采用以下原则：</p>
<ul>
<li>函数声明，<strong>整体</strong>提升</li>
<li>变量声明，<strong>声明</strong>提升</li>
</ul>
<p>如果遇到复杂的情况，就要按照全局预编译的三部曲和函数预编译的四部曲一步一步推导。</p>
<p><strong>最后，在预编译时一定要注意</strong>：<code>return、if</code>等代码逻辑判断是在执行时候做的，预编译不管这些，预编译只管变量、形参、函数等。</p>
<h2 id="new-操作符就做了哪些"><a href="#new-操作符就做了哪些" class="headerlink" title="new 操作符就做了哪些"></a>new 操作符就做了哪些</h2><p>MDN 中对 new 的描述: 使用 new 来构建函数，会执行如下四部操作：</p>
<ul>
<li>创建一个空的简单 JavaScript 对象（即 {} ）；</li>
<li>为步骤 1 新创建的对象添加属性 proto ，将该属性链接至构造函数的原型对象 ；</li>
<li>将步骤 1 新创建的对象作为 this 的上下文 ；</li>
<li>如果该函数没有返回对象，则返回 this 。</li>
</ul>
<h2 id="你真的了解垃圾回收机制吗"><a href="#你真的了解垃圾回收机制吗" class="headerlink" title="你真的了解垃圾回收机制吗"></a>你真的了解垃圾回收机制吗</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTgxNTg4Mjc2MzU2MzE3MjE0">参考链接<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="JS-原型链继承与-Class-继承"><a href="#JS-原型链继承与-Class-继承" class="headerlink" title="JS 原型链继承与 Class 继承"></a>JS 原型链继承与 Class 继承</h2><h3 id="基于原型继承"><a href="#基于原型继承" class="headerlink" title="基于原型继承"></a>基于原型继承</h3><p>原型实现继承的核心在于通过子类的构造函数中通过 Parent.call(this)继承父类的属性，然后改变子类的原型为 new Parent() 来继承父类的函数。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5原型链构造对象</span></span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="constructor">People(<span class="params">name</span>, <span class="params">age</span>)</span> &#123;</span><br><span class="line">    this.name = name<span class="operator"> || </span>&#x27;pray&#x27;</span><br><span class="line">    this.age = age<span class="operator"> || </span><span class="number">27</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//父类方法</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">People</span>.</span></span>prototype.sayHi = <span class="keyword">function</span> <span class="literal">()</span> &#123;</span><br><span class="line">    console.log(this.name + &#x27; <span class="keyword">of</span> &#x27; + this.age + &#x27; sayHi&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES5原型链继承对象</span></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">function</span> <span class="constructor">Student(<span class="params">name</span>, <span class="params">age</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//继承父类属性</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">People</span>.</span></span>call(this, name, age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承父类方法</span></span><br><span class="line">(<span class="keyword">function</span> <span class="literal">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建空类</span></span><br><span class="line">    <span class="keyword">let</span> Super = <span class="keyword">function</span> <span class="literal">()</span> &#123; &#125;;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Super</span>.</span></span>prototype = <span class="module-access"><span class="module"><span class="identifier">People</span>.</span></span>prototype;</span><br><span class="line">    <span class="comment">//父类的实例作为子类的原型</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Student</span>.</span></span>prototype = <span class="keyword">new</span> <span class="constructor">Super()</span>;</span><br><span class="line">&#125;)<span class="literal">()</span>;</span><br><span class="line"><span class="comment">//修复构造函数指向问题</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Student</span>.</span></span>prototype.constructor = Student;</span><br><span class="line"><span class="keyword">let</span> studentObj = <span class="keyword">new</span> <span class="constructor">Student()</span>;</span><br><span class="line">studentObj.say<span class="constructor">Hi()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="基于-Class-继承"><a href="#基于-Class-继承" class="headerlink" title="基于 Class 继承"></a>基于 Class 继承</h3><p>class 实现继承的核心在于使用 extends 表明继承自哪个父类，并且在子类构造函数中必须调用 super 继承父类属性和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 Class构造对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name = <span class="string">&#x27;pray&#x27;</span>, age = <span class="number">18</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; of &#x27;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27; says Hi!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6 extends 继承父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name = <span class="string">&#x27;student1&#x27;</span>, age = <span class="string">&#x27;22&#x27;</span>, score = <span class="number">90</span></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//继承父类属性</span></span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="comment">//自身属性</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//继承父类属性方法</span></span><br><span class="line">        <span class="built_in">super</span>.sayHi()</span><br><span class="line">        <span class="comment">//自身方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;score：&#x27;</span> + <span class="built_in">this</span>.score)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Student()</span><br><span class="line">person.sayHi()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="call、apply、bind-区别"><a href="#call、apply、bind-区别" class="headerlink" title="call、apply、bind 区别"></a>call、apply、bind 区别</h2><p><a href="https://blog.wy1991.cn/20210629/12-js-call-apply-bind%E5%8C%BA%E5%88%AB/">参考链接</a></p>
<h2 id="cookie-localStorage-sessionStorage-区别"><a href="#cookie-localStorage-sessionStorage-区别" class="headerlink" title="cookie, localStorage sessionStorage 区别"></a>cookie, localStorage sessionStorage 区别</h2><table>
<thead>
<tr>
<th>特性</th>
<th>cookie</th>
<th>localStorage</th>
<th>sessionStorage</th>
</tr>
</thead>
<tbody><tr>
<td>生命周期</td>
<td>可设置失效时间，没有设置的话，默认是关闭浏览器后失效</td>
<td>除非被清除，否则永久保存</td>
<td>仅在当前会话下有效，关闭页面或浏览器后被清除</td>
</tr>
<tr>
<td>存放数据大小</td>
<td>4K 左右</td>
<td>一般为 5MB</td>
<td>一般为 5MB</td>
</tr>
<tr>
<td>http 请求</td>
<td>每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能问题</td>
<td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
<td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
</tr>
<tr>
<td>易用性</td>
<td>需要程序员自己封装，源生的 Cookie 接口不友好</td>
<td>源生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持</td>
<td>源生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持</td>
</tr>
</tbody></table>
<h2 id="数组高阶方法"><a href="#数组高阶方法" class="headerlink" title="数组高阶方法"></a>数组高阶方法</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDI0MzA1MzY4NTk1NDMxNDU0">参考链接<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="防抖与节流的区别"><a href="#防抖与节流的区别" class="headerlink" title="防抖与节流的区别"></a>防抖与节流的区别</h2><ul>
<li><p>防抖 (debounce): 将多次高频操作优化为只在最后一次执行，通常使用的场景是：用户输入，只需再输入完成后做一次输入校验即可。</p>
</li>
<li><p>节流(throttle): 每隔一段时间后执行一次，也就是降低频率，将高频操作优化成低频操作，通常使用场景: 滚动条事件 或者 resize 事件，通常每隔 100~500 ms 执行一次即可。</p>
</li>
</ul>
<p><a href="https://blog.wy1991.cn/20210627/62-%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/">参考链接</a></p>
<h2 id="script-标签的-defer-和-async-属性有什么区别"><a href="#script-标签的-defer-和-async-属性有什么区别" class="headerlink" title="script 标签的 defer 和 async 属性有什么区别"></a>script 标签的 defer 和 async 属性有什么区别</h2><p>MDN 关于 defer 和 async 属性的说明如下：</p>
<ol>
<li>不设置 async 和 defer 属性， 那么脚本会同步下载并执行， 阻塞后续 dom 的渲染</li>
<li>设置了 defer 属性。脚本异步加载，加载完后，在触发 domContentLoaded 事件之前执行。</li>
<li>设置了 async 属性。脚本异步加载， 加载完后，立即执行，并阻塞后续 dom 渲染。不影响 domContentLoaded 事件的触发</li>
</ol>
<h2 id="同步任务与异步任务区别"><a href="#同步任务与异步任务区别" class="headerlink" title="同步任务与异步任务区别"></a>同步任务与异步任务区别</h2><h3 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h3><p>同步运行，同步任务是存储在栈上的，每次会同步清楚每个同步任务，一次只能运行一个任务，函数调用后需等到函数执行结束，返回执行的结果，才能进行下一个任务，这样就会导致线程阻塞。</p>
<h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><p>异步模式，即与同步模式相反，异步任务是以队列的形式来储存的，可以一起执行多个任务，函数调用后不会立即返回执行的结果，如果前一个人物需要等待，可先执行后面的任务，等到前置任务结果返回后再继续回调 例：</p>
<h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><p>天气冷了，早上刚醒来想喝点热水暖暖身子，但这每天起早贪黑 996，晚上回来太累躺下就睡，没开水啊，没法子，只好急急忙忙去烧水。<br>现在早上太冷了啊，不由得在被窝里面多躺了一会，收拾的时间紧紧巴巴，不能空等水开，于是我便趁此去洗漱，收拾自己。<br>洗漱完，水开了，喝到暖暖的热水，舒服啊！<br>舒服完，开启新的 996 之日，打工人出发！<br>烧水和洗漱是在同时间进行的，这就是<strong>计算机中的异步</strong>。<br><strong>计算机中的同步</strong>是连续性的动作，上一步未完成前，下一步会发生堵塞，直至上一步完成后，下一步才可以继续执行。例如：只有等水开，才能喝到暖暖的热水。</p>
<h2 id="使用-new-调用函数，而这个函数中有-return，那它-return-出来的是什么"><a href="#使用-new-调用函数，而这个函数中有-return，那它-return-出来的是什么" class="headerlink" title="使用 new 调用函数，而这个函数中有 return，那它 return 出来的是什么"></a>使用 new 调用函数，而这个函数中有 return，那它 return 出来的是什么</h2><p><strong>构造函数有返回值的情况：当构造函数返回值为对象时，直接返回这个对象；否则返回 new 创建的对象</strong></p>
<p>下面为测试部分</p>
<h3 id="返回值为基本类型"><a href="#返回值为基本类型" class="headerlink" title="返回值为基本类型"></a>返回值为基本类型</h3><p>假设构造函数返回值为一个基本类型，我们来看一下最后的返回结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thin_User</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;i will keep thin forever&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thin_User.prototype.eatToMuch = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;i eat so much, but i&#x27;m very thin!!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thin_User.prototype.isThin = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaobao = <span class="keyword">new</span> Thin_User(<span class="string">&#x27;zcxiaobao&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(xiaobao.name) <span class="comment">// zcxiaobao</span></span><br><span class="line"><span class="built_in">console</span>.log(xiaobao.age) <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(xiaobao.isThin) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// i eat so much, but i&#x27;m very thin!!!</span></span><br><span class="line">xiaobao.eatToMuch()</span><br></pre></td></tr></table></figure>

<p>最后的返回结果好像受到任何干扰，难道构造函数不会对返回值进行处理吗？<br>不急，我们来接着测试一下返回值为对象的情况。</p>
<h3 id="返回值为对象"><a href="#返回值为对象" class="headerlink" title="返回值为对象"></a>返回值为对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thin_User</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">age</span>: age * <span class="number">10</span>,</span><br><span class="line">    <span class="attr">fat</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thin_User.prototype.eatToMuch = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 白日做梦吧，留下肥胖的泪水</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;i eat so much, but i&#x27;m very thin!!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Thin_User.prototype.isThin = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaobao = <span class="keyword">new</span> Thin_User(<span class="string">&#x27;zcxiaobao&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment">// Error: xiaobao.eatToMuch is not a function</span></span><br><span class="line">xiaobao.eatToMuch()</span><br></pre></td></tr></table></figure>

<p>当我执行 eatToMuch 时，控制台直接报错，没有当前函数，于是我打印了 xiaobao 对象：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe2e8b6bd0f6443389fdd8173ed97a7b~tplv-k3u1fbpfcp-watermark.awebp"></p>
<p>发现 xiaobao 对象的 age 发生了改变，而且增加了 fat 属性，正好与构造函数的返回值一样。</p>
<h2 id="什么是-promise？实现一个简单的-promise"><a href="#什么是-promise？实现一个简单的-promise" class="headerlink" title="什么是 promise？实现一个简单的 promise"></a>什么是 promise？实现一个简单的 promise</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNjA3OTY4NDgxMjg3">参考文章<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="vue3-为什么抛弃了-Object-definePropetry-采用-proxy"><a href="#vue3-为什么抛弃了-Object-definePropetry-采用-proxy" class="headerlink" title="vue3 为什么抛弃了 Object.definePropetry 采用 proxy"></a>vue3 为什么抛弃了 Object.definePropetry 采用 proxy</h2><ol>
<li>Object.defineProperty 无法监控到数组下标的变化(其实是可以的，只是考虑到性能/体验的性价比，所以放弃了这个特性)，导致数组追加元素，不能实时响应（为了解决这个问题，Vue2 重写了几个数组方法 比如:<code>push</code>,<code>pop</code>….）</li>
<li>Object.defineProperty 只能劫持对象的属性，需要对每个对象属性进行遍历，如果属性是对象，还需要深度遍历。proxy 可以劫持整个对象，并返回一个新的对象</li>
<li>proxy 不仅可以代理对象，还能代理数组，还可以代理动态增加的属性</li>
</ol>
<h2 id="vue-中双向绑定和-vuex-冲突怎么办"><a href="#vue-中双向绑定和-vuex-冲突怎么办" class="headerlink" title="vue 中双向绑定和 vuex 冲突怎么办?"></a>vue 中双向绑定和 vuex 冲突怎么办?</h2><p>例子: <code>&lt;input v-model=&quot;obj.message&quot;&gt; </code><br>场景：obj 是计算属性中返回的一个 vuex store 对象，如果在严格模式下，v-model 直接修改 obj.message 会报错，</p>
<p>可以使用 <code>计算属性</code> <code>get</code> <code>set</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  message: &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.obj.message</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> (value) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">&#x27;updateMessage&#x27;</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC9ndWlkZS9mb3Jtcy5odG1sIyVFNSU4RiU4QyVFNSU5MCU5MSVFNyVCQiU5MSVFNSVBRSU5QSVFNyU5QSU4NCVFOCVBRSVBMSVFNyVBRSU5NyVFNSVCMSU5RSVFNiU4MCVBNw==">参考文档<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="介绍-HTTPS-握手过程"><a href="#介绍-HTTPS-握手过程" class="headerlink" title="介绍 HTTPS 握手过程"></a>介绍 HTTPS 握手过程</h2><ol>
<li>客户端使用 https 的 url 访问 web 服务器，要求与服务器建立 ssl 连接</li>
<li>web 服务器收到客户端请求后，会将网站的证书(包含公钥)传送一份给客户端</li>
<li>客户端收到网站的证书后会检查证书的颁发机构以及过期时间，如果没有问题就随机产生一个密钥</li>
<li>客户端利用公钥将会话秘钥加密，并传送给服务端，服务端利用自己的私钥解密出会话密钥</li>
<li>之后服务器与客户端使用密钥加密传输</li>
</ol>
<h2 id="答题"><a href="#答题" class="headerlink" title="答题"></a>答题</h2><p>题目如下:</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">var <span class="attr">a</span> = ?;</span><br><span class="line"><span class="keyword">if</span>(<span class="attr">a</span> == <span class="number">1</span> &amp;&amp; <span class="attr">a</span> == <span class="number">2</span> &amp;&amp; <span class="attr">a</span> == <span class="number">3</span>)&#123;</span><br><span class="line"> 	conso.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答：<br>可以利用 js == 隐式转换重写 toString</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">var <span class="attr">a</span> = &#123;</span><br><span class="line">  <span class="attr">i</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">toString</span>()&#123;</span><br><span class="line">    return a.i++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( <span class="attr">a</span> == <span class="number">1</span> &amp;&amp; <span class="attr">a</span> == <span class="number">2</span> &amp;&amp; <span class="attr">a</span> == <span class="number">3</span> ) &#123;</span><br><span class="line">  console.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="为什么-for-的性能比-forEach-高"><a href="#为什么-for-的性能比-forEach-高" class="headerlink" title="为什么 for 的性能比 forEach 高"></a>为什么 for 的性能比 forEach 高</h2><p>经过测试:</p>
<ul>
<li>在 10 万这个级别下， forEach 的性能是 for 的十倍</li>
<li>在 100 万这个量级下， forEach 的性能是和 for 的一致</li>
<li>在 1000 万级以上的量级上 ， forEach 的性能远远低于 for 的性能</li>
</ul>
<h2 id="使用-JavaScript-Proxy-实现简单的数据绑定"><a href="#使用-JavaScript-Proxy-实现简单的数据绑定" class="headerlink" title="使用 JavaScript Proxy 实现简单的数据绑定"></a>使用 JavaScript Proxy 实现简单的数据绑定</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;b id=<span class="string">&quot;count&quot;</span>&gt;&lt;/b&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;increase()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;decrease()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target[property];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, property, value</span>)</span> &#123;</span><br><span class="line">    target[property] = value;</span><br><span class="line">    render(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">render(proxy.count);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;count&#x27;</span>).innerHTML = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increase</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  proxy.count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrease</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  proxy.count -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="已知如下代码，如何修改才能让图片宽度为-300px-？注意下面代码不可修改"><a href="#已知如下代码，如何修改才能让图片宽度为-300px-？注意下面代码不可修改" class="headerlink" title="已知如下代码，如何修改才能让图片宽度为 300px ？注意下面代码不可修改"></a>已知如下代码，如何修改才能让图片宽度为 300px ？注意下面代码不可修改</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attribute">style</span>=<span class="string">&quot;width:480px!important;”&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>max-width: 300px</li>
<li>transform: scale(0.625,0.625)</li>
<li>zoom: 0.625</li>
</ol>
<h2 id="如何判断输入的是一个正确的网址"><a href="#如何判断输入的是一个正确的网址" class="headerlink" title="如何判断输入的是一个正确的网址"></a>如何判断输入的是一个正确的网址</h2><p>正则</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">function validURL(url) &#123;</span><br><span class="line">  const reg = /^(https?|<span class="type">ftp</span>):\/\/([a-zA-Z0<span class="number">-9.</span>-]+(:[a-zA-Z0<span class="number">-9.</span>&amp;%$-]+)*@)*((<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|<span class="type">2</span>[<span class="number">0</span><span class="number">-4</span>][<span class="number">0</span><span class="number">-9</span>]|<span class="type">1</span>[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;|<span class="type">[1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]?)(\.(<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|<span class="type">2</span>[<span class="number">0</span><span class="number">-4</span>][<span class="number">0</span><span class="number">-9</span>]|<span class="type">1</span>[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;|<span class="type">[1</span><span class="number">-9</span>]?[<span class="number">0</span><span class="number">-9</span>]))&#123;<span class="number">3</span>&#125;|<span class="type">([a</span>-zA-Z0<span class="number">-9</span>-]+\.)*[a-zA-Z0<span class="number">-9</span>-]+\.(com|<span class="type">edu</span>|<span class="type">gov</span>|<span class="type">int</span>|<span class="type">mil</span>|<span class="type">net</span>|<span class="type">org</span>|<span class="type">biz</span>|<span class="type">arpa</span>|<span class="type">info</span>|<span class="type">name</span>|<span class="type">pro</span>|<span class="type">aero</span>|<span class="type">coop</span>|<span class="type">museum</span>|<span class="type">[a</span>-zA-Z]&#123;<span class="number">2</span>&#125;))(:[<span class="number">0</span><span class="number">-9</span>]+)*(\/($|<span class="type">[a</span>-zA-Z0<span class="number">-9.</span>,?&#x27;\\+&amp;%$#=~<span class="keyword">_</span>-]+))*$/</span><br><span class="line">  <span class="keyword">return</span> reg.test(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模拟实现一个-localStorage"><a href="#模拟实现一个-localStorage" class="headerlink" title="模拟实现一个 localStorage"></a>模拟实现一个 localStorage</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> localStorageMock = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">let</span> store = &#123;&#125;</span><br><span class="line">			<span class="keyword">return</span> &#123;</span><br><span class="line">				<span class="attr">getItem</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123; <span class="keyword">return</span> store[key] || <span class="literal">null</span> &#125;,</span><br><span class="line">				<span class="attr">setItem</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123; store[key] = value.toString() &#125;,</span><br><span class="line">				<span class="attr">removeItem</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123; <span class="keyword">delete</span> store[key] &#125;,</span><br><span class="line">				<span class="attr">clear</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; store = &#123;&#125; &#125;,</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)()</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">&#x27;localStorage2&#x27;</span>, &#123;</span><br><span class="line">			<span class="attr">value</span>: localStorageMock</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		localStorage2.setItem(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">		<span class="built_in">console</span>.log(localStorage2.getItem(<span class="string">&quot;test&quot;</span>))  <span class="comment">//test</span></span><br><span class="line">		localStorage2.removeItem(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">		<span class="built_in">console</span>.log(localStorage2.getItem(<span class="string">&quot;test&quot;</span>))  <span class="comment">//null</span></span><br><span class="line">		localStorage2.setItem(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">		localStorage2.clear()</span><br><span class="line">		<span class="built_in">console</span>.log(localStorage2.getItem(<span class="string">&quot;test&quot;</span>))  <span class="comment">//null</span></span><br><span class="line">    <span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>

<h2 id="已知数据格式，实现一个函数-fn-找出链条中所有的父级-id"><a href="#已知数据格式，实现一个函数-fn-找出链条中所有的父级-id" class="headerlink" title="已知数据格式，实现一个函数 fn 找出链条中所有的父级 id"></a>已知数据格式，实现一个函数 fn 找出链条中所有的父级 id</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 已知数据格式，实现一个函数 fn 找出链条中所有的父级 id</span></span><br><span class="line"><span class="comment">* 实现： 通过es6的class实现，思路：递归调用，下传当前的父辈的id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindFather</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">data</span> = <span class="keyword">this</span>.<span class="keyword">init</span>(),</span><br><span class="line">        <span class="keyword">this</span>.target = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(value,<span class="keyword">data</span>,idArr) &#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">data</span>.forEach((item, index) =&gt; &#123;</span><br><span class="line">            item.idArr = idArr.concat(item.id)</span><br><span class="line">            <span class="keyword">if</span>(item.id === value) &#123;</span><br><span class="line">                <span class="keyword">this</span>.target = item.idArr;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(item.children)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.dfs(value, item.children, item.idArr)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    result() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> [&#123;</span><br><span class="line">            id: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;test1&#x27;</span>,</span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">&#x27;11&#x27;</span>,</span><br><span class="line">                    name: <span class="string">&#x27;test11&#x27;</span>,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            id: <span class="string">&#x27;111&#x27;</span>,</span><br><span class="line">                            name: <span class="string">&#x27;test111&#x27;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            id: <span class="string">&#x27;112&#x27;</span>,</span><br><span class="line">                            name: <span class="string">&#x27;test112&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: <span class="string">&#x27;12&#x27;</span>,</span><br><span class="line">                    name: <span class="string">&#x27;test12&#x27;</span>,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            id: <span class="string">&#x27;121&#x27;</span>,</span><br><span class="line">                            name: <span class="string">&#x27;test121&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> find = new FindFather();</span><br><span class="line">find.dfs(<span class="string">&#x27;112&#x27;</span>,find.<span class="keyword">data</span>, [])</span><br><span class="line">console.log(find.result())  <span class="comment">//[&quot;1&quot;,&quot;12&quot;,&quot;121&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="v-if、v-show、v-html-的原理是什么，它是如何封装的"><a href="#v-if、v-show、v-html-的原理是什么，它是如何封装的" class="headerlink" title="v-if、v-show、v-html 的原理是什么，它是如何封装的"></a>v-if、v-show、v-html 的原理是什么，它是如何封装的</h2><ul>
<li>v-if 会调用 addIfCondition 方法，生成 vnode 的时候会忽略对应节点，render 的时候就不会渲染；</li>
<li>v-show 会生成 vnode，render 的时候也会渲染成真实节点，只是在 render 过程中会在节点的属性中修改 show 属性值，也就是常说的 display；</li>
<li>v-html 会先移除节点下的所有节点，调用 html 方法，通过 addProp 添加 innerHTML 属性，归根结底还是设置 innerHTML 为 v-html 的值</li>
</ul>
<h2 id="input-搜索如何防抖，如何处理中文输入"><a href="#input-搜索如何防抖，如何处理中文输入" class="headerlink" title="input 搜索如何防抖，如何处理中文输入"></a>input 搜索如何防抖，如何处理中文输入</h2><p>看过 element 源码的同学们 应该知道， compositionstart &amp; compositionend 来处理中文</p>
<figure class="highlight d"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line"><span class="keyword">ref</span>=<span class="string">&quot;input&quot;</span></span><br><span class="line"><span class="keyword">@compositionstart</span>=<span class="string">&quot;handleComposition&quot;</span></span><br><span class="line"><span class="keyword">@compositionupdate</span>=<span class="string">&quot;handleComposition&quot;</span></span><br><span class="line"><span class="keyword">@compositionend</span>=<span class="string">&quot;handleComposition&quot;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>输入到 input 框触发 input 事件</li>
<li>失去焦点后内容有改变触发 change 事件</li>
<li>识别到你开始使用中文输入法触发**compositionstart 事件</li>
<li>未输入结束但还在输入中触发 compositionupdate **事件</li>
<li>输入完成（也就是我们回车或者选择了对应的文字插入到输入框的时刻）触发 compositionend 事件。</li>
</ul>
<h2 id="vue-是如何对数组方法进行变异的？例如-push、pop、splice-等方法"><a href="#vue-是如何对数组方法进行变异的？例如-push、pop、splice-等方法" class="headerlink" title="vue 是如何对数组方法进行变异的？例如 push、pop、splice 等方法"></a>vue 是如何对数组方法进行变异的？例如 push、pop、splice 等方法</h2><ol>
<li>为什么要对数组进行单独处理</li>
</ol>
<p>在 Vue 现有阶段中，对响应式处理利用的是 Object.defineProperty 对数据进行拦截，而这个方法并不能监听到数组内部变化，数组长度变化，数组的截取变化等，所以我们需要对这些操作进行 hack，让 vue 能监听到其中的变化。</p>
<ol start="2">
<li>怎么对数组进行处理</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methodsToPatch.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// cache original method</span></span><br><span class="line">    <span class="comment">// 获取原方法</span></span><br><span class="line">    <span class="keyword">var</span> original = arrayProto[method];</span><br><span class="line">    <span class="comment">// def方法重新定义arrayMethods的method方法，然后将新的取值方法赋值</span></span><br><span class="line">    def(arrayMethods, method, <span class="function"><span class="keyword">function</span> <span class="title">mutator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> args = [],</span><br><span class="line">        len = <span class="built_in">arguments</span>.length;</span><br><span class="line">      <span class="keyword">while</span> (len--) args[len] = <span class="built_in">arguments</span>[len];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> result = original.apply(<span class="built_in">this</span>, args);</span><br><span class="line">      <span class="keyword">var</span> ob = <span class="built_in">this</span>.__ob__;</span><br><span class="line">      <span class="keyword">var</span> inserted;</span><br><span class="line">      <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;unshift&#x27;</span>:</span><br><span class="line">          <span class="comment">// [].push(1),[].unshift(1)</span></span><br><span class="line">          <span class="comment">// arg = [1]</span></span><br><span class="line">          inserted = args;</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;splice&#x27;</span>:</span><br><span class="line">          <span class="comment">// [1,2,3].splice(0,1,1)</span></span><br><span class="line">          <span class="comment">// 第三个参数为插入的值</span></span><br><span class="line">          inserted = args.slice(<span class="number">2</span>);</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (inserted) &#123; ob.observeArray(inserted); &#125;</span><br><span class="line">      <span class="comment">// 监听变化，如果不是插入操作直接循环响应</span></span><br><span class="line">      <span class="comment">// 如果是去除数组参数方法，触发一次notify将会重新计算</span></span><br><span class="line">      <span class="comment">// 如果仅仅是数字数据，任何操作只需要再次执行一次notify则可以</span></span><br><span class="line">      <span class="comment">// 但是如果新增的是一个对象类型，就需要重新监听</span></span><br><span class="line">      <span class="comment">// 为什么用角标和length属性不能监听的原因是因为无法触发obj的get方法，所以没法动态监听</span></span><br><span class="line">      <span class="comment">// notify change</span></span><br><span class="line">      ob.dep.notify();</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>正如该题所问，vue 对 push,pop,splice 等方法进行了 hack，hack 方式很简单，如果加入新对象，对新对象进行响应式化，至于如何响应式化请参考 vue 源码。<br>举例来说对于 push 和 unshift 会推入一个新的对象到数组里(不管从前还是从后),记录这个加入的对象，并调用 Observe 方法将加入的对象转换成响应式对象,对于 splice 方法，如果加入了新对象也是将该对象响应式化。<br>最后一步是向外抛出数组变化，提醒观察者进行更新。</p>
<ol start="3">
<li>存在问题<br>对于 Object.defineProperty 的缺陷导致如果直接改变数组下标是无法 hack 的，由于此点，vue 提供了$set 方法</li>
</ol>
<h2 id="vue-如何优化首页的加载速度？vue-首页白屏是什么问题引起的？如何解决呢？"><a href="#vue-如何优化首页的加载速度？vue-首页白屏是什么问题引起的？如何解决呢？" class="headerlink" title="vue 如何优化首页的加载速度？vue 首页白屏是什么问题引起的？如何解决呢？"></a>vue 如何优化首页的加载速度？vue 首页白屏是什么问题引起的？如何解决呢？</h2><h3 id="首先分析原因"><a href="#首先分析原因" class="headerlink" title="首先分析原因"></a>首先分析原因</h3><p>VUE 首页加载过慢，其原因是因为它是一个单页应用，需要将所有需要的资源都下载到浏览器端并解析。</p>
<h3 id="考虑解决办法"><a href="#考虑解决办法" class="headerlink" title="考虑解决办法"></a>考虑解决办法</h3><ol>
<li>使用首屏 SSR + 跳转 SPA 方式来优化</li>
<li>改单页应用为多页应用，需要修改 webpack 的 entry</li>
<li>改成多页以后使用应该使用 prefetch 的就使用</li>
<li>处理加载的时间片，合理安排加载顺序，尽量不要有大面积空隙</li>
<li>CDN 资源还是很重要的，最好分开，也能减少一些不必要的资源损耗</li>
<li>使用 Quicklink，在网速好的时候 可以帮助你预加载页面资源</li>
<li>骨架屏这种的用户体验的东西一定要上，最好借助 stream 先将这部分输出给浏览器解析</li>
<li>合理使用 web worker 优化一些计算</li>
<li>缓存一定要使用，但是请注意合理使用</li>
<li>大概就这么多，最后可以借助一些工具进行性能评测，重点调优，例如使用 performance 自己实现下等<br>个人意见，如有错误，烦请指正，谢谢！</li>
</ol>
<h2 id="TypeScript-中的-never-类型具体有什么用"><a href="#TypeScript-中的-never-类型具体有什么用" class="headerlink" title="TypeScript 中的 never 类型具体有什么用"></a>TypeScript 中的 never 类型具体有什么用</h2><p>举个具体点的例子，当你有一个 union type:</p>
<figure class="highlight puppet"><table><tr><td class="code"><pre><span class="line">interface <span class="keyword">Foo</span> &#123;</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="keyword">Bar</span> &#123;</span><br><span class="line">  <span class="built_in">type</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">All</span> = Foo | Bar</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 switch 当中判断 type，TS 是可以收窄类型的 (discriminated union)：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleValue</span><span class="params">(val: All)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (val.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;foo&#x27;</span>:</span><br><span class="line">      <span class="comment">// 这里 val 被收窄为 Foo</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;bar&#x27;</span>:</span><br><span class="line">      <span class="comment">// val 在这里是 Bar</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="comment">// val 在这里是 never</span></span><br><span class="line">      <span class="keyword">const</span> exhaustiveCheck: never = val</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意在 default 里面我们把被收窄为 never 的 val 赋值给一个显式声明为 never 的变量。如果一切逻辑正确，那么这里应该能够编译通过。但是假如后来有一天你的同事改了 All 的类型：type All = Foo | Bar | Baz</p>
<p>然而他忘记了在 handleValue 里面加上针对 Baz 的处理逻辑，这个时候在 default branch 里面 val 会被收窄为 Baz，导致无法赋值给 never，产生一个编译错误。所以通过这个办法，你可以确保 handleValue 总是穷尽 (exhaust) 了所有 All 的可能类型。</p>
<h2 id="Vue-中的-computed-和-watch-的区别在哪里"><a href="#Vue-中的-computed-和-watch-的区别在哪里" class="headerlink" title="Vue 中的 computed 和 watch 的区别在哪里"></a>Vue 中的 computed 和 watch 的区别在哪里</h2><h3 id="computed：计算属性"><a href="#computed：计算属性" class="headerlink" title="computed：计算属性"></a>computed：计算属性</h3><ul>
<li><p>计算属性是由 data 中的已知值，得到的一个新值。</p>
</li>
<li><p>这个新值只会根据已知值的变化而变化，其他不相关的数据的变化不会影响该新值。</p>
</li>
<li><p>计算属性不在 data 中，计算属性新值的相关已知值在 data 中。</p>
</li>
<li><p>别人变化影响我自己。</p>
</li>
</ul>
<h3 id="watch：监听数据的变化"><a href="#watch：监听数据的变化" class="headerlink" title="watch：监听数据的变化"></a>watch：监听数据的变化</h3><ul>
<li><p>监听 data 中数据的变化</p>
</li>
<li><p>监听的数据就是 data 中的已知值</p>
</li>
</ul>
<p>我的变化影响别人</p>
<ol>
<li><p>watch 擅长处理的场景：一个数据影响多个数据</p>
</li>
<li><p>computed 擅长处理的场景：一个数据受多个数据影响</p>
</li>
</ol>
<h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><h3 id="类数组-arguments-怎么用数组得方法-push-pop-shift-unshift-等"><a href="#类数组-arguments-怎么用数组得方法-push-pop-shift-unshift-等" class="headerlink" title="类数组 arguments 怎么用数组得方法 push pop shift unshift 等"></a>类数组 arguments 怎么用数组得方法 push pop shift unshift 等</h3><ul>
<li>直接将类数组转换成真正得数组即可，可借助 slice，call</li>
<li>因为 slice 用于数组切片，参数为，开始下标和长度，如果不传开始为 0，结束为数组长度。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">  <span class="keyword">const</span> newArr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check(<span class="string">&#x27;zhangsna&#x27;</span>, <span class="string">&#x27;22&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="手写-map"><a href="#手写-map" class="headerlink" title="手写 map"></a>手写 map</h3><ul>
<li>先想一下 map 使用流程，传入一个可迭代对象，一个回调函数，返回一个数组</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    result.push(fn(item))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newVal = map([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">v</span>) =&gt;</span> v * <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="手写-every"><a href="#手写-every" class="headerlink" title="手写 every"></a>手写 every</h3><ul>
<li>先想一下 every 使用流程,传入一个可迭代对象，一个函数，返回 true,boolean</li>
<li>所有为 true 则返回 true</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">every</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!fn(item)) &#123;</span><br><span class="line">      result = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = every([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>], <span class="function">(<span class="params">v</span>) =&gt;</span> v &gt;= <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="手写-some"><a href="#手写-some" class="headerlink" title="手写 some"></a>手写 some</h3><ul>
<li>先想一下 some 用法，传入两个参数，（可迭代对象，回调函数），返回 boolean</li>
<li>只要有一个 true ,则为 true</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">some</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">      <span class="keyword">if</span> (fn(item)) &#123;</span><br><span class="line">        result = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = some(arr, <span class="function">(<span class="params">v</span>) =&gt;</span> v &gt;= <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h2 id="执行一次-once"><a href="#执行一次-once" class="headerlink" title="执行一次 once"></a>执行一次 once</h2><blockquote>
<p>思路：利用闭包机制，用一个变量来处理是否运行过</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> done = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">        done = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> fn.call(<span class="built_in">this</span>, args)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pay = once(<span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;args&#x27;</span>, args)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  pay(<span class="number">50</span>, <span class="number">100</span>)</span><br><span class="line">  pay(<span class="number">100</span>, <span class="number">220</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h2 id="模拟-lodash-中的-flowRight"><a href="#模拟-lodash-中的-flowRight" class="headerlink" title="模拟 lodash 中的 flowRight"></a>模拟 lodash 中的 flowRight</h2><ul>
<li>函数式编程相关</li>
</ul>
<p>从右往左依次执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reverse = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.reverse()</span><br><span class="line">  <span class="keyword">const</span> first = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> toUpper = <span class="function">(<span class="params">s</span>) =&gt;</span> s.toUpperCase()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//写法:1</span></span><br><span class="line">  <span class="comment">// function compose (...args) &#123;</span></span><br><span class="line">  <span class="comment">//   return function (val) &#123;</span></span><br><span class="line">  <span class="comment">//     return args.reverse().reduce((cur, fn) =&gt; fn(cur), val);</span></span><br><span class="line">  <span class="comment">//   &#125;;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">//写法:2</span></span><br><span class="line">  <span class="keyword">const</span> compose =</span><br><span class="line">    <span class="function">(<span class="params">...args</span>) =&gt;</span></span><br><span class="line">    <span class="function">(<span class="params">val</span>) =&gt;</span></span><br><span class="line">      args.reverse().reduce(<span class="function">(<span class="params">curr, fn</span>) =&gt;</span> fn(curr), val)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> f = compose(toUpper, first, reverse)</span><br><span class="line">  <span class="keyword">const</span> s = f([<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;java&#x27;</span>])</span><br><span class="line">  <span class="built_in">console</span>.log(s)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
